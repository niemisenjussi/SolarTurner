   1               		.file	"serialparser.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 127               	.global	read_until_line_end
 129               	read_until_line_end:
   1:serialparser.c **** #include "serialparser.h"
   2:serialparser.c **** #include "ADC.h"
   3:serialparser.c **** #include "USART.h"
   4:serialparser.c **** #include "motorctrl.h"
   5:serialparser.c **** #include "buttons.h"
   6:serialparser.c **** #include <avr/io.h>
   7:serialparser.c **** #include <stdio.h>
   8:serialparser.c **** #include <stdlib.h>
   9:serialparser.c **** #include <util/delay.h>
  10:serialparser.c **** #include <string.h>
  11:serialparser.c **** #include <avr/interrupt.h>
  12:serialparser.c **** 
  13:serialparser.c **** #define SW_VERSION 1
  14:serialparser.c **** #define BUFSIZE 0xFF
  15:serialparser.c **** 
  16:serialparser.c **** #define FIND_SUCCESS 1
  17:serialparser.c **** #define ERROR_CANNOT_FIND 2
  18:serialparser.c **** #define ERROR_MAX_LENGTH 3
  19:serialparser.c **** 
  20:serialparser.c **** volatile uint8_t ring_write = 0;
  21:serialparser.c **** volatile uint8_t ring_read = 0;
  22:serialparser.c **** volatile char buffer[BUFSIZE+1];
  23:serialparser.c **** 
  24:serialparser.c **** FILE *port; //Serialport to host machine
  25:serialparser.c **** 
  26:serialparser.c **** __attribute__((always_inline)) inline static void clearBuffer(volatile char *buffer,uint8_t len){
  27:serialparser.c **** 	for(uint8_t i=0;i<len;i++){	*buffer++ = '\0';}
  28:serialparser.c **** }
  29:serialparser.c **** 
  30:serialparser.c **** ISR(USART_RX_vect) //Serial port to Host machine
  31:serialparser.c **** {
  32:serialparser.c **** 	volatile char temp = USART_Receive0();
  33:serialparser.c **** 	buffer[ring_write++] = temp;
  34:serialparser.c **** 	if (temp == '\n' || temp == '\r'){
  35:serialparser.c ****         parseCommands();
  36:serialparser.c **** 	}
  37:serialparser.c **** }
  38:serialparser.c **** 
  39:serialparser.c **** /*
  40:serialparser.c ****     Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
  41:serialparser.c **** */
  42:serialparser.c **** void read_until_line_end(void){
 131               	.LM0:
 132               	.LFBB1:
 133               	.L20:
 134               	/* prologue: function */
 135               	/* frame size = 0 */
 136               	/* stack size = 0 */
 137               	.L__stack_usage = 0
  43:serialparser.c ****     while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
 139               	.LM1:
 140 0000 E091 0000 		lds r30,ring_read
 141 0004 F0E0      		ldi r31,0
 142 0006 E050      		subi r30,lo8(-(buffer))
 143 0008 F040      		sbci r31,hi8(-(buffer))
 144 000a 8081      		ld r24,Z
 145 000c 8A30      		cpi r24,lo8(10)
 146 000e 01F0      		breq .L1
 147 0010 E091 0000 		lds r30,ring_read
 148 0014 F0E0      		ldi r31,0
 149 0016 E050      		subi r30,lo8(-(buffer))
 150 0018 F040      		sbci r31,hi8(-(buffer))
 151 001a 8081      		ld r24,Z
 152 001c 8D30      		cpi r24,lo8(13)
 153 001e 01F0      		breq .L1
 154 0020 9091 0000 		lds r25,ring_read
 155 0024 8091 0000 		lds r24,ring_write
 156 0028 9817      		cp r25,r24
 157 002a 01F0      		breq .L1
  44:serialparser.c ****         ring_read++;
 159               	.LM2:
 160 002c 8091 0000 		lds r24,ring_read
 161 0030 8F5F      		subi r24,lo8(-(1))
 162 0032 8093 0000 		sts ring_read,r24
 163 0036 00C0      		rjmp .L20
 164               	.L1:
 165 0038 0895      		ret
 167               	.Lscope1:
 170               	.global	initSerialParser
 172               	initSerialParser:
  45:serialparser.c ****     }
  46:serialparser.c **** }
  47:serialparser.c **** 
  48:serialparser.c **** /*
  49:serialparser.c ****     Initializes serialport and clears ring buffer
  50:serialparser.c ****     This function also takes angle and tilt global variable pointer where set angle values are stor
  51:serialparser.c **** */
  52:serialparser.c **** void initSerialParser(FILE *serialport){
 174               	.LM3:
 175               	.LFBB2:
 176               	/* prologue: function */
 177               	/* frame size = 0 */
 178               	/* stack size = 0 */
 179               	.L__stack_usage = 0
  53:serialparser.c ****     port = serialport;
 181               	.LM4:
 182 003a 9093 0000 		sts port+1,r25
 183 003e 8093 0000 		sts port,r24
 184 0042 E0E0      		ldi r30,lo8(buffer)
 185 0044 F0E0      		ldi r31,hi8(buffer)
 186               	.L23:
 187               	.LBB18:
 188               	.LBB19:
  27:serialparser.c **** }
 190               	.LM5:
 191 0046 1082      		st Z,__zero_reg__
 192 0048 3196      		adiw r30,1
 193 004a 80E0      		ldi r24,hi8(buffer+255)
 194 004c E030      		cpi r30,lo8(buffer+255)
 195 004e F807      		cpc r31,r24
 196 0050 01F4      		brne .L23
 197               	/* epilogue start */
 198               	.LBE19:
 199               	.LBE18:
  54:serialparser.c ****     clearBuffer(buffer, BUFSIZE);
  55:serialparser.c **** }
 201               	.LM6:
 202 0052 0895      		ret
 204               	.Lscope2:
 208               	.global	readInt16
 210               	readInt16:
  56:serialparser.c **** 
  57:serialparser.c **** /*
  58:serialparser.c ****     Reads 16 bit int from ringbuffer. 
  59:serialparser.c ****     Function must be used because serial data is stored in to ring buffer
  60:serialparser.c **** */
  61:serialparser.c **** uint16_t readInt16(uint8_t start, uint8_t stop){
 212               	.LM7:
 213               	.LFBB3:
 214 0054 A5E0      		ldi r26,lo8(5)
 215 0056 B0E0      		ldi r27,0
 216 0058 E0E0      		ldi r30,lo8(gs(1f))
 217 005a F0E0      		ldi r31,hi8(gs(1f))
 218 005c 0C94 0000 		jmp __prologue_saves__+((18 - 2) * 2)
 219               	1:
 220               	/* prologue: function */
 221               	/* frame size = 5 */
 222               	/* stack size = 7 */
 223               	.L__stack_usage = 7
 224 0060 E82F      		mov r30,r24
  62:serialparser.c ****     char buf[5] = {'\0','\0','\0','\0','\0'};
 226               	.LM8:
 227 0062 CE01      		movw r24,r28
 228 0064 0196      		adiw r24,1
 229 0066 25E0      		ldi r18,lo8(5)
 230 0068 DC01      		movw r26,r24
 231               		0:
 232 006a 1D92      		st X+,__zero_reg__
 233 006c 2A95      		dec r18
 234 006e 01F4      		brne 0b
 235               	.LBB20:
  63:serialparser.c ****     
  64:serialparser.c ****     //clearBuffer(buf,5);
  65:serialparser.c ****     for (uint8_t i=0; i<5; i++){
  66:serialparser.c ****         buf[i] = buffer[start++];
 237               	.LM9:
 238 0070 41E0      		ldi r20,lo8(1)
 239 0072 4E0F      		add r20,r30
 240 0074 2E2F      		mov r18,r30
 241 0076 30E0      		ldi r19,0
 242 0078 2050      		subi r18,lo8(-(buffer))
 243 007a 3040      		sbci r19,hi8(-(buffer))
 244 007c D901      		movw r26,r18
 245 007e 2C91      		ld r18,X
 246 0080 2983      		std Y+1,r18
  67:serialparser.c ****         if (start == stop){
 248               	.LM10:
 249 0082 4617      		cp r20,r22
 250 0084 01F0      		breq .L26
  66:serialparser.c ****         if (start == stop){
 252               	.LM11:
 253 0086 22E0      		ldi r18,lo8(2)
 254 0088 2E0F      		add r18,r30
 255 008a A42F      		mov r26,r20
 256 008c B0E0      		ldi r27,0
 257 008e A050      		subi r26,lo8(-(buffer))
 258 0090 B040      		sbci r27,hi8(-(buffer))
 259 0092 3C91      		ld r19,X
 260 0094 3A83      		std Y+2,r19
 262               	.LM12:
 263 0096 2617      		cp r18,r22
 264 0098 01F0      		breq .L26
  66:serialparser.c ****         if (start == stop){
 266               	.LM13:
 267 009a 33E0      		ldi r19,lo8(3)
 268 009c 3E0F      		add r19,r30
 269 009e A22F      		mov r26,r18
 270 00a0 B0E0      		ldi r27,0
 271 00a2 A050      		subi r26,lo8(-(buffer))
 272 00a4 B040      		sbci r27,hi8(-(buffer))
 273 00a6 2C91      		ld r18,X
 274 00a8 2B83      		std Y+3,r18
 276               	.LM14:
 277 00aa 3617      		cp r19,r22
 278 00ac 01F0      		breq .L26
  66:serialparser.c ****         if (start == stop){
 280               	.LM15:
 281 00ae EC5F      		subi r30,lo8(-(4))
 282 00b0 A32F      		mov r26,r19
 283 00b2 B0E0      		ldi r27,0
 284 00b4 A050      		subi r26,lo8(-(buffer))
 285 00b6 B040      		sbci r27,hi8(-(buffer))
 286 00b8 2C91      		ld r18,X
 287 00ba 2C83      		std Y+4,r18
 289               	.LM16:
 290 00bc E617      		cp r30,r22
 291 00be 01F0      		breq .L26
  66:serialparser.c ****         if (start == stop){
 293               	.LM17:
 294 00c0 F0E0      		ldi r31,0
 295 00c2 E050      		subi r30,lo8(-(buffer))
 296 00c4 F040      		sbci r31,hi8(-(buffer))
 297 00c6 2081      		ld r18,Z
 298 00c8 2D83      		std Y+5,r18
 299               	.L26:
 300               	.LBE20:
  68:serialparser.c ****            i = 5;
  69:serialparser.c ****         }
  70:serialparser.c ****     }
  71:serialparser.c ****     return atoi(buf);
 302               	.LM18:
 303 00ca 0E94 0000 		call atoi
 304               	/* epilogue start */
  72:serialparser.c **** }
 306               	.LM19:
 307 00ce 2596      		adiw r28,5
 308 00d0 E2E0      		ldi r30, lo8(2)
 309 00d2 0C94 0000 		jmp __epilogue_restores__ + ((18 - 2) * 2)
 314               	.Lscope3:
 318               	.global	readFloat
 320               	readFloat:
  73:serialparser.c **** 
  74:serialparser.c **** /*
  75:serialparser.c ****     Reads floating point value from ringbuffer. 
  76:serialparser.c ****     Function must be used because serial data is stored in to ring buffer
  77:serialparser.c **** */
  78:serialparser.c **** double readFloat(uint8_t start, uint8_t stop){
 322               	.LM20:
 323               	.LFBB4:
 324 00d6 AAE0      		ldi r26,lo8(10)
 325 00d8 B0E0      		ldi r27,0
 326 00da E0E0      		ldi r30,lo8(gs(1f))
 327 00dc F0E0      		ldi r31,hi8(gs(1f))
 328 00de 0C94 0000 		jmp __prologue_saves__+((18 - 4) * 2)
 329               	1:
 330               	/* prologue: function */
 331               	/* frame size = 10 */
 332               	/* stack size = 14 */
 333               	.L__stack_usage = 14
 334 00e2 E82F      		mov r30,r24
  79:serialparser.c ****     char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
 336               	.LM21:
 337 00e4 8E01      		movw r16,r28
 338 00e6 0F5F      		subi r16,-1
 339 00e8 1F4F      		sbci r17,-1
 340 00ea 8AE0      		ldi r24,lo8(10)
 341 00ec D801      		movw r26,r16
 342               		0:
 343 00ee 1D92      		st X+,__zero_reg__
 344 00f0 8A95      		dec r24
 345 00f2 01F4      		brne 0b
 346               	.LBB22:
  80:serialparser.c ****     
  81:serialparser.c ****     //clearBuffer(buf,5);
  82:serialparser.c ****     for (uint8_t i=0; i<10; i++){
  83:serialparser.c ****         buf[i] = buffer[start++];
 348               	.LM22:
 349 00f4 21E0      		ldi r18,lo8(1)
 350 00f6 2E0F      		add r18,r30
 351 00f8 8E2F      		mov r24,r30
 352 00fa 90E0      		ldi r25,0
 353 00fc 8050      		subi r24,lo8(-(buffer))
 354 00fe 9040      		sbci r25,hi8(-(buffer))
 355 0100 DC01      		movw r26,r24
 356 0102 8C91      		ld r24,X
 357 0104 8983      		std Y+1,r24
  84:serialparser.c ****         if (start == stop){
 359               	.LM23:
 360 0106 2617      		cp r18,r22
 361 0108 01F4      		brne .+2
 362 010a 00C0      		rjmp .L28
  83:serialparser.c ****         if (start == stop){
 364               	.LM24:
 365 010c 82E0      		ldi r24,lo8(2)
 366 010e 8E0F      		add r24,r30
 367 0110 A22F      		mov r26,r18
 368 0112 B0E0      		ldi r27,0
 369 0114 A050      		subi r26,lo8(-(buffer))
 370 0116 B040      		sbci r27,hi8(-(buffer))
 371 0118 9C91      		ld r25,X
 372 011a 9A83      		std Y+2,r25
 374               	.LM25:
 375 011c 8617      		cp r24,r22
 376 011e 01F4      		brne .+2
 377 0120 00C0      		rjmp .L28
  83:serialparser.c ****         if (start == stop){
 379               	.LM26:
 380 0122 93E0      		ldi r25,lo8(3)
 381 0124 9E0F      		add r25,r30
 382 0126 A82F      		mov r26,r24
 383 0128 B0E0      		ldi r27,0
 384 012a A050      		subi r26,lo8(-(buffer))
 385 012c B040      		sbci r27,hi8(-(buffer))
 386 012e 8C91      		ld r24,X
 387 0130 8B83      		std Y+3,r24
 389               	.LM27:
 390 0132 9617      		cp r25,r22
 391 0134 01F4      		brne .+2
 392 0136 00C0      		rjmp .L28
  83:serialparser.c ****         if (start == stop){
 394               	.LM28:
 395 0138 84E0      		ldi r24,lo8(4)
 396 013a 8E0F      		add r24,r30
 397 013c A92F      		mov r26,r25
 398 013e B0E0      		ldi r27,0
 399 0140 A050      		subi r26,lo8(-(buffer))
 400 0142 B040      		sbci r27,hi8(-(buffer))
 401 0144 9C91      		ld r25,X
 402 0146 9C83      		std Y+4,r25
 404               	.LM29:
 405 0148 8617      		cp r24,r22
 406 014a 01F0      		breq .L28
  83:serialparser.c ****         if (start == stop){
 408               	.LM30:
 409 014c 95E0      		ldi r25,lo8(5)
 410 014e 9E0F      		add r25,r30
 411 0150 A82F      		mov r26,r24
 412 0152 B0E0      		ldi r27,0
 413 0154 A050      		subi r26,lo8(-(buffer))
 414 0156 B040      		sbci r27,hi8(-(buffer))
 415 0158 8C91      		ld r24,X
 416 015a 8D83      		std Y+5,r24
 418               	.LM31:
 419 015c 9617      		cp r25,r22
 420 015e 01F0      		breq .L28
  83:serialparser.c ****         if (start == stop){
 422               	.LM32:
 423 0160 86E0      		ldi r24,lo8(6)
 424 0162 8E0F      		add r24,r30
 425 0164 A92F      		mov r26,r25
 426 0166 B0E0      		ldi r27,0
 427 0168 A050      		subi r26,lo8(-(buffer))
 428 016a B040      		sbci r27,hi8(-(buffer))
 429 016c 9C91      		ld r25,X
 430 016e 9E83      		std Y+6,r25
 432               	.LM33:
 433 0170 8617      		cp r24,r22
 434 0172 01F0      		breq .L28
  83:serialparser.c ****         if (start == stop){
 436               	.LM34:
 437 0174 97E0      		ldi r25,lo8(7)
 438 0176 9E0F      		add r25,r30
 439 0178 A82F      		mov r26,r24
 440 017a B0E0      		ldi r27,0
 441 017c A050      		subi r26,lo8(-(buffer))
 442 017e B040      		sbci r27,hi8(-(buffer))
 443 0180 8C91      		ld r24,X
 444 0182 8F83      		std Y+7,r24
 446               	.LM35:
 447 0184 9617      		cp r25,r22
 448 0186 01F0      		breq .L28
  83:serialparser.c ****         if (start == stop){
 450               	.LM36:
 451 0188 88E0      		ldi r24,lo8(8)
 452 018a 8E0F      		add r24,r30
 453 018c A92F      		mov r26,r25
 454 018e B0E0      		ldi r27,0
 455 0190 A050      		subi r26,lo8(-(buffer))
 456 0192 B040      		sbci r27,hi8(-(buffer))
 457 0194 9C91      		ld r25,X
 458 0196 9887      		std Y+8,r25
 460               	.LM37:
 461 0198 8617      		cp r24,r22
 462 019a 01F0      		breq .L28
  83:serialparser.c ****         if (start == stop){
 464               	.LM38:
 465 019c E75F      		subi r30,lo8(-(9))
 466 019e A82F      		mov r26,r24
 467 01a0 B0E0      		ldi r27,0
 468 01a2 A050      		subi r26,lo8(-(buffer))
 469 01a4 B040      		sbci r27,hi8(-(buffer))
 470 01a6 8C91      		ld r24,X
 471 01a8 8987      		std Y+9,r24
 473               	.LM39:
 474 01aa E617      		cp r30,r22
 475 01ac 01F0      		breq .L28
  83:serialparser.c ****         if (start == stop){
 477               	.LM40:
 478 01ae F0E0      		ldi r31,0
 479 01b0 E050      		subi r30,lo8(-(buffer))
 480 01b2 F040      		sbci r31,hi8(-(buffer))
 481 01b4 8081      		ld r24,Z
 482 01b6 8A87      		std Y+10,r24
 483               	.L28:
 484               	.LBE22:
  85:serialparser.c ****            i = 10;
  86:serialparser.c ****         }
  87:serialparser.c ****     }
  88:serialparser.c ****     printf(buf);
 486               	.LM41:
 487 01b8 1F93      		push r17
 488 01ba 0F93      		push r16
 489 01bc 0E94 0000 		call printf
  89:serialparser.c ****     printf("\n");
 491               	.LM42:
 492 01c0 8AE0      		ldi r24,lo8(10)
 493 01c2 90E0      		ldi r25,0
 494 01c4 0E94 0000 		call putchar
  90:serialparser.c ****     return atof(buf);
 496               	.LM43:
 497 01c8 C801      		movw r24,r16
 498 01ca 0E94 0000 		call atof
 499 01ce 0F90      		pop __tmp_reg__
 500 01d0 0F90      		pop __tmp_reg__
 501               	/* epilogue start */
  91:serialparser.c **** }
 503               	.LM44:
 504 01d2 2A96      		adiw r28,10
 505 01d4 E4E0      		ldi r30, lo8(4)
 506 01d6 0C94 0000 		jmp __epilogue_restores__ + ((18 - 4) * 2)
 511               	.Lscope4:
 519               	.global	findParameter
 521               	findParameter:
  92:serialparser.c **** 
  93:serialparser.c **** //Start and Stop values are pointing to Global ring buffer
  94:serialparser.c **** uint8_t findParameter(char startchar, char stopchar, char secondstopchar, uint8_t maxlength, uint8_
 523               	.LM45:
 524               	.LFBB5:
 525 01da EF92      		push r14
 526 01dc FF92      		push r15
 527 01de 0F93      		push r16
 528 01e0 1F93      		push r17
 529               	/* prologue: function */
 530               	/* frame size = 0 */
 531               	/* stack size = 4 */
 532               	.L__stack_usage = 4
  95:serialparser.c ****     //Find correct start character
  96:serialparser.c ****     while(buffer[ring_read] != startchar && ring_read != ring_write){ 
 534               	.LM46:
 535 01e2 00C0      		rjmp .L30
 536               	.L43:
 538               	.LM47:
 539 01e4 3091 0000 		lds r19,ring_read
 540 01e8 9091 0000 		lds r25,ring_write
 541 01ec 3917      		cp r19,r25
 542 01ee 01F0      		breq .L32
  97:serialparser.c ****         ring_read++;
 544               	.LM48:
 545 01f0 9091 0000 		lds r25,ring_read
 546 01f4 9F5F      		subi r25,lo8(-(1))
 547 01f6 9093 0000 		sts ring_read,r25
  98:serialparser.c ****         maxlength --;
 549               	.LM49:
 550 01fa 2150      		subi r18,lo8(-(-1))
  99:serialparser.c ****         if (maxlength == 0){
 552               	.LM50:
 553 01fc 01F0      		breq .L37
 554               	.L30:
  96:serialparser.c ****         ring_read++;
 556               	.LM51:
 557 01fe E091 0000 		lds r30,ring_read
 558 0202 F0E0      		ldi r31,0
 559 0204 E050      		subi r30,lo8(-(buffer))
 560 0206 F040      		sbci r31,hi8(-(buffer))
 561 0208 9081      		ld r25,Z
 562 020a 9813      		cpse r25,r24
 563 020c 00C0      		rjmp .L43
 564               	.L32:
 100:serialparser.c ****             return ERROR_MAX_LENGTH;
 101:serialparser.c ****         }
 102:serialparser.c ****     }
 103:serialparser.c ****     if (ring_read == ring_write){
 566               	.LM52:
 567 020e 9091 0000 		lds r25,ring_read
 568 0212 8091 0000 		lds r24,ring_write
 569 0216 9817      		cp r25,r24
 570 0218 01F0      		breq .L38
 571               	.LBB25:
 572               	.LBB26:
 104:serialparser.c ****         return ERROR_CANNOT_FIND;
 105:serialparser.c ****     }
 106:serialparser.c **** 
 107:serialparser.c ****     ring_read++; ///Next character is what we are looking for
 574               	.LM53:
 575 021a 8091 0000 		lds r24,ring_read
 576 021e 8F5F      		subi r24,lo8(-(1))
 577 0220 8093 0000 		sts ring_read,r24
 108:serialparser.c **** 
 109:serialparser.c ****     //Find stop character
 110:serialparser.c ****     *start = ring_read;
 579               	.LM54:
 580 0224 8091 0000 		lds r24,ring_read
 581 0228 F801      		movw r30,r16
 582 022a 8083      		st Z,r24
 583 022c 00C0      		rjmp .L41
 584               	.L42:
 111:serialparser.c ****     while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimi
 586               	.LM55:
 587 022e E091 0000 		lds r30,ring_read
 588 0232 F0E0      		ldi r31,0
 589 0234 E050      		subi r30,lo8(-(buffer))
 590 0236 F040      		sbci r31,hi8(-(buffer))
 591 0238 8081      		ld r24,Z
 592 023a 4817      		cp r20,r24
 593 023c 01F0      		breq .L35
 112:serialparser.c ****         ring_read++; //Step forward
 595               	.LM56:
 596 023e 8091 0000 		lds r24,ring_read
 597 0242 8F5F      		subi r24,lo8(-(1))
 598 0244 8093 0000 		sts ring_read,r24
 599               	.L41:
 111:serialparser.c ****     while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimi
 601               	.LM57:
 602 0248 E091 0000 		lds r30,ring_read
 603 024c F0E0      		ldi r31,0
 604 024e E050      		subi r30,lo8(-(buffer))
 605 0250 F040      		sbci r31,hi8(-(buffer))
 606 0252 8081      		ld r24,Z
 607 0254 6813      		cpse r22,r24
 608 0256 00C0      		rjmp .L42
 609               	.L35:
 113:serialparser.c ****     }
 114:serialparser.c ****     *stop = ring_read;
 611               	.LM58:
 612 0258 8091 0000 		lds r24,ring_read
 613 025c F701      		movw r30,r14
 614 025e 8083      		st Z,r24
 615 0260 81E0      		ldi r24,lo8(1)
 616               	/* epilogue start */
 617               	.LBE26:
 618               	.LBE25:
 115:serialparser.c ****     
 116:serialparser.c ****     return FIND_SUCCESS;
 117:serialparser.c **** }
 620               	.LM59:
 621 0262 1F91      		pop r17
 622 0264 0F91      		pop r16
 623 0266 FF90      		pop r15
 624 0268 EF90      		pop r14
 625 026a 0895      		ret
 626               	.L38:
 104:serialparser.c ****     }
 628               	.LM60:
 629 026c 82E0      		ldi r24,lo8(2)
 630               	/* epilogue start */
 632               	.LM61:
 633 026e 1F91      		pop r17
 634 0270 0F91      		pop r16
 635 0272 FF90      		pop r15
 636 0274 EF90      		pop r14
 637 0276 0895      		ret
 638               	.L37:
 100:serialparser.c ****         }
 640               	.LM62:
 641 0278 83E0      		ldi r24,lo8(3)
 642               	/* epilogue start */
 644               	.LM63:
 645 027a 1F91      		pop r17
 646 027c 0F91      		pop r16
 647 027e FF90      		pop r15
 648 0280 EF90      		pop r14
 649 0282 0895      		ret
 651               	.Lscope5:
 652               		.section	.rodata.str1.1,"aMS",@progbits,1
 653               	.LC0:
 654 0000 4F4B 0A00 		.string	"OK\n"
 655               	.LC1:
 656 0004 4552 520A 		.string	"ERR\n"
 656      00
 657               	.LC2:
 658 0009 4D41 4E55 		.string	"MANUAL_MODE\n"
 658      414C 5F4D 
 658      4F44 450A 
 658      00
 659               	.LC3:
 660 0016 4731 3A25 		.string	"G1:%d\n"
 660      640A 00
 661               	.LC4:
 662 001d 4732 3A25 		.string	"G2:%5.2f:%5.2f\n"
 662      352E 3266 
 662      3A25 352E 
 662      3266 0A00 
 663               	.LC5:
 664 002d 4733 3A25 		.string	"G3:%5.2f:%5.2f\n"
 664      352E 3266 
 664      3A25 352E 
 664      3266 0A00 
 665               	.LC6:
 666 003d 4734 3A25 		.string	"G4:%d:%d\n"
 666      643A 2564 
 666      0A00 
 667               	.LC7:
 668 0047 4735 3A25 		.string	"G5:%d:%d\n"
 668      643A 2564 
 668      0A00 
 669               	.LC8:
 670 0051 4125 643A 		.string	"A%d:%d\n"
 670      2564 0A00 
 671               	.LC9:
 672 0059 2564 3A25 		.string	"%d:%d:"
 672      643A 00
 673               	.LC10:
 674 0060 533A 2564 		.string	"S:%d:%d\n"
 674      3A25 640A 
 674      00
 675               		.text
 677               	.global	parseCommands
 679               	parseCommands:
 118:serialparser.c **** 
 119:serialparser.c **** void parseCommands(void){
 681               	.LM64:
 682               	.LFBB6:
 683 0284 ACE0      		ldi r26,lo8(12)
 684 0286 B0E0      		ldi r27,0
 685 0288 E0E0      		ldi r30,lo8(gs(1f))
 686 028a F0E0      		ldi r31,hi8(gs(1f))
 687 028c 0C94 0000 		jmp __prologue_saves__+((18 - 18) * 2)
 688               	1:
 689               	/* prologue: function */
 690               	/* frame size = 12 */
 691               	/* stack size = 30 */
 692               	.L__stack_usage = 30
 693               	.LBB59:
 120:serialparser.c ****     while (ring_read != ring_write){
 121:serialparser.c ****         uint8_t command = buffer[ring_read++];
 122:serialparser.c ****         if (command == 'P'){ //PUT new values command: P1:20:40    last  angle:tilt
 123:serialparser.c ****             uint8_t start = 0;
 124:serialparser.c ****             uint8_t stop = 0;
 125:serialparser.c ****                 
 126:serialparser.c ****             if (buffer[ring_read] == '1'){
 127:serialparser.c ****                 if (readAutoManualState() == AUTO){    
 128:serialparser.c ****                     uint8_t succ = findParameter(':', ':', '\n', 20, &start, &stop);
 129:serialparser.c ****                     if (succ == FIND_SUCCESS){
 130:serialparser.c ****                         uint8_t asuccess = setAngle(readFloat(start, stop));
 131:serialparser.c ****                         succ = findParameter(':', ':', '\n', 20, &start, &stop);
 132:serialparser.c ****                         if (succ == FIND_SUCCESS){
 133:serialparser.c ****                             uint8_t tsuccess = setTilt(readFloat(start, stop));
 134:serialparser.c ****                             if (asuccess == 0 && tsuccess == 0){
 135:serialparser.c ****                                 fprintf(port,"OK\n");
 136:serialparser.c ****                             }
 137:serialparser.c ****                             else{
 138:serialparser.c ****                                 fprintf(port, "ERR\n");
 139:serialparser.c ****                             }
 140:serialparser.c ****                         }
 141:serialparser.c ****                         else{
 142:serialparser.c ****                             fprintf(port, "ERR\n");
 143:serialparser.c ****                         }
 144:serialparser.c ****                     }
 145:serialparser.c ****                     else{
 146:serialparser.c ****                         fprintf(port,"ERR\n");
 147:serialparser.c ****                     }
 148:serialparser.c ****                 }
 149:serialparser.c ****                 else{
 150:serialparser.c ****                     fprintf(port, "MANUAL_MODE\n");
 151:serialparser.c ****                 }
 152:serialparser.c ****             }
 153:serialparser.c ****             else{
 154:serialparser.c ****                 fprintf(port,"ERR\n");
 155:serialparser.c ****             }
 156:serialparser.c ****             read_until_line_end();
 157:serialparser.c ****         }
 158:serialparser.c ****         else if (command == 'G'){ //Get values
 159:serialparser.c ****             uint8_t value = buffer[ring_read++]; 
 160:serialparser.c ****             if (value == '1'){ //Rread generic info
 161:serialparser.c ****                 fprintf(port,"G1:%d\n", SW_VERSION);
 162:serialparser.c ****             }
 163:serialparser.c ****             else if (value == '2'){ //Read current angle and tilt set_values
 164:serialparser.c ****                 fprintf(port,"G2:%5.2f:%5.2f\n", getSetAngle(), getSetTilt());
 165:serialparser.c ****             }
 166:serialparser.c ****             else if (value == '3'){ //Reads current values from motorctrl -module, actual values
 167:serialparser.c ****                 fprintf(port,"G3:%5.2f:%5.2f\n", getAngle(), getTilt());
 168:serialparser.c ****             }
 169:serialparser.c ****             else if (value == '4'){ //get motor statuses
 170:serialparser.c ****                 fprintf(port, "G4:%d:%d\n", getAngleMotorStatus(), getTiltMotorStatus());
 171:serialparser.c ****             }
 172:serialparser.c ****             else if (value == '5'){
 173:serialparser.c ****                 fprintf(port, "G5:%d:%d\n", getAngleActuatorCurrentLength(), getTiltActuatorCurrent
 174:serialparser.c ****             }
 175:serialparser.c ****             else{
 176:serialparser.c ****                 fprintf(port,"ERR\n");
 177:serialparser.c ****             }
 178:serialparser.c ****             read_until_line_end();
 179:serialparser.c ****         }
 180:serialparser.c ****         else if (command == 'A'){ //ADC read voltage, commands A0\n  A1\n ,A2\n ,A3\n ,A4\n and so 
 181:serialparser.c ****             //ring_read++;
 182:serialparser.c ****             char buff[2];
 183:serialparser.c ****             clearBuffer(buff, 2);
 184:serialparser.c ****             buff[0] = buffer[ring_read];
 185:serialparser.c ****             uint8_t channel = atoi(buff);
 186:serialparser.c ****             if (channel < 8){
 187:serialparser.c ****                 fprintf(port, "A%d:%d\n", channel, GetVoltage(channel, 0x40));
 188:serialparser.c ****             }
 189:serialparser.c ****             else if (channel == 8){
 190:serialparser.c ****                 fprintf(port,"A");
 191:serialparser.c ****                 for (uint8_t i=0; i<8; i++){
 192:serialparser.c ****                     fprintf(port, "%d:%d:", i, GetVoltage(i, 0x40));
 193:serialparser.c ****                 }
 194:serialparser.c ****                 fprintf(port,"\n");
 195:serialparser.c ****             }
 196:serialparser.c ****             else{
 197:serialparser.c ****                 fprintf(port, "ERR\n");
 198:serialparser.c ****             }
 199:serialparser.c ****             read_until_line_end();
 200:serialparser.c ****         }
 201:serialparser.c ****         else if (command == 'S'){ //Read both motor status
 202:serialparser.c ****             fprintf(port,"S:%d:%d\n",getAngleMotorStatus(), getTiltMotorStatus());
 695               	.LM65:
 696 0290 80E0      		ldi r24,lo8(.LC10)
 697 0292 C82E      		mov r12,r24
 698 0294 80E0      		ldi r24,hi8(.LC10)
 699 0296 D82E      		mov r13,r24
 700               	.LBB60:
 185:serialparser.c ****             if (channel < 8){
 702               	.LM66:
 703 0298 9E01      		movw r18,r28
 704 029a 2F5F      		subi r18,-1
 705 029c 3F4F      		sbci r19,-1
 706 029e 7901      		movw r14,r18
 707               	.LBB61:
 192:serialparser.c ****                 }
 709               	.LM67:
 710 02a0 00E0      		ldi r16,lo8(.LC9)
 711 02a2 10E0      		ldi r17,hi8(.LC9)
 712               	.LBE61:
 187:serialparser.c ****             }
 714               	.LM68:
 715 02a4 90E0      		ldi r25,lo8(.LC8)
 716 02a6 A92E      		mov r10,r25
 717 02a8 90E0      		ldi r25,hi8(.LC8)
 718 02aa B92E      		mov r11,r25
 719               	.LBE60:
 720               	.LBB67:
 173:serialparser.c ****             }
 722               	.LM69:
 723 02ac 20E0      		ldi r18,lo8(.LC7)
 724 02ae 822E      		mov r8,r18
 725 02b0 20E0      		ldi r18,hi8(.LC7)
 726 02b2 922E      		mov r9,r18
 164:serialparser.c ****             }
 728               	.LM70:
 729 02b4 30E0      		ldi r19,lo8(.LC4)
 730 02b6 432E      		mov r4,r19
 731 02b8 30E0      		ldi r19,hi8(.LC4)
 732 02ba 532E      		mov r5,r19
 161:serialparser.c ****             }
 734               	.LM71:
 735 02bc 40E0      		ldi r20,lo8(.LC3)
 736 02be 642E      		mov r6,r20
 737 02c0 40E0      		ldi r20,hi8(.LC3)
 738 02c2 742E      		mov r7,r20
 739               	.L45:
 740               	.LBE67:
 741               	.LBE59:
 120:serialparser.c ****         uint8_t command = buffer[ring_read++];
 743               	.LM72:
 744 02c4 9091 0000 		lds r25,ring_read
 745 02c8 8091 0000 		lds r24,ring_write
 746 02cc 9817      		cp r25,r24
 747 02ce 01F4      		brne .+2
 748 02d0 00C0      		rjmp .L202
 749               	.L90:
 750               	.LBB103:
 121:serialparser.c ****         if (command == 'P'){ //PUT new values command: P1:20:40    last  angle:tilt
 752               	.LM73:
 753 02d2 E091 0000 		lds r30,ring_read
 754 02d6 81E0      		ldi r24,lo8(1)
 755 02d8 8E0F      		add r24,r30
 756 02da 8093 0000 		sts ring_read,r24
 757 02de F0E0      		ldi r31,0
 758 02e0 E050      		subi r30,lo8(-(buffer))
 759 02e2 F040      		sbci r31,hi8(-(buffer))
 760 02e4 8081      		ld r24,Z
 122:serialparser.c ****             uint8_t start = 0;
 762               	.LM74:
 763 02e6 8035      		cpi r24,lo8(80)
 764 02e8 01F4      		brne .+2
 765 02ea 00C0      		rjmp .L203
 158:serialparser.c ****             uint8_t value = buffer[ring_read++]; 
 767               	.LM75:
 768 02ec 8734      		cpi r24,lo8(71)
 769 02ee 01F4      		brne .+2
 770 02f0 00C0      		rjmp .L204
 180:serialparser.c ****             //ring_read++;
 772               	.LM76:
 773 02f2 8134      		cpi r24,lo8(65)
 774 02f4 01F4      		brne .+2
 775 02f6 00C0      		rjmp .L205
 201:serialparser.c ****             fprintf(port,"S:%d:%d\n",getAngleMotorStatus(), getTiltMotorStatus());
 777               	.LM77:
 778 02f8 8335      		cpi r24,lo8(83)
 779 02fa 01F4      		brne .L45
 781               	.LM78:
 782 02fc 0E94 0000 		call getTiltMotorStatus
 783 0300 8B87      		std Y+11,r24
 784 0302 0E94 0000 		call getAngleMotorStatus
 785 0306 1F92      		push __zero_reg__
 786 0308 9B85      		ldd r25,Y+11
 787 030a 9F93      		push r25
 788 030c 1F92      		push __zero_reg__
 789 030e 8F93      		push r24
 790 0310 DF92      		push r13
 791 0312 CF92      		push r12
 792 0314 8091 0000 		lds r24,port+1
 793 0318 8F93      		push r24
 794 031a 8091 0000 		lds r24,port
 795 031e 8F93      		push r24
 796 0320 0E94 0000 		call fprintf
 797               	.LBB70:
 798               	.LBB71:
  43:serialparser.c ****         ring_read++;
 800               	.LM79:
 801 0324 E091 0000 		lds r30,ring_read
 802 0328 F0E0      		ldi r31,0
 803 032a E050      		subi r30,lo8(-(buffer))
 804 032c F040      		sbci r31,hi8(-(buffer))
 805 032e 8081      		ld r24,Z
 806 0330 0FB6      		in __tmp_reg__,__SREG__
 807 0332 F894      		cli
 808 0334 DEBF      		out __SP_H__,r29
 809 0336 0FBE      		out __SREG__,__tmp_reg__
 810 0338 CDBF      		out __SP_L__,r28
 811 033a 8A30      		cpi r24,lo8(10)
 812 033c 01F4      		brne .L193
 813 033e 00C0      		rjmp .L45
 814               	.L206:
 815 0340 9091 0000 		lds r25,ring_read
 816 0344 8091 0000 		lds r24,ring_write
 817 0348 9817      		cp r25,r24
 818 034a 01F4      		brne .+2
 819 034c 00C0      		rjmp .L45
  44:serialparser.c ****     }
 821               	.LM80:
 822 034e 8091 0000 		lds r24,ring_read
 823 0352 8F5F      		subi r24,lo8(-(1))
 824 0354 8093 0000 		sts ring_read,r24
  43:serialparser.c ****         ring_read++;
 826               	.LM81:
 827 0358 E091 0000 		lds r30,ring_read
 828 035c F0E0      		ldi r31,0
 829 035e E050      		subi r30,lo8(-(buffer))
 830 0360 F040      		sbci r31,hi8(-(buffer))
 831 0362 8081      		ld r24,Z
 832 0364 8A30      		cpi r24,lo8(10)
 833 0366 01F4      		brne .+2
 834 0368 00C0      		rjmp .L45
 835               	.L193:
 836 036a E091 0000 		lds r30,ring_read
 837 036e F0E0      		ldi r31,0
 838 0370 E050      		subi r30,lo8(-(buffer))
 839 0372 F040      		sbci r31,hi8(-(buffer))
 840 0374 8081      		ld r24,Z
 841 0376 8D30      		cpi r24,lo8(13)
 842 0378 01F4      		brne .L206
 843               	.LBE71:
 844               	.LBE70:
 845               	.LBE103:
 120:serialparser.c ****         uint8_t command = buffer[ring_read++];
 847               	.LM82:
 848 037a 9091 0000 		lds r25,ring_read
 849 037e 8091 0000 		lds r24,ring_write
 850 0382 9813      		cpse r25,r24
 851 0384 00C0      		rjmp .L90
 852               	.L202:
 853               	/* epilogue start */
 203:serialparser.c ****             read_until_line_end();    
 204:serialparser.c ****         }
 205:serialparser.c ****     }
 206:serialparser.c **** }
 855               	.LM83:
 856 0386 2C96      		adiw r28,12
 857 0388 E2E1      		ldi r30, lo8(18)
 858 038a 0C94 0000 		jmp __epilogue_restores__ + ((18 - 18) * 2)
 859               	.L203:
 860               	.LBB104:
 861               	.LBB72:
 126:serialparser.c ****                 if (readAutoManualState() == AUTO){    
 863               	.LM84:
 864 038e E091 0000 		lds r30,ring_read
 865 0392 F0E0      		ldi r31,0
 866 0394 E050      		subi r30,lo8(-(buffer))
 867 0396 F040      		sbci r31,hi8(-(buffer))
 868 0398 8081      		ld r24,Z
 869 039a 8133      		cpi r24,lo8(49)
 870 039c 01F4      		brne .+2
 871 039e 00C0      		rjmp .L207
 872               	.L59:
 873               	.LBB73:
 874               	.LBB74:
 142:serialparser.c ****                         }
 876               	.LM85:
 877 03a0 2091 0000 		lds r18,port
 878 03a4 3091 0000 		lds r19,port+1
 879               	.L194:
 880 03a8 44E0      		ldi r20,lo8(4)
 881 03aa 50E0      		ldi r21,0
 882 03ac 61E0      		ldi r22,lo8(1)
 883 03ae 70E0      		ldi r23,0
 884 03b0 80E0      		ldi r24,lo8(.LC1)
 885 03b2 90E0      		ldi r25,hi8(.LC1)
 886 03b4 0E94 0000 		call fwrite
 887 03b8 00C0      		rjmp .L187
 888               	.L208:
 889               	.LBE74:
 890               	.LBE73:
 891               	.LBB91:
 892               	.LBB92:
  43:serialparser.c ****         ring_read++;
 894               	.LM86:
 895 03ba E091 0000 		lds r30,ring_read
 896 03be F0E0      		ldi r31,0
 897 03c0 E050      		subi r30,lo8(-(buffer))
 898 03c2 F040      		sbci r31,hi8(-(buffer))
 899 03c4 8081      		ld r24,Z
 900 03c6 8D30      		cpi r24,lo8(13)
 901 03c8 01F4      		brne .+2
 902 03ca 00C0      		rjmp .L45
 903 03cc 9091 0000 		lds r25,ring_read
 904 03d0 8091 0000 		lds r24,ring_write
 905 03d4 9817      		cp r25,r24
 906 03d6 01F4      		brne .+2
 907 03d8 00C0      		rjmp .L45
  44:serialparser.c ****     }
 909               	.LM87:
 910 03da 8091 0000 		lds r24,ring_read
 911 03de 8F5F      		subi r24,lo8(-(1))
 912 03e0 8093 0000 		sts ring_read,r24
 913               	.L187:
  43:serialparser.c ****         ring_read++;
 915               	.LM88:
 916 03e4 E091 0000 		lds r30,ring_read
 917 03e8 F0E0      		ldi r31,0
 918 03ea E050      		subi r30,lo8(-(buffer))
 919 03ec F040      		sbci r31,hi8(-(buffer))
 920 03ee 8081      		ld r24,Z
 921 03f0 8A30      		cpi r24,lo8(10)
 922 03f2 01F4      		brne .L208
 923 03f4 00C0      		rjmp .L45
 924               	.L204:
 925               	.LBE92:
 926               	.LBE91:
 927               	.LBE72:
 928               	.LBB94:
 159:serialparser.c ****             if (value == '1'){ //Rread generic info
 930               	.LM89:
 931 03f6 E091 0000 		lds r30,ring_read
 932 03fa 81E0      		ldi r24,lo8(1)
 933 03fc 8E0F      		add r24,r30
 934 03fe 8093 0000 		sts ring_read,r24
 935 0402 F0E0      		ldi r31,0
 936 0404 E050      		subi r30,lo8(-(buffer))
 937 0406 F040      		sbci r31,hi8(-(buffer))
 938 0408 8081      		ld r24,Z
 160:serialparser.c ****                 fprintf(port,"G1:%d\n", SW_VERSION);
 940               	.LM90:
 941 040a 8133      		cpi r24,lo8(49)
 942 040c 01F4      		brne .+2
 943 040e 00C0      		rjmp .L209
 163:serialparser.c ****                 fprintf(port,"G2:%5.2f:%5.2f\n", getSetAngle(), getSetTilt());
 945               	.LM91:
 946 0410 8233      		cpi r24,lo8(50)
 947 0412 01F4      		brne .+2
 948 0414 00C0      		rjmp .L210
 166:serialparser.c ****                 fprintf(port,"G3:%5.2f:%5.2f\n", getAngle(), getTilt());
 950               	.LM92:
 951 0416 8333      		cpi r24,lo8(51)
 952 0418 01F4      		brne .+2
 953 041a 00C0      		rjmp .L211
 169:serialparser.c ****                 fprintf(port, "G4:%d:%d\n", getAngleMotorStatus(), getTiltMotorStatus());
 955               	.LM93:
 956 041c 8433      		cpi r24,lo8(52)
 957 041e 01F4      		brne .+2
 958 0420 00C0      		rjmp .L212
 172:serialparser.c ****                 fprintf(port, "G5:%d:%d\n", getAngleActuatorCurrentLength(), getTiltActuatorCurrent
 960               	.LM94:
 961 0422 8533      		cpi r24,lo8(53)
 962 0424 01F4      		brne .+2
 963 0426 00C0      		rjmp .L213
 176:serialparser.c ****             }
 965               	.LM95:
 966 0428 2091 0000 		lds r18,port
 967 042c 3091 0000 		lds r19,port+1
 968 0430 44E0      		ldi r20,lo8(4)
 969 0432 50E0      		ldi r21,0
 970 0434 61E0      		ldi r22,lo8(1)
 971 0436 70E0      		ldi r23,0
 972 0438 80E0      		ldi r24,lo8(.LC1)
 973 043a 90E0      		ldi r25,hi8(.LC1)
 974 043c 0E94 0000 		call fwrite
 975 0440 00C0      		rjmp .L189
 976               	.L214:
 977               	.LBB68:
 978               	.LBB69:
  43:serialparser.c ****         ring_read++;
 980               	.LM96:
 981 0442 E091 0000 		lds r30,ring_read
 982 0446 F0E0      		ldi r31,0
 983 0448 E050      		subi r30,lo8(-(buffer))
 984 044a F040      		sbci r31,hi8(-(buffer))
 985 044c 8081      		ld r24,Z
 986 044e 8D30      		cpi r24,lo8(13)
 987 0450 01F4      		brne .+2
 988 0452 00C0      		rjmp .L45
 989 0454 9091 0000 		lds r25,ring_read
 990 0458 8091 0000 		lds r24,ring_write
 991 045c 9817      		cp r25,r24
 992 045e 01F4      		brne .+2
 993 0460 00C0      		rjmp .L45
  44:serialparser.c ****     }
 995               	.LM97:
 996 0462 8091 0000 		lds r24,ring_read
 997 0466 8F5F      		subi r24,lo8(-(1))
 998 0468 8093 0000 		sts ring_read,r24
 999               	.L189:
  43:serialparser.c ****         ring_read++;
 1001               	.LM98:
 1002 046c E091 0000 		lds r30,ring_read
 1003 0470 F0E0      		ldi r31,0
 1004 0472 E050      		subi r30,lo8(-(buffer))
 1005 0474 F040      		sbci r31,hi8(-(buffer))
 1006 0476 8081      		ld r24,Z
 1007 0478 8A30      		cpi r24,lo8(10)
 1008 047a 01F4      		brne .L214
 1009 047c 00C0      		rjmp .L45
 1010               	.L205:
 1011               	.LBE69:
 1012               	.LBE68:
 1013               	.LBE94:
 1014               	.LBB95:
 1015               	.LBB62:
 1016               	.LBB63:
  27:serialparser.c **** }
 1018               	.LM99:
 1019 047e 1982      		std Y+1,__zero_reg__
 1020 0480 1A82      		std Y+2,__zero_reg__
 1021               	.LBE63:
 1022               	.LBE62:
 184:serialparser.c ****             uint8_t channel = atoi(buff);
 1024               	.LM100:
 1025 0482 E091 0000 		lds r30,ring_read
 1026 0486 F0E0      		ldi r31,0
 1027 0488 E050      		subi r30,lo8(-(buffer))
 1028 048a F040      		sbci r31,hi8(-(buffer))
 1029 048c 8081      		ld r24,Z
 1030 048e 8983      		std Y+1,r24
 185:serialparser.c ****             if (channel < 8){
 1032               	.LM101:
 1033 0490 C701      		movw r24,r14
 1034 0492 0E94 0000 		call atoi
 1035 0496 1C01      		movw r2,r24
 186:serialparser.c ****                 fprintf(port, "A%d:%d\n", channel, GetVoltage(channel, 0x40));
 1037               	.LM102:
 1038 0498 8830      		cpi r24,lo8(8)
 1039 049a 00F4      		brsh .+2
 1040 049c 00C0      		rjmp .L215
 189:serialparser.c ****                 fprintf(port,"A");
 1042               	.LM103:
 1043 049e 8830      		cpi r24,lo8(8)
 1044 04a0 01F4      		brne .+2
 1045 04a2 00C0      		rjmp .L216
 197:serialparser.c ****             }
 1047               	.LM104:
 1048 04a4 2091 0000 		lds r18,port
 1049 04a8 3091 0000 		lds r19,port+1
 1050 04ac 44E0      		ldi r20,lo8(4)
 1051 04ae 50E0      		ldi r21,0
 1052 04b0 61E0      		ldi r22,lo8(1)
 1053 04b2 70E0      		ldi r23,0
 1054 04b4 80E0      		ldi r24,lo8(.LC1)
 1055 04b6 90E0      		ldi r25,hi8(.LC1)
 1056 04b8 0E94 0000 		call fwrite
 1057 04bc 00C0      		rjmp .L83
 1058               	.L217:
 1059               	.LBB64:
 1060               	.LBB65:
  43:serialparser.c ****         ring_read++;
 1062               	.LM105:
 1063 04be E091 0000 		lds r30,ring_read
 1064 04c2 F0E0      		ldi r31,0
 1065 04c4 E050      		subi r30,lo8(-(buffer))
 1066 04c6 F040      		sbci r31,hi8(-(buffer))
 1067 04c8 8081      		ld r24,Z
 1068 04ca 8D30      		cpi r24,lo8(13)
 1069 04cc 01F4      		brne .+2
 1070 04ce 00C0      		rjmp .L45
 1071 04d0 9091 0000 		lds r25,ring_read
 1072 04d4 8091 0000 		lds r24,ring_write
 1073 04d8 9817      		cp r25,r24
 1074 04da 01F4      		brne .+2
 1075 04dc 00C0      		rjmp .L45
  44:serialparser.c ****     }
 1077               	.LM106:
 1078 04de 8091 0000 		lds r24,ring_read
 1079 04e2 8F5F      		subi r24,lo8(-(1))
 1080 04e4 8093 0000 		sts ring_read,r24
 1081               	.L83:
  43:serialparser.c ****         ring_read++;
 1083               	.LM107:
 1084 04e8 E091 0000 		lds r30,ring_read
 1085 04ec F0E0      		ldi r31,0
 1086 04ee E050      		subi r30,lo8(-(buffer))
 1087 04f0 F040      		sbci r31,hi8(-(buffer))
 1088 04f2 8081      		ld r24,Z
 1089 04f4 8A30      		cpi r24,lo8(10)
 1090 04f6 01F4      		brne .L217
 1091 04f8 00C0      		rjmp .L45
 1092               	.L207:
 1093               	.LBE65:
 1094               	.LBE64:
 1095               	.LBE95:
 1096               	.LBB96:
 127:serialparser.c ****                     uint8_t succ = findParameter(':', ':', '\n', 20, &start, &stop);
 1098               	.LM108:
 1099 04fa 0E94 0000 		call readAutoManualState
 1100 04fe 8130      		cpi r24,lo8(1)
 1101 0500 01F4      		brne .+2
 1102 0502 00C0      		rjmp .L218
 150:serialparser.c ****                 }
 1104               	.LM109:
 1105 0504 2091 0000 		lds r18,port
 1106 0508 3091 0000 		lds r19,port+1
 1107 050c 4CE0      		ldi r20,lo8(12)
 1108 050e 50E0      		ldi r21,0
 1109 0510 61E0      		ldi r22,lo8(1)
 1110 0512 70E0      		ldi r23,0
 1111 0514 80E0      		ldi r24,lo8(.LC2)
 1112 0516 90E0      		ldi r25,hi8(.LC2)
 1113 0518 0E94 0000 		call fwrite
 1114 051c 00C0      		rjmp .L187
 1115               	.L215:
 1116               	.LBE96:
 1117               	.LBB97:
 187:serialparser.c ****             }
 1119               	.LM110:
 1120 051e 60E4      		ldi r22,lo8(64)
 1121 0520 0E94 0000 		call GetVoltage
 1122 0524 9F93      		push r25
 1123 0526 8F93      		push r24
 1124 0528 9101      		movw r18,r2
 1125 052a 3327      		clr r19
 1126 052c 3F93      		push r19
 1127 052e 2F93      		push r18
 1128 0530 BF92      		push r11
 1129 0532 AF92      		push r10
 1130 0534 8091 0000 		lds r24,port+1
 1131 0538 8F93      		push r24
 1132 053a 8091 0000 		lds r24,port
 1133 053e 8F93      		push r24
 1134 0540 0E94 0000 		call fprintf
 1135 0544 0FB6      		in __tmp_reg__,__SREG__
 1136 0546 F894      		cli
 1137 0548 DEBF      		out __SP_H__,r29
 1138 054a 0FBE      		out __SREG__,__tmp_reg__
 1139 054c CDBF      		out __SP_L__,r28
 1140 054e 00C0      		rjmp .L83
 1141               	.L213:
 1142               	.LBE97:
 1143               	.LBB98:
 173:serialparser.c ****             }
 1145               	.LM111:
 1146 0550 0E94 0000 		call getTiltActuatorCurrentLength
 1147 0554 382E      		mov r3,r24
 1148 0556 292E      		mov r2,r25
 1149 0558 0E94 0000 		call getAngleActuatorCurrentLength
 1150 055c 2F92      		push r2
 1151 055e 3F92      		push r3
 1152 0560 9F93      		push r25
 1153 0562 8F93      		push r24
 1154 0564 9F92      		push r9
 1155 0566 8F92      		push r8
 1156               	.L196:
 1157 0568 8091 0000 		lds r24,port+1
 1158 056c 8F93      		push r24
 1159 056e 8091 0000 		lds r24,port
 1160 0572 8F93      		push r24
 1161 0574 0E94 0000 		call fprintf
 1162 0578 0FB6      		in __tmp_reg__,__SREG__
 1163 057a F894      		cli
 1164 057c DEBF      		out __SP_H__,r29
 1165 057e 0FBE      		out __SREG__,__tmp_reg__
 1166 0580 CDBF      		out __SP_L__,r28
 1167 0582 00C0      		rjmp .L189
 1168               	.L216:
 1169               	.LBE98:
 1170               	.LBB99:
 190:serialparser.c ****                 for (uint8_t i=0; i<8; i++){
 1172               	.LM112:
 1173 0584 6091 0000 		lds r22,port
 1174 0588 7091 0000 		lds r23,port+1
 1175 058c 81E4      		ldi r24,lo8(65)
 1176 058e 90E0      		ldi r25,0
 1177 0590 0E94 0000 		call fputc
 1178 0594 212C      		mov r2,__zero_reg__
 1179 0596 312C      		mov r3,__zero_reg__
 1180               	.L85:
 1181               	.LBB66:
 192:serialparser.c ****                 }
 1183               	.LM113:
 1184 0598 60E4      		ldi r22,lo8(64)
 1185 059a 822D      		mov r24,r2
 1186 059c 0E94 0000 		call GetVoltage
 1187 05a0 9F93      		push r25
 1188 05a2 8F93      		push r24
 1189 05a4 3F92      		push r3
 1190 05a6 2F92      		push r2
 1191 05a8 1F93      		push r17
 1192 05aa 0F93      		push r16
 1193 05ac 8091 0000 		lds r24,port+1
 1194 05b0 8F93      		push r24
 1195 05b2 8091 0000 		lds r24,port
 1196 05b6 8F93      		push r24
 1197 05b8 0E94 0000 		call fprintf
 1198 05bc BFEF      		ldi r27,-1
 1199 05be 2B1A      		sub r2,r27
 1200 05c0 3B0A      		sbc r3,r27
 191:serialparser.c ****                     fprintf(port, "%d:%d:", i, GetVoltage(i, 0x40));
 1202               	.LM114:
 1203 05c2 0FB6      		in __tmp_reg__,__SREG__
 1204 05c4 F894      		cli
 1205 05c6 DEBF      		out __SP_H__,r29
 1206 05c8 0FBE      		out __SREG__,__tmp_reg__
 1207 05ca CDBF      		out __SP_L__,r28
 1208 05cc F8E0      		ldi r31,8
 1209 05ce 2F16      		cp r2,r31
 1210 05d0 3104      		cpc r3,__zero_reg__
 1211 05d2 01F4      		brne .L85
 1212               	.LBE66:
 194:serialparser.c ****             }
 1214               	.LM115:
 1215 05d4 6091 0000 		lds r22,port
 1216 05d8 7091 0000 		lds r23,port+1
 1217 05dc 8AE0      		ldi r24,lo8(10)
 1218 05de 90E0      		ldi r25,0
 1219 05e0 0E94 0000 		call fputc
 1220 05e4 00C0      		rjmp .L83
 1221               	.L209:
 1222               	.LBE99:
 1223               	.LBB100:
 161:serialparser.c ****             }
 1225               	.LM116:
 1226 05e6 1F92      		push __zero_reg__
 1227 05e8 F1E0      		ldi r31,lo8(1)
 1228 05ea FF93      		push r31
 1229 05ec 7F92      		push r7
 1230 05ee 6F92      		push r6
 1231 05f0 8091 0000 		lds r24,port+1
 1232 05f4 8F93      		push r24
 1233 05f6 8091 0000 		lds r24,port
 1234 05fa 8F93      		push r24
 1235 05fc 0E94 0000 		call fprintf
 1236 0600 0F90      		pop __tmp_reg__
 1237 0602 0F90      		pop __tmp_reg__
 1238 0604 0F90      		pop __tmp_reg__
 1239 0606 0F90      		pop __tmp_reg__
 1240 0608 0F90      		pop __tmp_reg__
 1241 060a 0F90      		pop __tmp_reg__
 1242 060c 00C0      		rjmp .L189
 1243               	.L210:
 164:serialparser.c ****             }
 1245               	.LM117:
 1246 060e 0E94 0000 		call getSetTilt
 1247 0612 362E      		mov r3,r22
 1248 0614 272E      		mov r2,r23
 1249 0616 AC01      		movw r20,r24
 1250 0618 8B87      		std Y+11,r24
 1251 061a 5C87      		std Y+12,r21
 1252 061c 0E94 0000 		call getSetAngle
 1253 0620 5C85      		ldd r21,Y+12
 1254 0622 5F93      		push r21
 1255 0624 4B85      		ldd r20,Y+11
 1256 0626 4F93      		push r20
 1257 0628 2F92      		push r2
 1258 062a 3F92      		push r3
 1259 062c 9F93      		push r25
 1260 062e 8F93      		push r24
 1261 0630 7F93      		push r23
 1262 0632 6F93      		push r22
 1263 0634 5F92      		push r5
 1264 0636 4F92      		push r4
 1265               	.L178:
 167:serialparser.c ****             }
 1267               	.LM118:
 1268 0638 8091 0000 		lds r24,port+1
 1269 063c 8F93      		push r24
 1270 063e 8091 0000 		lds r24,port
 1271 0642 8F93      		push r24
 1272 0644 0E94 0000 		call fprintf
 1273 0648 0FB6      		in __tmp_reg__,__SREG__
 1274 064a F894      		cli
 1275 064c DEBF      		out __SP_H__,r29
 1276 064e 0FBE      		out __SREG__,__tmp_reg__
 1277 0650 CDBF      		out __SP_L__,r28
 1278 0652 00C0      		rjmp .L189
 1279               	.L218:
 1280               	.LBE100:
 1281               	.LBB101:
 1282 0654 94E1      		ldi r25,lo8(20)
 1283 0656 00C0      		rjmp .L48
 1284               	.L219:
 1285               	.LBB93:
 1286               	.LBB86:
 1287               	.LBB87:
  96:serialparser.c ****         ring_read++;
 1289               	.LM119:
 1290 0658 2091 0000 		lds r18,ring_read
 1291 065c 8091 0000 		lds r24,ring_write
 1292 0660 2817      		cp r18,r24
 1293 0662 01F0      		breq .L51
  97:serialparser.c ****         maxlength --;
 1295               	.LM120:
 1296 0664 8091 0000 		lds r24,ring_read
 1297 0668 8F5F      		subi r24,lo8(-(1))
 1298 066a 8093 0000 		sts ring_read,r24
 1299 066e 9150      		subi r25,lo8(-(-1))
  99:serialparser.c ****             return ERROR_MAX_LENGTH;
 1301               	.LM121:
 1302 0670 01F4      		brne .+2
 1303 0672 00C0      		rjmp .L59
 1304               	.L48:
  96:serialparser.c ****         ring_read++;
 1306               	.LM122:
 1307 0674 E091 0000 		lds r30,ring_read
 1308 0678 F0E0      		ldi r31,0
 1309 067a E050      		subi r30,lo8(-(buffer))
 1310 067c F040      		sbci r31,hi8(-(buffer))
 1311 067e 8081      		ld r24,Z
 1312 0680 8A33      		cpi r24,lo8(58)
 1313 0682 01F4      		brne .L219
 1314               	.L51:
 103:serialparser.c ****         return ERROR_CANNOT_FIND;
 1316               	.LM123:
 1317 0684 9091 0000 		lds r25,ring_read
 1318 0688 8091 0000 		lds r24,ring_write
 1319 068c 9817      		cp r25,r24
 1320 068e 01F4      		brne .+2
 1321 0690 00C0      		rjmp .L59
 1322               	.LBB88:
 1323               	.LBB89:
 107:serialparser.c **** 
 1325               	.LM124:
 1326 0692 8091 0000 		lds r24,ring_read
 1327 0696 8F5F      		subi r24,lo8(-(1))
 1328 0698 8093 0000 		sts ring_read,r24
 110:serialparser.c ****     while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimi
 1330               	.LM125:
 1331 069c 9091 0000 		lds r25,ring_read
 1332 06a0 00C0      		rjmp .L184
 1333               	.L198:
 111:serialparser.c ****         ring_read++; //Step forward
 1335               	.LM126:
 1336 06a2 E091 0000 		lds r30,ring_read
 1337 06a6 F0E0      		ldi r31,0
 1338 06a8 E050      		subi r30,lo8(-(buffer))
 1339 06aa F040      		sbci r31,hi8(-(buffer))
 1340 06ac 8081      		ld r24,Z
 1341 06ae 8A30      		cpi r24,lo8(10)
 1342 06b0 01F0      		breq .L56
 112:serialparser.c ****     }
 1344               	.LM127:
 1345 06b2 8091 0000 		lds r24,ring_read
 1346 06b6 8F5F      		subi r24,lo8(-(1))
 1347 06b8 8093 0000 		sts ring_read,r24
 1348               	.L184:
 111:serialparser.c ****         ring_read++; //Step forward
 1350               	.LM128:
 1351 06bc E091 0000 		lds r30,ring_read
 1352 06c0 F0E0      		ldi r31,0
 1353 06c2 E050      		subi r30,lo8(-(buffer))
 1354 06c4 F040      		sbci r31,hi8(-(buffer))
 1355 06c6 8081      		ld r24,Z
 1356 06c8 8A33      		cpi r24,lo8(58)
 1357 06ca 01F4      		brne .L198
 1358               	.L56:
 114:serialparser.c ****     
 1360               	.LM129:
 1361 06cc 8091 0000 		lds r24,ring_read
 1362               	.LBE89:
 1363               	.LBE88:
 1364               	.LBE87:
 1365               	.LBE86:
 1366               	.LBB90:
 1367               	.LBB75:
 1368               	.LBB76:
  79:serialparser.c ****     
 1370               	.LM130:
 1371 06d0 2AE0      		ldi r18,lo8(10)
 1372 06d2 D701      		movw r26,r14
 1373               		0:
 1374 06d4 1D92      		st X+,__zero_reg__
 1375 06d6 2A95      		dec r18
 1376 06d8 01F4      		brne 0b
 1377               	.LBB77:
  83:serialparser.c ****         if (start == stop){
 1379               	.LM131:
 1380 06da E1E0      		ldi r30,lo8(1)
 1381 06dc E90F      		add r30,r25
 1382 06de A92F      		mov r26,r25
 1383 06e0 B0E0      		ldi r27,0
 1384 06e2 A050      		subi r26,lo8(-(buffer))
 1385 06e4 B040      		sbci r27,hi8(-(buffer))
 1386 06e6 2C91      		ld r18,X
 1387 06e8 2983      		std Y+1,r18
  84:serialparser.c ****            i = 10;
 1389               	.LM132:
 1390 06ea 8E17      		cp r24,r30
 1391 06ec 01F4      		brne .+2
 1392 06ee 00C0      		rjmp .L54
  83:serialparser.c ****         if (start == stop){
 1394               	.LM133:
 1395 06f0 A2E0      		ldi r26,lo8(2)
 1396 06f2 A90F      		add r26,r25
 1397 06f4 F0E0      		ldi r31,0
 1398 06f6 E050      		subi r30,lo8(-(buffer))
 1399 06f8 F040      		sbci r31,hi8(-(buffer))
 1400 06fa 2081      		ld r18,Z
 1401 06fc 2A83      		std Y+2,r18
  84:serialparser.c ****            i = 10;
 1403               	.LM134:
 1404 06fe 8A17      		cp r24,r26
 1405 0700 01F4      		brne .+2
 1406 0702 00C0      		rjmp .L54
  83:serialparser.c ****         if (start == stop){
 1408               	.LM135:
 1409 0704 E3E0      		ldi r30,lo8(3)
 1410 0706 E90F      		add r30,r25
 1411 0708 B0E0      		ldi r27,0
 1412 070a A050      		subi r26,lo8(-(buffer))
 1413 070c B040      		sbci r27,hi8(-(buffer))
 1414 070e 2C91      		ld r18,X
 1415 0710 2B83      		std Y+3,r18
  84:serialparser.c ****            i = 10;
 1417               	.LM136:
 1418 0712 8E17      		cp r24,r30
 1419 0714 01F0      		breq .L54
  83:serialparser.c ****         if (start == stop){
 1421               	.LM137:
 1422 0716 A4E0      		ldi r26,lo8(4)
 1423 0718 A90F      		add r26,r25
 1424 071a F0E0      		ldi r31,0
 1425 071c E050      		subi r30,lo8(-(buffer))
 1426 071e F040      		sbci r31,hi8(-(buffer))
 1427 0720 2081      		ld r18,Z
 1428 0722 2C83      		std Y+4,r18
  84:serialparser.c ****            i = 10;
 1430               	.LM138:
 1431 0724 8A17      		cp r24,r26
 1432 0726 01F0      		breq .L54
  83:serialparser.c ****         if (start == stop){
 1434               	.LM139:
 1435 0728 E5E0      		ldi r30,lo8(5)
 1436 072a E90F      		add r30,r25
 1437 072c B0E0      		ldi r27,0
 1438 072e A050      		subi r26,lo8(-(buffer))
 1439 0730 B040      		sbci r27,hi8(-(buffer))
 1440 0732 2C91      		ld r18,X
 1441 0734 2D83      		std Y+5,r18
  84:serialparser.c ****            i = 10;
 1443               	.LM140:
 1444 0736 8E17      		cp r24,r30
 1445 0738 01F0      		breq .L54
  83:serialparser.c ****         if (start == stop){
 1447               	.LM141:
 1448 073a A6E0      		ldi r26,lo8(6)
 1449 073c A90F      		add r26,r25
 1450 073e F0E0      		ldi r31,0
 1451 0740 E050      		subi r30,lo8(-(buffer))
 1452 0742 F040      		sbci r31,hi8(-(buffer))
 1453 0744 2081      		ld r18,Z
 1454 0746 2E83      		std Y+6,r18
  84:serialparser.c ****            i = 10;
 1456               	.LM142:
 1457 0748 8A17      		cp r24,r26
 1458 074a 01F0      		breq .L54
  83:serialparser.c ****         if (start == stop){
 1460               	.LM143:
 1461 074c E7E0      		ldi r30,lo8(7)
 1462 074e E90F      		add r30,r25
 1463 0750 B0E0      		ldi r27,0
 1464 0752 A050      		subi r26,lo8(-(buffer))
 1465 0754 B040      		sbci r27,hi8(-(buffer))
 1466 0756 2C91      		ld r18,X
 1467 0758 2F83      		std Y+7,r18
  84:serialparser.c ****            i = 10;
 1469               	.LM144:
 1470 075a 8E17      		cp r24,r30
 1471 075c 01F0      		breq .L54
  83:serialparser.c ****         if (start == stop){
 1473               	.LM145:
 1474 075e A8E0      		ldi r26,lo8(8)
 1475 0760 A90F      		add r26,r25
 1476 0762 F0E0      		ldi r31,0
 1477 0764 E050      		subi r30,lo8(-(buffer))
 1478 0766 F040      		sbci r31,hi8(-(buffer))
 1479 0768 2081      		ld r18,Z
 1480 076a 2887      		std Y+8,r18
  84:serialparser.c ****            i = 10;
 1482               	.LM146:
 1483 076c 8A17      		cp r24,r26
 1484 076e 01F0      		breq .L54
  83:serialparser.c ****         if (start == stop){
 1486               	.LM147:
 1487 0770 E9E0      		ldi r30,lo8(9)
 1488 0772 E90F      		add r30,r25
 1489 0774 B0E0      		ldi r27,0
 1490 0776 A050      		subi r26,lo8(-(buffer))
 1491 0778 B040      		sbci r27,hi8(-(buffer))
 1492 077a 9C91      		ld r25,X
 1493 077c 9987      		std Y+9,r25
  84:serialparser.c ****            i = 10;
 1495               	.LM148:
 1496 077e 8E17      		cp r24,r30
 1497 0780 01F0      		breq .L54
  83:serialparser.c ****         if (start == stop){
 1499               	.LM149:
 1500 0782 F0E0      		ldi r31,0
 1501 0784 E050      		subi r30,lo8(-(buffer))
 1502 0786 F040      		sbci r31,hi8(-(buffer))
 1503 0788 8081      		ld r24,Z
 1504 078a 8A87      		std Y+10,r24
 1505               	.L54:
 1506               	.LBE77:
  88:serialparser.c ****     printf("\n");
 1508               	.LM150:
 1509 078c FF92      		push r15
 1510 078e EF92      		push r14
 1511 0790 0E94 0000 		call printf
  89:serialparser.c ****     return atof(buf);
 1513               	.LM151:
 1514 0794 8AE0      		ldi r24,lo8(10)
 1515 0796 90E0      		ldi r25,0
 1516 0798 0E94 0000 		call putchar
  90:serialparser.c **** }
 1518               	.LM152:
 1519 079c C701      		movw r24,r14
 1520 079e 0E94 0000 		call atof
 1521               	.LBE76:
 1522               	.LBE75:
 130:serialparser.c ****                         succ = findParameter(':', ':', '\n', 20, &start, &stop);
 1524               	.LM153:
 1525 07a2 0E94 0000 		call setAngle
 1526 07a6 382E      		mov r3,r24
 1527 07a8 0F90      		pop __tmp_reg__
 1528 07aa 0F90      		pop __tmp_reg__
 1529 07ac 94E1      		ldi r25,lo8(20)
 1530 07ae 00C0      		rjmp .L58
 1531               	.L220:
 1532               	.LBB78:
 1533               	.LBB79:
  96:serialparser.c ****         ring_read++;
 1535               	.LM154:
 1536 07b0 3091 0000 		lds r19,ring_read
 1537 07b4 8091 0000 		lds r24,ring_write
 1538 07b8 3817      		cp r19,r24
 1539 07ba 01F0      		breq .L60
  97:serialparser.c ****         maxlength --;
 1541               	.LM155:
 1542 07bc 8091 0000 		lds r24,ring_read
 1543 07c0 8F5F      		subi r24,lo8(-(1))
 1544 07c2 8093 0000 		sts ring_read,r24
 1545 07c6 9150      		subi r25,lo8(-(-1))
  99:serialparser.c ****             return ERROR_MAX_LENGTH;
 1547               	.LM156:
 1548 07c8 01F4      		brne .+2
 1549 07ca 00C0      		rjmp .L59
 1550               	.L58:
  96:serialparser.c ****         ring_read++;
 1552               	.LM157:
 1553 07cc E091 0000 		lds r30,ring_read
 1554 07d0 F0E0      		ldi r31,0
 1555 07d2 E050      		subi r30,lo8(-(buffer))
 1556 07d4 F040      		sbci r31,hi8(-(buffer))
 1557 07d6 8081      		ld r24,Z
 1558 07d8 8A33      		cpi r24,lo8(58)
 1559 07da 01F4      		brne .L220
 1560               	.L60:
 103:serialparser.c ****         return ERROR_CANNOT_FIND;
 1562               	.LM158:
 1563 07dc 9091 0000 		lds r25,ring_read
 1564 07e0 8091 0000 		lds r24,ring_write
 1565 07e4 9817      		cp r25,r24
 1566 07e6 01F4      		brne .+2
 1567 07e8 00C0      		rjmp .L59
 1568               	.LBB80:
 1569               	.LBB81:
 107:serialparser.c **** 
 1571               	.LM159:
 1572 07ea 8091 0000 		lds r24,ring_read
 1573 07ee 8F5F      		subi r24,lo8(-(1))
 1574 07f0 8093 0000 		sts ring_read,r24
 110:serialparser.c ****     while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimi
 1576               	.LM160:
 1577 07f4 8091 0000 		lds r24,ring_read
 1578 07f8 00C0      		rjmp .L185
 1579               	.L199:
 111:serialparser.c ****         ring_read++; //Step forward
 1581               	.LM161:
 1582 07fa E091 0000 		lds r30,ring_read
 1583 07fe F0E0      		ldi r31,0
 1584 0800 E050      		subi r30,lo8(-(buffer))
 1585 0802 F040      		sbci r31,hi8(-(buffer))
 1586 0804 9081      		ld r25,Z
 1587 0806 9A30      		cpi r25,lo8(10)
 1588 0808 01F0      		breq .L65
 112:serialparser.c ****     }
 1590               	.LM162:
 1591 080a 9091 0000 		lds r25,ring_read
 1592 080e 9F5F      		subi r25,lo8(-(1))
 1593 0810 9093 0000 		sts ring_read,r25
 1594               	.L185:
 111:serialparser.c ****         ring_read++; //Step forward
 1596               	.LM163:
 1597 0814 E091 0000 		lds r30,ring_read
 1598 0818 F0E0      		ldi r31,0
 1599 081a E050      		subi r30,lo8(-(buffer))
 1600 081c F040      		sbci r31,hi8(-(buffer))
 1601 081e 9081      		ld r25,Z
 1602 0820 9A33      		cpi r25,lo8(58)
 1603 0822 01F4      		brne .L199
 1604               	.L65:
 114:serialparser.c ****     
 1606               	.LM164:
 1607 0824 9091 0000 		lds r25,ring_read
 1608               	.LBE81:
 1609               	.LBE80:
 1610               	.LBE79:
 1611               	.LBE78:
 1612               	.LBB82:
 1613               	.LBB83:
 1614               	.LBB84:
  79:serialparser.c ****     
 1616               	.LM165:
 1617 0828 3AE0      		ldi r19,lo8(10)
 1618 082a F701      		movw r30,r14
 1619               		0:
 1620 082c 1192      		st Z+,__zero_reg__
 1621 082e 3A95      		dec r19
 1622 0830 01F4      		brne 0b
 1623               	.LBB85:
  83:serialparser.c ****         if (start == stop){
 1625               	.LM166:
 1626 0832 E1E0      		ldi r30,lo8(1)
 1627 0834 E80F      		add r30,r24
 1628 0836 A82F      		mov r26,r24
 1629 0838 B0E0      		ldi r27,0
 1630 083a A050      		subi r26,lo8(-(buffer))
 1631 083c B040      		sbci r27,hi8(-(buffer))
 1632 083e 3C91      		ld r19,X
 1633 0840 3983      		std Y+1,r19
  84:serialparser.c ****            i = 10;
 1635               	.LM167:
 1636 0842 9E17      		cp r25,r30
 1637 0844 01F4      		brne .+2
 1638 0846 00C0      		rjmp .L63
  83:serialparser.c ****         if (start == stop){
 1640               	.LM168:
 1641 0848 A2E0      		ldi r26,lo8(2)
 1642 084a A80F      		add r26,r24
 1643 084c F0E0      		ldi r31,0
 1644 084e E050      		subi r30,lo8(-(buffer))
 1645 0850 F040      		sbci r31,hi8(-(buffer))
 1646 0852 3081      		ld r19,Z
 1647 0854 3A83      		std Y+2,r19
  84:serialparser.c ****            i = 10;
 1649               	.LM169:
 1650 0856 9A17      		cp r25,r26
 1651 0858 01F4      		brne .+2
 1652 085a 00C0      		rjmp .L63
  83:serialparser.c ****         if (start == stop){
 1654               	.LM170:
 1655 085c E3E0      		ldi r30,lo8(3)
 1656 085e E80F      		add r30,r24
 1657 0860 B0E0      		ldi r27,0
 1658 0862 A050      		subi r26,lo8(-(buffer))
 1659 0864 B040      		sbci r27,hi8(-(buffer))
 1660 0866 3C91      		ld r19,X
 1661 0868 3B83      		std Y+3,r19
  84:serialparser.c ****            i = 10;
 1663               	.LM171:
 1664 086a 9E17      		cp r25,r30
 1665 086c 01F0      		breq .L63
  83:serialparser.c ****         if (start == stop){
 1667               	.LM172:
 1668 086e A4E0      		ldi r26,lo8(4)
 1669 0870 A80F      		add r26,r24
 1670 0872 F0E0      		ldi r31,0
 1671 0874 E050      		subi r30,lo8(-(buffer))
 1672 0876 F040      		sbci r31,hi8(-(buffer))
 1673 0878 3081      		ld r19,Z
 1674 087a 3C83      		std Y+4,r19
  84:serialparser.c ****            i = 10;
 1676               	.LM173:
 1677 087c 9A17      		cp r25,r26
 1678 087e 01F0      		breq .L63
  83:serialparser.c ****         if (start == stop){
 1680               	.LM174:
 1681 0880 E5E0      		ldi r30,lo8(5)
 1682 0882 E80F      		add r30,r24
 1683 0884 B0E0      		ldi r27,0
 1684 0886 A050      		subi r26,lo8(-(buffer))
 1685 0888 B040      		sbci r27,hi8(-(buffer))
 1686 088a 3C91      		ld r19,X
 1687 088c 3D83      		std Y+5,r19
  84:serialparser.c ****            i = 10;
 1689               	.LM175:
 1690 088e 9E17      		cp r25,r30
 1691 0890 01F0      		breq .L63
  83:serialparser.c ****         if (start == stop){
 1693               	.LM176:
 1694 0892 A6E0      		ldi r26,lo8(6)
 1695 0894 A80F      		add r26,r24
 1696 0896 F0E0      		ldi r31,0
 1697 0898 E050      		subi r30,lo8(-(buffer))
 1698 089a F040      		sbci r31,hi8(-(buffer))
 1699 089c 3081      		ld r19,Z
 1700 089e 3E83      		std Y+6,r19
  84:serialparser.c ****            i = 10;
 1702               	.LM177:
 1703 08a0 9A17      		cp r25,r26
 1704 08a2 01F0      		breq .L63
  83:serialparser.c ****         if (start == stop){
 1706               	.LM178:
 1707 08a4 E7E0      		ldi r30,lo8(7)
 1708 08a6 E80F      		add r30,r24
 1709 08a8 B0E0      		ldi r27,0
 1710 08aa A050      		subi r26,lo8(-(buffer))
 1711 08ac B040      		sbci r27,hi8(-(buffer))
 1712 08ae 3C91      		ld r19,X
 1713 08b0 3F83      		std Y+7,r19
  84:serialparser.c ****            i = 10;
 1715               	.LM179:
 1716 08b2 9E17      		cp r25,r30
 1717 08b4 01F0      		breq .L63
  83:serialparser.c ****         if (start == stop){
 1719               	.LM180:
 1720 08b6 A8E0      		ldi r26,lo8(8)
 1721 08b8 A80F      		add r26,r24
 1722 08ba F0E0      		ldi r31,0
 1723 08bc E050      		subi r30,lo8(-(buffer))
 1724 08be F040      		sbci r31,hi8(-(buffer))
 1725 08c0 3081      		ld r19,Z
 1726 08c2 3887      		std Y+8,r19
  84:serialparser.c ****            i = 10;
 1728               	.LM181:
 1729 08c4 9A17      		cp r25,r26
 1730 08c6 01F0      		breq .L63
  83:serialparser.c ****         if (start == stop){
 1732               	.LM182:
 1733 08c8 E9E0      		ldi r30,lo8(9)
 1734 08ca E80F      		add r30,r24
 1735 08cc B0E0      		ldi r27,0
 1736 08ce A050      		subi r26,lo8(-(buffer))
 1737 08d0 B040      		sbci r27,hi8(-(buffer))
 1738 08d2 8C91      		ld r24,X
 1739 08d4 8987      		std Y+9,r24
  84:serialparser.c ****            i = 10;
 1741               	.LM183:
 1742 08d6 9E17      		cp r25,r30
 1743 08d8 01F0      		breq .L63
  83:serialparser.c ****         if (start == stop){
 1745               	.LM184:
 1746 08da F0E0      		ldi r31,0
 1747 08dc E050      		subi r30,lo8(-(buffer))
 1748 08de F040      		sbci r31,hi8(-(buffer))
 1749 08e0 8081      		ld r24,Z
 1750 08e2 8A87      		std Y+10,r24
 1751               	.L63:
 1752               	.LBE85:
  88:serialparser.c ****     printf("\n");
 1754               	.LM185:
 1755 08e4 FF92      		push r15
 1756 08e6 EF92      		push r14
 1757 08e8 0E94 0000 		call printf
  89:serialparser.c ****     return atof(buf);
 1759               	.LM186:
 1760 08ec 8AE0      		ldi r24,lo8(10)
 1761 08ee 90E0      		ldi r25,0
 1762 08f0 0E94 0000 		call putchar
  90:serialparser.c **** }
 1764               	.LM187:
 1765 08f4 C701      		movw r24,r14
 1766 08f6 0E94 0000 		call atof
 1767               	.LBE84:
 1768               	.LBE83:
 133:serialparser.c ****                             if (asuccess == 0 && tsuccess == 0){
 1770               	.LM188:
 1771 08fa 0E94 0000 		call setTilt
 134:serialparser.c ****                                 fprintf(port,"OK\n");
 1773               	.LM189:
 1774 08fe 0F90      		pop __tmp_reg__
 1775 0900 0F90      		pop __tmp_reg__
 135:serialparser.c ****                             }
 1777               	.LM190:
 1778 0902 2091 0000 		lds r18,port
 1779 0906 3091 0000 		lds r19,port+1
 134:serialparser.c ****                                 fprintf(port,"OK\n");
 1781               	.LM191:
 1782 090a 3110      		cpse r3,__zero_reg__
 1783 090c 00C0      		rjmp .L194
 134:serialparser.c ****                                 fprintf(port,"OK\n");
 1785               	.LM192:
 1786 090e 8111      		cpse r24,__zero_reg__
 1787 0910 00C0      		rjmp .L194
 135:serialparser.c ****                             }
 1789               	.LM193:
 1790 0912 43E0      		ldi r20,lo8(3)
 1791 0914 50E0      		ldi r21,0
 1792 0916 61E0      		ldi r22,lo8(1)
 1793 0918 70E0      		ldi r23,0
 1794 091a 80E0      		ldi r24,lo8(.LC0)
 1795 091c 90E0      		ldi r25,hi8(.LC0)
 1796 091e 0E94 0000 		call fwrite
 1797 0922 00C0      		rjmp .L187
 1798               	.L211:
 1799               	.LBE82:
 1800               	.LBE90:
 1801               	.LBE93:
 1802               	.LBE101:
 1803               	.LBB102:
 167:serialparser.c ****             }
 1805               	.LM194:
 1806 0924 0E94 0000 		call getTilt
 1807 0928 362E      		mov r3,r22
 1808 092a 272E      		mov r2,r23
 1809 092c AC01      		movw r20,r24
 1810 092e 8B87      		std Y+11,r24
 1811 0930 5C87      		std Y+12,r21
 1812 0932 0E94 0000 		call getAngle
 1813 0936 5C85      		ldd r21,Y+12
 1814 0938 5F93      		push r21
 1815 093a 4B85      		ldd r20,Y+11
 1816 093c 4F93      		push r20
 1817 093e 2F92      		push r2
 1818 0940 3F92      		push r3
 1819 0942 9F93      		push r25
 1820 0944 8F93      		push r24
 1821 0946 7F93      		push r23
 1822 0948 6F93      		push r22
 1823 094a A0E0      		ldi r26,lo8(.LC5)
 1824 094c B0E0      		ldi r27,hi8(.LC5)
 1825 094e BF93      		push r27
 1826 0950 AF93      		push r26
 1827 0952 00C0      		rjmp .L178
 1828               	.L212:
 170:serialparser.c ****             }
 1830               	.LM195:
 1831 0954 0E94 0000 		call getTiltMotorStatus
 1832 0958 382E      		mov r3,r24
 1833 095a 0E94 0000 		call getAngleMotorStatus
 1834 095e 1F92      		push __zero_reg__
 1835 0960 3F92      		push r3
 1836 0962 1F92      		push __zero_reg__
 1837 0964 8F93      		push r24
 1838 0966 A0E0      		ldi r26,lo8(.LC6)
 1839 0968 B0E0      		ldi r27,hi8(.LC6)
 1840 096a BF93      		push r27
 1841 096c AF93      		push r26
 1842 096e 00C0      		rjmp .L196
 1843               	.LBE102:
 1844               	.LBE104:
 1901               	.Lscope6:
 1903               	.global	__vector_18
 1905               	__vector_18:
  31:serialparser.c **** 	volatile char temp = USART_Receive0();
 1907               	.LM196:
 1908               	.LFBB7:
 1909 0970 1F92      		push r1
 1910 0972 0F92      		push r0
 1911 0974 0FB6      		in r0,__SREG__
 1912 0976 0F92      		push r0
 1913 0978 1124      		clr __zero_reg__
 1914 097a 2F93      		push r18
 1915 097c 3F93      		push r19
 1916 097e 4F93      		push r20
 1917 0980 5F93      		push r21
 1918 0982 6F93      		push r22
 1919 0984 7F93      		push r23
 1920 0986 8F93      		push r24
 1921 0988 9F93      		push r25
 1922 098a AF93      		push r26
 1923 098c BF93      		push r27
 1924 098e EF93      		push r30
 1925 0990 FF93      		push r31
 1926 0992 CF93      		push r28
 1927 0994 DF93      		push r29
 1928 0996 1F92      		push __zero_reg__
 1929 0998 CDB7      		in r28,__SP_L__
 1930 099a DEB7      		in r29,__SP_H__
 1931               	/* prologue: Signal */
 1932               	/* frame size = 1 */
 1933               	/* stack size = 18 */
 1934               	.L__stack_usage = 18
 1935               	.L222:
 1936               	.LBB105:
 1937               	.LBB106:
 1939               	.Ltext1:
   1:USART.h       **** #include <string.h>
   2:USART.h       **** #include <stdio.h>	
   3:USART.h       **** #include <util/delay.h>	
   4:USART.h       **** #include <avr/io.h>	
   5:USART.h       **** 
   6:USART.h       **** #define USART_FREQ 16000000UL
   7:USART.h       **** 
   8:USART.h       **** __attribute__((always_inline)) inline static uint8_t USART_Receive0(void) {
   9:USART.h       **** 	while ( !(UCSR0A & (1<<RXC0)) );
 1941               	.LM197:
 1942 099c 8091 C000 		lds r24,192
 1943 09a0 87FF      		sbrs r24,7
 1944 09a2 00C0      		rjmp .L222
  10:USART.h       **** 	return UDR0;
 1946               	.LM198:
 1947 09a4 8091 C600 		lds r24,198
 1948               	.LBE106:
 1949               	.LBE105:
 1951               	.Ltext2:
  32:serialparser.c **** 	buffer[ring_write++] = temp;
 1953               	.LM199:
 1954 09a8 8983      		std Y+1,r24
  33:serialparser.c **** 	if (temp == '\n' || temp == '\r'){
 1956               	.LM200:
 1957 09aa E091 0000 		lds r30,ring_write
 1958 09ae 81E0      		ldi r24,lo8(1)
 1959 09b0 8E0F      		add r24,r30
 1960 09b2 8093 0000 		sts ring_write,r24
 1961 09b6 F0E0      		ldi r31,0
 1962 09b8 8981      		ldd r24,Y+1
 1963 09ba E050      		subi r30,lo8(-(buffer))
 1964 09bc F040      		sbci r31,hi8(-(buffer))
 1965 09be 8083      		st Z,r24
  34:serialparser.c ****         parseCommands();
 1967               	.LM201:
 1968 09c0 8981      		ldd r24,Y+1
 1969 09c2 8A30      		cpi r24,lo8(10)
 1970 09c4 01F0      		breq .L223
  34:serialparser.c ****         parseCommands();
 1972               	.LM202:
 1973 09c6 8981      		ldd r24,Y+1
 1974 09c8 8D30      		cpi r24,lo8(13)
 1975 09ca 01F0      		breq .L223
 1976               	.L221:
 1977               	/* epilogue start */
  37:serialparser.c **** 
 1979               	.LM203:
 1980 09cc 0F90      		pop __tmp_reg__
 1981 09ce DF91      		pop r29
 1982 09d0 CF91      		pop r28
 1983 09d2 FF91      		pop r31
 1984 09d4 EF91      		pop r30
 1985 09d6 BF91      		pop r27
 1986 09d8 AF91      		pop r26
 1987 09da 9F91      		pop r25
 1988 09dc 8F91      		pop r24
 1989 09de 7F91      		pop r23
 1990 09e0 6F91      		pop r22
 1991 09e2 5F91      		pop r21
 1992 09e4 4F91      		pop r20
 1993 09e6 3F91      		pop r19
 1994 09e8 2F91      		pop r18
 1995 09ea 0F90      		pop r0
 1996 09ec 0FBE      		out __SREG__,r0
 1997 09ee 0F90      		pop r0
 1998 09f0 1F90      		pop r1
 1999 09f2 1895      		reti
 2000               	.L223:
  35:serialparser.c **** 	}
 2002               	.LM204:
 2003 09f4 0E94 0000 		call parseCommands
 2004 09f8 00C0      		rjmp .L221
 2009               	.Lscope7:
 2010               		.comm	port,2,1
 2011               		.comm	buffer,256,1
 2012               	.global	ring_read
 2013               		.section .bss
 2016               	ring_read:
 2017 0000 00        		.zero	1
 2018               	.global	ring_write
 2021               	ring_write:
 2022 0001 00        		.zero	1
 2027               		.text
 2029               	.Letext0:
 2030               		.ident	"GCC: (GNU) 4.9.2"
 2031               	.global __do_copy_data
 2032               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 serialparser.c
     /tmp/cc3ZB3bu.s:2      *ABS*:0000003e __SP_H__
     /tmp/cc3ZB3bu.s:3      *ABS*:0000003d __SP_L__
     /tmp/cc3ZB3bu.s:4      *ABS*:0000003f __SREG__
     /tmp/cc3ZB3bu.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cc3ZB3bu.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cc3ZB3bu.s:129    .text:00000000 read_until_line_end
     /tmp/cc3ZB3bu.s:2016   .bss:00000000 ring_read
                            *COM*:00000100 buffer
     /tmp/cc3ZB3bu.s:2021   .bss:00000001 ring_write
     /tmp/cc3ZB3bu.s:172    .text:0000003a initSerialParser
                            *COM*:00000002 port
     /tmp/cc3ZB3bu.s:210    .text:00000054 readInt16
     /tmp/cc3ZB3bu.s:320    .text:000000d6 readFloat
     /tmp/cc3ZB3bu.s:521    .text:000001da findParameter
     /tmp/cc3ZB3bu.s:679    .text:00000284 parseCommands
     /tmp/cc3ZB3bu.s:1905   .text:00000970 __vector_18

UNDEFINED SYMBOLS
__prologue_saves__
atoi
__epilogue_restores__
printf
putchar
atof
getTiltMotorStatus
getAngleMotorStatus
fprintf
fwrite
readAutoManualState
GetVoltage
getTiltActuatorCurrentLength
getAngleActuatorCurrentLength
fputc
getSetTilt
getSetAngle
setAngle
setTilt
getTilt
getAngle
__do_copy_data
__do_clear_bss
