   1               		.file	"USART.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 116               	.global	put_char0
 118               	put_char0:
   1:USART.c       **** #include "USART.h"
   2:USART.c       **** #include <avr/interrupt.h>
   3:USART.c       **** #include <avr/pgmspace.h>
   4:USART.c       **** 
   5:USART.c       **** FILE serial_port0 = FDEV_SETUP_STREAM(put_char0, NULL, _FDEV_SETUP_WRITE);
   6:USART.c       **** //FILE serial_port1 = FDEV_SETUP_STREAM(put_char1, NULL, _FDEV_SETUP_WRITE);
   7:USART.c       **** //FILE serial_port2 = FDEV_SETUP_STREAM(put_char2, NULL, _FDEV_SETUP_WRITE);
   8:USART.c       **** //FILE serial_port3 = FDEV_SETUP_STREAM(put_char3, NULL, _FDEV_SETUP_WRITE);
   9:USART.c       **** 
  10:USART.c       **** 
  11:USART.c       **** 
  12:USART.c       **** int put_char0(char c, FILE *stream){
 120               	.LM0:
 121               	.LFBB1:
 122               	/* prologue: function */
 123               	/* frame size = 0 */
 124               	/* stack size = 0 */
 125               	.L__stack_usage = 0
 126               	.L2:
  13:USART.c       **** 	 //if (c == '\n') put_char0('\r', stream);
  14:USART.c       **** 	 loop_until_bit_is_set(UCSR0A, UDRE0);
 128               	.LM1:
 129 0000 9091 C000 		lds r25,192
 130 0004 95FF      		sbrs r25,5
 131 0006 00C0      		rjmp .L2
  15:USART.c       **** 	 UDR0 = c;
 133               	.LM2:
 134 0008 8093 C600 		sts 198,r24
  16:USART.c       **** 	 return 0;
  17:USART.c       **** }
 136               	.LM3:
 137 000c 80E0      		ldi r24,0
 138 000e 90E0      		ldi r25,0
 139 0010 0895      		ret
 141               	.Lscope1:
 145               	.global	USART_Init
 147               	USART_Init:
  18:USART.c       **** /*
  19:USART.c       **** int put_char1(char c, FILE *stream){
  20:USART.c       **** 	 if (c == '\n') put_char1('\r', stream);
  21:USART.c       **** 	 loop_until_bit_is_set(UCSR1A, UDRE1);
  22:USART.c       **** 	 UDR1 = c;
  23:USART.c       **** 	 return 0;
  24:USART.c       **** }
  25:USART.c       **** 
  26:USART.c       **** int put_char2(char c, FILE *stream){
  27:USART.c       **** 	 //if (c == '\n') put_char2('\r', stream); //Disable this dummy thing
  28:USART.c       **** 	 loop_until_bit_is_set(UCSR2A, UDRE2);
  29:USART.c       **** 	 UDR2 = c;
  30:USART.c       **** 	 return 0;
  31:USART.c       **** }
  32:USART.c       **** 
  33:USART.c       **** int put_char3(char c, FILE *stream){
  34:USART.c       **** 	 if (c == '\n') put_char3('\r', stream);
  35:USART.c       **** 	 loop_until_bit_is_set(UCSR3A, UDRE3);
  36:USART.c       **** 	 UDR3 = c;
  37:USART.c       **** 	 return 0;
  38:USART.c       **** }
  39:USART.c       **** */
  40:USART.c       **** void USART_Init(FILE *port0, uint32_t br0){
 149               	.LM4:
 150               	.LFBB2:
 151 0012 CF93      		push r28
 152 0014 DF93      		push r29
 153               	/* prologue: function */
 154               	/* frame size = 0 */
 155               	/* stack size = 2 */
 156               	.L__stack_usage = 2
 157 0016 EC01      		movw r28,r24
  41:USART.c       **** 	uint32_t MYUBRR = 0;
  42:USART.c       **** 	//int MYUBRR = 16; // 16 = 115200, 34 = 57600
  43:USART.c       **** 	if (port0 != NULL){
 159               	.LM5:
 160 0018 892B      		or r24,r25
 161 001a 01F4      		brne .+2
 162 001c 00C0      		rjmp .L6
  44:USART.c       **** 		MYUBRR = F_CPU/(8*br0)-1;
 164               	.LM6:
 165 001e 440F      		lsl r20
 166 0020 551F      		rol r21
 167 0022 661F      		rol r22
 168 0024 771F      		rol r23
 169 0026 440F      		lsl r20
 170 0028 551F      		rol r21
 171 002a 661F      		rol r22
 172 002c 771F      		rol r23
 173 002e 9A01      		movw r18,r20
 174 0030 AB01      		movw r20,r22
 175 0032 220F      		lsl r18
 176 0034 331F      		rol r19
 177 0036 441F      		rol r20
 178 0038 551F      		rol r21
 179 003a 60E0      		ldi r22,0
 180 003c 74E2      		ldi r23,lo8(36)
 181 003e 84EF      		ldi r24,lo8(-12)
 182 0040 90E0      		ldi r25,0
 183 0042 0E94 0000 		call __udivmodsi4
 184 0046 BA01      		movw r22,r20
 185 0048 A901      		movw r20,r18
 186 004a 4150      		subi r20,1
 187 004c 5109      		sbc r21,__zero_reg__
 188 004e 6109      		sbc r22,__zero_reg__
 189 0050 7109      		sbc r23,__zero_reg__
  45:USART.c       **** 		//DEbug serial
  46:USART.c       **** 		DDRD |= 0x02; //TXD0 output
 191               	.LM7:
 192 0052 519A      		sbi 0xa,1
  47:USART.c       **** 		DDRD &= ~(1<<0); //RXD0 input
 194               	.LM8:
 195 0054 5098      		cbi 0xa,0
  48:USART.c       **** 		UBRR0H = (uint8_t)(MYUBRR>>8);
 197               	.LM9:
 198 0056 BB27      		clr r27
 199 0058 A72F      		mov r26,r23
 200 005a 962F      		mov r25,r22
 201 005c 852F      		mov r24,r21
 202 005e 8093 C500 		sts 197,r24
  49:USART.c       **** 		UBRR0L = (uint8_t)MYUBRR;
 204               	.LM10:
 205 0062 4093 C400 		sts 196,r20
  50:USART.c       **** 		UCSR0B |= (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); //|(1<<TXCIE0);
 207               	.LM11:
 208 0066 8091 C100 		lds r24,193
 209 006a 8869      		ori r24,lo8(-104)
 210 006c 8093 C100 		sts 193,r24
  51:USART.c       **** 		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 212               	.LM12:
 213 0070 8091 C200 		lds r24,194
 214 0074 8660      		ori r24,lo8(6)
 215 0076 8093 C200 		sts 194,r24
  52:USART.c       **** 		UCSR0A |= (1<<U2X0);
 217               	.LM13:
 218 007a 8091 C000 		lds r24,192
 219 007e 8260      		ori r24,lo8(2)
 220 0080 8093 C000 		sts 192,r24
  53:USART.c       **** 		*port0 = serial_port0;
 222               	.LM14:
 223 0084 8EE0      		ldi r24,lo8(14)
 224 0086 E0E0      		ldi r30,lo8(serial_port0)
 225 0088 F0E0      		ldi r31,hi8(serial_port0)
 226 008a DE01      		movw r26,r28
 227               		0:
 228 008c 0190      		ld r0,Z+
 229 008e 0D92      		st X+,r0
 230 0090 8A95      		dec r24
 231 0092 01F4      		brne 0b
  54:USART.c       **** 		//if (defaultport == 0){
  55:USART.c       **** 		stdout = &serial_port0; //Required for printf init
 233               	.LM15:
 234 0094 80E0      		ldi r24,lo8(serial_port0)
 235 0096 90E0      		ldi r25,hi8(serial_port0)
 236 0098 9093 0000 		sts __iob+2+1,r25
 237 009c 8093 0000 		sts __iob+2,r24
 238               	.L6:
 239               	/* epilogue start */
  56:USART.c       **** 		//}
  57:USART.c       **** 	}/*
  58:USART.c       **** 	if (port1 != NULL){
  59:USART.c       **** 		MYUBRR = F_CPU / (8*br1) - 1;
  60:USART.c       **** 		//Unused port currently
  61:USART.c       **** 		DDRD |= 0x08; //TXD1 output
  62:USART.c       **** 		UBRR1H = (uint8_t)(MYUBRR>>8);
  63:USART.c       **** 		UBRR1L = (uint8_t)MYUBRR;
  64:USART.c       **** 		UCSR1B |= (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);//|(1<<TXCIE2);
  65:USART.c       **** 		UCSR1C |= (1<<UCSZ11)|(1<<UCSZ10);
  66:USART.c       **** 		UCSR1A |= (1<<U2X1);
  67:USART.c       **** 		*port1 = serial_port1;
  68:USART.c       **** 		if (defaultport == 1){
  69:USART.c       **** 			stdout = &serial_port1; //Required for printf init
  70:USART.c       **** 		}
  71:USART.c       **** 	}
  72:USART.c       **** 	if (port2 != NULL){
  73:USART.c       **** 		MYUBRR = F_CPU / (8*br2) - 1;
  74:USART.c       **** 		DDRH |= 0x02; //TXD2 output
  75:USART.c       **** 		UBRR2H = (uint8_t)(MYUBRR>>8);
  76:USART.c       **** 		UBRR2L = (uint8_t)MYUBRR;
  77:USART.c       **** 		UCSR2B |= (1<<RXEN2)|(1<<TXEN2)|(1<<RXCIE2);//|(1<<TXCIE2);
  78:USART.c       **** 		UCSR2C |= (1<<UCSZ21)|(1<<UCSZ20);
  79:USART.c       **** 		UCSR2A |= (1<<U2X2);
  80:USART.c       **** 		*port2 = serial_port2;
  81:USART.c       **** 		if (defaultport == 2){
  82:USART.c       **** 			stdout = &serial_port2; //Required for printf init
  83:USART.c       **** 		}
  84:USART.c       **** 	}
  85:USART.c       **** 	if (port3 != NULL){
  86:USART.c       **** 		MYUBRR = F_CPU / (8*br3) - 1;
  87:USART.c       **** 		//GPS serial
  88:USART.c       **** 		//DDRH |= 0x02; //TXD2 output
  89:USART.c       **** 		UBRR3H = (uint8_t)(MYUBRR>>8);
  90:USART.c       **** 		UBRR3L = (uint8_t)MYUBRR;
  91:USART.c       **** 		UCSR3B |= (1<<RXEN3)|(1<<TXEN3)|(1<<RXCIE3);//|(1<<TXCIE2);
  92:USART.c       **** 		UCSR3C |= (1<<UCSZ31)|(1<<UCSZ30);
  93:USART.c       **** 		UCSR3A |= (1<<U2X3);
  94:USART.c       **** 		*port3 = serial_port3;
  95:USART.c       **** 		if (defaultport == 3){
  96:USART.c       **** 			stdout = &serial_port3; //Required for printf init
  97:USART.c       **** 		}
  98:USART.c       **** 	}*/
  99:USART.c       **** }
 241               	.LM16:
 242 00a0 DF91      		pop r29
 243 00a2 CF91      		pop r28
 244 00a4 0895      		ret
 249               	.Lscope2:
 252               	.global	USART_Transmit0
 254               	USART_Transmit0:
 100:USART.c       **** 
 101:USART.c       **** void USART_Transmit0( unsigned char data ){
 256               	.LM17:
 257               	.LFBB3:
 258               	/* prologue: function */
 259               	/* frame size = 0 */
 260               	/* stack size = 0 */
 261               	.L__stack_usage = 0
 262               	.L12:
 102:USART.c       **** 	while ( !( UCSR0A & (1<<UDRE0)) );
 264               	.LM18:
 265 00a6 9091 C000 		lds r25,192
 266 00aa 95FF      		sbrs r25,5
 267 00ac 00C0      		rjmp .L12
 103:USART.c       **** 	UDR0 = data;
 269               	.LM19:
 270 00ae 8093 C600 		sts 198,r24
 271 00b2 0895      		ret
 273               	.Lscope3:
 275               	.global	USART0_Flush
 277               	USART0_Flush:
 104:USART.c       **** }/*
 105:USART.c       **** void USART_Transmit1( unsigned char data ){
 106:USART.c       **** 	while ( !( UCSR1A & (1<<UDRE1)) );
 107:USART.c       **** 	UDR1 = data;
 108:USART.c       **** }
 109:USART.c       **** void USART_Transmit2( unsigned char data ){
 110:USART.c       **** 	while ( !( UCSR2A & (1<<UDRE2)) );
 111:USART.c       **** 	//_delay_us(500);
 112:USART.c       **** 	UDR2 = data;
 113:USART.c       **** }
 114:USART.c       **** void USART_Transmit3( unsigned char data ){
 115:USART.c       **** 	while ( !( UCSR3A & (1<<UDRE3)) );
 116:USART.c       **** 	//_delay_us(500);
 117:USART.c       **** 	UDR3 = data;
 118:USART.c       **** }
 119:USART.c       **** */
 120:USART.c       **** 
 121:USART.c       **** /* unsigned char USART_Receive0(void){
 122:USART.c       **** 	while ( !(UCSR0A & (1<<RXC0)) );
 123:USART.c       **** 	return UDR0;
 124:USART.c       **** }
 125:USART.c       **** 
 126:USART.c       **** unsigned char USART_Receive1(void){
 127:USART.c       **** 	while ( !(UCSR1A & (1<<RXC1)) );
 128:USART.c       **** 	return UDR1;
 129:USART.c       **** }
 130:USART.c       **** 
 131:USART.c       **** unsigned char USART_Receive2(void){
 132:USART.c       **** 	while ( !(UCSR2A & (1<<RXC2)) );
 133:USART.c       **** 	return UDR2;
 134:USART.c       **** }
 135:USART.c       **** 
 136:USART.c       **** unsigned char USART_Receive3(void){
 137:USART.c       **** 	while ( !(UCSR3A & (1<<RXC3)) );
 138:USART.c       **** 	return UDR3;
 139:USART.c       **** } */
 140:USART.c       **** 
 141:USART.c       **** /*void USART_Transmit(unsigned char data){   
 142:USART.c       **** 	while ( !( UCSR0A & (1<<UDRE0)) );
 143:USART.c       **** 	UDR0 = data;
 144:USART.c       **** }*/
 145:USART.c       **** 
 146:USART.c       **** void USART0_Flush( void ){
 279               	.LM20:
 280               	.LFBB4:
 281 00b4 00C0      		rjmp .L20
 282               	/* prologue: function */
 283               	/* frame size = 0 */
 284               	/* stack size = 0 */
 285               	.L__stack_usage = 0
 286               	.L18:
 147:USART.c       **** 	unsigned char dummy;
 148:USART.c       **** 	while ( UCSR0A & (1<<RXC0) ){
 149:USART.c       **** 		dummy = UDR0;
 288               	.LM21:
 289 00b6 8091 C600 		lds r24,198
 290               	.L20:
 148:USART.c       **** 		dummy = UDR0;
 292               	.LM22:
 293 00ba 8091 C000 		lds r24,192
 294 00be 87FD      		sbrc r24,7
 295 00c0 00C0      		rjmp .L18
 296 00c2 0895      		ret
 301               	.Lscope4:
 303               	.global	uart_getchar
 305               	uart_getchar:
 150:USART.c       **** 		if (dummy){}
 151:USART.c       **** 	}
 152:USART.c       **** }
 153:USART.c       **** /*void USART1_Flush( void ){
 154:USART.c       **** 	unsigned char dummy;
 155:USART.c       **** 	while ( UCSR1A & (1<<RXC1) ){
 156:USART.c       **** 		dummy = UDR1;
 157:USART.c       **** 		if (dummy){}
 158:USART.c       **** 	}
 159:USART.c       **** }
 160:USART.c       **** void USART2_Flush( void ){
 161:USART.c       **** 	unsigned char dummy;
 162:USART.c       **** 	while ( UCSR2A & (1<<RXC2) ){
 163:USART.c       **** 		dummy = UDR2;
 164:USART.c       **** 		if (dummy){}
 165:USART.c       **** 	}
 166:USART.c       **** }
 167:USART.c       **** void USART3_Flush( void ){
 168:USART.c       **** 	unsigned char dummy;
 169:USART.c       **** 	while ( UCSR3A & (1<<RXC3) ){
 170:USART.c       **** 		dummy = UDR3;
 171:USART.c       **** 		if (dummy){}
 172:USART.c       **** 	}
 173:USART.c       **** }
 174:USART.c       **** */
 175:USART.c       **** 
 176:USART.c       **** unsigned char uart_getchar(void)
 177:USART.c       **** {
 307               	.LM23:
 308               	.LFBB5:
 309               	/* prologue: function */
 310               	/* frame size = 0 */
 311               	/* stack size = 0 */
 312               	.L__stack_usage = 0
 313               	.L22:
 178:USART.c       ****     while( !(UCSR0A & (1<<RXC0)) );
 315               	.LM24:
 316 00c4 8091 C000 		lds r24,192
 317 00c8 87FF      		sbrs r24,7
 318 00ca 00C0      		rjmp .L22
 179:USART.c       ****     return(UDR0);
 320               	.LM25:
 321 00cc 8091 C600 		lds r24,198
 180:USART.c       **** }
 323               	.LM26:
 324 00d0 0895      		ret
 326               	.Lscope5:
 330               	.global	waitResponce
 332               	waitResponce:
 181:USART.c       **** 
 182:USART.c       **** 
 183:USART.c       **** void waitResponce(const char *string, uint8_t length){
 334               	.LM27:
 335               	.LFBB6:
 336               	/* prologue: function */
 337               	/* frame size = 0 */
 338               	/* stack size = 0 */
 339               	.L__stack_usage = 0
 340 00d2 AC01      		movw r20,r24
 184:USART.c       **** 	cli();
 342               	.LM28:
 343               	/* #APP */
 344               	 ;  184 "USART.c" 1
 345 00d4 F894      		cli
 346               	 ;  0 "" 2
 185:USART.c       **** 	uint8_t match=0;
 348               	.LM29:
 349               	/* #NOAPP */
 350 00d6 20E0      		ldi r18,0
 351               	.L25:
 186:USART.c       **** 	while(length != match){
 353               	.LM30:
 354 00d8 6217      		cp r22,r18
 355 00da 01F0      		breq .L37
 356               	.L26:
 357               	.LBB7:
 358               	.LBB8:
 360               	.Ltext1:
   1:USART.h       **** #include <string.h>
   2:USART.h       **** #include <stdio.h>	
   3:USART.h       **** #include <util/delay.h>	
   4:USART.h       **** #include <avr/io.h>	
   5:USART.h       **** 
   6:USART.h       **** #define USART_FREQ 16000000UL
   7:USART.h       **** 
   8:USART.h       **** __attribute__((always_inline)) inline static uint8_t USART_Receive0(void) {
   9:USART.h       **** 	while ( !(UCSR0A & (1<<RXC0)) );
 362               	.LM31:
 363 00dc 9091 C000 		lds r25,192
 364 00e0 97FF      		sbrs r25,7
 365 00e2 00C0      		rjmp .L26
  10:USART.h       **** 	return UDR0;
 367               	.LM32:
 368 00e4 9091 C600 		lds r25,198
 369               	.LBE8:
 370               	.LBE7:
 371               	.LBB9:
 373               	.Ltext2:
 187:USART.c       **** 		if (USART_Receive0() == pgm_read_byte(string+match)){
 375               	.LM33:
 376 00e8 FA01      		movw r30,r20
 377 00ea E20F      		add r30,r18
 378 00ec F11D      		adc r31,__zero_reg__
 379               	/* #APP */
 380               	 ;  187 "USART.c" 1
 381 00ee E491      		lpm r30, Z
 382               		
 383               	 ;  0 "" 2
 384               	/* #NOAPP */
 385               	.LBE9:
 386 00f0 E917      		cp r30,r25
 387 00f2 01F0      		breq .L38
 188:USART.c       **** 			match ++;
 189:USART.c       **** 		}
 190:USART.c       **** 		else{
 191:USART.c       **** 			match = 0;
 389               	.LM34:
 390 00f4 20E0      		ldi r18,0
 186:USART.c       **** 		if (USART_Receive0() == pgm_read_byte(string+match)){
 392               	.LM35:
 393 00f6 6111      		cpse r22,__zero_reg__
 394 00f8 00C0      		rjmp .L26
 395               	.LBB10:
 396               	.LBB11:
 148:USART.c       **** 		dummy = UDR0;
 398               	.LM36:
 399 00fa 8091 C000 		lds r24,192
 400 00fe 87FF      		sbrs r24,7
 401 0100 00C0      		rjmp .L39
 402               	.L33:
 149:USART.c       **** 		if (dummy){}
 404               	.LM37:
 405 0102 8091 C600 		lds r24,198
 406               	.L37:
 148:USART.c       **** 		dummy = UDR0;
 408               	.LM38:
 409 0106 8091 C000 		lds r24,192
 410 010a 87FD      		sbrc r24,7
 411 010c 00C0      		rjmp .L33
 412               	.L39:
 413               	.LBE11:
 414               	.LBE10:
 192:USART.c       **** 		}
 193:USART.c       **** 	}
 194:USART.c       **** 	USART0_Flush();
 195:USART.c       **** 	sei();
 416               	.LM39:
 417               	/* #APP */
 418               	 ;  195 "USART.c" 1
 419 010e 7894      		sei
 420               	 ;  0 "" 2
 421               	/* #NOAPP */
 422 0110 0895      		ret
 423               	.L38:
 188:USART.c       **** 		}
 425               	.LM40:
 426 0112 2F5F      		subi r18,lo8(-(1))
 427 0114 00C0      		rjmp .L25
 435               	.Lscope6:
 436               	.global	serial_port0
 437               		.data
 440               	serial_port0:
 441 0000 0000 00   		.zero	3
 442 0003 02        		.byte	2
 443 0004 0000 0000 		.zero	4
 444 0008 0000      		.word	gs(put_char0)
 445 000a 0000      		.word	0
 446 000c 0000      		.word	0
 448               		.text
 450               	.Letext0:
 451               		.ident	"GCC: (GNU) 4.9.2"
 452               	.global __do_copy_data
DEFINED SYMBOLS
                            *ABS*:00000000 USART.c
     /tmp/cceVPGOo.s:2      *ABS*:0000003e __SP_H__
     /tmp/cceVPGOo.s:3      *ABS*:0000003d __SP_L__
     /tmp/cceVPGOo.s:4      *ABS*:0000003f __SREG__
     /tmp/cceVPGOo.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cceVPGOo.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cceVPGOo.s:118    .text:00000000 put_char0
     /tmp/cceVPGOo.s:147    .text:00000012 USART_Init
     /tmp/cceVPGOo.s:440    .data:00000000 serial_port0
     /tmp/cceVPGOo.s:254    .text:000000a6 USART_Transmit0
     /tmp/cceVPGOo.s:277    .text:000000b4 USART0_Flush
     /tmp/cceVPGOo.s:305    .text:000000c4 uart_getchar
     /tmp/cceVPGOo.s:332    .text:000000d2 waitResponce

UNDEFINED SYMBOLS
__udivmodsi4
__iob
__do_copy_data
