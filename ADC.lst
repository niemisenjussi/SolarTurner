   1               		.file	"ADC.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 104               	.global	GetVoltage
 106               	GetVoltage:
   1:ADC.c         **** #include <avr/io.h>
   2:ADC.c         **** #include <util/delay.h>
   3:ADC.c         **** #include "ADC.h"
   4:ADC.c         **** 
   5:ADC.c         **** #define ADC_PORT PORTC
   6:ADC.c         **** #define ADC_DIR  DDRC
   7:ADC.c         **** 
   8:ADC.c         **** uint16_t GetVoltage(uint8_t Sensor, uint8_t ADCRange)
   9:ADC.c         **** {
 108               	.LM0:
 109               	.LFBB1:
 110               	/* prologue: function */
 111               	/* frame size = 0 */
 112               	/* stack size = 0 */
 113               	.L__stack_usage = 0
  10:ADC.c         ****     ADMUX = Sensor+ADCRange;
 115               	.LM1:
 116 0000 860F      		add r24,r22
 117 0002 8093 7C00 		sts 124,r24
  11:ADC.c         ****     ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
 119               	.LM2:
 120 0006 87EC      		ldi r24,lo8(-57)
 121 0008 8093 7A00 		sts 122,r24
 122               	.L2:
  12:ADC.c         ****     
  13:ADC.c         ****     do {} while (bit_is_set(ADCSRA,6));
 124               	.LM3:
 125 000c 8091 7A00 		lds r24,122
 126 0010 86FD      		sbrc r24,6
 127 0012 00C0      		rjmp .L2
  14:ADC.c         ****     
  15:ADC.c         ****     return ADCW;     
 129               	.LM4:
 130 0014 8091 7800 		lds r24,120
 131 0018 9091 7900 		lds r25,120+1
  16:ADC.c         **** }
 133               	.LM5:
 134 001c 0895      		ret
 136               	.Lscope1:
 140               	.global	GetOverSampledVoltage
 142               	GetOverSampledVoltage:
  17:ADC.c         **** 
  18:ADC.c         **** uint32_t GetOverSampledVoltage(uint8_t Sensor, uint8_t ADCRange){
 144               	.LM6:
 145               	.LFBB2:
 146               	/* prologue: function */
 147               	/* frame size = 0 */
 148               	/* stack size = 0 */
 149               	.L__stack_usage = 0
 150               	.LBB17:
 151               	.LBB18:
  10:ADC.c         ****     ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
 153               	.LM7:
 154 001e 860F      		add r24,r22
 155 0020 8093 7C00 		sts 124,r24
  11:ADC.c         ****     
 157               	.LM8:
 158 0024 97EC      		ldi r25,lo8(-57)
 159 0026 9093 7A00 		sts 122,r25
 160               	.L6:
  13:ADC.c         ****     
 162               	.LM9:
 163 002a 9091 7A00 		lds r25,122
 164 002e 96FD      		sbrc r25,6
 165 0030 00C0      		rjmp .L6
  15:ADC.c         **** }
 167               	.LM10:
 168 0032 2091 7800 		lds r18,120
 169 0036 3091 7900 		lds r19,120+1
 170 003a 20E0      		ldi r18,0
 171 003c 31E0      		ldi r19,lo8(1)
 172               	.LBE18:
 173               	.LBE17:
  19:ADC.c         ****     GetVoltage(Sensor,ADCRange);
  20:ADC.c         ****     uint32_t tempvoltage = 0;
 175               	.LM11:
 176 003e 40E0      		ldi r20,0
 177 0040 50E0      		ldi r21,0
 178 0042 BA01      		movw r22,r20
 179               	.LBB19:
 180               	.LBB20:
 181               	.LBB21:
  11:ADC.c         ****     
 183               	.LM12:
 184 0044 A7EC      		ldi r26,lo8(-57)
 185               	.L8:
  10:ADC.c         ****     ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
 187               	.LM13:
 188 0046 8093 7C00 		sts 124,r24
  11:ADC.c         ****     
 190               	.LM14:
 191 004a A093 7A00 		sts 122,r26
 192               	.L7:
  13:ADC.c         ****     
 194               	.LM15:
 195 004e 9091 7A00 		lds r25,122
 196 0052 96FD      		sbrc r25,6
 197 0054 00C0      		rjmp .L7
  15:ADC.c         **** }
 199               	.LM16:
 200 0056 E091 7800 		lds r30,120
 201 005a F091 7900 		lds r31,120+1
 202               	.LBE21:
 203               	.LBE20:
  21:ADC.c         ****     for (uint16_t i=0;i < 256;i++){
  22:ADC.c         ****         tempvoltage += GetVoltage(Sensor, ADCRange);
 205               	.LM17:
 206 005e 4E0F      		add r20,r30
 207 0060 5F1F      		adc r21,r31
 208 0062 611D      		adc r22,__zero_reg__
 209 0064 711D      		adc r23,__zero_reg__
 210 0066 2150      		subi r18,1
 211 0068 3109      		sbc r19,__zero_reg__
  21:ADC.c         ****     for (uint16_t i=0;i < 256;i++){
 213               	.LM18:
 214 006a 01F4      		brne .L8
 215               	.LBE19:
  23:ADC.c         ****     }
  24:ADC.c         ****     tempvoltage = tempvoltage>>4;
 217               	.LM19:
 218 006c CB01      		movw r24,r22
 219 006e BA01      		movw r22,r20
 220 0070 24E0      		ldi r18,4
 221               		1:
 222 0072 9695      		lsr r25
 223 0074 8795      		ror r24
 224 0076 7795      		ror r23
 225 0078 6795      		ror r22
 226 007a 2A95      		dec r18
 227 007c 01F4      		brne 1b
  25:ADC.c         ****     return tempvoltage;
  26:ADC.c         **** }
 229               	.LM20:
 230 007e 0895      		ret
 232               	.Lscope2:
 234               	.global	initADC
 236               	initADC:
  27:ADC.c         **** 
  28:ADC.c         **** void initADC(void){
 238               	.LM21:
 239               	.LFBB3:
 240               	/* prologue: function */
 241               	/* frame size = 0 */
 242               	/* stack size = 0 */
 243               	.L__stack_usage = 0
  29:ADC.c         ****     ADC_DIR = 0x00;  //All input
 245               	.LM22:
 246 0080 17B8      		out 0x7,__zero_reg__
  30:ADC.c         ****     ADC_PORT = 0x00; //Pulldown
 248               	.LM23:
 249 0082 18B8      		out 0x8,__zero_reg__
 250 0084 0895      		ret
 252               	.Lscope3:
 257               	.global	AVGVoltage
 259               	AVGVoltage:
  31:ADC.c         **** }
  32:ADC.c         **** 
  33:ADC.c         **** 
  34:ADC.c         **** uint16_t AVGVoltage(uint8_t Sensor, uint8_t ADCRange, uint8_t num_of_samples){
 261               	.LM24:
 262               	.LFBB4:
 263 0086 CF92      		push r12
 264 0088 DF92      		push r13
 265 008a EF92      		push r14
 266 008c FF92      		push r15
 267               	/* prologue: function */
 268               	/* frame size = 0 */
 269               	/* stack size = 4 */
 270               	.L__stack_usage = 4
 271 008e 242F      		mov r18,r20
 272               	.LBB22:
 273               	.LBB23:
  10:ADC.c         ****     ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
 275               	.LM25:
 276 0090 860F      		add r24,r22
 277 0092 8093 7C00 		sts 124,r24
  11:ADC.c         ****     
 279               	.LM26:
 280 0096 97EC      		ldi r25,lo8(-57)
 281 0098 9093 7A00 		sts 122,r25
 282               	.L14:
  13:ADC.c         ****     
 284               	.LM27:
 285 009c 9091 7A00 		lds r25,122
 286 00a0 96FD      		sbrc r25,6
 287 00a2 00C0      		rjmp .L14
  15:ADC.c         **** }
 289               	.LM28:
 290 00a4 4091 7800 		lds r20,120
 291 00a8 5091 7900 		lds r21,120+1
 292               	.LBE23:
 293               	.LBE22:
 294               	.LBB24:
  35:ADC.c         ****     GetVoltage(Sensor,ADCRange);    
  36:ADC.c         ****     uint32_t res = 0;
  37:ADC.c         ****     for (uint8_t i=0; i<num_of_samples; i++){
 296               	.LM29:
 297 00ac 2223      		tst r18
 298 00ae 01F0      		breq .L18
 299 00b0 30E0      		ldi r19,0
 300 00b2 C12C      		mov r12,__zero_reg__
 301 00b4 D12C      		mov r13,__zero_reg__
 302 00b6 7601      		movw r14,r12
 303               	.LBB25:
 304               	.LBB26:
  11:ADC.c         ****     
 306               	.LM30:
 307 00b8 47EC      		ldi r20,lo8(-57)
 308               	.L17:
  10:ADC.c         ****     ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
 310               	.LM31:
 311 00ba 8093 7C00 		sts 124,r24
  11:ADC.c         ****     
 313               	.LM32:
 314 00be 4093 7A00 		sts 122,r20
 315               	.L16:
  13:ADC.c         ****     
 317               	.LM33:
 318 00c2 9091 7A00 		lds r25,122
 319 00c6 96FD      		sbrc r25,6
 320 00c8 00C0      		rjmp .L16
  15:ADC.c         **** }
 322               	.LM34:
 323 00ca E091 7800 		lds r30,120
 324 00ce F091 7900 		lds r31,120+1
 325               	.LBE26:
 326               	.LBE25:
  38:ADC.c         ****         res += GetVoltage(Sensor, ADCRange);
 328               	.LM35:
 329 00d2 CE0E      		add r12,r30
 330 00d4 DF1E      		adc r13,r31
 331 00d6 E11C      		adc r14,__zero_reg__
 332 00d8 F11C      		adc r15,__zero_reg__
 333               	.LBB27:
 334               	.LBB28:
 336               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 164:/usr/lib/avr/include/util/delay.h **** 
 165:/usr/lib/avr/include/util/delay.h **** #else
 166:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 167:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/avr/include/util/delay.h **** 	{
 172:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/avr/include/util/delay.h **** 		{
 176:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/avr/include/util/delay.h **** 		}
 180:/usr/lib/avr/include/util/delay.h **** 		return;
 181:/usr/lib/avr/include/util/delay.h **** 	}
 182:/usr/lib/avr/include/util/delay.h **** 	else
 183:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/avr/include/util/delay.h **** #endif
 186:/usr/lib/avr/include/util/delay.h **** }
 187:/usr/lib/avr/include/util/delay.h **** 
 188:/usr/lib/avr/include/util/delay.h **** /**
 189:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/avr/include/util/delay.h **** 
 191:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/avr/include/util/delay.h **** 
 193:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/avr/include/util/delay.h **** 
 196:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/avr/include/util/delay.h **** 
 198:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/avr/include/util/delay.h **** 
 202:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/avr/include/util/delay.h ****   
 207:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/avr/include/util/delay.h **** 
 211:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/avr/include/util/delay.h ****  
 214:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****  */
 223:/usr/lib/avr/include/util/delay.h **** void
 224:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/avr/include/util/delay.h **** {
 226:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 227:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 228:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 229:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 230:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 231:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 232:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 233:/usr/lib/avr/include/util/delay.h **** 
 234:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 235:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 236:/usr/lib/avr/include/util/delay.h **** 
 237:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 238:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 239:/usr/lib/avr/include/util/delay.h **** 
 240:/usr/lib/avr/include/util/delay.h **** 	#else
 241:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 242:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 243:/usr/lib/avr/include/util/delay.h **** 	#endif
 244:/usr/lib/avr/include/util/delay.h **** 
 245:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 338               	.LM36:
 339 00da 95E3      		ldi r25,lo8(53)
 340 00dc 9A95      	1:	dec r25
 341 00de 01F4      		brne 1b
 342 00e0 0000      		nop
 343               	.LBE28:
 344               	.LBE27:
 346               	.Ltext2:
  37:ADC.c         ****         res += GetVoltage(Sensor, ADCRange);
 348               	.LM37:
 349 00e2 3F5F      		subi r19,lo8(-(1))
 350 00e4 3213      		cpse r19,r18
 351 00e6 00C0      		rjmp .L17
 352               	.L15:
 353               	.LBE24:
  39:ADC.c         ****         _delay_us(10);
  40:ADC.c         ****     }
  41:ADC.c         ****     uint16_t final = res/num_of_samples;
 355               	.LM38:
 356 00e8 30E0      		ldi r19,0
 357 00ea 40E0      		ldi r20,0
 358 00ec 50E0      		ldi r21,0
 359 00ee C701      		movw r24,r14
 360 00f0 B601      		movw r22,r12
 361 00f2 0E94 0000 		call __udivmodsi4
  42:ADC.c         ****     return final;
  43:ADC.c         **** }
 363               	.LM39:
 364 00f6 C901      		movw r24,r18
 365               	/* epilogue start */
 366 00f8 FF90      		pop r15
 367 00fa EF90      		pop r14
 368 00fc DF90      		pop r13
 369 00fe CF90      		pop r12
 370 0100 0895      		ret
 371               	.L18:
  36:ADC.c         ****     for (uint8_t i=0; i<num_of_samples; i++){
 373               	.LM40:
 374 0102 C12C      		mov r12,__zero_reg__
 375 0104 D12C      		mov r13,__zero_reg__
 376 0106 7601      		movw r14,r12
 377 0108 00C0      		rjmp .L15
 385               	.Lscope4:
 389               	.global	Actuator_ADC
 391               	Actuator_ADC:
  44:ADC.c         **** 
  45:ADC.c         **** uint32_t Actuator_ADC(uint8_t Sensor, uint8_t ADCRange){
 393               	.LM41:
 394               	.LFBB5:
 395               	/* prologue: function */
 396               	/* frame size = 0 */
 397               	/* stack size = 0 */
 398               	.L__stack_usage = 0
 399 010a 860F      		add r24,r22
 401               	.LM42:
 402 010c 2AE0      		ldi r18,lo8(10)
  46:ADC.c         ****     uint32_t res = 0;
 404               	.LM43:
 405 010e 40E0      		ldi r20,0
 406 0110 50E0      		ldi r21,0
 407 0112 BA01      		movw r22,r20
 408               	.LBB29:
 409               	.LBB30:
 410               	.LBB31:
  11:ADC.c         ****     
 412               	.LM44:
 413 0114 37EC      		ldi r19,lo8(-57)
 414               	.L24:
  10:ADC.c         ****     ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
 416               	.LM45:
 417 0116 8093 7C00 		sts 124,r24
  11:ADC.c         ****     
 419               	.LM46:
 420 011a 3093 7A00 		sts 122,r19
 421               	.L23:
  13:ADC.c         ****     
 423               	.LM47:
 424 011e 9091 7A00 		lds r25,122
 425 0122 96FD      		sbrc r25,6
 426 0124 00C0      		rjmp .L23
  15:ADC.c         **** }
 428               	.LM48:
 429 0126 E091 7800 		lds r30,120
 430 012a F091 7900 		lds r31,120+1
 431               	.LBE31:
 432               	.LBE30:
  47:ADC.c         ****     for (uint8_t i=0; i<10;i++){
  48:ADC.c         ****         res += GetVoltage(Sensor, ADCRange);
 434               	.LM49:
 435 012e 4E0F      		add r20,r30
 436 0130 5F1F      		adc r21,r31
 437 0132 611D      		adc r22,__zero_reg__
 438 0134 711D      		adc r23,__zero_reg__
 439 0136 2150      		subi r18,lo8(-(-1))
  47:ADC.c         ****     for (uint8_t i=0; i<10;i++){
 441               	.LM50:
 442 0138 01F4      		brne .L24
 443               	.LBE29:
  49:ADC.c         ****     }
  50:ADC.c         ****     return res;
  51:ADC.c         **** }
 445               	.LM51:
 446 013a CB01      		movw r24,r22
 447 013c BA01      		movw r22,r20
 448 013e 0895      		ret
 453               	.Lscope5:
 455               	.Letext0:
 456               		.ident	"GCC: (GNU) 4.9.2"
DEFINED SYMBOLS
                            *ABS*:00000000 ADC.c
     /tmp/cc6XIDvX.s:2      *ABS*:0000003e __SP_H__
     /tmp/cc6XIDvX.s:3      *ABS*:0000003d __SP_L__
     /tmp/cc6XIDvX.s:4      *ABS*:0000003f __SREG__
     /tmp/cc6XIDvX.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cc6XIDvX.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cc6XIDvX.s:106    .text:00000000 GetVoltage
     /tmp/cc6XIDvX.s:142    .text:0000001e GetOverSampledVoltage
     /tmp/cc6XIDvX.s:236    .text:00000080 initADC
     /tmp/cc6XIDvX.s:259    .text:00000086 AVGVoltage
     /tmp/cc6XIDvX.s:391    .text:0000010a Actuator_ADC

UNDEFINED SYMBOLS
__udivmodsi4
