   1               		.file	"ADC.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 104               	.global	GetVoltage
 106               	GetVoltage:
   1:ADC.c         **** #include <avr/io.h>
   2:ADC.c         **** #include <util/delay.h>
   3:ADC.c         **** #include "ADC.h"
   4:ADC.c         **** 
   5:ADC.c         **** #define ADC_PORT PORTC
   6:ADC.c         **** #define ADC_DIR  DDRC
   7:ADC.c         **** 
   8:ADC.c         **** uint16_t GetVoltage(uint8_t Sensor, uint8_t ADCRange)
   9:ADC.c         **** {
 108               	.LM0:
 109               	.LFBB1:
 110               	/* prologue: function */
 111               	/* frame size = 0 */
 112               	/* stack size = 0 */
 113               	.L__stack_usage = 0
  10:ADC.c         ****     ADMUX = Sensor+ADCRange;
 115               	.LM1:
 116 0000 860F      		add r24,r22
 117 0002 8093 7C00 		sts 124,r24
  11:ADC.c         ****     ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
 119               	.LM2:
 120 0006 87EC      		ldi r24,lo8(-57)
 121 0008 8093 7A00 		sts 122,r24
 122               	.L2:
  12:ADC.c         ****     
  13:ADC.c         ****     do {} while (bit_is_set(ADCSRA,6));
 124               	.LM3:
 125 000c 8091 7A00 		lds r24,122
 126 0010 86FD      		sbrc r24,6
 127 0012 00C0      		rjmp .L2
  14:ADC.c         ****     
  15:ADC.c         ****     return ADCW;     
 129               	.LM4:
 130 0014 8091 7800 		lds r24,120
 131 0018 9091 7900 		lds r25,120+1
  16:ADC.c         **** }
 133               	.LM5:
 134 001c 0895      		ret
 136               	.Lscope1:
 138               	.global	initADC
 140               	initADC:
  17:ADC.c         **** 
  18:ADC.c         **** void initADC(void){
 142               	.LM6:
 143               	.LFBB2:
 144               	/* prologue: function */
 145               	/* frame size = 0 */
 146               	/* stack size = 0 */
 147               	.L__stack_usage = 0
  19:ADC.c         ****     ADC_DIR = 0x00;  //All input
 149               	.LM7:
 150 001e 17B8      		out 0x7,__zero_reg__
  20:ADC.c         ****     ADC_PORT = 0x00; //Pulldown
 152               	.LM8:
 153 0020 18B8      		out 0x8,__zero_reg__
 154 0022 0895      		ret
 156               	.Lscope2:
 161               	.global	AVGVoltage
 163               	AVGVoltage:
  21:ADC.c         **** }
  22:ADC.c         **** 
  23:ADC.c         **** 
  24:ADC.c         **** uint16_t AVGVoltage(uint8_t Sensor, uint8_t ADCRange, uint8_t num_of_samples){
 165               	.LM9:
 166               	.LFBB3:
 167 0024 CF92      		push r12
 168 0026 DF92      		push r13
 169 0028 EF92      		push r14
 170 002a FF92      		push r15
 171               	/* prologue: function */
 172               	/* frame size = 0 */
 173               	/* stack size = 4 */
 174               	.L__stack_usage = 4
 175 002c 242F      		mov r18,r20
 176               	.LBB12:
 177               	.LBB13:
  10:ADC.c         ****     ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
 179               	.LM10:
 180 002e 860F      		add r24,r22
 181 0030 8093 7C00 		sts 124,r24
  11:ADC.c         ****     
 183               	.LM11:
 184 0034 97EC      		ldi r25,lo8(-57)
 185 0036 9093 7A00 		sts 122,r25
 186               	.L7:
  13:ADC.c         ****     
 188               	.LM12:
 189 003a 9091 7A00 		lds r25,122
 190 003e 96FD      		sbrc r25,6
 191 0040 00C0      		rjmp .L7
  15:ADC.c         **** }
 193               	.LM13:
 194 0042 4091 7800 		lds r20,120
 195 0046 5091 7900 		lds r21,120+1
 196               	.LBE13:
 197               	.LBE12:
 198               	.LBB14:
  25:ADC.c         ****     GetVoltage(Sensor,ADCRange);    
  26:ADC.c         ****     uint32_t res = 0;
  27:ADC.c         ****     for (uint8_t i=0; i<num_of_samples; i++){
 200               	.LM14:
 201 004a 2223      		tst r18
 202 004c 01F0      		breq .L11
 203 004e 30E0      		ldi r19,0
 204 0050 C12C      		mov r12,__zero_reg__
 205 0052 D12C      		mov r13,__zero_reg__
 206 0054 7601      		movw r14,r12
 207               	.LBB15:
 208               	.LBB16:
  11:ADC.c         ****     
 210               	.LM15:
 211 0056 47EC      		ldi r20,lo8(-57)
 212               	.L10:
  10:ADC.c         ****     ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
 214               	.LM16:
 215 0058 8093 7C00 		sts 124,r24
  11:ADC.c         ****     
 217               	.LM17:
 218 005c 4093 7A00 		sts 122,r20
 219               	.L9:
  13:ADC.c         ****     
 221               	.LM18:
 222 0060 9091 7A00 		lds r25,122
 223 0064 96FD      		sbrc r25,6
 224 0066 00C0      		rjmp .L9
  15:ADC.c         **** }
 226               	.LM19:
 227 0068 E091 7800 		lds r30,120
 228 006c F091 7900 		lds r31,120+1
 229               	.LBE16:
 230               	.LBE15:
  28:ADC.c         ****         res += GetVoltage(Sensor, ADCRange);
 232               	.LM20:
 233 0070 CE0E      		add r12,r30
 234 0072 DF1E      		adc r13,r31
 235 0074 E11C      		adc r14,__zero_reg__
 236 0076 F11C      		adc r15,__zero_reg__
 237               	.LBB17:
 238               	.LBB18:
 240               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 164:/usr/lib/avr/include/util/delay.h **** 
 165:/usr/lib/avr/include/util/delay.h **** #else
 166:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 167:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/avr/include/util/delay.h **** 	{
 172:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/avr/include/util/delay.h **** 		{
 176:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/avr/include/util/delay.h **** 		}
 180:/usr/lib/avr/include/util/delay.h **** 		return;
 181:/usr/lib/avr/include/util/delay.h **** 	}
 182:/usr/lib/avr/include/util/delay.h **** 	else
 183:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/avr/include/util/delay.h **** #endif
 186:/usr/lib/avr/include/util/delay.h **** }
 187:/usr/lib/avr/include/util/delay.h **** 
 188:/usr/lib/avr/include/util/delay.h **** /**
 189:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/avr/include/util/delay.h **** 
 191:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/avr/include/util/delay.h **** 
 193:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/avr/include/util/delay.h **** 
 196:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/avr/include/util/delay.h **** 
 198:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/avr/include/util/delay.h **** 
 202:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/avr/include/util/delay.h ****   
 207:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/avr/include/util/delay.h **** 
 211:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/avr/include/util/delay.h ****  
 214:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****  */
 223:/usr/lib/avr/include/util/delay.h **** void
 224:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/avr/include/util/delay.h **** {
 226:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 227:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 228:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 229:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 230:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 231:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 232:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 233:/usr/lib/avr/include/util/delay.h **** 
 234:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 235:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 236:/usr/lib/avr/include/util/delay.h **** 
 237:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 238:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 239:/usr/lib/avr/include/util/delay.h **** 
 240:/usr/lib/avr/include/util/delay.h **** 	#else
 241:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 242:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 243:/usr/lib/avr/include/util/delay.h **** 	#endif
 244:/usr/lib/avr/include/util/delay.h **** 
 245:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 242               	.LM21:
 243 0078 E7EC      		ldi r30,lo8(199)
 244 007a F0E0      		ldi r31,hi8(199)
 245 007c 3197      	1:	sbiw r30,1
 246 007e 01F4      		brne 1b
 247 0080 00C0      		rjmp .
 248 0082 0000      		nop
 249               	.LBE18:
 250               	.LBE17:
 252               	.Ltext2:
  27:ADC.c         ****         res += GetVoltage(Sensor, ADCRange);
 254               	.LM22:
 255 0084 3F5F      		subi r19,lo8(-(1))
 256 0086 3213      		cpse r19,r18
 257 0088 00C0      		rjmp .L10
 258               	.L8:
 259               	.LBE14:
  29:ADC.c         ****         _delay_us(50);
  30:ADC.c         ****     }
  31:ADC.c         ****     uint16_t final = res/num_of_samples;
 261               	.LM23:
 262 008a 30E0      		ldi r19,0
 263 008c 40E0      		ldi r20,0
 264 008e 50E0      		ldi r21,0
 265 0090 C701      		movw r24,r14
 266 0092 B601      		movw r22,r12
 267 0094 0E94 0000 		call __udivmodsi4
  32:ADC.c         ****     return final;
  33:ADC.c         **** }
 269               	.LM24:
 270 0098 C901      		movw r24,r18
 271               	/* epilogue start */
 272 009a FF90      		pop r15
 273 009c EF90      		pop r14
 274 009e DF90      		pop r13
 275 00a0 CF90      		pop r12
 276 00a2 0895      		ret
 277               	.L11:
  26:ADC.c         ****     for (uint8_t i=0; i<num_of_samples; i++){
 279               	.LM25:
 280 00a4 C12C      		mov r12,__zero_reg__
 281 00a6 D12C      		mov r13,__zero_reg__
 282 00a8 7601      		movw r14,r12
 283 00aa 00C0      		rjmp .L8
 291               	.Lscope3:
 295               	.global	Actuator_ADC
 297               	Actuator_ADC:
  34:ADC.c         **** 
  35:ADC.c         **** uint32_t Actuator_ADC(uint8_t Sensor, uint8_t ADCRange){
 299               	.LM26:
 300               	.LFBB4:
 301               	/* prologue: function */
 302               	/* frame size = 0 */
 303               	/* stack size = 0 */
 304               	.L__stack_usage = 0
 305 00ac 860F      		add r24,r22
 307               	.LM27:
 308 00ae 2AE0      		ldi r18,lo8(10)
  36:ADC.c         ****     uint32_t res = 0;
 310               	.LM28:
 311 00b0 40E0      		ldi r20,0
 312 00b2 50E0      		ldi r21,0
 313 00b4 BA01      		movw r22,r20
 314               	.LBB19:
 315               	.LBB20:
 316               	.LBB21:
  11:ADC.c         ****     
 318               	.LM29:
 319 00b6 37EC      		ldi r19,lo8(-57)
 320               	.L17:
  10:ADC.c         ****     ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
 322               	.LM30:
 323 00b8 8093 7C00 		sts 124,r24
  11:ADC.c         ****     
 325               	.LM31:
 326 00bc 3093 7A00 		sts 122,r19
 327               	.L16:
  13:ADC.c         ****     
 329               	.LM32:
 330 00c0 9091 7A00 		lds r25,122
 331 00c4 96FD      		sbrc r25,6
 332 00c6 00C0      		rjmp .L16
  15:ADC.c         **** }
 334               	.LM33:
 335 00c8 E091 7800 		lds r30,120
 336 00cc F091 7900 		lds r31,120+1
 337               	.LBE21:
 338               	.LBE20:
  37:ADC.c         ****     for (uint8_t i=0; i<10;i++){
  38:ADC.c         ****         res += GetVoltage(Sensor, ADCRange);
 340               	.LM34:
 341 00d0 4E0F      		add r20,r30
 342 00d2 5F1F      		adc r21,r31
 343 00d4 611D      		adc r22,__zero_reg__
 344 00d6 711D      		adc r23,__zero_reg__
 345 00d8 2150      		subi r18,lo8(-(-1))
  37:ADC.c         ****     for (uint8_t i=0; i<10;i++){
 347               	.LM35:
 348 00da 01F4      		brne .L17
 349               	.LBE19:
  39:ADC.c         ****     }
  40:ADC.c         ****     return res;
  41:ADC.c         **** }
 351               	.LM36:
 352 00dc CB01      		movw r24,r22
 353 00de BA01      		movw r22,r20
 354 00e0 0895      		ret
 359               	.Lscope4:
 361               	.Letext0:
 362               		.ident	"GCC: (GNU) 4.9.2"
DEFINED SYMBOLS
                            *ABS*:00000000 ADC.c
     /tmp/cccDwA1z.s:2      *ABS*:0000003e __SP_H__
     /tmp/cccDwA1z.s:3      *ABS*:0000003d __SP_L__
     /tmp/cccDwA1z.s:4      *ABS*:0000003f __SREG__
     /tmp/cccDwA1z.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cccDwA1z.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cccDwA1z.s:106    .text:00000000 GetVoltage
     /tmp/cccDwA1z.s:140    .text:0000001e initADC
     /tmp/cccDwA1z.s:163    .text:00000024 AVGVoltage
     /tmp/cccDwA1z.s:297    .text:000000ac Actuator_ADC

UNDEFINED SYMBOLS
__udivmodsi4
