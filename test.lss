
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  00003242  000032d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003242  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ce  00800232  00800232  00003408  2**0
                  ALLOC
  3 .stab         000031a4  00000000  00000000  00003408  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c45  00000000  00000000  000065ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000081f1  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008204  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0f c1       	rjmp	.+542    	; 0x220 <__ctors_end>
       2:	00 00       	nop
       4:	2a c1       	rjmp	.+596    	; 0x25a <__bad_interrupt>
       6:	00 00       	nop
       8:	28 c1       	rjmp	.+592    	; 0x25a <__bad_interrupt>
       a:	00 00       	nop
       c:	26 c1       	rjmp	.+588    	; 0x25a <__bad_interrupt>
       e:	00 00       	nop
      10:	24 c1       	rjmp	.+584    	; 0x25a <__bad_interrupt>
      12:	00 00       	nop
      14:	22 c1       	rjmp	.+580    	; 0x25a <__bad_interrupt>
      16:	00 00       	nop
      18:	20 c1       	rjmp	.+576    	; 0x25a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1e c1       	rjmp	.+572    	; 0x25a <__bad_interrupt>
      1e:	00 00       	nop
      20:	1c c1       	rjmp	.+568    	; 0x25a <__bad_interrupt>
      22:	00 00       	nop
      24:	1a c1       	rjmp	.+564    	; 0x25a <__bad_interrupt>
      26:	00 00       	nop
      28:	18 c1       	rjmp	.+560    	; 0x25a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	17 c1       	rjmp	.+558    	; 0x25c <__vector_11>
      2e:	00 00       	nop
      30:	14 c1       	rjmp	.+552    	; 0x25a <__bad_interrupt>
      32:	00 00       	nop
      34:	12 c1       	rjmp	.+548    	; 0x25a <__bad_interrupt>
      36:	00 00       	nop
      38:	10 c1       	rjmp	.+544    	; 0x25a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0e c1       	rjmp	.+540    	; 0x25a <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c c1       	rjmp	.+536    	; 0x25a <__bad_interrupt>
      42:	00 00       	nop
      44:	0a c1       	rjmp	.+532    	; 0x25a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__vector_18>
      4c:	06 c1       	rjmp	.+524    	; 0x25a <__bad_interrupt>
      4e:	00 00       	nop
      50:	04 c1       	rjmp	.+520    	; 0x25a <__bad_interrupt>
      52:	00 00       	nop
      54:	02 c1       	rjmp	.+516    	; 0x25a <__bad_interrupt>
      56:	00 00       	nop
      58:	00 c1       	rjmp	.+512    	; 0x25a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fe c0       	rjmp	.+508    	; 0x25a <__bad_interrupt>
      5e:	00 00       	nop
      60:	fc c0       	rjmp	.+504    	; 0x25a <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c0       	rjmp	.+500    	; 0x25a <__bad_interrupt>
      66:	00 00       	nop
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	6e 61       	ori	r22, 0x1E	; 30
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2177>:
      9a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      aa:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      ba:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      ca:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      da:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      ea:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      fa:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     10a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     11a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     12a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     13a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     14a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     15a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     16a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     17a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     18a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000198 <pstr_nan>:
     198:	4e 41 4e                                            NAN

0000019b <pstr_inity>:
     19b:	49 4e 49 54 59                                      INITY

000001a0 <pstr_inf>:
     1a0:	49 4e 46                                            INF

000001a3 <pwr_m10>:
     1a3:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     1b3:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001bb <pwr_p10>:
     1bb:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1cb:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000001d3 <__c.2374>:
     1d3:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     1e3:	47 00                                               G.

000001e5 <pstr_an>:
     1e5:	61 6e 00                                            an.

000001e8 <pstr_nfinity>:
     1e8:	6e 66 69 6e 69 74 79 00                             nfinity.

000001f0 <pwr_m10>:
     1f0:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     200:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000208 <pwr_p10>:
     208:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     218:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000220 <__ctors_end>:
     220:	11 24       	eor	r1, r1
     222:	1f be       	out	0x3f, r1	; 63
     224:	cf ef       	ldi	r28, 0xFF	; 255
     226:	d8 e0       	ldi	r29, 0x08	; 8
     228:	de bf       	out	0x3e, r29	; 62
     22a:	cd bf       	out	0x3d, r28	; 61

0000022c <__do_copy_data>:
     22c:	12 e0       	ldi	r17, 0x02	; 2
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b1 e0       	ldi	r27, 0x01	; 1
     232:	e2 e4       	ldi	r30, 0x42	; 66
     234:	f2 e3       	ldi	r31, 0x32	; 50
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x10>
     238:	05 90       	lpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	a2 33       	cpi	r26, 0x32	; 50
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0xc>

00000242 <__do_clear_bss>:
     242:	24 e0       	ldi	r18, 0x04	; 4
     244:	a2 e3       	ldi	r26, 0x32	; 50
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	a0 30       	cpi	r26, 0x00	; 0
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <main>
     256:	0c 94 1f 19 	jmp	0x323e	; 0x323e <_exit>

0000025a <__bad_interrupt>:
     25a:	d2 ce       	rjmp	.-604    	; 0x0 <__vectors>

0000025c <__vector_11>:
#define DISABLE_LED LED_PORT &= ~(1<<LED_PIN_NUM);
#define ENABLE_LED LED_PORT |= (1<<LED_PIN_NUM);
#define TOGGLE_LED LED_PORT ^= (1<<LED_PIN_NUM);

//16bit timer interrupt
ISR(TIMER1_COMPA_vect){
     25c:	1f 92       	push	r1
     25e:	0f 92       	push	r0
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	0f 92       	push	r0
     264:	11 24       	eor	r1, r1
   // TOGGLE_LED
}
     266:	0f 90       	pop	r0
     268:	0f be       	out	0x3f, r0	; 63
     26a:	0f 90       	pop	r0
     26c:	1f 90       	pop	r1
     26e:	18 95       	reti

00000270 <initSystemTimer>:

void initSystemTimer(void){
    TCCR1A = 0x00; // WGM11 = 0, WGM10 = 0   => CTC mode
     270:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    // clock frequency = 16MHz / 1024 = 15625Hz
    TCCR1B = 0x08 + 0x05; //WGM12 = 1, WGM 13 = 0        => CTC mode, Clock divider 1024 = 0x05
     274:	8d e0       	ldi	r24, 0x0D	; 13
     276:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    OCR1AH = 0x05; //Zero this when tests are done
     27a:	85 e0       	ldi	r24, 0x05	; 5
     27c:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    OCR1AL = 0x64;  // interrupt 100 times per second 15625/156~about 100 
     280:	84 e6       	ldi	r24, 0x64	; 100
     282:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    //Set interrupt to TIMER1 COMPA
    TIMSK1 = 0x02; //OCIEA enabled
     286:	82 e0       	ldi	r24, 0x02	; 2
     288:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    GTCCR = 0x00;    
     28c:	13 bc       	out	0x23, r1	; 35
     28e:	08 95       	ret

00000290 <initLED>:
}
void initLED(void){
    LED_DDR |= (1<<LED_PIN_NUM); 
     290:	25 9a       	sbi	0x04, 5	; 4
     292:	08 95       	ret

00000294 <put_char0>:



int put_char0(char c, FILE *stream){
	 //if (c == '\n') put_char0('\r', stream);
	 loop_until_bit_is_set(UCSR0A, UDRE0);
     294:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     298:	95 ff       	sbrs	r25, 5
     29a:	fc cf       	rjmp	.-8      	; 0x294 <put_char0>
	 UDR0 = c;
     29c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	 return 0;
}
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	08 95       	ret

000002a6 <USART_Init>:
	 loop_until_bit_is_set(UCSR3A, UDRE3);
	 UDR3 = c;
	 return 0;
}
*/
void USART_Init(FILE *port0, uint32_t br0){
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	ec 01       	movw	r28, r24
	uint32_t MYUBRR = 0;
	//int MYUBRR = 16; // 16 = 115200, 34 = 57600
	if (port0 != NULL){
     2ac:	89 2b       	or	r24, r25
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <USART_Init+0xc>
     2b0:	41 c0       	rjmp	.+130    	; 0x334 <USART_Init+0x8e>
		MYUBRR = F_CPU/(8*br0)-1;
     2b2:	44 0f       	add	r20, r20
     2b4:	55 1f       	adc	r21, r21
     2b6:	66 1f       	adc	r22, r22
     2b8:	77 1f       	adc	r23, r23
     2ba:	44 0f       	add	r20, r20
     2bc:	55 1f       	adc	r21, r21
     2be:	66 1f       	adc	r22, r22
     2c0:	77 1f       	adc	r23, r23
     2c2:	9a 01       	movw	r18, r20
     2c4:	ab 01       	movw	r20, r22
     2c6:	22 0f       	add	r18, r18
     2c8:	33 1f       	adc	r19, r19
     2ca:	44 1f       	adc	r20, r20
     2cc:	55 1f       	adc	r21, r21
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	74 e2       	ldi	r23, 0x24	; 36
     2d2:	84 ef       	ldi	r24, 0xF4	; 244
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 c7 14 	call	0x298e	; 0x298e <__udivmodsi4>
     2da:	ba 01       	movw	r22, r20
     2dc:	a9 01       	movw	r20, r18
     2de:	41 50       	subi	r20, 0x01	; 1
     2e0:	51 09       	sbc	r21, r1
     2e2:	61 09       	sbc	r22, r1
     2e4:	71 09       	sbc	r23, r1
		//DEbug serial
		DDRD |= 0x02; //TXD0 output
     2e6:	51 9a       	sbi	0x0a, 1	; 10
		DDRD &= ~(1<<0); //RXD0 input
     2e8:	50 98       	cbi	0x0a, 0	; 10
		UBRR0H = (uint8_t)(MYUBRR>>8);
     2ea:	bb 27       	eor	r27, r27
     2ec:	a7 2f       	mov	r26, r23
     2ee:	96 2f       	mov	r25, r22
     2f0:	85 2f       	mov	r24, r21
     2f2:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		UBRR0L = (uint8_t)MYUBRR;
     2f6:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		UCSR0B |= (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); //|(1<<TXCIE0);
     2fa:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     2fe:	88 69       	ori	r24, 0x98	; 152
     300:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     304:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     308:	86 60       	ori	r24, 0x06	; 6
     30a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		UCSR0A |= (1<<U2X0);
     30e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     312:	82 60       	ori	r24, 0x02	; 2
     314:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		*port0 = serial_port0;
     318:	8e e0       	ldi	r24, 0x0E	; 14
     31a:	e0 e0       	ldi	r30, 0x00	; 0
     31c:	f1 e0       	ldi	r31, 0x01	; 1
     31e:	de 01       	movw	r26, r28
     320:	01 90       	ld	r0, Z+
     322:	0d 92       	st	X+, r0
     324:	8a 95       	dec	r24
     326:	e1 f7       	brne	.-8      	; 0x320 <USART_Init+0x7a>
		//if (defaultport == 0){
		stdout = &serial_port0; //Required for printf init
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <__iob+0x3>
     330:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <__iob+0x2>
		*port3 = serial_port3;
		if (defaultport == 3){
			stdout = &serial_port3; //Required for printf init
		}
	}*/
}
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <USART_Transmit0>:

void USART_Transmit0( unsigned char data ){
	while ( !( UCSR0A & (1<<UDRE0)) );
     33a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     33e:	95 ff       	sbrs	r25, 5
     340:	fc cf       	rjmp	.-8      	; 0x33a <USART_Transmit0>
	UDR0 = data;
     342:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     346:	08 95       	ret

00000348 <USART0_Flush>:
/*void USART_Transmit(unsigned char data){   
	while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0 = data;
}*/

void USART0_Flush( void ){
     348:	02 c0       	rjmp	.+4      	; 0x34e <USART0_Flush+0x6>
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ){
		dummy = UDR0;
     34a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	UDR0 = data;
}*/

void USART0_Flush( void ){
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ){
     34e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     352:	87 fd       	sbrc	r24, 7
     354:	fa cf       	rjmp	.-12     	; 0x34a <USART0_Flush+0x2>
     356:	08 95       	ret

00000358 <uart_getchar>:
}
*/

unsigned char uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
     358:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     35c:	87 ff       	sbrs	r24, 7
     35e:	fc cf       	rjmp	.-8      	; 0x358 <uart_getchar>
    return(UDR0);
     360:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
     364:	08 95       	ret

00000366 <waitResponce>:


void waitResponce(const char *string, uint8_t length){
     366:	ac 01       	movw	r20, r24
	cli();
     368:	f8 94       	cli
	uint8_t match=0;
     36a:	20 e0       	ldi	r18, 0x00	; 0
	while(length != match){
     36c:	62 17       	cp	r22, r18
     36e:	a9 f0       	breq	.+42     	; 0x39a <waitResponce+0x34>
#include <avr/io.h>	

#define USART_FREQ 16000000UL

__attribute__((always_inline)) inline static uint8_t USART_Receive0(void) {
	while ( !(UCSR0A & (1<<RXC0)) );
     370:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     374:	97 ff       	sbrs	r25, 7
     376:	fc cf       	rjmp	.-8      	; 0x370 <waitResponce+0xa>
	return UDR0;
     378:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		if (USART_Receive0() == pgm_read_byte(string+match)){
     37c:	fa 01       	movw	r30, r20
     37e:	e2 0f       	add	r30, r18
     380:	f1 1d       	adc	r31, r1
     382:	e4 91       	lpm	r30, Z
     384:	e9 17       	cp	r30, r25
     386:	79 f0       	breq	.+30     	; 0x3a6 <waitResponce+0x40>
			match ++;
		}
		else{
			match = 0;
     388:	20 e0       	ldi	r18, 0x00	; 0


void waitResponce(const char *string, uint8_t length){
	cli();
	uint8_t match=0;
	while(length != match){
     38a:	61 11       	cpse	r22, r1
     38c:	f1 cf       	rjmp	.-30     	; 0x370 <waitResponce+0xa>
	UDR0 = data;
}*/

void USART0_Flush( void ){
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ){
     38e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     392:	87 ff       	sbrs	r24, 7
     394:	06 c0       	rjmp	.+12     	; 0x3a2 <waitResponce+0x3c>
		dummy = UDR0;
     396:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	UDR0 = data;
}*/

void USART0_Flush( void ){
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ){
     39a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     39e:	87 fd       	sbrc	r24, 7
     3a0:	fa cf       	rjmp	.-12     	; 0x396 <waitResponce+0x30>
		else{
			match = 0;
		}
	}
	USART0_Flush();
	sei();
     3a2:	78 94       	sei
     3a4:	08 95       	ret
void waitResponce(const char *string, uint8_t length){
	cli();
	uint8_t match=0;
	while(length != match){
		if (USART_Receive0() == pgm_read_byte(string+match)){
			match ++;
     3a6:	2f 5f       	subi	r18, 0xFF	; 255
     3a8:	e1 cf       	rjmp	.-62     	; 0x36c <waitResponce+0x6>

000003aa <GetVoltage>:
#define ADC_DIR  DDRC

uint16_t GetVoltage(uint8_t Sensor, uint8_t ADCRange)
{
    int Voltage = 0;
    ADMUX = Sensor+ADCRange;
     3aa:	86 0f       	add	r24, r22
     3ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
     3b0:	87 ec       	ldi	r24, 0xC7	; 199
     3b2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    
    do {} while (bit_is_set(ADCSRA,6));
     3b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3ba:	86 fd       	sbrc	r24, 6
     3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <GetVoltage+0xc>
    
    Voltage = ADCW;     
     3be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     3c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     3c6:	97 ff       	sbrs	r25, 7
    
    if (Voltage < 0) {Voltage = 0;}
    
    return Voltage;
}
     3c8:	08 95       	ret
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	08 95       	ret

000003d0 <initADC>:

void initADC(void){
    ADC_DIR = 0x00;  //All input
     3d0:	17 b8       	out	0x07, r1	; 7
    ADC_PORT = 0x00; //Pulldown
     3d2:	18 b8       	out	0x08, r1	; 8
     3d4:	08 95       	ret

000003d6 <AVGVoltage>:
}


uint16_t AVGVoltage(uint8_t Sensor, uint8_t ADCRange, uint8_t num_of_samples){
     3d6:	cf 92       	push	r12
     3d8:	df 92       	push	r13
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
    
    uint32_t res = 0;
    for (uint8_t i=0; i<num_of_samples; i++){
     3e2:	44 23       	and	r20, r20
     3e4:	b1 f1       	breq	.+108    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
     3e6:	86 0f       	add	r24, r22
     3e8:	50 e0       	ldi	r21, 0x00	; 0
     3ea:	c1 2c       	mov	r12, r1
     3ec:	d1 2c       	mov	r13, r1
     3ee:	76 01       	movw	r14, r12

uint16_t GetVoltage(uint8_t Sensor, uint8_t ADCRange)
{
    int Voltage = 0;
    ADMUX = Sensor+ADCRange;
    ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
     3f0:	67 ec       	ldi	r22, 0xC7	; 199
#define ADC_DIR  DDRC

uint16_t GetVoltage(uint8_t Sensor, uint8_t ADCRange)
{
    int Voltage = 0;
    ADMUX = Sensor+ADCRange;
     3f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
     3f6:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    
    do {} while (bit_is_set(ADCSRA,6));
     3fa:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3fe:	96 fd       	sbrc	r25, 6
     400:	fc cf       	rjmp	.-8      	; 0x3fa <AVGVoltage+0x24>
    
    Voltage = ADCW;     
     402:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     406:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     40a:	17 fd       	sbrc	r17, 7
     40c:	1f c0       	rjmp	.+62     	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>

uint16_t AVGVoltage(uint8_t Sensor, uint8_t ADCRange, uint8_t num_of_samples){
    
    uint32_t res = 0;
    for (uint8_t i=0; i<num_of_samples; i++){
        res += GetVoltage(Sensor, ADCRange);
     40e:	01 2e       	mov	r0, r17
     410:	00 0c       	add	r0, r0
     412:	22 0b       	sbc	r18, r18
     414:	33 0b       	sbc	r19, r19
     416:	c0 0e       	add	r12, r16
     418:	d1 1e       	adc	r13, r17
     41a:	e2 1e       	adc	r14, r18
     41c:	f3 1e       	adc	r15, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     41e:	95 e3       	ldi	r25, 0x35	; 53
     420:	9a 95       	dec	r25
     422:	f1 f7       	brne	.-4      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
     424:	00 00       	nop


uint16_t AVGVoltage(uint8_t Sensor, uint8_t ADCRange, uint8_t num_of_samples){
    
    uint32_t res = 0;
    for (uint8_t i=0; i<num_of_samples; i++){
     426:	5f 5f       	subi	r21, 0xFF	; 255
     428:	54 13       	cpse	r21, r20
     42a:	e3 cf       	rjmp	.-58     	; 0x3f2 <AVGVoltage+0x1c>
        res += GetVoltage(Sensor, ADCRange);
        _delay_us(10);
    }
    uint16_t final = res/num_of_samples;
     42c:	24 2f       	mov	r18, r20
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	c7 01       	movw	r24, r14
     436:	b6 01       	movw	r22, r12
     438:	0e 94 c7 14 	call	0x298e	; 0x298e <__udivmodsi4>
    return final;
}
     43c:	c9 01       	movw	r24, r18
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	df 90       	pop	r13
     448:	cf 90       	pop	r12
     44a:	08 95       	ret
     44c:	00 e0       	ldi	r16, 0x00	; 0
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	de cf       	rjmp	.-68     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
}


uint16_t AVGVoltage(uint8_t Sensor, uint8_t ADCRange, uint8_t num_of_samples){
    
    uint32_t res = 0;
     452:	c1 2c       	mov	r12, r1
     454:	d1 2c       	mov	r13, r1
     456:	76 01       	movw	r14, r12
     458:	e9 cf       	rjmp	.-46     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>

0000045a <angleConversion>:
}



//Returns angle between -90.0 - 90.0, input value is in millimeters.
float angleConversion(uint16_t f){
     45a:	4f 92       	push	r4
     45c:	5f 92       	push	r5
     45e:	6f 92       	push	r6
     460:	7f 92       	push	r7
     462:	8f 92       	push	r8
     464:	9f 92       	push	r9
     466:	af 92       	push	r10
     468:	bf 92       	push	r11
     46a:	cf 92       	push	r12
     46c:	df 92       	push	r13
     46e:	ef 92       	push	r14
     470:	ff 92       	push	r15
     472:	ac 01       	movw	r20, r24
    return -(360L*atan((2*ANGLE_C*ANGLE_X-sqrt((-ANGLE_C*ANGLE_C + 2*ANGLE_C*f - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)*
     474:	9c 01       	movw	r18, r24
     476:	ac e7       	ldi	r26, 0x7C	; 124
     478:	b1 e0       	ldi	r27, 0x01	; 1
     47a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__umulhisi3>
     47e:	6b 01       	movw	r12, r22
     480:	7c 01       	movw	r14, r24
     482:	ba 01       	movw	r22, r20
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 28 13 	call	0x2650	; 0x2650 <__floatunsisf>
     48c:	9b 01       	movw	r18, r22
     48e:	ac 01       	movw	r20, r24
     490:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     494:	4b 01       	movw	r8, r22
     496:	5c 01       	movw	r10, r24
     498:	c7 01       	movw	r24, r14
     49a:	b6 01       	movw	r22, r12
     49c:	64 50       	subi	r22, 0x04	; 4
     49e:	7d 48       	sbci	r23, 0x8D	; 141
     4a0:	81 09       	sbc	r24, r1
     4a2:	91 09       	sbc	r25, r1
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*f + pow(f,2.0)- ANGLE_X*ANGLE_X - ANGLE_Y*ANGLE_Y)))/
     4a4:	24 e0       	ldi	r18, 0x04	; 4
     4a6:	c2 0e       	add	r12, r18
     4a8:	2d e8       	ldi	r18, 0x8D	; 141
     4aa:	d2 1e       	adc	r13, r18
     4ac:	e1 1c       	adc	r14, r1
     4ae:	f1 1c       	adc	r15, r1



//Returns angle between -90.0 - 90.0, input value is in millimeters.
float angleConversion(uint16_t f){
    return -(360L*atan((2*ANGLE_C*ANGLE_X-sqrt((-ANGLE_C*ANGLE_C + 2*ANGLE_C*f - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)*
     4b0:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatsisf>
     4b4:	a5 01       	movw	r20, r10
     4b6:	94 01       	movw	r18, r8
     4b8:	0e 94 03 12 	call	0x2406	; 0x2406 <__subsf3>
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	32 e4       	ldi	r19, 0x42	; 66
     4c0:	4f ee       	ldi	r20, 0xEF	; 239
     4c2:	58 e4       	ldi	r21, 0x48	; 72
     4c4:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	30 e4       	ldi	r19, 0x40	; 64
     4cc:	4c e1       	ldi	r20, 0x1C	; 28
     4ce:	55 e4       	ldi	r21, 0x45	; 69
     4d0:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     4d4:	2b 01       	movw	r4, r22
     4d6:	3c 01       	movw	r6, r24
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*f + pow(f,2.0)- ANGLE_X*ANGLE_X - ANGLE_Y*ANGLE_Y)))/
     4d8:	c7 01       	movw	r24, r14
     4da:	b6 01       	movw	r22, r12
     4dc:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatsisf>
     4e0:	a5 01       	movw	r20, r10
     4e2:	94 01       	movw	r18, r8
     4e4:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	32 e4       	ldi	r19, 0x42	; 66
     4ec:	4f ee       	ldi	r20, 0xEF	; 239
     4ee:	58 e4       	ldi	r21, 0x48	; 72
     4f0:	0e 94 03 12 	call	0x2406	; 0x2406 <__subsf3>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e4       	ldi	r19, 0x40	; 64
     4f8:	4c e1       	ldi	r20, 0x1C	; 28
     4fa:	55 e4       	ldi	r21, 0x45	; 69
     4fc:	0e 94 03 12 	call	0x2406	; 0x2406 <__subsf3>
     500:	9b 01       	movw	r18, r22
     502:	ac 01       	movw	r20, r24



//Returns angle between -90.0 - 90.0, input value is in millimeters.
float angleConversion(uint16_t f){
    return -(360L*atan((2*ANGLE_C*ANGLE_X-sqrt((-ANGLE_C*ANGLE_C + 2*ANGLE_C*f - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)*
     504:	c3 01       	movw	r24, r6
     506:	b2 01       	movw	r22, r4
     508:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     50c:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sqrt>
     510:	9b 01       	movw	r18, r22
     512:	ac 01       	movw	r20, r24
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	72 ee       	ldi	r23, 0xE2	; 226
     518:	81 e8       	ldi	r24, 0x81	; 129
     51a:	98 e4       	ldi	r25, 0x48	; 72
     51c:	0e 94 03 12 	call	0x2406	; 0x2406 <__subsf3>
     520:	6b 01       	movw	r12, r22
     522:	7c 01       	movw	r14, r24
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*f + pow(f,2.0)- ANGLE_X*ANGLE_X - ANGLE_Y*ANGLE_Y)))/
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*ANGLE_Y - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)))/M_PI;
     524:	a5 01       	movw	r20, r10
     526:	94 01       	movw	r18, r8
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	7c e3       	ldi	r23, 0x3C	; 60
     52c:	87 e5       	ldi	r24, 0x57	; 87
     52e:	97 e4       	ldi	r25, 0x47	; 71
     530:	0e 94 03 12 	call	0x2406	; 0x2406 <__subsf3>
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	32 e4       	ldi	r19, 0x42	; 66
     538:	4f ee       	ldi	r20, 0xEF	; 239
     53a:	58 e4       	ldi	r21, 0x48	; 72
     53c:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e4       	ldi	r19, 0x40	; 64
     544:	4c e1       	ldi	r20, 0x1C	; 28
     546:	55 e4       	ldi	r21, 0x45	; 69
     548:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     54c:	9b 01       	movw	r18, r22
     54e:	ac 01       	movw	r20, r24



//Returns angle between -90.0 - 90.0, input value is in millimeters.
float angleConversion(uint16_t f){
    return -(360L*atan((2*ANGLE_C*ANGLE_X-sqrt((-ANGLE_C*ANGLE_C + 2*ANGLE_C*f - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)*
     550:	c7 01       	movw	r24, r14
     552:	b6 01       	movw	r22, r12
     554:	0e 94 94 12 	call	0x2528	; 0x2528 <__divsf3>
     558:	0e 94 68 12 	call	0x24d0	; 0x24d0 <atan>
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	44 eb       	ldi	r20, 0xB4	; 180
     562:	53 e4       	ldi	r21, 0x43	; 67
     564:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     568:	90 58       	subi	r25, 0x80	; 128
     56a:	2b ed       	ldi	r18, 0xDB	; 219
     56c:	3f e0       	ldi	r19, 0x0F	; 15
     56e:	49 e4       	ldi	r20, 0x49	; 73
     570:	50 e4       	ldi	r21, 0x40	; 64
     572:	0e 94 94 12 	call	0x2528	; 0x2528 <__divsf3>
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*f + pow(f,2.0)- ANGLE_X*ANGLE_X - ANGLE_Y*ANGLE_Y)))/
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*ANGLE_Y - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)))/M_PI;
}
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	df 90       	pop	r13
     57c:	cf 90       	pop	r12
     57e:	bf 90       	pop	r11
     580:	af 90       	pop	r10
     582:	9f 90       	pop	r9
     584:	8f 90       	pop	r8
     586:	7f 90       	pop	r7
     588:	6f 90       	pop	r6
     58a:	5f 90       	pop	r5
     58c:	4f 90       	pop	r4
     58e:	08 95       	ret

00000590 <tiltConversion>:

//Returns tilt angle between 0 to 90 degrees positive. input values in millimeters 
float tiltConversion(uint16_t f){
     590:	4f 92       	push	r4
     592:	5f 92       	push	r5
     594:	6f 92       	push	r6
     596:	7f 92       	push	r7
     598:	8f 92       	push	r8
     59a:	9f 92       	push	r9
     59c:	af 92       	push	r10
     59e:	bf 92       	push	r11
     5a0:	cf 92       	push	r12
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	ac 01       	movw	r20, r24
    return 90-(360L*atan((2*TILT_C*TILT_X-sqrt((-TILT_C*TILT_C + 2*TILT_C*f - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)*
     5aa:	9c 01       	movw	r18, r24
     5ac:	a4 e5       	ldi	r26, 0x54	; 84
     5ae:	b1 e0       	ldi	r27, 0x01	; 1
     5b0:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__umulhisi3>
     5b4:	6b 01       	movw	r12, r22
     5b6:	7c 01       	movw	r14, r24
     5b8:	ba 01       	movw	r22, r20
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 28 13 	call	0x2650	; 0x2650 <__floatunsisf>
     5c2:	9b 01       	movw	r18, r22
     5c4:	ac 01       	movw	r20, r24
     5c6:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     5ca:	4b 01       	movw	r8, r22
     5cc:	5c 01       	movw	r10, r24
     5ce:	c7 01       	movw	r24, r14
     5d0:	b6 01       	movw	r22, r12
     5d2:	64 5e       	subi	r22, 0xE4	; 228
     5d4:	70 47       	sbci	r23, 0x70	; 112
     5d6:	81 09       	sbc	r24, r1
     5d8:	91 09       	sbc	r25, r1
              (TILT_C*TILT_C + 2*TILT_C*f + pow(f,2.0)- TILT_X*TILT_X - TILT_Y*TILT_Y)))/
     5da:	24 ee       	ldi	r18, 0xE4	; 228
     5dc:	c2 0e       	add	r12, r18
     5de:	20 e7       	ldi	r18, 0x70	; 112
     5e0:	d2 1e       	adc	r13, r18
     5e2:	e1 1c       	adc	r14, r1
     5e4:	f1 1c       	adc	r15, r1
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*ANGLE_Y - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)))/M_PI;
}

//Returns tilt angle between 0 to 90 degrees positive. input values in millimeters 
float tiltConversion(uint16_t f){
    return 90-(360L*atan((2*TILT_C*TILT_X-sqrt((-TILT_C*TILT_C + 2*TILT_C*f - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)*
     5e6:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatsisf>
     5ea:	a5 01       	movw	r20, r10
     5ec:	94 01       	movw	r18, r8
     5ee:	0e 94 03 12 	call	0x2406	; 0x2406 <__subsf3>
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	32 e6       	ldi	r19, 0x62	; 98
     5f6:	4e e8       	ldi	r20, 0x8E	; 142
     5f8:	58 e4       	ldi	r21, 0x48	; 72
     5fa:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e4       	ldi	r19, 0x40	; 64
     602:	4c e1       	ldi	r20, 0x1C	; 28
     604:	55 e4       	ldi	r21, 0x45	; 69
     606:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     60a:	2b 01       	movw	r4, r22
     60c:	3c 01       	movw	r6, r24
              (TILT_C*TILT_C + 2*TILT_C*f + pow(f,2.0)- TILT_X*TILT_X - TILT_Y*TILT_Y)))/
     60e:	c7 01       	movw	r24, r14
     610:	b6 01       	movw	r22, r12
     612:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatsisf>
     616:	a5 01       	movw	r20, r10
     618:	94 01       	movw	r18, r8
     61a:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	32 e6       	ldi	r19, 0x62	; 98
     622:	4e e8       	ldi	r20, 0x8E	; 142
     624:	58 e4       	ldi	r21, 0x48	; 72
     626:	0e 94 03 12 	call	0x2406	; 0x2406 <__subsf3>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e4       	ldi	r19, 0x40	; 64
     62e:	4c e1       	ldi	r20, 0x1C	; 28
     630:	55 e4       	ldi	r21, 0x45	; 69
     632:	0e 94 03 12 	call	0x2406	; 0x2406 <__subsf3>
     636:	9b 01       	movw	r18, r22
     638:	ac 01       	movw	r20, r24
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*ANGLE_Y - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)))/M_PI;
}

//Returns tilt angle between 0 to 90 degrees positive. input values in millimeters 
float tiltConversion(uint16_t f){
    return 90-(360L*atan((2*TILT_C*TILT_X-sqrt((-TILT_C*TILT_C + 2*TILT_C*f - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)*
     63a:	c3 01       	movw	r24, r6
     63c:	b2 01       	movw	r22, r4
     63e:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     642:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sqrt>
     646:	9b 01       	movw	r18, r22
     648:	ac 01       	movw	r20, r24
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	7c e4       	ldi	r23, 0x4C	; 76
     64e:	83 e3       	ldi	r24, 0x33	; 51
     650:	98 e4       	ldi	r25, 0x48	; 72
     652:	0e 94 03 12 	call	0x2406	; 0x2406 <__subsf3>
     656:	6b 01       	movw	r12, r22
     658:	7c 01       	movw	r14, r24
              (TILT_C*TILT_C + 2*TILT_C*f + pow(f,2.0)- TILT_X*TILT_X - TILT_Y*TILT_Y)))/
              (TILT_C*TILT_C + 2*TILT_C*TILT_Y - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)))/M_PI;
     65a:	a5 01       	movw	r20, r10
     65c:	94 01       	movw	r18, r8
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	7c e4       	ldi	r23, 0x4C	; 76
     662:	83 e3       	ldi	r24, 0x33	; 51
     664:	97 e4       	ldi	r25, 0x47	; 71
     666:	0e 94 03 12 	call	0x2406	; 0x2406 <__subsf3>
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	32 e6       	ldi	r19, 0x62	; 98
     66e:	4e e8       	ldi	r20, 0x8E	; 142
     670:	58 e4       	ldi	r21, 0x48	; 72
     672:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e4       	ldi	r19, 0x40	; 64
     67a:	4c e1       	ldi	r20, 0x1C	; 28
     67c:	55 e4       	ldi	r21, 0x45	; 69
     67e:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     682:	9b 01       	movw	r18, r22
     684:	ac 01       	movw	r20, r24
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*ANGLE_Y - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)))/M_PI;
}

//Returns tilt angle between 0 to 90 degrees positive. input values in millimeters 
float tiltConversion(uint16_t f){
    return 90-(360L*atan((2*TILT_C*TILT_X-sqrt((-TILT_C*TILT_C + 2*TILT_C*f - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)*
     686:	c7 01       	movw	r24, r14
     688:	b6 01       	movw	r22, r12
     68a:	0e 94 94 12 	call	0x2528	; 0x2528 <__divsf3>
     68e:	0e 94 68 12 	call	0x24d0	; 0x24d0 <atan>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	44 eb       	ldi	r20, 0xB4	; 180
     698:	53 e4       	ldi	r21, 0x43	; 67
     69a:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
              (TILT_C*TILT_C + 2*TILT_C*f + pow(f,2.0)- TILT_X*TILT_X - TILT_Y*TILT_Y)))/
              (TILT_C*TILT_C + 2*TILT_C*TILT_Y - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)))/M_PI;
     69e:	2b ed       	ldi	r18, 0xDB	; 219
     6a0:	3f e0       	ldi	r19, 0x0F	; 15
     6a2:	49 e4       	ldi	r20, 0x49	; 73
     6a4:	50 e4       	ldi	r21, 0x40	; 64
     6a6:	0e 94 94 12 	call	0x2528	; 0x2528 <__divsf3>
     6aa:	9b 01       	movw	r18, r22
     6ac:	ac 01       	movw	r20, r24
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*ANGLE_Y - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)))/M_PI;
}

//Returns tilt angle between 0 to 90 degrees positive. input values in millimeters 
float tiltConversion(uint16_t f){
    return 90-(360L*atan((2*TILT_C*TILT_X-sqrt((-TILT_C*TILT_C + 2*TILT_C*f - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)*
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	84 eb       	ldi	r24, 0xB4	; 180
     6b4:	92 e4       	ldi	r25, 0x42	; 66
     6b6:	0e 94 03 12 	call	0x2406	; 0x2406 <__subsf3>
              (TILT_C*TILT_C + 2*TILT_C*f + pow(f,2.0)- TILT_X*TILT_X - TILT_Y*TILT_Y)))/
              (TILT_C*TILT_C + 2*TILT_C*TILT_Y - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)))/M_PI;
}
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	cf 90       	pop	r12
     6c2:	bf 90       	pop	r11
     6c4:	af 90       	pop	r10
     6c6:	9f 90       	pop	r9
     6c8:	8f 90       	pop	r8
     6ca:	7f 90       	pop	r7
     6cc:	6f 90       	pop	r6
     6ce:	5f 90       	pop	r5
     6d0:	4f 90       	pop	r4
     6d2:	08 95       	ret

000006d4 <getAngle>:


float getAngle(void){
    return motors[ANGLE_MOTOR].current_position;
     6d4:	60 91 61 02 	lds	r22, 0x0261	; 0x800261 <motors+0x2d>
     6d8:	70 91 62 02 	lds	r23, 0x0262	; 0x800262 <motors+0x2e>
     6dc:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <motors+0x2f>
     6e0:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <motors+0x30>
}
     6e4:	08 95       	ret

000006e6 <getTilt>:

float getTilt(void){
    return motors[TILT_MOTOR].current_position;
     6e6:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <motors+0x88>
     6ea:	70 91 bd 02 	lds	r23, 0x02BD	; 0x8002bd <motors+0x89>
     6ee:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <motors+0x8a>
     6f2:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <motors+0x8b>
}
     6f6:	08 95       	ret

000006f8 <setAngle>:

/*
    This function is used to set wanted Angle value
*/
uint8_t setAngle(float angle){
     6f8:	8f 92       	push	r8
     6fa:	9f 92       	push	r9
     6fc:	af 92       	push	r10
     6fe:	bf 92       	push	r11
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	6b 01       	movw	r12, r22
     70a:	7c 01       	movw	r14, r24
    return setMotorPosition(&motors[TILT_MOTOR], tilt);
}

uint8_t setMotorPosition(motor *m, float angle){
    //vefify that angle is in between valid range
    if (angle >= m->min_angle && angle <= (m->min_angle + m->angle_range)){
     70c:	80 90 74 02 	lds	r8, 0x0274	; 0x800274 <motors+0x40>
     710:	90 90 75 02 	lds	r9, 0x0275	; 0x800275 <motors+0x41>
     714:	a0 90 76 02 	lds	r10, 0x0276	; 0x800276 <motors+0x42>
     718:	b0 90 77 02 	lds	r11, 0x0277	; 0x800277 <motors+0x43>
     71c:	a5 01       	movw	r20, r10
     71e:	94 01       	movw	r18, r8
     720:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__gesf2>
     724:	87 fd       	sbrc	r24, 7
     726:	22 c0       	rjmp	.+68     	; 0x76c <setAngle+0x74>
     728:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <motors+0x44>
     72c:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <motors+0x45>
     730:	40 91 7a 02 	lds	r20, 0x027A	; 0x80027a <motors+0x46>
     734:	50 91 7b 02 	lds	r21, 0x027B	; 0x80027b <motors+0x47>
     738:	c5 01       	movw	r24, r10
     73a:	b4 01       	movw	r22, r8
     73c:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     740:	9b 01       	movw	r18, r22
     742:	ac 01       	movw	r20, r24
     744:	c7 01       	movw	r24, r14
     746:	b6 01       	movw	r22, r12
     748:	0e 94 90 12 	call	0x2520	; 0x2520 <__cmpsf2>
     74c:	18 16       	cp	r1, r24
     74e:	74 f0       	brlt	.+28     	; 0x76c <setAngle+0x74>
        m->set_position = angle;
     750:	c0 92 65 02 	sts	0x0265, r12	; 0x800265 <motors+0x31>
     754:	d0 92 66 02 	sts	0x0266, r13	; 0x800266 <motors+0x32>
     758:	e0 92 67 02 	sts	0x0267, r14	; 0x800267 <motors+0x33>
     75c:	f0 92 68 02 	sts	0x0268, r15	; 0x800268 <motors+0x34>
        m->timeout_value = 0; //Clear timeout value on every angle change
     760:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <motors+0x57>
     764:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <motors+0x56>
        return 0;
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	01 c0       	rjmp	.+2      	; 0x76e <setAngle+0x76>
    }
    else{
        return 1;
     76c:	81 e0       	ldi	r24, 0x01	; 1
/*
    This function is used to set wanted Angle value
*/
uint8_t setAngle(float angle){
    return setMotorPosition(&motors[ANGLE_MOTOR], angle);
}
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	df 90       	pop	r13
     774:	cf 90       	pop	r12
     776:	bf 90       	pop	r11
     778:	af 90       	pop	r10
     77a:	9f 90       	pop	r9
     77c:	8f 90       	pop	r8
     77e:	08 95       	ret

00000780 <setTilt>:

/*
    This function is used to set wanted TILT angle
*/
uint8_t setTilt(float tilt){
     780:	8f 92       	push	r8
     782:	9f 92       	push	r9
     784:	af 92       	push	r10
     786:	bf 92       	push	r11
     788:	cf 92       	push	r12
     78a:	df 92       	push	r13
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	6b 01       	movw	r12, r22
     792:	7c 01       	movw	r14, r24
    return setMotorPosition(&motors[TILT_MOTOR], tilt);
}

uint8_t setMotorPosition(motor *m, float angle){
    //vefify that angle is in between valid range
    if (angle >= m->min_angle && angle <= (m->min_angle + m->angle_range)){
     794:	80 90 cf 02 	lds	r8, 0x02CF	; 0x8002cf <motors+0x9b>
     798:	90 90 d0 02 	lds	r9, 0x02D0	; 0x8002d0 <motors+0x9c>
     79c:	a0 90 d1 02 	lds	r10, 0x02D1	; 0x8002d1 <motors+0x9d>
     7a0:	b0 90 d2 02 	lds	r11, 0x02D2	; 0x8002d2 <motors+0x9e>
     7a4:	a5 01       	movw	r20, r10
     7a6:	94 01       	movw	r18, r8
     7a8:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__gesf2>
     7ac:	87 fd       	sbrc	r24, 7
     7ae:	22 c0       	rjmp	.+68     	; 0x7f4 <setTilt+0x74>
     7b0:	20 91 d3 02 	lds	r18, 0x02D3	; 0x8002d3 <motors+0x9f>
     7b4:	30 91 d4 02 	lds	r19, 0x02D4	; 0x8002d4 <motors+0xa0>
     7b8:	40 91 d5 02 	lds	r20, 0x02D5	; 0x8002d5 <motors+0xa1>
     7bc:	50 91 d6 02 	lds	r21, 0x02D6	; 0x8002d6 <motors+0xa2>
     7c0:	c5 01       	movw	r24, r10
     7c2:	b4 01       	movw	r22, r8
     7c4:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     7c8:	9b 01       	movw	r18, r22
     7ca:	ac 01       	movw	r20, r24
     7cc:	c7 01       	movw	r24, r14
     7ce:	b6 01       	movw	r22, r12
     7d0:	0e 94 90 12 	call	0x2520	; 0x2520 <__cmpsf2>
     7d4:	18 16       	cp	r1, r24
     7d6:	74 f0       	brlt	.+28     	; 0x7f4 <setTilt+0x74>
        m->set_position = angle;
     7d8:	c0 92 c0 02 	sts	0x02C0, r12	; 0x8002c0 <motors+0x8c>
     7dc:	d0 92 c1 02 	sts	0x02C1, r13	; 0x8002c1 <motors+0x8d>
     7e0:	e0 92 c2 02 	sts	0x02C2, r14	; 0x8002c2 <motors+0x8e>
     7e4:	f0 92 c3 02 	sts	0x02C3, r15	; 0x8002c3 <motors+0x8f>
        m->timeout_value = 0; //Clear timeout value on every angle change
     7e8:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <motors+0xb2>
     7ec:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <motors+0xb1>
        return 0;
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <setTilt+0x76>
    }
    else{
        return 1;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
/*
    This function is used to set wanted TILT angle
*/
uint8_t setTilt(float tilt){
    return setMotorPosition(&motors[TILT_MOTOR], tilt);
}
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	bf 90       	pop	r11
     800:	af 90       	pop	r10
     802:	9f 90       	pop	r9
     804:	8f 90       	pop	r8
     806:	08 95       	ret

00000808 <setMotorPosition>:

uint8_t setMotorPosition(motor *m, float angle){
     808:	8f 92       	push	r8
     80a:	9f 92       	push	r9
     80c:	af 92       	push	r10
     80e:	bf 92       	push	r11
     810:	cf 92       	push	r12
     812:	df 92       	push	r13
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	ec 01       	movw	r28, r24
     81e:	6a 01       	movw	r12, r20
     820:	7b 01       	movw	r14, r22
    //vefify that angle is in between valid range
    if (angle >= m->min_angle && angle <= (m->min_angle + m->angle_range)){
     822:	fc 01       	movw	r30, r24
     824:	e0 5c       	subi	r30, 0xC0	; 192
     826:	ff 4f       	sbci	r31, 0xFF	; 255
     828:	80 80       	ld	r8, Z
     82a:	91 80       	ldd	r9, Z+1	; 0x01
     82c:	a2 80       	ldd	r10, Z+2	; 0x02
     82e:	b3 80       	ldd	r11, Z+3	; 0x03
     830:	9a 01       	movw	r18, r20
     832:	ab 01       	movw	r20, r22
     834:	c5 01       	movw	r24, r10
     836:	b4 01       	movw	r22, r8
     838:	0e 94 90 12 	call	0x2520	; 0x2520 <__cmpsf2>
     83c:	18 16       	cp	r1, r24
     83e:	ec f0       	brlt	.+58     	; 0x87a <setMotorPosition+0x72>
     840:	fe 01       	movw	r30, r28
     842:	ec 5b       	subi	r30, 0xBC	; 188
     844:	ff 4f       	sbci	r31, 0xFF	; 255
     846:	20 81       	ld	r18, Z
     848:	31 81       	ldd	r19, Z+1	; 0x01
     84a:	42 81       	ldd	r20, Z+2	; 0x02
     84c:	53 81       	ldd	r21, Z+3	; 0x03
     84e:	c5 01       	movw	r24, r10
     850:	b4 01       	movw	r22, r8
     852:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	c7 01       	movw	r24, r14
     85c:	b6 01       	movw	r22, r12
     85e:	0e 94 90 12 	call	0x2520	; 0x2520 <__cmpsf2>
     862:	18 16       	cp	r1, r24
     864:	54 f0       	brlt	.+20     	; 0x87a <setMotorPosition+0x72>
        m->set_position = angle;
     866:	c9 aa       	std	Y+49, r12	; 0x31
     868:	da aa       	std	Y+50, r13	; 0x32
     86a:	eb aa       	std	Y+51, r14	; 0x33
     86c:	fc aa       	std	Y+52, r15	; 0x34
        m->timeout_value = 0; //Clear timeout value on every angle change
     86e:	ca 5a       	subi	r28, 0xAA	; 170
     870:	df 4f       	sbci	r29, 0xFF	; 255
     872:	19 82       	std	Y+1, r1	; 0x01
     874:	18 82       	st	Y, r1
        return 0;
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	01 c0       	rjmp	.+2      	; 0x87c <setMotorPosition+0x74>
    }
    else{
        return 1;
     87a:	81 e0       	ldi	r24, 0x01	; 1
    }
}   
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	df 90       	pop	r13
     886:	cf 90       	pop	r12
     888:	bf 90       	pop	r11
     88a:	af 90       	pop	r10
     88c:	9f 90       	pop	r9
     88e:	8f 90       	pop	r8
     890:	08 95       	ret

00000892 <getSetAngle>:

/*
    Returns current Angle Set value
*/
float getSetAngle(void){
    return motors[ANGLE_MOTOR].set_position;
     892:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <motors+0x31>
     896:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <motors+0x32>
     89a:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <motors+0x33>
     89e:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <motors+0x34>
}
     8a2:	08 95       	ret

000008a4 <getSetTilt>:

/*
    Returns current Tilt Set value  
*/
float getSetTilt(void){
    return motors[TILT_MOTOR].set_position;
     8a4:	60 91 c0 02 	lds	r22, 0x02C0	; 0x8002c0 <motors+0x8c>
     8a8:	70 91 c1 02 	lds	r23, 0x02C1	; 0x8002c1 <motors+0x8d>
     8ac:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <motors+0x8e>
     8b0:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <motors+0x8f>
}
     8b4:	08 95       	ret

000008b6 <getAngleMotorStatus>:
/*
    Returns Angle motor status  
*/
motor_status getAngleMotorStatus(void){
    return motors[ANGLE_MOTOR].status;
}
     8b6:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <motors+0x58>
     8ba:	08 95       	ret

000008bc <getTiltMotorStatus>:
/*
    Returns Tilt motor status,   
*/
motor_status getTiltMotorStatus(void){
    return motors[TILT_MOTOR].status;
}
     8bc:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <motors+0xb3>
     8c0:	08 95       	ret

000008c2 <delayLoop_us>:
        m->status = STATUS_OK;
    }
}

void delayLoop_us(uint16_t delay){
    for (uint16_t i = 0; i < delay/50; i++){
     8c2:	9c 01       	movw	r18, r24
     8c4:	36 95       	lsr	r19
     8c6:	27 95       	ror	r18
     8c8:	ab e7       	ldi	r26, 0x7B	; 123
     8ca:	b4 e1       	ldi	r27, 0x14	; 20
     8cc:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__umulhisi3>
     8d0:	96 95       	lsr	r25
     8d2:	87 95       	ror	r24
     8d4:	00 97       	sbiw	r24, 0x00	; 0
     8d6:	59 f0       	breq	.+22     	; 0x8ee <delayLoop_us+0x2c>
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	4a ef       	ldi	r20, 0xFA	; 250
     8de:	4a 95       	dec	r20
     8e0:	f1 f7       	brne	.-4      	; 0x8de <delayLoop_us+0x1c>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <delayLoop_us+0x22>
     8e4:	2f 5f       	subi	r18, 0xFF	; 255
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	28 17       	cp	r18, r24
     8ea:	39 07       	cpc	r19, r25
     8ec:	b9 f7       	brne	.-18     	; 0x8dc <delayLoop_us+0x1a>
     8ee:	08 95       	ret

000008f0 <disableMotorPWM>:
    //motors[TILT_MOTOR].current_position  = getTilt();    
    
   // GTCCR = 0x00;       //Start Counter
}

void disableMotorPWM(motor *m){
     8f0:	fc 01       	movw	r30, r24

    *m->enable_port_addr &= ~(1<<m->enable_pin); //Disable motor => clear enable port
     8f2:	a2 8d       	ldd	r26, Z+26	; 0x1a
     8f4:	b3 8d       	ldd	r27, Z+27	; 0x1b
     8f6:	2c 91       	ld	r18, X
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	06 8c       	ldd	r0, Z+30	; 0x1e
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0x5>
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	0a 94       	dec	r0
     906:	e2 f7       	brpl	.-8      	; 0x900 <__stack+0x1>
     908:	80 95       	com	r24
     90a:	82 23       	and	r24, r18
     90c:	8c 93       	st	X, r24
    *m->fwd_TCCRA_addr = 0x00;//m.fwd_TCCRA_value;
     90e:	a5 81       	ldd	r26, Z+5	; 0x05
     910:	b6 81       	ldd	r27, Z+6	; 0x06
     912:	1c 92       	st	X, r1
    *m->fwd_TCCRB_addr = 0x00;//m.fwd_TCCRB_value;
     914:	a0 85       	ldd	r26, Z+8	; 0x08
     916:	b1 85       	ldd	r27, Z+9	; 0x09
     918:	1c 92       	st	X, r1
    *m->fwd_OCR_addr = 0x00; //Init PWM to zero
     91a:	a3 85       	ldd	r26, Z+11	; 0x0b
     91c:	b4 85       	ldd	r27, Z+12	; 0x0c
     91e:	1c 92       	st	X, r1
    
    //Init reverse PWM settings
    *m->rev_TCCRA_addr = 0x00;//m.rev_TCCRA_value;
     920:	a2 89       	ldd	r26, Z+18	; 0x12
     922:	b3 89       	ldd	r27, Z+19	; 0x13
     924:	1c 92       	st	X, r1
    *m->rev_TCCRB_addr = 0x00; //m.rev_TCCRB_value;
     926:	a5 89       	ldd	r26, Z+21	; 0x15
     928:	b6 89       	ldd	r27, Z+22	; 0x16
     92a:	1c 92       	st	X, r1
    *m->rev_OCR_addr = 0x00; //Init PWM to zero
     92c:	00 8c       	ldd	r0, Z+24	; 0x18
     92e:	f1 8d       	ldd	r31, Z+25	; 0x19
     930:	e0 2d       	mov	r30, r0
     932:	10 82       	st	Z, r1
     934:	08 95       	ret

00000936 <setMotor>:

} 
//volatile uint8_t *OCRC_ADDR[] = {&OCR1CL, &OCR4AL }
//volatile uint8_t *OCRB_ADDR[] = {&OCR1BL, &OCR4BL }

void setMotor(motor *m, uint8_t dir, uint8_t pwm){
     936:	fc 01       	movw	r30, r24
    m->current_pwm = pwm;
     938:	43 a7       	std	Z+43, r20	; 0x2b
    if (pwm > 0){
     93a:	44 23       	and	r20, r20
     93c:	91 f1       	breq	.+100    	; 0x9a2 <setMotor+0x6c>
        if (dir == FORWARD){ //Forward
     93e:	61 30       	cpi	r22, 0x01	; 1
     940:	89 f1       	breq	.+98     	; 0x9a4 <setMotor+0x6e>
            
            *m->rev_TCCRB_addr = 0x00; //Disable clock Rev
            *m->fwd_TCCRB_addr = m->fwd_TCCRB_value;
        }
        else{ //Backward
            *m->fwd_OCR_addr = 0x00;
     942:	a3 85       	ldd	r26, Z+11	; 0x0b
     944:	b4 85       	ldd	r27, Z+12	; 0x0c
     946:	1c 92       	st	X, r1
            *m->rev_OCR_addr = pwm; 
     948:	a0 8d       	ldd	r26, Z+24	; 0x18
     94a:	b1 8d       	ldd	r27, Z+25	; 0x19
     94c:	4c 93       	st	X, r20
            *m->fwd_port_addr &= ~(1<<m->fwd_pin);
     94e:	a0 81       	ld	r26, Z
     950:	b1 81       	ldd	r27, Z+1	; 0x01
     952:	2c 91       	ld	r18, X
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	04 80       	ldd	r0, Z+4	; 0x04
     95a:	02 c0       	rjmp	.+4      	; 0x960 <setMotor+0x2a>
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	0a 94       	dec	r0
     962:	e2 f7       	brpl	.-8      	; 0x95c <setMotor+0x26>
     964:	80 95       	com	r24
     966:	82 23       	and	r24, r18
     968:	8c 93       	st	X, r24
            *m->fwd_TCCRA_addr = 0x00; //Disable FWD
     96a:	a5 81       	ldd	r26, Z+5	; 0x05
     96c:	b6 81       	ldd	r27, Z+6	; 0x06
     96e:	1c 92       	st	X, r1
            *m->rev_TCCRA_addr = m->rev_TCCRA_value;
     970:	a2 89       	ldd	r26, Z+18	; 0x12
     972:	b3 89       	ldd	r27, Z+19	; 0x13
     974:	84 89       	ldd	r24, Z+20	; 0x14
     976:	8c 93       	st	X, r24

            *m->fwd_TCCRB_addr = 0x00;
     978:	a0 85       	ldd	r26, Z+8	; 0x08
     97a:	b1 85       	ldd	r27, Z+9	; 0x09
     97c:	1c 92       	st	X, r1
            *m->rev_TCCRB_addr = m->rev_TCCRB_value;
     97e:	a5 89       	ldd	r26, Z+21	; 0x15
     980:	b6 89       	ldd	r27, Z+22	; 0x16
     982:	87 89       	ldd	r24, Z+23	; 0x17
     984:	8c 93       	st	X, r24
        }
        
        *m->enable_port_addr |= 1<<m->enable_pin; 
     986:	a2 8d       	ldd	r26, Z+26	; 0x1a
     988:	b3 8d       	ldd	r27, Z+27	; 0x1b
     98a:	2c 91       	ld	r18, X
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	06 8c       	ldd	r0, Z+30	; 0x1e
     992:	02 c0       	rjmp	.+4      	; 0x998 <setMotor+0x62>
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	0a 94       	dec	r0
     99a:	e2 f7       	brpl	.-8      	; 0x994 <setMotor+0x5e>
     99c:	82 2b       	or	r24, r18
     99e:	8c 93       	st	X, r24
     9a0:	08 95       	ret
    }
    else{
        disableMotorPWM(m);
     9a2:	a6 cf       	rjmp	.-180    	; 0x8f0 <disableMotorPWM>

void setMotor(motor *m, uint8_t dir, uint8_t pwm){
    m->current_pwm = pwm;
    if (pwm > 0){
        if (dir == FORWARD){ //Forward
            *m->rev_OCR_addr = 0x00; //PWM pulse width
     9a4:	a0 8d       	ldd	r26, Z+24	; 0x18
     9a6:	b1 8d       	ldd	r27, Z+25	; 0x19
     9a8:	1c 92       	st	X, r1
            *m->fwd_OCR_addr = pwm; 
     9aa:	a3 85       	ldd	r26, Z+11	; 0x0b
     9ac:	b4 85       	ldd	r27, Z+12	; 0x0c
     9ae:	4c 93       	st	X, r20
            *m->rev_port_addr &= ~(1<<m->rev_pin);
     9b0:	a5 85       	ldd	r26, Z+13	; 0x0d
     9b2:	b6 85       	ldd	r27, Z+14	; 0x0e
     9b4:	2c 91       	ld	r18, X
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	01 88       	ldd	r0, Z+17	; 0x11
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <setMotor+0x8c>
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	0a 94       	dec	r0
     9c4:	e2 f7       	brpl	.-8      	; 0x9be <setMotor+0x88>
     9c6:	80 95       	com	r24
     9c8:	82 23       	and	r24, r18
     9ca:	8c 93       	st	X, r24
            *m->rev_TCCRA_addr = 0x00; //Disable reverse
     9cc:	a2 89       	ldd	r26, Z+18	; 0x12
     9ce:	b3 89       	ldd	r27, Z+19	; 0x13
     9d0:	1c 92       	st	X, r1
            *m->fwd_TCCRA_addr = m->fwd_TCCRA_value; //Activate PWM forward
     9d2:	a5 81       	ldd	r26, Z+5	; 0x05
     9d4:	b6 81       	ldd	r27, Z+6	; 0x06
     9d6:	87 81       	ldd	r24, Z+7	; 0x07
     9d8:	8c 93       	st	X, r24
            
            *m->rev_TCCRB_addr = 0x00; //Disable clock Rev
     9da:	a5 89       	ldd	r26, Z+21	; 0x15
     9dc:	b6 89       	ldd	r27, Z+22	; 0x16
     9de:	1c 92       	st	X, r1
            *m->fwd_TCCRB_addr = m->fwd_TCCRB_value;
     9e0:	a0 85       	ldd	r26, Z+8	; 0x08
     9e2:	b1 85       	ldd	r27, Z+9	; 0x09
     9e4:	82 85       	ldd	r24, Z+10	; 0x0a
     9e6:	8c 93       	st	X, r24
     9e8:	ce cf       	rjmp	.-100    	; 0x986 <setMotor+0x50>

000009ea <motorControl>:
    for (uint16_t i = 0; i < delay/50; i++){
        _delay_us(47);
    }
}

void motorControl(motor *m, uint8_t dir, uint8_t pwm){
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	ec 01       	movw	r28, r24
     9f4:	16 2f       	mov	r17, r22
     9f6:	04 2f       	mov	r16, r20
    // We can directly control motor if direction is correct or motor is stopped
    if (m->current_dir == dir || m->current_pwm == 0){
     9f8:	8c a5       	ldd	r24, Y+44	; 0x2c
     9fa:	86 13       	cpse	r24, r22
     9fc:	08 c0       	rjmp	.+16     	; 0xa0e <motorControl+0x24>
     9fe:	0a c0       	rjmp	.+20     	; 0xa14 <motorControl+0x2a>
                delayLoop_us(m->deacceleration_time);
            }
        }
    }
    else{ //Motor is going so it need to stop before direction change
        setMotor(m, m->current_dir, 0);
     a00:	8c a5       	ldd	r24, Y+44	; 0x2c
} 
//volatile uint8_t *OCRC_ADDR[] = {&OCR1CL, &OCR4AL }
//volatile uint8_t *OCRB_ADDR[] = {&OCR1BL, &OCR4BL }

void setMotor(motor *m, uint8_t dir, uint8_t pwm){
    m->current_pwm = pwm;
     a02:	1b a6       	std	Y+43, r1	; 0x2b
        }
        
        *m->enable_port_addr |= 1<<m->enable_pin; 
    }
    else{
        disableMotorPWM(m);
     a04:	ce 01       	movw	r24, r28
     a06:	74 df       	rcall	.-280    	; 0x8f0 <disableMotorPWM>
    }
}

void motorControl(motor *m, uint8_t dir, uint8_t pwm){
    // We can directly control motor if direction is correct or motor is stopped
    if (m->current_dir == dir || m->current_pwm == 0){
     a08:	8c a5       	ldd	r24, Y+44	; 0x2c
     a0a:	81 17       	cp	r24, r17
     a0c:	19 f0       	breq	.+6      	; 0xa14 <motorControl+0x2a>
     a0e:	8b a5       	ldd	r24, Y+43	; 0x2b
     a10:	81 11       	cpse	r24, r1
     a12:	f6 cf       	rjmp	.-20     	; 0xa00 <motorControl+0x16>
        if (m->current_pwm < pwm){ //Need to accelerate
     a14:	8b a5       	ldd	r24, Y+43	; 0x2b
     a16:	80 17       	cp	r24, r16
     a18:	a8 f5       	brcc	.+106    	; 0xa84 <motorControl+0x9a>
            while(m->current_pwm != pwm){ //Loop until set is equal
     a1a:	8b a5       	ldd	r24, Y+43	; 0x2b
     a1c:	80 17       	cp	r24, r16
     a1e:	69 f1       	breq	.+90     	; 0xa7a <motorControl+0x90>
                if ((m->current_pwm + m->acceleration_step) > m->max_pwm){
     a20:	4b a5       	ldd	r20, Y+43	; 0x2b
     a22:	2d a9       	ldd	r18, Y+53	; 0x35
     a24:	3f ad       	ldd	r19, Y+63	; 0x3f
     a26:	82 2f       	mov	r24, r18
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	84 0f       	add	r24, r20
     a2c:	91 1d       	adc	r25, r1
     a2e:	43 2f       	mov	r20, r19
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	48 17       	cp	r20, r24
     a34:	59 07       	cpc	r21, r25
     a36:	0c f0       	brlt	.+2      	; 0xa3a <motorControl+0x50>
     a38:	4f c0       	rjmp	.+158    	; 0xad8 <motorControl+0xee>
                    m->current_pwm = m->max_pwm;
     a3a:	3b a7       	std	Y+43, r19	; 0x2b
                    pwm = m->max_pwm;
     a3c:	03 2f       	mov	r16, r19
                }
                else{
                    m->current_pwm += m->acceleration_step;
                }
                setMotor(m, dir, m->current_pwm);
     a3e:	4b a5       	ldd	r20, Y+43	; 0x2b
     a40:	61 2f       	mov	r22, r17
     a42:	ce 01       	movw	r24, r28
     a44:	78 df       	rcall	.-272    	; 0x936 <setMotor>
        m->status = STATUS_OK;
    }
}

void delayLoop_us(uint16_t delay){
    for (uint16_t i = 0; i < delay/50; i++){
     a46:	2f a9       	ldd	r18, Y+55	; 0x37
     a48:	38 ad       	ldd	r19, Y+56	; 0x38
     a4a:	36 95       	lsr	r19
     a4c:	27 95       	ror	r18
     a4e:	ab e7       	ldi	r26, 0x7B	; 123
     a50:	b4 e1       	ldi	r27, 0x14	; 20
     a52:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__umulhisi3>
     a56:	96 95       	lsr	r25
     a58:	87 95       	ror	r24
     a5a:	00 97       	sbiw	r24, 0x00	; 0
     a5c:	f1 f2       	breq	.-68     	; 0xa1a <motorControl+0x30>
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	4a ef       	ldi	r20, 0xFA	; 250
     a64:	4a 95       	dec	r20
     a66:	f1 f7       	brne	.-4      	; 0xa64 <motorControl+0x7a>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <motorControl+0x80>
     a6a:	2f 5f       	subi	r18, 0xFF	; 255
     a6c:	3f 4f       	sbci	r19, 0xFF	; 255
     a6e:	28 17       	cp	r18, r24
     a70:	39 07       	cpc	r19, r25
     a72:	b9 f7       	brne	.-18     	; 0xa62 <motorControl+0x78>

void motorControl(motor *m, uint8_t dir, uint8_t pwm){
    // We can directly control motor if direction is correct or motor is stopped
    if (m->current_dir == dir || m->current_pwm == 0){
        if (m->current_pwm < pwm){ //Need to accelerate
            while(m->current_pwm != pwm){ //Loop until set is equal
     a74:	8b a5       	ldd	r24, Y+43	; 0x2b
     a76:	80 13       	cpse	r24, r16
     a78:	d3 cf       	rjmp	.-90     	; 0xa20 <motorControl+0x36>
    }
    else{ //Motor is going so it need to stop before direction change
        setMotor(m, m->current_dir, 0);
        motorControl(m, dir, pwm); // Call recursively this function again when motor is stopped.
    }
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	08 95       	ret
                setMotor(m, dir, m->current_pwm);
                delayLoop_us(m->acceleration_time);
            }
        }
        else{
            while(m->current_pwm != pwm){ //Loop until set is equal
     a84:	8b a5       	ldd	r24, Y+43	; 0x2b
     a86:	80 17       	cp	r24, r16
     a88:	c1 f3       	breq	.-16     	; 0xa7a <motorControl+0x90>
                if (m->current_pwm - m->deacceleration_step <= 0){
     a8a:	8b a5       	ldd	r24, Y+43	; 0x2b
     a8c:	2e a9       	ldd	r18, Y+54	; 0x36
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	82 1b       	sub	r24, r18
     a92:	91 09       	sbc	r25, r1
     a94:	18 16       	cp	r1, r24
     a96:	19 06       	cpc	r1, r25
     a98:	1c f5       	brge	.+70     	; 0xae0 <motorControl+0xf6>
                    m->current_pwm = 0;
                }
                else{
                    m->current_pwm += m->deacceleration_step;
     a9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     a9c:	28 0f       	add	r18, r24
     a9e:	2b a7       	std	Y+43, r18	; 0x2b
                }
                setMotor(m, dir, m->current_pwm);
     aa0:	4b a5       	ldd	r20, Y+43	; 0x2b
     aa2:	61 2f       	mov	r22, r17
     aa4:	ce 01       	movw	r24, r28
     aa6:	47 df       	rcall	.-370    	; 0x936 <setMotor>
        m->status = STATUS_OK;
    }
}

void delayLoop_us(uint16_t delay){
    for (uint16_t i = 0; i < delay/50; i++){
     aa8:	29 ad       	ldd	r18, Y+57	; 0x39
     aaa:	3a ad       	ldd	r19, Y+58	; 0x3a
     aac:	36 95       	lsr	r19
     aae:	27 95       	ror	r18
     ab0:	ab e7       	ldi	r26, 0x7B	; 123
     ab2:	b4 e1       	ldi	r27, 0x14	; 20
     ab4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__umulhisi3>
     ab8:	96 95       	lsr	r25
     aba:	87 95       	ror	r24
     abc:	00 97       	sbiw	r24, 0x00	; 0
     abe:	11 f3       	breq	.-60     	; 0xa84 <motorControl+0x9a>
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	4a ef       	ldi	r20, 0xFA	; 250
     ac6:	4a 95       	dec	r20
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <motorControl+0xdc>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <motorControl+0xe2>
     acc:	2f 5f       	subi	r18, 0xFF	; 255
     ace:	3f 4f       	sbci	r19, 0xFF	; 255
     ad0:	28 17       	cp	r18, r24
     ad2:	39 07       	cpc	r19, r25
     ad4:	b9 f7       	brne	.-18     	; 0xac4 <motorControl+0xda>
     ad6:	d6 cf       	rjmp	.-84     	; 0xa84 <motorControl+0x9a>
                if ((m->current_pwm + m->acceleration_step) > m->max_pwm){
                    m->current_pwm = m->max_pwm;
                    pwm = m->max_pwm;
                }
                else{
                    m->current_pwm += m->acceleration_step;
     ad8:	8b a5       	ldd	r24, Y+43	; 0x2b
     ada:	28 0f       	add	r18, r24
     adc:	2b a7       	std	Y+43, r18	; 0x2b
     ade:	af cf       	rjmp	.-162    	; 0xa3e <motorControl+0x54>
            }
        }
        else{
            while(m->current_pwm != pwm){ //Loop until set is equal
                if (m->current_pwm - m->deacceleration_step <= 0){
                    m->current_pwm = 0;
     ae0:	1b a6       	std	Y+43, r1	; 0x2b
     ae2:	de cf       	rjmp	.-68     	; 0xaa0 <motorControl+0xb6>

00000ae4 <getActuatorLength>:
        ie. 180 +offset  => 180 + +90 = 270 degrees
    */
}

//returns motor actuator length in millimeters
uint16_t getActuatorLength(motor *m){
     ae4:	a0 e0       	ldi	r26, 0x00	; 0
     ae6:	b0 e0       	ldi	r27, 0x00	; 0
     ae8:	e8 e7       	ldi	r30, 0x78	; 120
     aea:	f5 e0       	ldi	r31, 0x05	; 5
     aec:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__prologue_saves__+0xc>
     af0:	ec 01       	movw	r28, r24
    uint16_t voltage = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
     af2:	44 e0       	ldi	r20, 0x04	; 4
     af4:	60 e4       	ldi	r22, 0x40	; 64
     af6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     af8:	6e dc       	rcall	.-1828   	; 0x3d6 <AVGVoltage>
     afa:	8c 01       	movw	r16, r24
    float effective_range = (m->actuator_max_length - m->actuator_min_length); 
     afc:	fe 01       	movw	r30, r28
     afe:	e4 5b       	subi	r30, 0xB4	; 180
     b00:	ff 4f       	sbci	r31, 0xFF	; 255
     b02:	a0 80       	ld	r10, Z
     b04:	b1 80       	ldd	r11, Z+1	; 0x01
    uint16_t length =  m->actuator_min_length + (effective_range / 1024)*voltage; //volts per degree
     b06:	b5 01       	movw	r22, r10
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 28 13 	call	0x2650	; 0x2650 <__floatunsisf>
     b10:	6b 01       	movw	r12, r22
     b12:	7c 01       	movw	r14, r24
}

//returns motor actuator length in millimeters
uint16_t getActuatorLength(motor *m){
    uint16_t voltage = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    float effective_range = (m->actuator_max_length - m->actuator_min_length); 
     b14:	fe 01       	movw	r30, r28
     b16:	e2 5b       	subi	r30, 0xB2	; 178
     b18:	ff 4f       	sbci	r31, 0xFF	; 255
     b1a:	40 81       	ld	r20, Z
     b1c:	51 81       	ldd	r21, Z+1	; 0x01
     b1e:	4a 19       	sub	r20, r10
     b20:	5b 09       	sbc	r21, r11
     b22:	ba 01       	movw	r22, r20
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 28 13 	call	0x2650	; 0x2650 <__floatunsisf>
    uint16_t length =  m->actuator_min_length + (effective_range / 1024)*voltage; //volts per degree
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e8       	ldi	r20, 0x80	; 128
     b32:	5a e3       	ldi	r21, 0x3A	; 58
     b34:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     b38:	4b 01       	movw	r8, r22
     b3a:	5c 01       	movw	r10, r24
     b3c:	b8 01       	movw	r22, r16
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 28 13 	call	0x2650	; 0x2650 <__floatunsisf>
     b46:	9b 01       	movw	r18, r22
     b48:	ac 01       	movw	r20, r24
     b4a:	c5 01       	movw	r24, r10
     b4c:	b4 01       	movw	r22, r8
     b4e:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     b52:	9b 01       	movw	r18, r22
     b54:	ac 01       	movw	r20, r24
     b56:	c7 01       	movw	r24, r14
     b58:	b6 01       	movw	r22, r12
     b5a:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     b5e:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <__fixunssfsi>
     b62:	6b 01       	movw	r12, r22
     b64:	7c 01       	movw	r14, r24
    
    if (length >= m->actuator_max_limit){
     b66:	fe 01       	movw	r30, r28
     b68:	ee 5a       	subi	r30, 0xAE	; 174
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	20 81       	ld	r18, Z
     b6e:	31 81       	ldd	r19, Z+1	; 0x01
     b70:	62 17       	cp	r22, r18
     b72:	73 07       	cpc	r23, r19
     b74:	e8 f4       	brcc	.+58     	; 0xbb0 <getActuatorLength+0xcc>
        m->status = MAX_LIMIT;
        motorControl(m, FORWARD, SHUTDOWN); //SHUTDOWN motor
        //TODO do something when limits are crossed
    }
    else if(length <= m->actuator_min_limit){
     b76:	fe 01       	movw	r30, r28
     b78:	e0 5b       	subi	r30, 0xB0	; 176
     b7a:	ff 4f       	sbci	r31, 0xFF	; 255
     b7c:	20 81       	ld	r18, Z
     b7e:	31 81       	ldd	r19, Z+1	; 0x01
     b80:	26 17       	cp	r18, r22
     b82:	37 07       	cpc	r19, r23
     b84:	38 f4       	brcc	.+14     	; 0xb94 <getActuatorLength+0xb0>
        m->status = MIN_LIMIT;
        motorControl(m, FORWARD, SHUTDOWN);  //SHUTDOWN motor
    }
    return length;
}
     b86:	c6 01       	movw	r24, r12
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	ec e0       	ldi	r30, 0x0C	; 12
     b8e:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__epilogue_restores__+0xc>
     b92:	11 c0       	rjmp	.+34     	; 0xbb6 <getMotorPosition>
        m->status = MAX_LIMIT;
        motorControl(m, FORWARD, SHUTDOWN); //SHUTDOWN motor
        //TODO do something when limits are crossed
    }
    else if(length <= m->actuator_min_limit){
        m->status = MIN_LIMIT;
     b94:	38 96       	adiw	r30, 0x08	; 8
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	80 83       	st	Z, r24
        motorControl(m, FORWARD, SHUTDOWN);  //SHUTDOWN motor
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	ce 01       	movw	r24, r28
     ba0:	24 df       	rcall	.-440    	; 0x9ea <motorControl>
    }
    return length;
}
     ba2:	c6 01       	movw	r24, r12
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	ec e0       	ldi	r30, 0x0C	; 12
     baa:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__epilogue_restores__+0xc>
     bae:	03 c0       	rjmp	.+6      	; 0xbb6 <getMotorPosition>
    uint16_t voltage = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    float effective_range = (m->actuator_max_length - m->actuator_min_length); 
    uint16_t length =  m->actuator_min_length + (effective_range / 1024)*voltage; //volts per degree
    
    if (length >= m->actuator_max_limit){
        m->status = MAX_LIMIT;
     bb0:	36 96       	adiw	r30, 0x06	; 6
     bb2:	85 e0       	ldi	r24, 0x05	; 5
     bb4:	f1 cf       	rjmp	.-30     	; 0xb98 <getActuatorLength+0xb4>

00000bb6 <getMotorPosition>:
//Initialize MOTOR A, Angle motor
//volatile motor motors[NUM_OF_MOTORS];
//extern motor motors[NUM_OF_MOTORS];

//returns motor final calculated position in degrees
float getMotorPosition(motor *m){
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	ec 01       	movw	r28, r24
    uint16_t alen = getActuatorLength(m);
     bbc:	93 df       	rcall	.-218    	; 0xae4 <getActuatorLength>
    float aoffset = m->angle_correction(alen);
     bbe:	fe 01       	movw	r30, r28
     bc0:	e7 5a       	subi	r30, 0xA7	; 167
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	01 90       	ld	r0, Z+
     bc6:	f0 81       	ld	r31, Z
     bc8:	e0 2d       	mov	r30, r0
     bca:	09 95       	icall
    return m->angle_reference + aoffset;
     bcc:	c8 5b       	subi	r28, 0xB8	; 184
     bce:	df 4f       	sbci	r29, 0xFF	; 255
     bd0:	28 81       	ld	r18, Y
     bd2:	39 81       	ldd	r19, Y+1	; 0x01
     bd4:	4a 81       	ldd	r20, Y+2	; 0x02
     bd6:	5b 81       	ldd	r21, Y+3	; 0x03
     bd8:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
        90 when actuator is at max position

        ie. 180 + offset => 180 + -90 = 90  degrees
        ie. 180 +offset  => 180 + +90 = 270 degrees
    */
}
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	08 95       	ret

00000be2 <initMotor>:
        motorControl(m, dir, pwm); // Call recursively this function again when motor is stopped.
    }
}


void initMotor(void){
     be2:	a1 e1       	ldi	r26, 0x11	; 17
     be4:	b1 e0       	ldi	r27, 0x01	; 1
     be6:	e7 ef       	ldi	r30, 0xF7	; 247
     be8:	f5 e0       	ldi	r31, 0x05	; 5
     bea:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__+0x16>
    motor m1 =
     bee:	8b e5       	ldi	r24, 0x5B	; 91
     bf0:	ee e0       	ldi	r30, 0x0E	; 14
     bf2:	f1 e0       	ldi	r31, 0x01	; 1
     bf4:	de 01       	movw	r26, r28
     bf6:	a9 54       	subi	r26, 0x49	; 73
     bf8:	bf 4f       	sbci	r27, 0xFF	; 255
     bfa:	01 90       	ld	r0, Z+
     bfc:	0d 92       	st	X+, r0
     bfe:	8a 95       	dec	r24
     c00:	e1 f7       	brne	.-8      	; 0xbfa <initMotor+0x18>
         ANGLE_MOTOR_TIMEOUT,//timeout in milliseconds
         0,                  //timeout current value starts at zero
         STATUS_OK,
         &angleConversion //angle correction function pointer
    };
    motor m2 =
     c02:	8b e5       	ldi	r24, 0x5B	; 91
     c04:	e9 e6       	ldi	r30, 0x69	; 105
     c06:	f1 e0       	ldi	r31, 0x01	; 1
     c08:	de 01       	movw	r26, r28
     c0a:	a4 5a       	subi	r26, 0xA4	; 164
     c0c:	bf 4f       	sbci	r27, 0xFF	; 255
     c0e:	01 90       	ld	r0, Z+
     c10:	0d 92       	st	X+, r0
     c12:	8a 95       	dec	r24
     c14:	e1 f7       	brne	.-8      	; 0xc0e <initMotor+0x2c>
         TILT_MOTOR_TIMEOUT,//timeout in milliseconds
         0,                  //timeout current value starts at zero
         STATUS_OK,
         &tiltConversion //angle correction function pointer
    };
    motors[ANGLE_MOTOR] = m1;
     c16:	8b e5       	ldi	r24, 0x5B	; 91
     c18:	fe 01       	movw	r30, r28
     c1a:	e9 54       	subi	r30, 0x49	; 73
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	a4 e3       	ldi	r26, 0x34	; 52
     c20:	b2 e0       	ldi	r27, 0x02	; 2
     c22:	01 90       	ld	r0, Z+
     c24:	0d 92       	st	X+, r0
     c26:	8a 95       	dec	r24
     c28:	e1 f7       	brne	.-8      	; 0xc22 <initMotor+0x40>
    motors[TILT_MOTOR] = m2;
     c2a:	8b e5       	ldi	r24, 0x5B	; 91
     c2c:	fe 01       	movw	r30, r28
     c2e:	e4 5a       	subi	r30, 0xA4	; 164
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	af e8       	ldi	r26, 0x8F	; 143
     c34:	b2 e0       	ldi	r27, 0x02	; 2
     c36:	01 90       	ld	r0, Z+
     c38:	0d 92       	st	X+, r0
     c3a:	8a 95       	dec	r24
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <initMotor+0x54>
     c3e:	84 e3       	ldi	r24, 0x34	; 52
     c40:	e8 2e       	mov	r14, r24
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	f8 2e       	mov	r15, r24


    for(uint8_t i = 0; i<NUM_OF_MOTORS; i++){
        motor m = motors[i];
     c46:	9b e5       	ldi	r25, 0x5B	; 91
     c48:	d9 2e       	mov	r13, r25
        //Set direction and enable to output pins
        *m.fwd_dir_addr |= 1<<m.fwd_pin;
     c4a:	01 e0       	ldi	r16, 0x01	; 1
     c4c:	10 e0       	ldi	r17, 0x00	; 0
    motors[ANGLE_MOTOR] = m1;
    motors[TILT_MOTOR] = m2;


    for(uint8_t i = 0; i<NUM_OF_MOTORS; i++){
        motor m = motors[i];
     c4e:	f7 01       	movw	r30, r14
     c50:	de 01       	movw	r26, r28
     c52:	11 96       	adiw	r26, 0x01	; 1
     c54:	8d 2d       	mov	r24, r13
     c56:	01 90       	ld	r0, Z+
     c58:	0d 92       	st	X+, r0
     c5a:	8a 95       	dec	r24
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <initMotor+0x74>
        //Set direction and enable to output pins
        *m.fwd_dir_addr |= 1<<m.fwd_pin;
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	fc 81       	ldd	r31, Y+4	; 0x04
     c62:	20 81       	ld	r18, Z
     c64:	c8 01       	movw	r24, r16
     c66:	0d 80       	ldd	r0, Y+5	; 0x05
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <initMotor+0x8c>
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	0a 94       	dec	r0
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <initMotor+0x88>
     c72:	82 2b       	or	r24, r18
     c74:	80 83       	st	Z, r24
        *m.rev_dir_addr |= 1<<m.rev_pin;
     c76:	e8 89       	ldd	r30, Y+16	; 0x10
     c78:	f9 89       	ldd	r31, Y+17	; 0x11
     c7a:	20 81       	ld	r18, Z
     c7c:	c8 01       	movw	r24, r16
     c7e:	0a 88       	ldd	r0, Y+18	; 0x12
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <initMotor+0xa4>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <initMotor+0xa0>
     c8a:	82 2b       	or	r24, r18
     c8c:	80 83       	st	Z, r24
        *m.enable_dir_addr |= 1<<m.enable_pin;
     c8e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     c90:	fe 8d       	ldd	r31, Y+30	; 0x1e
     c92:	20 81       	ld	r18, Z
     c94:	c8 01       	movw	r24, r16
     c96:	0f 8c       	ldd	r0, Y+31	; 0x1f
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <initMotor+0xbc>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	0a 94       	dec	r0
     ca0:	e2 f7       	brpl	.-8      	; 0xc9a <initMotor+0xb8>
     ca2:	82 2b       	or	r24, r18
     ca4:	80 83       	st	Z, r24
        
        //Set pullups correctly
        *m.fwd_port_addr &= ~(1<<m.fwd_pin);
     ca6:	e9 81       	ldd	r30, Y+1	; 0x01
     ca8:	fa 81       	ldd	r31, Y+2	; 0x02
     caa:	90 81       	ld	r25, Z
     cac:	98 01       	movw	r18, r16
     cae:	0d 80       	ldd	r0, Y+5	; 0x05
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <initMotor+0xd4>
     cb2:	22 0f       	add	r18, r18
     cb4:	33 1f       	adc	r19, r19
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <initMotor+0xd0>
     cba:	82 2f       	mov	r24, r18
     cbc:	80 95       	com	r24
     cbe:	89 23       	and	r24, r25
     cc0:	80 83       	st	Z, r24
        *m.rev_port_addr &= ~(1<<m.rev_pin);
     cc2:	ee 85       	ldd	r30, Y+14	; 0x0e
     cc4:	ff 85       	ldd	r31, Y+15	; 0x0f
     cc6:	90 81       	ld	r25, Z
     cc8:	98 01       	movw	r18, r16
     cca:	0a 88       	ldd	r0, Y+18	; 0x12
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <initMotor+0xf0>
     cce:	22 0f       	add	r18, r18
     cd0:	33 1f       	adc	r19, r19
     cd2:	0a 94       	dec	r0
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <initMotor+0xec>
     cd6:	82 2f       	mov	r24, r18
     cd8:	80 95       	com	r24
     cda:	89 23       	and	r24, r25
     cdc:	80 83       	st	Z, r24
        *m.enable_port_addr &= ~(1<<m.enable_pin);
     cde:	eb 8d       	ldd	r30, Y+27	; 0x1b
     ce0:	fc 8d       	ldd	r31, Y+28	; 0x1c
     ce2:	90 81       	ld	r25, Z
     ce4:	98 01       	movw	r18, r16
     ce6:	0f 8c       	ldd	r0, Y+31	; 0x1f
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <initMotor+0x10c>
     cea:	22 0f       	add	r18, r18
     cec:	33 1f       	adc	r19, r19
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <initMotor+0x108>
     cf2:	82 2f       	mov	r24, r18
     cf4:	80 95       	com	r24
     cf6:	89 23       	and	r24, r25
     cf8:	80 83       	st	Z, r24
        
        //Init forward PWM settings
        *m.fwd_TCCRA_addr = 0x00;//m.fwd_TCCRA_value;
     cfa:	ee 81       	ldd	r30, Y+6	; 0x06
     cfc:	ff 81       	ldd	r31, Y+7	; 0x07
     cfe:	10 82       	st	Z, r1
        *m.fwd_TCCRB_addr = 0x00;//m.fwd_TCCRB_value;
     d00:	e9 85       	ldd	r30, Y+9	; 0x09
     d02:	fa 85       	ldd	r31, Y+10	; 0x0a
     d04:	10 82       	st	Z, r1
        *m.fwd_OCR_addr = 0x00; //Init PWM to zero
     d06:	ec 85       	ldd	r30, Y+12	; 0x0c
     d08:	fd 85       	ldd	r31, Y+13	; 0x0d
     d0a:	10 82       	st	Z, r1
        
        //Init reverse PWM settings
        *m.rev_TCCRA_addr = 0x00;//m.rev_TCCRA_value;
     d0c:	eb 89       	ldd	r30, Y+19	; 0x13
     d0e:	fc 89       	ldd	r31, Y+20	; 0x14
     d10:	10 82       	st	Z, r1
        *m.rev_TCCRB_addr = 0x00; //m.rev_TCCRB_value;
     d12:	ee 89       	ldd	r30, Y+22	; 0x16
     d14:	ff 89       	ldd	r31, Y+23	; 0x17
     d16:	10 82       	st	Z, r1
        *m.rev_OCR_addr = 0x00; //Init PWM to zero
     d18:	e9 8d       	ldd	r30, Y+25	; 0x19
     d1a:	fa 8d       	ldd	r31, Y+26	; 0x1a
     d1c:	10 82       	st	Z, r1
        
        //init Actuator +5 and GND pins
        *m.actuator_1_port_addr |= 1<<m.actuator_1_pin;
     d1e:	ea a1       	ldd	r30, Y+34	; 0x22
     d20:	fb a1       	ldd	r31, Y+35	; 0x23
     d22:	20 81       	ld	r18, Z
     d24:	c8 01       	movw	r24, r16
     d26:	0e a0       	ldd	r0, Y+38	; 0x26
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <initMotor+0x14c>
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	0a 94       	dec	r0
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <initMotor+0x148>
     d32:	82 2b       	or	r24, r18
     d34:	80 83       	st	Z, r24
        *m.actuator_1_dir_addr |= 1<<m.actuator_1_pin;
     d36:	ec a1       	ldd	r30, Y+36	; 0x24
     d38:	fd a1       	ldd	r31, Y+37	; 0x25
     d3a:	20 81       	ld	r18, Z
     d3c:	c8 01       	movw	r24, r16
     d3e:	0e a0       	ldd	r0, Y+38	; 0x26
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <initMotor+0x164>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <initMotor+0x160>
     d4a:	82 2b       	or	r24, r18
     d4c:	80 83       	st	Z, r24
        *m.actuator_1_port_addr &= ~(1<<m.actuator_2_pin);
     d4e:	ea a1       	ldd	r30, Y+34	; 0x22
     d50:	fb a1       	ldd	r31, Y+35	; 0x23
     d52:	90 81       	ld	r25, Z
     d54:	98 01       	movw	r18, r16
     d56:	0b a4       	ldd	r0, Y+43	; 0x2b
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <initMotor+0x17c>
     d5a:	22 0f       	add	r18, r18
     d5c:	33 1f       	adc	r19, r19
     d5e:	0a 94       	dec	r0
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <initMotor+0x178>
     d62:	82 2f       	mov	r24, r18
     d64:	80 95       	com	r24
     d66:	89 23       	and	r24, r25
     d68:	80 83       	st	Z, r24
        *m.actuator_1_dir_addr &= ~(1<<m.actuator_2_pin);
     d6a:	ec a1       	ldd	r30, Y+36	; 0x24
     d6c:	fd a1       	ldd	r31, Y+37	; 0x25
     d6e:	90 81       	ld	r25, Z
     d70:	98 01       	movw	r18, r16
     d72:	0b a4       	ldd	r0, Y+43	; 0x2b
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <initMotor+0x198>
     d76:	22 0f       	add	r18, r18
     d78:	33 1f       	adc	r19, r19
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <initMotor+0x194>
     d7e:	82 2f       	mov	r24, r18
     d80:	80 95       	com	r24
     d82:	89 23       	and	r24, r25
     d84:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d86:	8f e3       	ldi	r24, 0x3F	; 63
     d88:	9c e9       	ldi	r25, 0x9C	; 156
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <initMotor+0x1a8>
     d8e:	00 c0       	rjmp	.+0      	; 0xd90 <initMotor+0x1ae>
     d90:	00 00       	nop
        _delay_ms(10); //wait 10ms so ADC pins settle.

        m.current_position = getMotorPosition(&m);  
     d92:	ce 01       	movw	r24, r28
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	0f df       	rcall	.-482    	; 0xbb6 <getMotorPosition>
     d98:	6e a7       	std	Y+46, r22	; 0x2e
     d9a:	7f a7       	std	Y+47, r23	; 0x2f
     d9c:	88 ab       	std	Y+48, r24	; 0x30
     d9e:	99 ab       	std	Y+49, r25	; 0x31
     da0:	9b e5       	ldi	r25, 0x5B	; 91
     da2:	e9 0e       	add	r14, r25
     da4:	f1 1c       	adc	r15, r1
    };
    motors[ANGLE_MOTOR] = m1;
    motors[TILT_MOTOR] = m2;


    for(uint8_t i = 0; i<NUM_OF_MOTORS; i++){
     da6:	8a ee       	ldi	r24, 0xEA	; 234
     da8:	e8 16       	cp	r14, r24
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	f8 06       	cpc	r15, r24
     dae:	09 f0       	breq	.+2      	; 0xdb2 <initMotor+0x1d0>
     db0:	4e cf       	rjmp	.-356    	; 0xc4e <initMotor+0x6c>
       //Update motor positions
    //motors[ANGLE_MOTOR].current_position = getAngle();
    //motors[TILT_MOTOR].current_position  = getTilt();    
    
   // GTCCR = 0x00;       //Start Counter
}
     db2:	cf 5e       	subi	r28, 0xEF	; 239
     db4:	de 4f       	sbci	r29, 0xFE	; 254
     db6:	e7 e0       	ldi	r30, 0x07	; 7
     db8:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__+0x16>

00000dbc <getTiltActuatorCurrentLength>:
    }
    return length;
}

uint16_t getTiltActuatorCurrentLength(void){
    return getActuatorLength(&motors[TILT_MOTOR]);
     dbc:	8f e8       	ldi	r24, 0x8F	; 143
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	91 ce       	rjmp	.-734    	; 0xae4 <getActuatorLength>
}
     dc2:	08 95       	ret

00000dc4 <getAngleActuatorCurrentLength>:

uint16_t getAngleActuatorCurrentLength(void){
    return getActuatorLength(&motors[ANGLE_MOTOR]);
     dc4:	84 e3       	ldi	r24, 0x34	; 52
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	8d ce       	rjmp	.-742    	; 0xae4 <getActuatorLength>
}
     dca:	08 95       	ret

00000dcc <motorControlLoop>:
    }
    return status;
}

//This is motorcontrol loop which is called n. times per second.
void motorControlLoop(motor *m){    
     dcc:	a0 e0       	ldi	r26, 0x00	; 0
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	ec ee       	ldi	r30, 0xEC	; 236
     dd2:	f6 e0       	ldi	r31, 0x06	; 6
     dd4:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__prologue_saves__+0x4>
     dd8:	ec 01       	movw	r28, r24
    //Check if we have been running too long
    if (m->timeout_value >= m->timeout_setting){
     dda:	8c 01       	movw	r16, r24
     ddc:	0a 5a       	subi	r16, 0xAA	; 170
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	fc 01       	movw	r30, r24
     de2:	ec 5a       	subi	r30, 0xAC	; 172
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	d8 01       	movw	r26, r16
     de8:	2d 91       	ld	r18, X+
     dea:	3c 91       	ld	r19, X
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
     df0:	28 17       	cp	r18, r24
     df2:	39 07       	cpc	r19, r25
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <motorControlLoop+0x2c>
     df6:	73 c0       	rjmp	.+230    	; 0xede <motorControlLoop+0x112>
        motorControl(m, BACKWARD, 0); //Shutdown motor if it has been running too long.
        return;
    }

    //Set position is higher than current
    if (m->set_position > m->current_position + m->angle_hysteresis && m->status != MAX_LIMIT){ //Check that we are not overriding motor
     df8:	c9 a8       	ldd	r12, Y+49	; 0x31
     dfa:	da a8       	ldd	r13, Y+50	; 0x32
     dfc:	eb a8       	ldd	r14, Y+51	; 0x33
     dfe:	fc a8       	ldd	r15, Y+52	; 0x34
     e00:	6d a5       	ldd	r22, Y+45	; 0x2d
     e02:	7e a5       	ldd	r23, Y+46	; 0x2e
     e04:	8f a5       	ldd	r24, Y+47	; 0x2f
     e06:	98 a9       	ldd	r25, Y+48	; 0x30
     e08:	8b ac       	ldd	r8, Y+59	; 0x3b
     e0a:	9c ac       	ldd	r9, Y+60	; 0x3c
     e0c:	ad ac       	ldd	r10, Y+61	; 0x3d
     e0e:	be ac       	ldd	r11, Y+62	; 0x3e
     e10:	a5 01       	movw	r20, r10
     e12:	94 01       	movw	r18, r8
     e14:	0e 94 04 12 	call	0x2408	; 0x2408 <__addsf3>
     e18:	9b 01       	movw	r18, r22
     e1a:	ac 01       	movw	r20, r24
     e1c:	c7 01       	movw	r24, r14
     e1e:	b6 01       	movw	r22, r12
     e20:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__gesf2>
     e24:	18 16       	cp	r1, r24
     e26:	84 f5       	brge	.+96     	; 0xe88 <motorControlLoop+0xbc>
     e28:	7e 01       	movw	r14, r28
     e2a:	b8 e5       	ldi	r27, 0x58	; 88
     e2c:	eb 0e       	add	r14, r27
     e2e:	f1 1c       	adc	r15, r1
     e30:	f7 01       	movw	r30, r14
     e32:	80 81       	ld	r24, Z
     e34:	85 30       	cpi	r24, 0x05	; 5
     e36:	09 f0       	breq	.+2      	; 0xe3a <motorControlLoop+0x6e>
     e38:	64 c0       	rjmp	.+200    	; 0xf02 <motorControlLoop+0x136>
        motorControl(m, FORWARD, m->max_pwm);
        m->timeout_value ++; //update timeout variables
        m->status = RUNNING_FORWARD;
    }
    else if (m->set_position < m->current_position - m->angle_hysteresis && m->status != MIN_LIMIT){
     e3a:	49 a8       	ldd	r4, Y+49	; 0x31
     e3c:	5a a8       	ldd	r5, Y+50	; 0x32
     e3e:	6b a8       	ldd	r6, Y+51	; 0x33
     e40:	7c a8       	ldd	r7, Y+52	; 0x34
     e42:	6d a5       	ldd	r22, Y+45	; 0x2d
     e44:	7e a5       	ldd	r23, Y+46	; 0x2e
     e46:	8f a5       	ldd	r24, Y+47	; 0x2f
     e48:	98 a9       	ldd	r25, Y+48	; 0x30
     e4a:	a5 01       	movw	r20, r10
     e4c:	94 01       	movw	r18, r8
     e4e:	0e 94 03 12 	call	0x2406	; 0x2406 <__subsf3>
     e52:	9b 01       	movw	r18, r22
     e54:	ac 01       	movw	r20, r24
     e56:	c3 01       	movw	r24, r6
     e58:	b2 01       	movw	r22, r4
     e5a:	0e 94 90 12 	call	0x2520	; 0x2520 <__cmpsf2>
     e5e:	87 ff       	sbrs	r24, 7
     e60:	2f c0       	rjmp	.+94     	; 0xec0 <motorControlLoop+0xf4>
        motorControl(m, BACKWARD, m->max_pwm);
     e62:	4f ad       	ldd	r20, Y+63	; 0x3f
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	ce 01       	movw	r24, r28
     e68:	c0 dd       	rcall	.-1152   	; 0x9ea <motorControl>
        m->timeout_value ++;
     e6a:	f8 01       	movw	r30, r16
     e6c:	80 81       	ld	r24, Z
     e6e:	91 81       	ldd	r25, Z+1	; 0x01
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	91 83       	std	Z+1, r25	; 0x01
     e74:	80 83       	st	Z, r24
        m->status = RUNNING_BACKWARD;
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	d7 01       	movw	r26, r14
     e7a:	8c 93       	st	X, r24
    else{ //Motor is close enough wanted position, Shutdown motor
        motorControl(m, BACKWARD, 0);
        m->timeout_value = 0; //Clear timeout
        m->status = STATUS_OK;
    }
}
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	e0 e1       	ldi	r30, 0x10	; 16
     e82:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__epilogue_restores__+0x4>
     e86:	50 c0       	rjmp	.+160    	; 0xf28 <motorController>
    if (m->set_position > m->current_position + m->angle_hysteresis && m->status != MAX_LIMIT){ //Check that we are not overriding motor
        motorControl(m, FORWARD, m->max_pwm);
        m->timeout_value ++; //update timeout variables
        m->status = RUNNING_FORWARD;
    }
    else if (m->set_position < m->current_position - m->angle_hysteresis && m->status != MIN_LIMIT){
     e88:	c9 a8       	ldd	r12, Y+49	; 0x31
     e8a:	da a8       	ldd	r13, Y+50	; 0x32
     e8c:	eb a8       	ldd	r14, Y+51	; 0x33
     e8e:	fc a8       	ldd	r15, Y+52	; 0x34
     e90:	6d a5       	ldd	r22, Y+45	; 0x2d
     e92:	7e a5       	ldd	r23, Y+46	; 0x2e
     e94:	8f a5       	ldd	r24, Y+47	; 0x2f
     e96:	98 a9       	ldd	r25, Y+48	; 0x30
     e98:	a5 01       	movw	r20, r10
     e9a:	94 01       	movw	r18, r8
     e9c:	0e 94 03 12 	call	0x2406	; 0x2406 <__subsf3>
     ea0:	9b 01       	movw	r18, r22
     ea2:	ac 01       	movw	r20, r24
     ea4:	c7 01       	movw	r24, r14
     ea6:	b6 01       	movw	r22, r12
     ea8:	0e 94 90 12 	call	0x2520	; 0x2520 <__cmpsf2>
     eac:	87 ff       	sbrs	r24, 7
     eae:	24 c0       	rjmp	.+72     	; 0xef8 <motorControlLoop+0x12c>
     eb0:	7e 01       	movw	r14, r28
     eb2:	98 e5       	ldi	r25, 0x58	; 88
     eb4:	e9 0e       	add	r14, r25
     eb6:	f1 1c       	adc	r15, r1
     eb8:	d7 01       	movw	r26, r14
     eba:	8c 91       	ld	r24, X
     ebc:	84 30       	cpi	r24, 0x04	; 4
     ebe:	89 f6       	brne	.-94     	; 0xe62 <motorControlLoop+0x96>
        motorControl(m, BACKWARD, m->max_pwm);
        m->timeout_value ++;
        m->status = RUNNING_BACKWARD;
    }
    else{ //Motor is close enough wanted position, Shutdown motor
        motorControl(m, BACKWARD, 0);
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	ce 01       	movw	r24, r28
     ec6:	91 dd       	rcall	.-1246   	; 0x9ea <motorControl>
        m->timeout_value = 0; //Clear timeout
     ec8:	f8 01       	movw	r30, r16
     eca:	11 82       	std	Z+1, r1	; 0x01
     ecc:	10 82       	st	Z, r1
        m->status = STATUS_OK;
     ece:	d7 01       	movw	r26, r14
     ed0:	1c 92       	st	X, r1
    }
}
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	e0 e1       	ldi	r30, 0x10	; 16
     ed8:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__epilogue_restores__+0x4>
     edc:	25 c0       	rjmp	.+74     	; 0xf28 <motorController>

//This is motorcontrol loop which is called n. times per second.
void motorControlLoop(motor *m){    
    //Check if we have been running too long
    if (m->timeout_value >= m->timeout_setting){
        m->status = TIMEOUT_ERROR;
     ede:	34 96       	adiw	r30, 0x04	; 4
     ee0:	83 e0       	ldi	r24, 0x03	; 3
     ee2:	80 83       	st	Z, r24
        motorControl(m, BACKWARD, 0); //Shutdown motor if it has been running too long.
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	ce 01       	movw	r24, r28
     eea:	7f dd       	rcall	.-1282   	; 0x9ea <motorControl>
    else{ //Motor is close enough wanted position, Shutdown motor
        motorControl(m, BACKWARD, 0);
        m->timeout_value = 0; //Clear timeout
        m->status = STATUS_OK;
    }
}
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	e0 e1       	ldi	r30, 0x10	; 16
     ef2:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__epilogue_restores__+0x4>
     ef6:	18 c0       	rjmp	.+48     	; 0xf28 <motorController>
     ef8:	ce 01       	movw	r24, r28
     efa:	88 5a       	subi	r24, 0xA8	; 168
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	7c 01       	movw	r14, r24
     f00:	df cf       	rjmp	.-66     	; 0xec0 <motorControlLoop+0xf4>
        return;
    }

    //Set position is higher than current
    if (m->set_position > m->current_position + m->angle_hysteresis && m->status != MAX_LIMIT){ //Check that we are not overriding motor
        motorControl(m, FORWARD, m->max_pwm);
     f02:	4f ad       	ldd	r20, Y+63	; 0x3f
     f04:	61 e0       	ldi	r22, 0x01	; 1
     f06:	ce 01       	movw	r24, r28
     f08:	70 dd       	rcall	.-1312   	; 0x9ea <motorControl>
        m->timeout_value ++; //update timeout variables
     f0a:	d8 01       	movw	r26, r16
     f0c:	8d 91       	ld	r24, X+
     f0e:	9c 91       	ld	r25, X
     f10:	11 97       	sbiw	r26, 0x01	; 1
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	8d 93       	st	X+, r24
     f16:	9c 93       	st	X, r25
        m->status = RUNNING_FORWARD;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	f7 01       	movw	r30, r14
     f1c:	80 83       	st	Z, r24
    else{ //Motor is close enough wanted position, Shutdown motor
        motorControl(m, BACKWARD, 0);
        m->timeout_value = 0; //Clear timeout
        m->status = STATUS_OK;
    }
}
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	e0 e1       	ldi	r30, 0x10	; 16
     f24:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__epilogue_restores__+0x4>

00000f28 <motorController>:
    This function controls angle and tilt motors
    It reads actual Angle and Tilt values using ADC
    Then it Adjust motor PWM to correct direction and leaves it there.
    This function must be called n. times per second
*/
motor_status motorController(void){
     f28:	cf 93       	push	r28
    //Update current motor positions
    uint8_t status = 0;
    for (uint8_t i = 0; i < NUM_OF_MOTORS; i++){
        motors[i].current_position = getMotorPosition(&motors[i]); 
     f2a:	84 e3       	ldi	r24, 0x34	; 52
     f2c:	92 e0       	ldi	r25, 0x02	; 2
     f2e:	43 de       	rcall	.-890    	; 0xbb6 <getMotorPosition>
     f30:	60 93 61 02 	sts	0x0261, r22	; 0x800261 <motors+0x2d>
     f34:	70 93 62 02 	sts	0x0262, r23	; 0x800262 <motors+0x2e>
     f38:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <motors+0x2f>
     f3c:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <motors+0x30>
        motorControlLoop(&motors[i]);
     f40:	84 e3       	ldi	r24, 0x34	; 52
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	43 df       	rcall	.-378    	; 0xdcc <motorControlLoop>
        status += motors[i].status; //Collect status from all motors
     f46:	c0 91 8c 02 	lds	r28, 0x028C	; 0x80028c <motors+0x58>
*/
motor_status motorController(void){
    //Update current motor positions
    uint8_t status = 0;
    for (uint8_t i = 0; i < NUM_OF_MOTORS; i++){
        motors[i].current_position = getMotorPosition(&motors[i]); 
     f4a:	8f e8       	ldi	r24, 0x8F	; 143
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	33 de       	rcall	.-922    	; 0xbb6 <getMotorPosition>
     f50:	60 93 bc 02 	sts	0x02BC, r22	; 0x8002bc <motors+0x88>
     f54:	70 93 bd 02 	sts	0x02BD, r23	; 0x8002bd <motors+0x89>
     f58:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <motors+0x8a>
     f5c:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <motors+0x8b>
        motorControlLoop(&motors[i]);
     f60:	8f e8       	ldi	r24, 0x8F	; 143
     f62:	92 e0       	ldi	r25, 0x02	; 2
     f64:	33 df       	rcall	.-410    	; 0xdcc <motorControlLoop>
        status += motors[i].status; //Collect status from all motors
     f66:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <motors+0xb3>
    }
    return status;
}
     f6a:	8c 0f       	add	r24, r28
     f6c:	cf 91       	pop	r28
     f6e:	08 95       	ret

00000f70 <read_until_line_end>:

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
     f70:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__data_end>
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	e8 50       	subi	r30, 0x08	; 8
     f78:	fd 4f       	sbci	r31, 0xFD	; 253
     f7a:	80 81       	ld	r24, Z
     f7c:	8a 30       	cpi	r24, 0x0A	; 10
     f7e:	a1 f0       	breq	.+40     	; 0xfa8 <read_until_line_end+0x38>
     f80:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__data_end>
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	e8 50       	subi	r30, 0x08	; 8
     f88:	fd 4f       	sbci	r31, 0xFD	; 253
     f8a:	80 81       	ld	r24, Z
     f8c:	8d 30       	cpi	r24, 0x0D	; 13
     f8e:	61 f0       	breq	.+24     	; 0xfa8 <read_until_line_end+0x38>
     f90:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <__data_end>
     f94:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <ring_write>
     f98:	98 17       	cp	r25, r24
     f9a:	31 f0       	breq	.+12     	; 0xfa8 <read_until_line_end+0x38>
        ring_read++;
     f9c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
     fa0:	8f 5f       	subi	r24, 0xFF	; 255
     fa2:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
     fa6:	e4 cf       	rjmp	.-56     	; 0xf70 <read_until_line_end>
     fa8:	08 95       	ret

00000faa <initSerialParser>:
/*
    Initializes serialport and clears ring buffer
    This function also takes angle and tilt global variable pointer where set angle values are stored 
*/
void initSerialParser(FILE *serialport){
    port = serialport;
     faa:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <port+0x1>
     fae:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <port>
     fb2:	e8 ef       	ldi	r30, 0xF8	; 248
     fb4:	f2 e0       	ldi	r31, 0x02	; 2
volatile char buffer[BUFSIZE+1];

FILE *port; //Serialport to host machine

__attribute__((always_inline)) inline static void clearBuffer(volatile char *buffer,uint8_t len){
	for(uint8_t i=0;i<len;i++){	*buffer++ = '\0';}
     fb6:	10 82       	st	Z, r1
     fb8:	31 96       	adiw	r30, 0x01	; 1
     fba:	83 e0       	ldi	r24, 0x03	; 3
     fbc:	e7 3f       	cpi	r30, 0xF7	; 247
     fbe:	f8 07       	cpc	r31, r24
     fc0:	d1 f7       	brne	.-12     	; 0xfb6 <initSerialParser+0xc>
    This function also takes angle and tilt global variable pointer where set angle values are stored 
*/
void initSerialParser(FILE *serialport){
    port = serialport;
    clearBuffer(buffer, BUFSIZE);
}
     fc2:	08 95       	ret

00000fc4 <readInt16>:

/*
    Reads 16 bit int from ringbuffer. 
    Function must be used because serial data is stored in to ring buffer
*/
uint16_t readInt16(uint8_t start, uint8_t stop){
     fc4:	a5 e0       	ldi	r26, 0x05	; 5
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 ee       	ldi	r30, 0xE8	; 232
     fca:	f7 e0       	ldi	r31, 0x07	; 7
     fcc:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__prologue_saves__+0x20>
     fd0:	e8 2f       	mov	r30, r24
    char buf[5] = {'\0','\0','\0','\0','\0'};
     fd2:	ae 01       	movw	r20, r28
     fd4:	4f 5f       	subi	r20, 0xFF	; 255
     fd6:	5f 4f       	sbci	r21, 0xFF	; 255
     fd8:	85 e0       	ldi	r24, 0x05	; 5
     fda:	da 01       	movw	r26, r20
     fdc:	1d 92       	st	X+, r1
     fde:	8a 95       	dec	r24
     fe0:	e9 f7       	brne	.-6      	; 0xfdc <readInt16+0x18>
     fe2:	da 01       	movw	r26, r20
     fe4:	35 e0       	ldi	r19, 0x05	; 5
     fe6:	3e 0f       	add	r19, r30
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	9e 0f       	add	r25, r30
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	e8 50       	subi	r30, 0x08	; 8
     ff0:	fd 4f       	sbci	r31, 0xFD	; 253
     ff2:	20 81       	ld	r18, Z
     ff4:	2d 93       	st	X+, r18
        if (start == stop){
     ff6:	96 17       	cp	r25, r22
     ff8:	19 f0       	breq	.+6      	; 0x1000 <readInt16+0x3c>
     ffa:	e9 2f       	mov	r30, r25
*/
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
     ffc:	93 13       	cpse	r25, r19
     ffe:	f4 cf       	rjmp	.-24     	; 0xfe8 <readInt16+0x24>
        buf[i] = buffer[start++];
        if (start == stop){
           i = 5;
        }
    }
    return atoi(buf);
    1000:	ca 01       	movw	r24, r20
    1002:	0e 94 32 15 	call	0x2a64	; 0x2a64 <atoi>
}
    1006:	25 96       	adiw	r28, 0x05	; 5
    1008:	e2 e0       	ldi	r30, 0x02	; 2
    100a:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <__epilogue_restores__+0x20>

0000100e <readFloat>:

/*
    Reads floating point value from ringbuffer. 
    Function must be used because serial data is stored in to ring buffer
*/
double readFloat(uint8_t start, uint8_t stop){
    100e:	aa e0       	ldi	r26, 0x0A	; 10
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ed e0       	ldi	r30, 0x0D	; 13
    1014:	f8 e0       	ldi	r31, 0x08	; 8
    1016:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__prologue_saves__+0x1c>
    101a:	e8 2f       	mov	r30, r24
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    101c:	8e 01       	movw	r16, r28
    101e:	0f 5f       	subi	r16, 0xFF	; 255
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	8a e0       	ldi	r24, 0x0A	; 10
    1024:	d8 01       	movw	r26, r16
    1026:	1d 92       	st	X+, r1
    1028:	8a 95       	dec	r24
    102a:	e9 f7       	brne	.-6      	; 0x1026 <readFloat+0x18>
    102c:	d8 01       	movw	r26, r16
    102e:	3a e0       	ldi	r19, 0x0A	; 10
    1030:	3e 0f       	add	r19, r30
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	9e 0f       	add	r25, r30
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	e8 50       	subi	r30, 0x08	; 8
    103a:	fd 4f       	sbci	r31, 0xFD	; 253
    103c:	20 81       	ld	r18, Z
    103e:	2d 93       	st	X+, r18
        if (start == stop){
    1040:	96 17       	cp	r25, r22
    1042:	19 f0       	breq	.+6      	; 0x104a <readFloat+0x3c>
    1044:	e9 2f       	mov	r30, r25
*/
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
    1046:	93 13       	cpse	r25, r19
    1048:	f4 cf       	rjmp	.-24     	; 0x1032 <readFloat+0x24>
        buf[i] = buffer[start++];
        if (start == stop){
           i = 10;
        }
    }
    printf(buf);
    104a:	1f 93       	push	r17
    104c:	0f 93       	push	r16
    104e:	0e 94 18 17 	call	0x2e30	; 0x2e30 <printf>
    printf("\n");
    1052:	8a e0       	ldi	r24, 0x0A	; 10
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <putchar>
    return atof(buf);
    105a:	c8 01       	movw	r24, r16
    105c:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <atof>
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
}
    1064:	2a 96       	adiw	r28, 0x0a	; 10
    1066:	e4 e0       	ldi	r30, 0x04	; 4
    1068:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <__epilogue_restores__+0x1c>

0000106c <findParameter>:

//Start and Stop values are pointing to Global ring buffer
uint8_t findParameter(char startchar, char stopchar, char secondstopchar, uint8_t maxlength, uint8_t *start, uint8_t *stop){
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    //Find correct start character
    while(buffer[ring_read] != startchar && ring_read != ring_write){ 
    1074:	0d c0       	rjmp	.+26     	; 0x1090 <findParameter+0x24>
    1076:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <__data_end>
    107a:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <ring_write>
    107e:	39 17       	cp	r19, r25
    1080:	79 f0       	breq	.+30     	; 0x10a0 <findParameter+0x34>
        ring_read++;
    1082:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <__data_end>
    1086:	9f 5f       	subi	r25, 0xFF	; 255
    1088:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <__data_end>
        maxlength --;
    108c:	21 50       	subi	r18, 0x01	; 1
        if (maxlength == 0){
    108e:	e9 f1       	breq	.+122    	; 0x110a <findParameter+0x9e>
}

//Start and Stop values are pointing to Global ring buffer
uint8_t findParameter(char startchar, char stopchar, char secondstopchar, uint8_t maxlength, uint8_t *start, uint8_t *stop){
    //Find correct start character
    while(buffer[ring_read] != startchar && ring_read != ring_write){ 
    1090:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__data_end>
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	e8 50       	subi	r30, 0x08	; 8
    1098:	fd 4f       	sbci	r31, 0xFD	; 253
    109a:	90 81       	ld	r25, Z
    109c:	98 13       	cpse	r25, r24
    109e:	eb cf       	rjmp	.-42     	; 0x1076 <findParameter+0xa>
        maxlength --;
        if (maxlength == 0){
            return ERROR_MAX_LENGTH;
        }
    }
    if (ring_read == ring_write){
    10a0:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <__data_end>
    10a4:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <ring_write>
    10a8:	98 17       	cp	r25, r24
    10aa:	49 f1       	breq	.+82     	; 0x10fe <findParameter+0x92>
        return ERROR_CANNOT_FIND;
    }

    ring_read++; ///Next character is what we are looking for
    10ac:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
    10b0:	8f 5f       	subi	r24, 0xFF	; 255
    10b2:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>

    //Find stop character
    *start = ring_read;
    10b6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
    10ba:	f8 01       	movw	r30, r16
    10bc:	80 83       	st	Z, r24
    10be:	0d c0       	rjmp	.+26     	; 0x10da <findParameter+0x6e>
    while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimiter or end of line
    10c0:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__data_end>
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	e8 50       	subi	r30, 0x08	; 8
    10c8:	fd 4f       	sbci	r31, 0xFD	; 253
    10ca:	80 81       	ld	r24, Z
    10cc:	48 17       	cp	r20, r24
    10ce:	69 f0       	breq	.+26     	; 0x10ea <findParameter+0x7e>
        ring_read++; //Step forward
    10d0:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
    10d4:	8f 5f       	subi	r24, 0xFF	; 255
    10d6:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>

    ring_read++; ///Next character is what we are looking for

    //Find stop character
    *start = ring_read;
    while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimiter or end of line
    10da:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__data_end>
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	e8 50       	subi	r30, 0x08	; 8
    10e2:	fd 4f       	sbci	r31, 0xFD	; 253
    10e4:	80 81       	ld	r24, Z
    10e6:	68 13       	cpse	r22, r24
    10e8:	eb cf       	rjmp	.-42     	; 0x10c0 <findParameter+0x54>
        ring_read++; //Step forward
    }
    *stop = ring_read;
    10ea:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
    10ee:	f7 01       	movw	r30, r14
    10f0:	80 83       	st	Z, r24
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    
    return FIND_SUCCESS;
}
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	ff 90       	pop	r15
    10fa:	ef 90       	pop	r14
    10fc:	08 95       	ret
        if (maxlength == 0){
            return ERROR_MAX_LENGTH;
        }
    }
    if (ring_read == ring_write){
        return ERROR_CANNOT_FIND;
    10fe:	82 e0       	ldi	r24, 0x02	; 2
        ring_read++; //Step forward
    }
    *stop = ring_read;
    
    return FIND_SUCCESS;
}
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	08 95       	ret
    //Find correct start character
    while(buffer[ring_read] != startchar && ring_read != ring_write){ 
        ring_read++;
        maxlength --;
        if (maxlength == 0){
            return ERROR_MAX_LENGTH;
    110a:	83 e0       	ldi	r24, 0x03	; 3
        ring_read++; //Step forward
    }
    *stop = ring_read;
    
    return FIND_SUCCESS;
}
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	08 95       	ret

00001116 <parseCommands>:

void parseCommands(void){
    1116:	a4 e0       	ldi	r26, 0x04	; 4
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e1 e9       	ldi	r30, 0x91	; 145
    111c:	f8 e0       	ldi	r31, 0x08	; 8
    111e:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <__prologue_saves__>
                fprintf(port, "ERR\n");
            }
            read_until_line_end();
        }
        else if (command == 'S'){ //Read both motor status
            fprintf(port,"S:%d:%d\n",getAngleMotorStatus(), getTiltMotorStatus());
    1122:	88 e2       	ldi	r24, 0x28	; 40
    1124:	a8 2e       	mov	r10, r24
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	b8 2e       	mov	r11, r24
                fprintf(port, "A%d:%d\n", channel, GetVoltage(channel, 0x40));
            }
            else if (channel == 8){
                fprintf(port,"A");
                for (uint8_t i=0; i<8; i++){
                    fprintf(port, "%d:%d:", i, GetVoltage(i, 0x40));
    112a:	91 e2       	ldi	r25, 0x21	; 33
    112c:	c9 2e       	mov	r12, r25
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	d9 2e       	mov	r13, r25
            char buff[2];
            clearBuffer(buff, 2);
            buff[0] = buffer[ring_read];
            uint8_t channel = atoi(buff);
            if (channel < 8){
                fprintf(port, "A%d:%d\n", channel, GetVoltage(channel, 0x40));
    1132:	29 e1       	ldi	r18, 0x19	; 25
    1134:	82 2e       	mov	r8, r18
    1136:	22 e0       	ldi	r18, 0x02	; 2
    1138:	92 2e       	mov	r9, r18
            }
            else if (value == '3'){ //Reads current values from motorctrl -module, actual values
                fprintf(port,"G3:%5.2f:%5.2f\n", getAngle(), getTilt());
            }
            else if (value == '4'){ //get motor statuses
                fprintf(port, "G4:%d:%d\n", getAngleMotorStatus(), getTiltMotorStatus());
    113a:	3f e0       	ldi	r19, 0x0F	; 15
    113c:	63 2e       	mov	r6, r19
    113e:	32 e0       	ldi	r19, 0x02	; 2
    1140:	73 2e       	mov	r7, r19
            uint8_t value = buffer[ring_read++]; 
            if (value == '1'){ //Rread generic info
                fprintf(port,"G1:%d\n", SW_VERSION);
            }
            else if (value == '2'){ //Read current angle and tilt set_values
                fprintf(port,"G2:%5.2f:%5.2f\n", getSetAngle(), getSetTilt());
    1142:	4f ee       	ldi	r20, 0xEF	; 239
    1144:	24 2e       	mov	r2, r20
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	34 2e       	mov	r3, r20
            read_until_line_end();
        }
        else if (command == 'G'){ //Get values
            uint8_t value = buffer[ring_read++]; 
            if (value == '1'){ //Rread generic info
                fprintf(port,"G1:%d\n", SW_VERSION);
    114a:	58 ee       	ldi	r21, 0xE8	; 232
    114c:	45 2e       	mov	r4, r21
    114e:	51 e0       	ldi	r21, 0x01	; 1
    1150:	55 2e       	mov	r5, r21
    
    return FIND_SUCCESS;
}

void parseCommands(void){
    while (ring_read != ring_write){
    1152:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <__data_end>
    1156:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <ring_write>
    115a:	98 17       	cp	r25, r24
    115c:	89 f1       	breq	.+98     	; 0x11c0 <parseCommands+0xaa>
        uint8_t command = buffer[ring_read++];
    115e:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__data_end>
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	8e 0f       	add	r24, r30
    1166:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	e8 50       	subi	r30, 0x08	; 8
    116e:	fd 4f       	sbci	r31, 0xFD	; 253
    1170:	80 81       	ld	r24, Z
        if (command == 'P'){ //PUT new values command: P1:20:40    last  angle:tilt
    1172:	80 35       	cpi	r24, 0x50	; 80
    1174:	49 f1       	breq	.+82     	; 0x11c8 <parseCommands+0xb2>
            else{
                fprintf(port,"ERR\n");
            }
            read_until_line_end();
        }
        else if (command == 'G'){ //Get values
    1176:	87 34       	cpi	r24, 0x47	; 71
    1178:	09 f4       	brne	.+2      	; 0x117c <parseCommands+0x66>
    117a:	3f c0       	rjmp	.+126    	; 0x11fa <parseCommands+0xe4>
            else{
                fprintf(port,"ERR\n");
            }
            read_until_line_end();
        }
        else if (command == 'A'){ //ADC read voltage, commands A0\n  A1\n ,A2\n ,A3\n ,A4\n and so on are possible
    117c:	81 34       	cpi	r24, 0x41	; 65
    117e:	09 f4       	brne	.+2      	; 0x1182 <parseCommands+0x6c>
    1180:	68 c0       	rjmp	.+208    	; 0x1252 <parseCommands+0x13c>
            else{
                fprintf(port, "ERR\n");
            }
            read_until_line_end();
        }
        else if (command == 'S'){ //Read both motor status
    1182:	83 35       	cpi	r24, 0x53	; 83
    1184:	31 f7       	brne	.-52     	; 0x1152 <parseCommands+0x3c>
            fprintf(port,"S:%d:%d\n",getAngleMotorStatus(), getTiltMotorStatus());
    1186:	9a db       	rcall	.-2252   	; 0x8bc <getTiltMotorStatus>
    1188:	18 2f       	mov	r17, r24
    118a:	95 db       	rcall	.-2262   	; 0x8b6 <getAngleMotorStatus>
    118c:	1f 92       	push	r1
    118e:	1f 93       	push	r17
    1190:	1f 92       	push	r1
    1192:	8f 93       	push	r24
    1194:	bf 92       	push	r11
    1196:	af 92       	push	r10
    1198:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <port+0x1>
    119c:	8f 93       	push	r24
    119e:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <port>
    11a2:	8f 93       	push	r24
    11a4:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <fprintf>
            read_until_line_end();    
    11a8:	e3 de       	rcall	.-570    	; 0xf70 <read_until_line_end>
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    
    return FIND_SUCCESS;
}

void parseCommands(void){
    while (ring_read != ring_write){
    11b4:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <__data_end>
    11b8:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <ring_write>
    11bc:	98 13       	cpse	r25, r24
    11be:	cf cf       	rjmp	.-98     	; 0x115e <parseCommands+0x48>
        else if (command == 'S'){ //Read both motor status
            fprintf(port,"S:%d:%d\n",getAngleMotorStatus(), getTiltMotorStatus());
            read_until_line_end();    
        }
    }
}
    11c0:	24 96       	adiw	r28, 0x04	; 4
    11c2:	e2 e1       	ldi	r30, 0x12	; 18
    11c4:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__epilogue_restores__>

void parseCommands(void){
    while (ring_read != ring_write){
        uint8_t command = buffer[ring_read++];
        if (command == 'P'){ //PUT new values command: P1:20:40    last  angle:tilt
            uint8_t start = 0;
    11c8:	1b 82       	std	Y+3, r1	; 0x03
            uint8_t stop = 0;
    11ca:	19 82       	std	Y+1, r1	; 0x01
                
            if (buffer[ring_read] == '1'){    
    11cc:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__data_end>
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	e8 50       	subi	r30, 0x08	; 8
    11d4:	fd 4f       	sbci	r31, 0xFD	; 253
    11d6:	80 81       	ld	r24, Z
    11d8:	81 33       	cpi	r24, 0x31	; 49
    11da:	09 f4       	brne	.+2      	; 0x11de <parseCommands+0xc8>
    11dc:	7c c0       	rjmp	.+248    	; 0x12d6 <parseCommands+0x1c0>
                    fprintf(port, "%d:%d:", i, GetVoltage(i, 0x40));
                }
                fprintf(port,"\n");
            }
            else{
                fprintf(port, "ERR\n");
    11de:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <port>
    11e2:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <port+0x1>
    11e6:	44 e0       	ldi	r20, 0x04	; 4
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	83 ee       	ldi	r24, 0xE3	; 227
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <fwrite>
            }
            read_until_line_end();
    11f6:	bc de       	rcall	.-648    	; 0xf70 <read_until_line_end>
    11f8:	ac cf       	rjmp	.-168    	; 0x1152 <parseCommands+0x3c>
                fprintf(port,"ERR\n");
            }
            read_until_line_end();
        }
        else if (command == 'G'){ //Get values
            uint8_t value = buffer[ring_read++]; 
    11fa:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__data_end>
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	8e 0f       	add	r24, r30
    1202:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	e8 50       	subi	r30, 0x08	; 8
    120a:	fd 4f       	sbci	r31, 0xFD	; 253
    120c:	80 81       	ld	r24, Z
            if (value == '1'){ //Rread generic info
    120e:	81 33       	cpi	r24, 0x31	; 49
    1210:	09 f4       	brne	.+2      	; 0x1214 <parseCommands+0xfe>
    1212:	9c c0       	rjmp	.+312    	; 0x134c <parseCommands+0x236>
                fprintf(port,"G1:%d\n", SW_VERSION);
            }
            else if (value == '2'){ //Read current angle and tilt set_values
    1214:	82 33       	cpi	r24, 0x32	; 50
    1216:	09 f4       	brne	.+2      	; 0x121a <parseCommands+0x104>
    1218:	ad c0       	rjmp	.+346    	; 0x1374 <parseCommands+0x25e>
                fprintf(port,"G2:%5.2f:%5.2f\n", getSetAngle(), getSetTilt());
            }
            else if (value == '3'){ //Reads current values from motorctrl -module, actual values
    121a:	83 33       	cpi	r24, 0x33	; 51
    121c:	09 f4       	brne	.+2      	; 0x1220 <parseCommands+0x10a>
    121e:	c8 c0       	rjmp	.+400    	; 0x13b0 <parseCommands+0x29a>
                fprintf(port,"G3:%5.2f:%5.2f\n", getAngle(), getTilt());
            }
            else if (value == '4'){ //get motor statuses
    1220:	84 33       	cpi	r24, 0x34	; 52
    1222:	e9 f6       	brne	.-70     	; 0x11de <parseCommands+0xc8>
                fprintf(port, "G4:%d:%d\n", getAngleMotorStatus(), getTiltMotorStatus());
    1224:	4b db       	rcall	.-2410   	; 0x8bc <getTiltMotorStatus>
    1226:	18 2f       	mov	r17, r24
    1228:	46 db       	rcall	.-2420   	; 0x8b6 <getAngleMotorStatus>
    122a:	1f 92       	push	r1
    122c:	1f 93       	push	r17
    122e:	1f 92       	push	r1
    1230:	8f 93       	push	r24
    1232:	7f 92       	push	r7
    1234:	6f 92       	push	r6
            char buff[2];
            clearBuffer(buff, 2);
            buff[0] = buffer[ring_read];
            uint8_t channel = atoi(buff);
            if (channel < 8){
                fprintf(port, "A%d:%d\n", channel, GetVoltage(channel, 0x40));
    1236:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <port+0x1>
    123a:	8f 93       	push	r24
    123c:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <port>
    1240:	8f 93       	push	r24
    1242:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <fprintf>
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	d2 cf       	rjmp	.-92     	; 0x11f6 <parseCommands+0xe0>
volatile char buffer[BUFSIZE+1];

FILE *port; //Serialport to host machine

__attribute__((always_inline)) inline static void clearBuffer(volatile char *buffer,uint8_t len){
	for(uint8_t i=0;i<len;i++){	*buffer++ = '\0';}
    1252:	19 82       	std	Y+1, r1	; 0x01
    1254:	1a 82       	std	Y+2, r1	; 0x02
        }
        else if (command == 'A'){ //ADC read voltage, commands A0\n  A1\n ,A2\n ,A3\n ,A4\n and so on are possible
            //ring_read++;
            char buff[2];
            clearBuffer(buff, 2);
            buff[0] = buffer[ring_read];
    1256:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__data_end>
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	e8 50       	subi	r30, 0x08	; 8
    125e:	fd 4f       	sbci	r31, 0xFD	; 253
    1260:	80 81       	ld	r24, Z
    1262:	89 83       	std	Y+1, r24	; 0x01
            uint8_t channel = atoi(buff);
    1264:	ce 01       	movw	r24, r28
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	0e 94 32 15 	call	0x2a64	; 0x2a64 <atoi>
    126c:	8c 01       	movw	r16, r24
            if (channel < 8){
    126e:	88 30       	cpi	r24, 0x08	; 8
    1270:	08 f4       	brcc	.+2      	; 0x1274 <parseCommands+0x15e>
    1272:	62 c0       	rjmp	.+196    	; 0x1338 <parseCommands+0x222>
                fprintf(port, "A%d:%d\n", channel, GetVoltage(channel, 0x40));
            }
            else if (channel == 8){
    1274:	88 30       	cpi	r24, 0x08	; 8
    1276:	09 f0       	breq	.+2      	; 0x127a <parseCommands+0x164>
    1278:	b2 cf       	rjmp	.-156    	; 0x11de <parseCommands+0xc8>
                fprintf(port,"A");
    127a:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <port>
    127e:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <port+0x1>
    1282:	81 e4       	ldi	r24, 0x41	; 65
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    128a:	00 e0       	ldi	r16, 0x00	; 0
    128c:	10 e0       	ldi	r17, 0x00	; 0
                for (uint8_t i=0; i<8; i++){
                    fprintf(port, "%d:%d:", i, GetVoltage(i, 0x40));
    128e:	60 e4       	ldi	r22, 0x40	; 64
    1290:	80 2f       	mov	r24, r16
    1292:	8b d8       	rcall	.-3818   	; 0x3aa <GetVoltage>
    1294:	9f 93       	push	r25
    1296:	8f 93       	push	r24
    1298:	1f 93       	push	r17
    129a:	0f 93       	push	r16
    129c:	df 92       	push	r13
    129e:	cf 92       	push	r12
    12a0:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <port+0x1>
    12a4:	8f 93       	push	r24
    12a6:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <port>
    12aa:	8f 93       	push	r24
    12ac:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <fprintf>
    12b0:	0f 5f       	subi	r16, 0xFF	; 255
    12b2:	1f 4f       	sbci	r17, 0xFF	; 255
            if (channel < 8){
                fprintf(port, "A%d:%d\n", channel, GetVoltage(channel, 0x40));
            }
            else if (channel == 8){
                fprintf(port,"A");
                for (uint8_t i=0; i<8; i++){
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	08 30       	cpi	r16, 0x08	; 8
    12c0:	11 05       	cpc	r17, r1
    12c2:	29 f7       	brne	.-54     	; 0x128e <parseCommands+0x178>
                    fprintf(port, "%d:%d:", i, GetVoltage(i, 0x40));
                }
                fprintf(port,"\n");
    12c4:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <port>
    12c8:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <port+0x1>
    12cc:	8a e0       	ldi	r24, 0x0A	; 10
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    12d4:	90 cf       	rjmp	.-224    	; 0x11f6 <parseCommands+0xe0>
        if (command == 'P'){ //PUT new values command: P1:20:40    last  angle:tilt
            uint8_t start = 0;
            uint8_t stop = 0;
                
            if (buffer[ring_read] == '1'){    
                uint8_t succ = findParameter(':', ':', '\n', 20, &start, &stop);
    12d6:	ce 01       	movw	r24, r28
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	7c 01       	movw	r14, r24
    12dc:	8e 01       	movw	r16, r28
    12de:	0d 5f       	subi	r16, 0xFD	; 253
    12e0:	1f 4f       	sbci	r17, 0xFF	; 255
    12e2:	24 e1       	ldi	r18, 0x14	; 20
    12e4:	4a e0       	ldi	r20, 0x0A	; 10
    12e6:	6a e3       	ldi	r22, 0x3A	; 58
    12e8:	8a e3       	ldi	r24, 0x3A	; 58
    12ea:	c0 de       	rcall	.-640    	; 0x106c <findParameter>
                if (succ == FIND_SUCCESS){
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <parseCommands+0x1dc>
    12f0:	76 cf       	rjmp	.-276    	; 0x11de <parseCommands+0xc8>
                    uint8_t asuccess = setAngle(readFloat(start, stop));
    12f2:	69 81       	ldd	r22, Y+1	; 0x01
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	8b de       	rcall	.-746    	; 0x100e <readFloat>
    12f8:	ff d9       	rcall	.-3074   	; 0x6f8 <setAngle>
    12fa:	8c 83       	std	Y+4, r24	; 0x04
                    succ = findParameter(':', ':', '\n', 20, &start, &stop);
    12fc:	24 e1       	ldi	r18, 0x14	; 20
    12fe:	4a e0       	ldi	r20, 0x0A	; 10
    1300:	6a e3       	ldi	r22, 0x3A	; 58
    1302:	8a e3       	ldi	r24, 0x3A	; 58
    1304:	b3 de       	rcall	.-666    	; 0x106c <findParameter>
                    if (succ == FIND_SUCCESS){
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	09 f0       	breq	.+2      	; 0x130c <parseCommands+0x1f6>
    130a:	69 cf       	rjmp	.-302    	; 0x11de <parseCommands+0xc8>
                        uint8_t tsuccess = setTilt(readFloat(start, stop));
    130c:	69 81       	ldd	r22, Y+1	; 0x01
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	7e de       	rcall	.-772    	; 0x100e <readFloat>
    1312:	36 da       	rcall	.-2964   	; 0x780 <setTilt>
                        if (asuccess == 0 && tsuccess == 0){
    1314:	bc 81       	ldd	r27, Y+4	; 0x04
                            fprintf(port,"OK\n");
    1316:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <port>
    131a:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <port+0x1>
                if (succ == FIND_SUCCESS){
                    uint8_t asuccess = setAngle(readFloat(start, stop));
                    succ = findParameter(':', ':', '\n', 20, &start, &stop);
                    if (succ == FIND_SUCCESS){
                        uint8_t tsuccess = setTilt(readFloat(start, stop));
                        if (asuccess == 0 && tsuccess == 0){
    131e:	b1 11       	cpse	r27, r1
    1320:	62 cf       	rjmp	.-316    	; 0x11e6 <parseCommands+0xd0>
    1322:	81 11       	cpse	r24, r1
    1324:	60 cf       	rjmp	.-320    	; 0x11e6 <parseCommands+0xd0>
                            fprintf(port,"OK\n");
    1326:	43 e0       	ldi	r20, 0x03	; 3
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	61 e0       	ldi	r22, 0x01	; 1
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	8f ed       	ldi	r24, 0xDF	; 223
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <fwrite>
    1336:	5f cf       	rjmp	.-322    	; 0x11f6 <parseCommands+0xe0>
            char buff[2];
            clearBuffer(buff, 2);
            buff[0] = buffer[ring_read];
            uint8_t channel = atoi(buff);
            if (channel < 8){
                fprintf(port, "A%d:%d\n", channel, GetVoltage(channel, 0x40));
    1338:	60 e4       	ldi	r22, 0x40	; 64
    133a:	37 d8       	rcall	.-3986   	; 0x3aa <GetVoltage>
    133c:	9f 93       	push	r25
    133e:	8f 93       	push	r24
    1340:	11 27       	eor	r17, r17
    1342:	1f 93       	push	r17
    1344:	0f 93       	push	r16
    1346:	9f 92       	push	r9
    1348:	8f 92       	push	r8
    134a:	75 cf       	rjmp	.-278    	; 0x1236 <parseCommands+0x120>
            read_until_line_end();
        }
        else if (command == 'G'){ //Get values
            uint8_t value = buffer[ring_read++]; 
            if (value == '1'){ //Rread generic info
                fprintf(port,"G1:%d\n", SW_VERSION);
    134c:	1f 92       	push	r1
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	8f 93       	push	r24
    1352:	5f 92       	push	r5
    1354:	4f 92       	push	r4
    1356:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <port+0x1>
    135a:	8f 93       	push	r24
    135c:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <port>
    1360:	8f 93       	push	r24
    1362:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <fprintf>
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	41 cf       	rjmp	.-382    	; 0x11f6 <parseCommands+0xe0>
            }
            else if (value == '2'){ //Read current angle and tilt set_values
                fprintf(port,"G2:%5.2f:%5.2f\n", getSetAngle(), getSetTilt());
    1374:	97 da       	rcall	.-2770   	; 0x8a4 <getSetTilt>
    1376:	16 2f       	mov	r17, r22
    1378:	07 2f       	mov	r16, r23
    137a:	f8 2e       	mov	r15, r24
    137c:	e9 2e       	mov	r14, r25
    137e:	89 da       	rcall	.-2798   	; 0x892 <getSetAngle>
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	9f 93       	push	r25
    138a:	8f 93       	push	r24
    138c:	7f 93       	push	r23
    138e:	6f 93       	push	r22
    1390:	3f 92       	push	r3
    1392:	2f 92       	push	r2
            }
            else if (value == '3'){ //Reads current values from motorctrl -module, actual values
                fprintf(port,"G3:%5.2f:%5.2f\n", getAngle(), getTilt());
    1394:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <port+0x1>
    1398:	8f 93       	push	r24
    139a:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <port>
    139e:	8f 93       	push	r24
    13a0:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <fprintf>
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	23 cf       	rjmp	.-442    	; 0x11f6 <parseCommands+0xe0>
    13b0:	9a d9       	rcall	.-3276   	; 0x6e6 <getTilt>
    13b2:	16 2f       	mov	r17, r22
    13b4:	07 2f       	mov	r16, r23
    13b6:	f8 2e       	mov	r15, r24
    13b8:	e9 2e       	mov	r14, r25
    13ba:	8c d9       	rcall	.-3304   	; 0x6d4 <getAngle>
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	9f 93       	push	r25
    13c6:	8f 93       	push	r24
    13c8:	7f 93       	push	r23
    13ca:	6f 93       	push	r22
    13cc:	af ef       	ldi	r26, 0xFF	; 255
    13ce:	b1 e0       	ldi	r27, 0x01	; 1
    13d0:	bf 93       	push	r27
    13d2:	af 93       	push	r26
    13d4:	df cf       	rjmp	.-66     	; 0x1394 <parseCommands+0x27e>

000013d6 <__vector_18>:
__attribute__((always_inline)) inline static void clearBuffer(volatile char *buffer,uint8_t len){
	for(uint8_t i=0;i<len;i++){	*buffer++ = '\0';}
}

ISR(USART_RX_vect) //Serial port to Host machine
{
    13d6:	1f 92       	push	r1
    13d8:	0f 92       	push	r0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	0f 92       	push	r0
    13de:	11 24       	eor	r1, r1
    13e0:	2f 93       	push	r18
    13e2:	3f 93       	push	r19
    13e4:	4f 93       	push	r20
    13e6:	5f 93       	push	r21
    13e8:	6f 93       	push	r22
    13ea:	7f 93       	push	r23
    13ec:	8f 93       	push	r24
    13ee:	9f 93       	push	r25
    13f0:	af 93       	push	r26
    13f2:	bf 93       	push	r27
    13f4:	ef 93       	push	r30
    13f6:	ff 93       	push	r31
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	1f 92       	push	r1
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
#include <avr/io.h>	

#define USART_FREQ 16000000UL

__attribute__((always_inline)) inline static uint8_t USART_Receive0(void) {
	while ( !(UCSR0A & (1<<RXC0)) );
    1402:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1406:	87 ff       	sbrs	r24, 7
    1408:	fc cf       	rjmp	.-8      	; 0x1402 <__vector_18+0x2c>
	return UDR0;
    140a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	volatile char temp = USART_Receive0();
    140e:	89 83       	std	Y+1, r24	; 0x01
	buffer[ring_write++] = temp;
    1410:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <ring_write>
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	8e 0f       	add	r24, r30
    1418:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <ring_write>
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	e8 50       	subi	r30, 0x08	; 8
    1422:	fd 4f       	sbci	r31, 0xFD	; 253
    1424:	80 83       	st	Z, r24
	if (temp == '\n' || temp == '\r'){
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	8a 30       	cpi	r24, 0x0A	; 10
    142a:	b9 f0       	breq	.+46     	; 0x145a <__vector_18+0x84>
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	8d 30       	cpi	r24, 0x0D	; 13
    1430:	a1 f0       	breq	.+40     	; 0x145a <__vector_18+0x84>
        parseCommands();
	}
}
    1432:	0f 90       	pop	r0
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	ff 91       	pop	r31
    143a:	ef 91       	pop	r30
    143c:	bf 91       	pop	r27
    143e:	af 91       	pop	r26
    1440:	9f 91       	pop	r25
    1442:	8f 91       	pop	r24
    1444:	7f 91       	pop	r23
    1446:	6f 91       	pop	r22
    1448:	5f 91       	pop	r21
    144a:	4f 91       	pop	r20
    144c:	3f 91       	pop	r19
    144e:	2f 91       	pop	r18
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	0f 90       	pop	r0
    1456:	1f 90       	pop	r1
    1458:	18 95       	reti
ISR(USART_RX_vect) //Serial port to Host machine
{
	volatile char temp = USART_Receive0();
	buffer[ring_write++] = temp;
	if (temp == '\n' || temp == '\r'){
        parseCommands();
    145a:	5d de       	rcall	.-838    	; 0x1116 <parseCommands>
    145c:	ea cf       	rjmp	.-44     	; 0x1432 <__vector_18+0x5c>

0000145e <initButtons>:
#define TURN_RIGHT_PORT PORTD
#define TURN_RIGHT_INPUT PINB
#define TURN_RIGHT_PIN 4

void initButtons(void){
    AUTO_MANUAL_SWITCH_DIR &= ~(1<<AUTO_MANUAL_SWITCH_PIN); //Input
    145e:	52 98       	cbi	0x0a, 2	; 10
    AUTO_MANUAL_SWITCH_PORT &= ~(1<<AUTO_MANUAL_SWITCH_PIN); //Pulldown
    1460:	5a 98       	cbi	0x0b, 2	; 11
    
    TILT_UP_DIR &= ~(1<<TILT_UP_PIN); //Input
    1462:	22 98       	cbi	0x04, 2	; 4
    TILT_UP_PORT &= ~(1<<TILT_UP_PIN); //Pulldown
    1464:	2a 98       	cbi	0x05, 2	; 5
    
    TILT_DOWN_DIR &= ~(1<<TILT_DOWN_PIN); //Input
    1466:	21 98       	cbi	0x04, 1	; 4
    TILT_DOWN_PORT &= ~(1<<TILT_DOWN_PIN); //Pulldown
    1468:	29 98       	cbi	0x05, 1	; 5
    
    TURN_LEFT_DIR &= ~(1<<TURN_LEFT_PIN); //Input
    146a:	20 98       	cbi	0x04, 0	; 4
    TURN_LEFT_PORT &= ~(1<<TURN_LEFT_PIN); //Pulldown
    146c:	28 98       	cbi	0x05, 0	; 5
    
    TURN_RIGHT_DIR &= ~(1<<TURN_RIGHT_PIN); //Input
    146e:	54 98       	cbi	0x0a, 4	; 10
    TURN_RIGHT_PORT &= ~(1<<TURN_RIGHT_PIN); //Pulldown   
    1470:	5c 98       	cbi	0x0b, 4	; 11
    1472:	08 95       	ret

00001474 <readAutoManualState>:
}

uint8_t readAutoManualState(void){
    AUTO_MANUAL_SWITCH_DIR |= 1<<AUTO_MANUAL_SWITCH_PIN; //Input
    1474:	52 9a       	sbi	0x0a, 2	; 10
    AUTO_MANUAL_SWITCH_PORT &= ~(1<<AUTO_MANUAL_SWITCH_PIN); //Pulldown
    1476:	5a 98       	cbi	0x0b, 2	; 11
    //_delay_ms(1);
    //AUTO_MANUAL_SWITCH_DIR &= ~(1<<AUTO_MANUAL_SWITCH_PIN); //Input
    //AUTO_MANUAL_SWITCH_PORT &= ~(1<<AUTO_MANUAL_SWITCH_PIN); //Pulldown
    //_delay_ms(10);
    if (AUTO_MANUAL_SWITCH_INPUT & (1<<AUTO_MANUAL_SWITCH_PIN)){
    1478:	89 b1       	in	r24, 0x09	; 9
        return 1;
    }
    else{
        return 0;
    }
}
    147a:	82 fb       	bst	r24, 2
    147c:	88 27       	eor	r24, r24
    147e:	80 f9       	bld	r24, 0
    1480:	08 95       	ret

00001482 <readTiltButtonState>:

uint8_t readTiltButtonState(void){
    if (TILT_UP_INPUT & (1<<TILT_UP_PIN)){
    1482:	1a 99       	sbic	0x03, 2	; 3
    1484:	08 c0       	rjmp	.+16     	; 0x1496 <readTiltButtonState+0x14>
        return 1;
    }
    else if (TILT_DOWN_INPUT & (1<<TILT_DOWN_PIN)){
    1486:	93 b1       	in	r25, 0x03	; 3
    1488:	89 2f       	mov	r24, r25
    148a:	82 70       	andi	r24, 0x02	; 2
    148c:	91 ff       	sbrs	r25, 1
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <readTiltButtonState+0x12>
        return 2;
    1490:	82 e0       	ldi	r24, 0x02	; 2
    }
    else{
        return 0;
    }
}
    1492:	08 95       	ret
    1494:	08 95       	ret
    }
}

uint8_t readTiltButtonState(void){
    if (TILT_UP_INPUT & (1<<TILT_UP_PIN)){
        return 1;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	08 95       	ret

0000149a <readTurnButtonState>:
    149a:	18 99       	sbic	0x03, 0	; 3
    149c:	08 c0       	rjmp	.+16     	; 0x14ae <readTurnButtonState+0x14>
    149e:	93 b1       	in	r25, 0x03	; 3
    14a0:	89 2f       	mov	r24, r25
    14a2:	80 71       	andi	r24, 0x10	; 16
    14a4:	94 ff       	sbrs	r25, 4
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <readTurnButtonState+0x12>
    14a8:	82 e0       	ldi	r24, 0x02	; 2
    14aa:	08 95       	ret
    14ac:	08 95       	ret
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	08 95       	ret

000014b2 <main>:
}
int main (int argc, char *argv[])
{
    14b2:	a0 e0       	ldi	r26, 0x00	; 0
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	ef e5       	ldi	r30, 0x5F	; 95
    14b8:	fa e0       	ldi	r31, 0x0A	; 10
    14ba:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__prologue_saves__+0x14>
	USART_Init(&port, 115200);
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	52 ec       	ldi	r21, 0xC2	; 194
    14c2:	61 e0       	ldi	r22, 0x01	; 1
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	8a ee       	ldi	r24, 0xEA	; 234
    14c8:	92 e0       	ldi	r25, 0x02	; 2
    14ca:	0e 94 53 01 	call	0x2a6	; 0x2a6 <USART_Init>
	USART0_Flush();
    14ce:	0e 94 a4 01 	call	0x348	; 0x348 <USART0_Flush>
    //Set interrupt to TIMER1 COMPA
    TIMSK1 = 0x02; //OCIEA enabled
    GTCCR = 0x00;    
}
void initLED(void){
    LED_DDR |= (1<<LED_PIN_NUM); 
    14d2:	25 9a       	sbi	0x04, 5	; 4
int main (int argc, char *argv[])
{
	USART_Init(&port, 115200);
	USART0_Flush();
    initLED();
    initADC();
    14d4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <initADC>
    initMotor();
    14d8:	84 db       	rcall	.-2296   	; 0xbe2 <initMotor>
	initSerialParser(&port);
    14da:	8a ee       	ldi	r24, 0xEA	; 234
    14dc:	92 e0       	ldi	r25, 0x02	; 2
    14de:	65 dd       	rcall	.-1334   	; 0xfaa <initSerialParser>
    initButtons();    
    14e0:	be df       	rcall	.-132    	; 0x145e <initButtons>
ISR(TIMER1_COMPA_vect){
   // TOGGLE_LED
}

void initSystemTimer(void){
    TCCR1A = 0x00; // WGM11 = 0, WGM10 = 0   => CTC mode
    14e2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    // clock frequency = 16MHz / 1024 = 15625Hz
    TCCR1B = 0x08 + 0x05; //WGM12 = 1, WGM 13 = 0        => CTC mode, Clock divider 1024 = 0x05
    14e6:	8d e0       	ldi	r24, 0x0D	; 13
    14e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    OCR1AH = 0x05; //Zero this when tests are done
    14ec:	85 e0       	ldi	r24, 0x05	; 5
    14ee:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    OCR1AL = 0x64;  // interrupt 100 times per second 15625/156~about 100 
    14f2:	84 e6       	ldi	r24, 0x64	; 100
    14f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    //Set interrupt to TIMER1 COMPA
    TIMSK1 = 0x02; //OCIEA enabled
    14f8:	82 e0       	ldi	r24, 0x02	; 2
    14fa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    GTCCR = 0x00;    
    14fe:	13 bc       	out	0x23, r1	; 35
    initMotor();
	initSerialParser(&port);
    initButtons();    

    initSystemTimer(); //Starts all timers which are used => GTCCR = 0x00;
    sei();
    1500:	78 94       	sei
//     
//     fprintf(&port, "tilt_angle:%5.2f\n",tiltConversion(tiltlen));
//     fprintf(&port, "angle_angle:%5.2f\n",angleConversion(anglelen));
//  

    uint8_t angle = 0;
    1502:	c0 e0       	ldi	r28, 0x00	; 0
    //motors[0].set_position = 51;
    //motors[1].set_position = 244;
 
    while(1){
	//	DISABLE_LED
        fprintf(&port,"auto:%d, tilt:%d, turn:%d\n",readAutoManualState(),readTiltButtonState(),readTurnButtonState());
    1504:	84 ec       	ldi	r24, 0xC4	; 196
    1506:	e8 2e       	mov	r14, r24
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	f8 2e       	mov	r15, r24
    150c:	0a ee       	ldi	r16, 0xEA	; 234
    150e:	12 e0       	ldi	r17, 0x02	; 2
            //sendError();
     //   }
        setAngle(angle++);
        setTilt(tilt++);
        _delay_ms(100);
        TOGGLE_LED
    1510:	90 e2       	ldi	r25, 0x20	; 32
    1512:	d9 2e       	mov	r13, r25
    //motors[0].set_position = 51;
    //motors[1].set_position = 244;
 
    while(1){
	//	DISABLE_LED
        fprintf(&port,"auto:%d, tilt:%d, turn:%d\n",readAutoManualState(),readTiltButtonState(),readTurnButtonState());
    1514:	c2 df       	rcall	.-124    	; 0x149a <readTurnButtonState>
    1516:	c8 2e       	mov	r12, r24
    1518:	b4 df       	rcall	.-152    	; 0x1482 <readTiltButtonState>
    151a:	d8 2f       	mov	r29, r24
    151c:	ab df       	rcall	.-170    	; 0x1474 <readAutoManualState>
    151e:	1f 92       	push	r1
    1520:	cf 92       	push	r12
    1522:	1f 92       	push	r1
    1524:	df 93       	push	r29
    1526:	1f 92       	push	r1
    1528:	8f 93       	push	r24
    152a:	ff 92       	push	r15
    152c:	ef 92       	push	r14
    152e:	1f 93       	push	r17
    1530:	0f 93       	push	r16
    1532:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <fprintf>
     //   uint8_t status = motorController();
     //   if (status > STATUS_OK){
            //sendError();
     //   }
        setAngle(angle++);
    1536:	d1 e0       	ldi	r29, 0x01	; 1
    1538:	dc 0f       	add	r29, r28
    153a:	6c 2f       	mov	r22, r28
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 28 13 	call	0x2650	; 0x2650 <__floatunsisf>
    1546:	d8 d8       	rcall	.-3664   	; 0x6f8 <setAngle>
    1548:	6d e7       	ldi	r22, 0x7D	; 125
    154a:	6c 0f       	add	r22, r28
        setTilt(tilt++);
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 28 13 	call	0x2650	; 0x2650 <__floatunsisf>
    1556:	14 d9       	rcall	.-3544   	; 0x780 <setTilt>
    1558:	2f ef       	ldi	r18, 0xFF	; 255
    155a:	81 ee       	ldi	r24, 0xE1	; 225
    155c:	94 e0       	ldi	r25, 0x04	; 4
    155e:	21 50       	subi	r18, 0x01	; 1
    1560:	80 40       	sbci	r24, 0x00	; 0
    1562:	90 40       	sbci	r25, 0x00	; 0
    1564:	e1 f7       	brne	.-8      	; 0x155e <main+0xac>
    1566:	00 c0       	rjmp	.+0      	; 0x1568 <main+0xb6>
    1568:	00 00       	nop
    156a:	8d b7       	in	r24, 0x3d	; 61
    156c:	9e b7       	in	r25, 0x3e	; 62
    156e:	0a 96       	adiw	r24, 0x0a	; 10
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	9e bf       	out	0x3e, r25	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	8d bf       	out	0x3d, r24	; 61
        _delay_ms(100);
        TOGGLE_LED
    157a:	85 b1       	in	r24, 0x05	; 5
    157c:	8d 25       	eor	r24, r13
    157e:	85 b9       	out	0x05, r24	; 5
        fprintf(&port,"auto:%d, tilt:%d, turn:%d\n",readAutoManualState(),readTiltButtonState(),readTurnButtonState());
     //   uint8_t status = motorController();
     //   if (status > STATUS_OK){
            //sendError();
     //   }
        setAngle(angle++);
    1580:	cd 2f       	mov	r28, r29
    //    fprintf(&port,"angle:%d tilt:%d\n",getSetAngle(), getSetTilt());
      //  fprintf(&port,"d_angle:%d d_tilt:%d\n",motors[0].set_position, motors[1].set_position);

	//	ENABLE_LED
		//_delay_ms(100);
	}
    1582:	c8 cf       	rjmp	.-112    	; 0x1514 <main+0x62>

00001584 <vfprintf>:
    1584:	a3 e1       	ldi	r26, 0x13	; 19
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 ec       	ldi	r30, 0xC8	; 200
    158a:	fa e0       	ldi	r31, 0x0A	; 10
    158c:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <__prologue_saves__>
    1590:	6c 01       	movw	r12, r24
    1592:	4b 01       	movw	r8, r22
    1594:	2a 01       	movw	r4, r20
    1596:	fc 01       	movw	r30, r24
    1598:	17 82       	std	Z+7, r1	; 0x07
    159a:	16 82       	std	Z+6, r1	; 0x06
    159c:	83 81       	ldd	r24, Z+3	; 0x03
    159e:	81 ff       	sbrs	r24, 1
    15a0:	43 c3       	rjmp	.+1670   	; 0x1c28 <vfprintf+0x6a4>
    15a2:	ae 01       	movw	r20, r28
    15a4:	4f 5f       	subi	r20, 0xFF	; 255
    15a6:	5f 4f       	sbci	r21, 0xFF	; 255
    15a8:	3a 01       	movw	r6, r20
    15aa:	f6 01       	movw	r30, r12
    15ac:	93 81       	ldd	r25, Z+3	; 0x03
    15ae:	f4 01       	movw	r30, r8
    15b0:	93 fd       	sbrc	r25, 3
    15b2:	85 91       	lpm	r24, Z+
    15b4:	93 ff       	sbrs	r25, 3
    15b6:	81 91       	ld	r24, Z+
    15b8:	4f 01       	movw	r8, r30
    15ba:	88 23       	and	r24, r24
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <vfprintf+0x3c>
    15be:	30 c3       	rjmp	.+1632   	; 0x1c20 <vfprintf+0x69c>
    15c0:	85 32       	cpi	r24, 0x25	; 37
    15c2:	39 f4       	brne	.+14     	; 0x15d2 <vfprintf+0x4e>
    15c4:	93 fd       	sbrc	r25, 3
    15c6:	85 91       	lpm	r24, Z+
    15c8:	93 ff       	sbrs	r25, 3
    15ca:	81 91       	ld	r24, Z+
    15cc:	4f 01       	movw	r8, r30
    15ce:	85 32       	cpi	r24, 0x25	; 37
    15d0:	39 f4       	brne	.+14     	; 0x15e0 <vfprintf+0x5c>
    15d2:	b6 01       	movw	r22, r12
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    15da:	52 01       	movw	r10, r4
    15dc:	25 01       	movw	r4, r10
    15de:	e5 cf       	rjmp	.-54     	; 0x15aa <vfprintf+0x26>
    15e0:	10 e0       	ldi	r17, 0x00	; 0
    15e2:	f1 2c       	mov	r15, r1
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	20 32       	cpi	r18, 0x20	; 32
    15e8:	a0 f4       	brcc	.+40     	; 0x1612 <vfprintf+0x8e>
    15ea:	8b 32       	cpi	r24, 0x2B	; 43
    15ec:	69 f0       	breq	.+26     	; 0x1608 <vfprintf+0x84>
    15ee:	30 f4       	brcc	.+12     	; 0x15fc <vfprintf+0x78>
    15f0:	80 32       	cpi	r24, 0x20	; 32
    15f2:	59 f0       	breq	.+22     	; 0x160a <vfprintf+0x86>
    15f4:	83 32       	cpi	r24, 0x23	; 35
    15f6:	69 f4       	brne	.+26     	; 0x1612 <vfprintf+0x8e>
    15f8:	20 61       	ori	r18, 0x10	; 16
    15fa:	2c c0       	rjmp	.+88     	; 0x1654 <vfprintf+0xd0>
    15fc:	8d 32       	cpi	r24, 0x2D	; 45
    15fe:	39 f0       	breq	.+14     	; 0x160e <vfprintf+0x8a>
    1600:	80 33       	cpi	r24, 0x30	; 48
    1602:	39 f4       	brne	.+14     	; 0x1612 <vfprintf+0x8e>
    1604:	21 60       	ori	r18, 0x01	; 1
    1606:	26 c0       	rjmp	.+76     	; 0x1654 <vfprintf+0xd0>
    1608:	22 60       	ori	r18, 0x02	; 2
    160a:	24 60       	ori	r18, 0x04	; 4
    160c:	23 c0       	rjmp	.+70     	; 0x1654 <vfprintf+0xd0>
    160e:	28 60       	ori	r18, 0x08	; 8
    1610:	21 c0       	rjmp	.+66     	; 0x1654 <vfprintf+0xd0>
    1612:	27 fd       	sbrc	r18, 7
    1614:	27 c0       	rjmp	.+78     	; 0x1664 <vfprintf+0xe0>
    1616:	30 ed       	ldi	r19, 0xD0	; 208
    1618:	38 0f       	add	r19, r24
    161a:	3a 30       	cpi	r19, 0x0A	; 10
    161c:	78 f4       	brcc	.+30     	; 0x163c <vfprintf+0xb8>
    161e:	26 ff       	sbrs	r18, 6
    1620:	06 c0       	rjmp	.+12     	; 0x162e <vfprintf+0xaa>
    1622:	fa e0       	ldi	r31, 0x0A	; 10
    1624:	1f 9f       	mul	r17, r31
    1626:	30 0d       	add	r19, r0
    1628:	11 24       	eor	r1, r1
    162a:	13 2f       	mov	r17, r19
    162c:	13 c0       	rjmp	.+38     	; 0x1654 <vfprintf+0xd0>
    162e:	4a e0       	ldi	r20, 0x0A	; 10
    1630:	f4 9e       	mul	r15, r20
    1632:	30 0d       	add	r19, r0
    1634:	11 24       	eor	r1, r1
    1636:	f3 2e       	mov	r15, r19
    1638:	20 62       	ori	r18, 0x20	; 32
    163a:	0c c0       	rjmp	.+24     	; 0x1654 <vfprintf+0xd0>
    163c:	8e 32       	cpi	r24, 0x2E	; 46
    163e:	21 f4       	brne	.+8      	; 0x1648 <vfprintf+0xc4>
    1640:	26 fd       	sbrc	r18, 6
    1642:	ee c2       	rjmp	.+1500   	; 0x1c20 <vfprintf+0x69c>
    1644:	20 64       	ori	r18, 0x40	; 64
    1646:	06 c0       	rjmp	.+12     	; 0x1654 <vfprintf+0xd0>
    1648:	8c 36       	cpi	r24, 0x6C	; 108
    164a:	11 f4       	brne	.+4      	; 0x1650 <vfprintf+0xcc>
    164c:	20 68       	ori	r18, 0x80	; 128
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <vfprintf+0xd0>
    1650:	88 36       	cpi	r24, 0x68	; 104
    1652:	41 f4       	brne	.+16     	; 0x1664 <vfprintf+0xe0>
    1654:	f4 01       	movw	r30, r8
    1656:	93 fd       	sbrc	r25, 3
    1658:	85 91       	lpm	r24, Z+
    165a:	93 ff       	sbrs	r25, 3
    165c:	81 91       	ld	r24, Z+
    165e:	4f 01       	movw	r8, r30
    1660:	81 11       	cpse	r24, r1
    1662:	c1 cf       	rjmp	.-126    	; 0x15e6 <vfprintf+0x62>
    1664:	9b eb       	ldi	r25, 0xBB	; 187
    1666:	98 0f       	add	r25, r24
    1668:	93 30       	cpi	r25, 0x03	; 3
    166a:	18 f4       	brcc	.+6      	; 0x1672 <vfprintf+0xee>
    166c:	20 61       	ori	r18, 0x10	; 16
    166e:	80 5e       	subi	r24, 0xE0	; 224
    1670:	06 c0       	rjmp	.+12     	; 0x167e <vfprintf+0xfa>
    1672:	9b e9       	ldi	r25, 0x9B	; 155
    1674:	98 0f       	add	r25, r24
    1676:	93 30       	cpi	r25, 0x03	; 3
    1678:	08 f0       	brcs	.+2      	; 0x167c <vfprintf+0xf8>
    167a:	71 c1       	rjmp	.+738    	; 0x195e <vfprintf+0x3da>
    167c:	2f 7e       	andi	r18, 0xEF	; 239
    167e:	26 ff       	sbrs	r18, 6
    1680:	16 e0       	ldi	r17, 0x06	; 6
    1682:	2f 73       	andi	r18, 0x3F	; 63
    1684:	32 2e       	mov	r3, r18
    1686:	85 36       	cpi	r24, 0x65	; 101
    1688:	19 f4       	brne	.+6      	; 0x1690 <vfprintf+0x10c>
    168a:	20 64       	ori	r18, 0x40	; 64
    168c:	32 2e       	mov	r3, r18
    168e:	08 c0       	rjmp	.+16     	; 0x16a0 <vfprintf+0x11c>
    1690:	86 36       	cpi	r24, 0x66	; 102
    1692:	21 f4       	brne	.+8      	; 0x169c <vfprintf+0x118>
    1694:	f2 2f       	mov	r31, r18
    1696:	f0 68       	ori	r31, 0x80	; 128
    1698:	3f 2e       	mov	r3, r31
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <vfprintf+0x11c>
    169c:	11 11       	cpse	r17, r1
    169e:	11 50       	subi	r17, 0x01	; 1
    16a0:	37 fe       	sbrs	r3, 7
    16a2:	07 c0       	rjmp	.+14     	; 0x16b2 <vfprintf+0x12e>
    16a4:	1c 33       	cpi	r17, 0x3C	; 60
    16a6:	50 f4       	brcc	.+20     	; 0x16bc <vfprintf+0x138>
    16a8:	ee 24       	eor	r14, r14
    16aa:	e3 94       	inc	r14
    16ac:	e1 0e       	add	r14, r17
    16ae:	27 e0       	ldi	r18, 0x07	; 7
    16b0:	0b c0       	rjmp	.+22     	; 0x16c8 <vfprintf+0x144>
    16b2:	18 30       	cpi	r17, 0x08	; 8
    16b4:	38 f0       	brcs	.+14     	; 0x16c4 <vfprintf+0x140>
    16b6:	27 e0       	ldi	r18, 0x07	; 7
    16b8:	17 e0       	ldi	r17, 0x07	; 7
    16ba:	05 c0       	rjmp	.+10     	; 0x16c6 <vfprintf+0x142>
    16bc:	27 e0       	ldi	r18, 0x07	; 7
    16be:	4c e3       	ldi	r20, 0x3C	; 60
    16c0:	e4 2e       	mov	r14, r20
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <vfprintf+0x144>
    16c4:	21 2f       	mov	r18, r17
    16c6:	e1 2c       	mov	r14, r1
    16c8:	52 01       	movw	r10, r4
    16ca:	44 e0       	ldi	r20, 0x04	; 4
    16cc:	a4 0e       	add	r10, r20
    16ce:	b1 1c       	adc	r11, r1
    16d0:	f2 01       	movw	r30, r4
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	82 81       	ldd	r24, Z+2	; 0x02
    16d8:	93 81       	ldd	r25, Z+3	; 0x03
    16da:	0e 2d       	mov	r16, r14
    16dc:	a3 01       	movw	r20, r6
    16de:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ftoa_engine>
    16e2:	2c 01       	movw	r4, r24
    16e4:	09 81       	ldd	r16, Y+1	; 0x01
    16e6:	00 ff       	sbrs	r16, 0
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <vfprintf+0x16a>
    16ea:	03 ff       	sbrs	r16, 3
    16ec:	07 c0       	rjmp	.+14     	; 0x16fc <vfprintf+0x178>
    16ee:	31 fc       	sbrc	r3, 1
    16f0:	08 c0       	rjmp	.+16     	; 0x1702 <vfprintf+0x17e>
    16f2:	32 fe       	sbrs	r3, 2
    16f4:	09 c0       	rjmp	.+18     	; 0x1708 <vfprintf+0x184>
    16f6:	30 e2       	ldi	r19, 0x20	; 32
    16f8:	23 2e       	mov	r2, r19
    16fa:	07 c0       	rjmp	.+14     	; 0x170a <vfprintf+0x186>
    16fc:	2d e2       	ldi	r18, 0x2D	; 45
    16fe:	22 2e       	mov	r2, r18
    1700:	04 c0       	rjmp	.+8      	; 0x170a <vfprintf+0x186>
    1702:	9b e2       	ldi	r25, 0x2B	; 43
    1704:	29 2e       	mov	r2, r25
    1706:	01 c0       	rjmp	.+2      	; 0x170a <vfprintf+0x186>
    1708:	21 2c       	mov	r2, r1
    170a:	80 2f       	mov	r24, r16
    170c:	8c 70       	andi	r24, 0x0C	; 12
    170e:	19 f0       	breq	.+6      	; 0x1716 <vfprintf+0x192>
    1710:	21 10       	cpse	r2, r1
    1712:	68 c2       	rjmp	.+1232   	; 0x1be4 <vfprintf+0x660>
    1714:	a8 c2       	rjmp	.+1360   	; 0x1c66 <vfprintf+0x6e2>
    1716:	37 fe       	sbrs	r3, 7
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <vfprintf+0x1b4>
    171a:	e4 0c       	add	r14, r4
    171c:	04 ff       	sbrs	r16, 4
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <vfprintf+0x1a4>
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	81 33       	cpi	r24, 0x31	; 49
    1724:	09 f4       	brne	.+2      	; 0x1728 <vfprintf+0x1a4>
    1726:	ea 94       	dec	r14
    1728:	1e 14       	cp	r1, r14
    172a:	74 f5       	brge	.+92     	; 0x1788 <vfprintf+0x204>
    172c:	f8 e0       	ldi	r31, 0x08	; 8
    172e:	fe 15       	cp	r31, r14
    1730:	78 f5       	brcc	.+94     	; 0x1790 <vfprintf+0x20c>
    1732:	88 e0       	ldi	r24, 0x08	; 8
    1734:	e8 2e       	mov	r14, r24
    1736:	2c c0       	rjmp	.+88     	; 0x1790 <vfprintf+0x20c>
    1738:	36 fc       	sbrc	r3, 6
    173a:	2a c0       	rjmp	.+84     	; 0x1790 <vfprintf+0x20c>
    173c:	81 2f       	mov	r24, r17
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	84 15       	cp	r24, r4
    1742:	95 05       	cpc	r25, r5
    1744:	9c f0       	brlt	.+38     	; 0x176c <vfprintf+0x1e8>
    1746:	2c ef       	ldi	r18, 0xFC	; 252
    1748:	42 16       	cp	r4, r18
    174a:	2f ef       	ldi	r18, 0xFF	; 255
    174c:	52 06       	cpc	r5, r18
    174e:	74 f0       	brlt	.+28     	; 0x176c <vfprintf+0x1e8>
    1750:	43 2d       	mov	r20, r3
    1752:	40 68       	ori	r20, 0x80	; 128
    1754:	34 2e       	mov	r3, r20
    1756:	0a c0       	rjmp	.+20     	; 0x176c <vfprintf+0x1e8>
    1758:	e2 e0       	ldi	r30, 0x02	; 2
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	ec 0f       	add	r30, r28
    175e:	fd 1f       	adc	r31, r29
    1760:	e1 0f       	add	r30, r17
    1762:	f1 1d       	adc	r31, r1
    1764:	80 81       	ld	r24, Z
    1766:	80 33       	cpi	r24, 0x30	; 48
    1768:	19 f4       	brne	.+6      	; 0x1770 <vfprintf+0x1ec>
    176a:	11 50       	subi	r17, 0x01	; 1
    176c:	11 11       	cpse	r17, r1
    176e:	f4 cf       	rjmp	.-24     	; 0x1758 <vfprintf+0x1d4>
    1770:	37 fe       	sbrs	r3, 7
    1772:	0e c0       	rjmp	.+28     	; 0x1790 <vfprintf+0x20c>
    1774:	ee 24       	eor	r14, r14
    1776:	e3 94       	inc	r14
    1778:	e1 0e       	add	r14, r17
    177a:	81 2f       	mov	r24, r17
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	48 16       	cp	r4, r24
    1780:	59 06       	cpc	r5, r25
    1782:	2c f4       	brge	.+10     	; 0x178e <vfprintf+0x20a>
    1784:	14 19       	sub	r17, r4
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <vfprintf+0x20c>
    1788:	ee 24       	eor	r14, r14
    178a:	e3 94       	inc	r14
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <vfprintf+0x20c>
    178e:	10 e0       	ldi	r17, 0x00	; 0
    1790:	37 fe       	sbrs	r3, 7
    1792:	06 c0       	rjmp	.+12     	; 0x17a0 <vfprintf+0x21c>
    1794:	14 14       	cp	r1, r4
    1796:	15 04       	cpc	r1, r5
    1798:	34 f4       	brge	.+12     	; 0x17a6 <vfprintf+0x222>
    179a:	c2 01       	movw	r24, r4
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	05 c0       	rjmp	.+10     	; 0x17aa <vfprintf+0x226>
    17a0:	85 e0       	ldi	r24, 0x05	; 5
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <vfprintf+0x226>
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	21 10       	cpse	r2, r1
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	11 23       	and	r17, r17
    17b0:	31 f0       	breq	.+12     	; 0x17be <vfprintf+0x23a>
    17b2:	21 2f       	mov	r18, r17
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	2f 5f       	subi	r18, 0xFF	; 255
    17b8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ba:	82 0f       	add	r24, r18
    17bc:	93 1f       	adc	r25, r19
    17be:	2f 2d       	mov	r18, r15
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	82 17       	cp	r24, r18
    17c4:	93 07       	cpc	r25, r19
    17c6:	14 f4       	brge	.+4      	; 0x17cc <vfprintf+0x248>
    17c8:	f8 1a       	sub	r15, r24
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <vfprintf+0x24a>
    17cc:	f1 2c       	mov	r15, r1
    17ce:	83 2d       	mov	r24, r3
    17d0:	89 70       	andi	r24, 0x09	; 9
    17d2:	49 f4       	brne	.+18     	; 0x17e6 <vfprintf+0x262>
    17d4:	ff 20       	and	r15, r15
    17d6:	39 f0       	breq	.+14     	; 0x17e6 <vfprintf+0x262>
    17d8:	b6 01       	movw	r22, r12
    17da:	80 e2       	ldi	r24, 0x20	; 32
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    17e2:	fa 94       	dec	r15
    17e4:	f7 cf       	rjmp	.-18     	; 0x17d4 <vfprintf+0x250>
    17e6:	22 20       	and	r2, r2
    17e8:	29 f0       	breq	.+10     	; 0x17f4 <vfprintf+0x270>
    17ea:	b6 01       	movw	r22, r12
    17ec:	82 2d       	mov	r24, r2
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    17f4:	33 fc       	sbrc	r3, 3
    17f6:	09 c0       	rjmp	.+18     	; 0x180a <vfprintf+0x286>
    17f8:	ff 20       	and	r15, r15
    17fa:	39 f0       	breq	.+14     	; 0x180a <vfprintf+0x286>
    17fc:	b6 01       	movw	r22, r12
    17fe:	80 e3       	ldi	r24, 0x30	; 48
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1806:	fa 94       	dec	r15
    1808:	f7 cf       	rjmp	.-18     	; 0x17f8 <vfprintf+0x274>
    180a:	37 fe       	sbrs	r3, 7
    180c:	5a c0       	rjmp	.+180    	; 0x18c2 <vfprintf+0x33e>
    180e:	94 2d       	mov	r25, r4
    1810:	85 2d       	mov	r24, r5
    1812:	57 fe       	sbrs	r5, 7
    1814:	02 c0       	rjmp	.+4      	; 0x181a <vfprintf+0x296>
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	29 2e       	mov	r2, r25
    181c:	38 2e       	mov	r3, r24
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	a2 01       	movw	r20, r4
    1824:	4e 19       	sub	r20, r14
    1826:	51 09       	sbc	r21, r1
    1828:	5d 87       	std	Y+13, r21	; 0x0d
    182a:	4c 87       	std	Y+12, r20	; 0x0c
    182c:	a2 01       	movw	r20, r4
    182e:	42 19       	sub	r20, r2
    1830:	53 09       	sbc	r21, r3
    1832:	5f 87       	std	Y+15, r21	; 0x0f
    1834:	4e 87       	std	Y+14, r20	; 0x0e
    1836:	61 2f       	mov	r22, r17
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	44 27       	eor	r20, r20
    183c:	55 27       	eor	r21, r21
    183e:	46 1b       	sub	r20, r22
    1840:	57 0b       	sbc	r21, r23
    1842:	59 8b       	std	Y+17, r21	; 0x11
    1844:	48 8b       	std	Y+16, r20	; 0x10
    1846:	5f ef       	ldi	r21, 0xFF	; 255
    1848:	25 16       	cp	r2, r21
    184a:	35 06       	cpc	r3, r21
    184c:	49 f4       	brne	.+18     	; 0x1860 <vfprintf+0x2dc>
    184e:	b6 01       	movw	r22, r12
    1850:	8e e2       	ldi	r24, 0x2E	; 46
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	2a 8b       	std	Y+18, r18	; 0x12
    1856:	3b 8b       	std	Y+19, r19	; 0x13
    1858:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    185c:	3b 89       	ldd	r19, Y+19	; 0x13
    185e:	2a 89       	ldd	r18, Y+18	; 0x12
    1860:	42 14       	cp	r4, r2
    1862:	53 04       	cpc	r5, r3
    1864:	6c f0       	brlt	.+26     	; 0x1880 <vfprintf+0x2fc>
    1866:	4c 85       	ldd	r20, Y+12	; 0x0c
    1868:	5d 85       	ldd	r21, Y+13	; 0x0d
    186a:	42 15       	cp	r20, r2
    186c:	53 05       	cpc	r21, r3
    186e:	44 f4       	brge	.+16     	; 0x1880 <vfprintf+0x2fc>
    1870:	ee 85       	ldd	r30, Y+14	; 0x0e
    1872:	ff 85       	ldd	r31, Y+15	; 0x0f
    1874:	e2 0f       	add	r30, r18
    1876:	f3 1f       	adc	r31, r19
    1878:	e6 0d       	add	r30, r6
    187a:	f7 1d       	adc	r31, r7
    187c:	81 81       	ldd	r24, Z+1	; 0x01
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <vfprintf+0x2fe>
    1880:	80 e3       	ldi	r24, 0x30	; 48
    1882:	51 e0       	ldi	r21, 0x01	; 1
    1884:	25 1a       	sub	r2, r21
    1886:	31 08       	sbc	r3, r1
    1888:	2f 5f       	subi	r18, 0xFF	; 255
    188a:	3f 4f       	sbci	r19, 0xFF	; 255
    188c:	48 89       	ldd	r20, Y+16	; 0x10
    188e:	59 89       	ldd	r21, Y+17	; 0x11
    1890:	24 16       	cp	r2, r20
    1892:	35 06       	cpc	r3, r21
    1894:	4c f0       	brlt	.+18     	; 0x18a8 <vfprintf+0x324>
    1896:	b6 01       	movw	r22, r12
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	2a 8b       	std	Y+18, r18	; 0x12
    189c:	3b 8b       	std	Y+19, r19	; 0x13
    189e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    18a2:	2a 89       	ldd	r18, Y+18	; 0x12
    18a4:	3b 89       	ldd	r19, Y+19	; 0x13
    18a6:	cf cf       	rjmp	.-98     	; 0x1846 <vfprintf+0x2c2>
    18a8:	24 14       	cp	r2, r4
    18aa:	35 04       	cpc	r3, r5
    18ac:	39 f4       	brne	.+14     	; 0x18bc <vfprintf+0x338>
    18ae:	9a 81       	ldd	r25, Y+2	; 0x02
    18b0:	96 33       	cpi	r25, 0x36	; 54
    18b2:	18 f4       	brcc	.+6      	; 0x18ba <vfprintf+0x336>
    18b4:	95 33       	cpi	r25, 0x35	; 53
    18b6:	11 f4       	brne	.+4      	; 0x18bc <vfprintf+0x338>
    18b8:	04 ff       	sbrs	r16, 4
    18ba:	81 e3       	ldi	r24, 0x31	; 49
    18bc:	b6 01       	movw	r22, r12
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	4b c0       	rjmp	.+150    	; 0x1958 <vfprintf+0x3d4>
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	81 33       	cpi	r24, 0x31	; 49
    18c6:	09 f0       	breq	.+2      	; 0x18ca <vfprintf+0x346>
    18c8:	0f 7e       	andi	r16, 0xEF	; 239
    18ca:	b6 01       	movw	r22, r12
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    18d2:	11 11       	cpse	r17, r1
    18d4:	05 c0       	rjmp	.+10     	; 0x18e0 <vfprintf+0x35c>
    18d6:	34 fc       	sbrc	r3, 4
    18d8:	18 c0       	rjmp	.+48     	; 0x190a <vfprintf+0x386>
    18da:	85 e6       	ldi	r24, 0x65	; 101
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	17 c0       	rjmp	.+46     	; 0x190e <vfprintf+0x38a>
    18e0:	b6 01       	movw	r22, r12
    18e2:	8e e2       	ldi	r24, 0x2E	; 46
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    18ea:	82 e0       	ldi	r24, 0x02	; 2
    18ec:	ee 24       	eor	r14, r14
    18ee:	e3 94       	inc	r14
    18f0:	e8 0e       	add	r14, r24
    18f2:	f3 01       	movw	r30, r6
    18f4:	e8 0f       	add	r30, r24
    18f6:	f1 1d       	adc	r31, r1
    18f8:	80 81       	ld	r24, Z
    18fa:	b6 01       	movw	r22, r12
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1902:	11 50       	subi	r17, 0x01	; 1
    1904:	8e 2d       	mov	r24, r14
    1906:	91 f7       	brne	.-28     	; 0x18ec <vfprintf+0x368>
    1908:	e6 cf       	rjmp	.-52     	; 0x18d6 <vfprintf+0x352>
    190a:	85 e4       	ldi	r24, 0x45	; 69
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	b6 01       	movw	r22, r12
    1910:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1914:	57 fc       	sbrc	r5, 7
    1916:	05 c0       	rjmp	.+10     	; 0x1922 <vfprintf+0x39e>
    1918:	41 14       	cp	r4, r1
    191a:	51 04       	cpc	r5, r1
    191c:	39 f4       	brne	.+14     	; 0x192c <vfprintf+0x3a8>
    191e:	04 ff       	sbrs	r16, 4
    1920:	05 c0       	rjmp	.+10     	; 0x192c <vfprintf+0x3a8>
    1922:	51 94       	neg	r5
    1924:	41 94       	neg	r4
    1926:	51 08       	sbc	r5, r1
    1928:	8d e2       	ldi	r24, 0x2D	; 45
    192a:	01 c0       	rjmp	.+2      	; 0x192e <vfprintf+0x3aa>
    192c:	8b e2       	ldi	r24, 0x2B	; 43
    192e:	b6 01       	movw	r22, r12
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1936:	80 e3       	ldi	r24, 0x30	; 48
    1938:	9a e0       	ldi	r25, 0x0A	; 10
    193a:	49 16       	cp	r4, r25
    193c:	51 04       	cpc	r5, r1
    193e:	2c f0       	brlt	.+10     	; 0x194a <vfprintf+0x3c6>
    1940:	8f 5f       	subi	r24, 0xFF	; 255
    1942:	5a e0       	ldi	r21, 0x0A	; 10
    1944:	45 1a       	sub	r4, r21
    1946:	51 08       	sbc	r5, r1
    1948:	f7 cf       	rjmp	.-18     	; 0x1938 <vfprintf+0x3b4>
    194a:	b6 01       	movw	r22, r12
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1952:	b6 01       	movw	r22, r12
    1954:	c2 01       	movw	r24, r4
    1956:	c0 96       	adiw	r24, 0x30	; 48
    1958:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    195c:	57 c1       	rjmp	.+686    	; 0x1c0c <vfprintf+0x688>
    195e:	83 36       	cpi	r24, 0x63	; 99
    1960:	31 f0       	breq	.+12     	; 0x196e <vfprintf+0x3ea>
    1962:	83 37       	cpi	r24, 0x73	; 115
    1964:	79 f0       	breq	.+30     	; 0x1984 <vfprintf+0x400>
    1966:	83 35       	cpi	r24, 0x53	; 83
    1968:	09 f0       	breq	.+2      	; 0x196c <vfprintf+0x3e8>
    196a:	58 c0       	rjmp	.+176    	; 0x1a1c <vfprintf+0x498>
    196c:	21 c0       	rjmp	.+66     	; 0x19b0 <vfprintf+0x42c>
    196e:	52 01       	movw	r10, r4
    1970:	e2 e0       	ldi	r30, 0x02	; 2
    1972:	ae 0e       	add	r10, r30
    1974:	b1 1c       	adc	r11, r1
    1976:	f2 01       	movw	r30, r4
    1978:	80 81       	ld	r24, Z
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	01 e0       	ldi	r16, 0x01	; 1
    197e:	10 e0       	ldi	r17, 0x00	; 0
    1980:	23 01       	movw	r4, r6
    1982:	14 c0       	rjmp	.+40     	; 0x19ac <vfprintf+0x428>
    1984:	52 01       	movw	r10, r4
    1986:	f2 e0       	ldi	r31, 0x02	; 2
    1988:	af 0e       	add	r10, r31
    198a:	b1 1c       	adc	r11, r1
    198c:	f2 01       	movw	r30, r4
    198e:	40 80       	ld	r4, Z
    1990:	51 80       	ldd	r5, Z+1	; 0x01
    1992:	26 ff       	sbrs	r18, 6
    1994:	03 c0       	rjmp	.+6      	; 0x199c <vfprintf+0x418>
    1996:	61 2f       	mov	r22, r17
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <vfprintf+0x41c>
    199c:	6f ef       	ldi	r22, 0xFF	; 255
    199e:	7f ef       	ldi	r23, 0xFF	; 255
    19a0:	c2 01       	movw	r24, r4
    19a2:	2a 8b       	std	Y+18, r18	; 0x12
    19a4:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <strnlen>
    19a8:	8c 01       	movw	r16, r24
    19aa:	2a 89       	ldd	r18, Y+18	; 0x12
    19ac:	2f 77       	andi	r18, 0x7F	; 127
    19ae:	15 c0       	rjmp	.+42     	; 0x19da <vfprintf+0x456>
    19b0:	52 01       	movw	r10, r4
    19b2:	f2 e0       	ldi	r31, 0x02	; 2
    19b4:	af 0e       	add	r10, r31
    19b6:	b1 1c       	adc	r11, r1
    19b8:	f2 01       	movw	r30, r4
    19ba:	40 80       	ld	r4, Z
    19bc:	51 80       	ldd	r5, Z+1	; 0x01
    19be:	26 ff       	sbrs	r18, 6
    19c0:	03 c0       	rjmp	.+6      	; 0x19c8 <vfprintf+0x444>
    19c2:	61 2f       	mov	r22, r17
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <vfprintf+0x448>
    19c8:	6f ef       	ldi	r22, 0xFF	; 255
    19ca:	7f ef       	ldi	r23, 0xFF	; 255
    19cc:	c2 01       	movw	r24, r4
    19ce:	2a 8b       	std	Y+18, r18	; 0x12
    19d0:	0e 94 42 16 	call	0x2c84	; 0x2c84 <strnlen_P>
    19d4:	8c 01       	movw	r16, r24
    19d6:	2a 89       	ldd	r18, Y+18	; 0x12
    19d8:	20 68       	ori	r18, 0x80	; 128
    19da:	32 2e       	mov	r3, r18
    19dc:	23 fd       	sbrc	r18, 3
    19de:	1a c0       	rjmp	.+52     	; 0x1a14 <vfprintf+0x490>
    19e0:	8f 2d       	mov	r24, r15
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	08 17       	cp	r16, r24
    19e6:	19 07       	cpc	r17, r25
    19e8:	a8 f4       	brcc	.+42     	; 0x1a14 <vfprintf+0x490>
    19ea:	b6 01       	movw	r22, r12
    19ec:	80 e2       	ldi	r24, 0x20	; 32
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    19f4:	fa 94       	dec	r15
    19f6:	f4 cf       	rjmp	.-24     	; 0x19e0 <vfprintf+0x45c>
    19f8:	f2 01       	movw	r30, r4
    19fa:	37 fc       	sbrc	r3, 7
    19fc:	85 91       	lpm	r24, Z+
    19fe:	37 fe       	sbrs	r3, 7
    1a00:	81 91       	ld	r24, Z+
    1a02:	2f 01       	movw	r4, r30
    1a04:	b6 01       	movw	r22, r12
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1a0c:	f1 10       	cpse	r15, r1
    1a0e:	fa 94       	dec	r15
    1a10:	01 50       	subi	r16, 0x01	; 1
    1a12:	11 09       	sbc	r17, r1
    1a14:	01 15       	cp	r16, r1
    1a16:	11 05       	cpc	r17, r1
    1a18:	79 f7       	brne	.-34     	; 0x19f8 <vfprintf+0x474>
    1a1a:	f8 c0       	rjmp	.+496    	; 0x1c0c <vfprintf+0x688>
    1a1c:	84 36       	cpi	r24, 0x64	; 100
    1a1e:	11 f0       	breq	.+4      	; 0x1a24 <vfprintf+0x4a0>
    1a20:	89 36       	cpi	r24, 0x69	; 105
    1a22:	59 f5       	brne	.+86     	; 0x1a7a <vfprintf+0x4f6>
    1a24:	52 01       	movw	r10, r4
    1a26:	27 ff       	sbrs	r18, 7
    1a28:	09 c0       	rjmp	.+18     	; 0x1a3c <vfprintf+0x4b8>
    1a2a:	f4 e0       	ldi	r31, 0x04	; 4
    1a2c:	af 0e       	add	r10, r31
    1a2e:	b1 1c       	adc	r11, r1
    1a30:	f2 01       	movw	r30, r4
    1a32:	60 81       	ld	r22, Z
    1a34:	71 81       	ldd	r23, Z+1	; 0x01
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	93 81       	ldd	r25, Z+3	; 0x03
    1a3a:	0a c0       	rjmp	.+20     	; 0x1a50 <vfprintf+0x4cc>
    1a3c:	f2 e0       	ldi	r31, 0x02	; 2
    1a3e:	af 0e       	add	r10, r31
    1a40:	b1 1c       	adc	r11, r1
    1a42:	f2 01       	movw	r30, r4
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	07 2e       	mov	r0, r23
    1a4a:	00 0c       	add	r0, r0
    1a4c:	88 0b       	sbc	r24, r24
    1a4e:	99 0b       	sbc	r25, r25
    1a50:	2f 76       	andi	r18, 0x6F	; 111
    1a52:	32 2e       	mov	r3, r18
    1a54:	97 ff       	sbrs	r25, 7
    1a56:	09 c0       	rjmp	.+18     	; 0x1a6a <vfprintf+0x4e6>
    1a58:	90 95       	com	r25
    1a5a:	80 95       	com	r24
    1a5c:	70 95       	com	r23
    1a5e:	61 95       	neg	r22
    1a60:	7f 4f       	sbci	r23, 0xFF	; 255
    1a62:	8f 4f       	sbci	r24, 0xFF	; 255
    1a64:	9f 4f       	sbci	r25, 0xFF	; 255
    1a66:	20 68       	ori	r18, 0x80	; 128
    1a68:	32 2e       	mov	r3, r18
    1a6a:	2a e0       	ldi	r18, 0x0A	; 10
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	a3 01       	movw	r20, r6
    1a70:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <__ultoa_invert>
    1a74:	e8 2e       	mov	r14, r24
    1a76:	e6 18       	sub	r14, r6
    1a78:	3f c0       	rjmp	.+126    	; 0x1af8 <vfprintf+0x574>
    1a7a:	02 2f       	mov	r16, r18
    1a7c:	85 37       	cpi	r24, 0x75	; 117
    1a7e:	21 f4       	brne	.+8      	; 0x1a88 <vfprintf+0x504>
    1a80:	0f 7e       	andi	r16, 0xEF	; 239
    1a82:	2a e0       	ldi	r18, 0x0A	; 10
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	1d c0       	rjmp	.+58     	; 0x1ac2 <vfprintf+0x53e>
    1a88:	09 7f       	andi	r16, 0xF9	; 249
    1a8a:	8f 36       	cpi	r24, 0x6F	; 111
    1a8c:	91 f0       	breq	.+36     	; 0x1ab2 <vfprintf+0x52e>
    1a8e:	18 f4       	brcc	.+6      	; 0x1a96 <vfprintf+0x512>
    1a90:	88 35       	cpi	r24, 0x58	; 88
    1a92:	59 f0       	breq	.+22     	; 0x1aaa <vfprintf+0x526>
    1a94:	c5 c0       	rjmp	.+394    	; 0x1c20 <vfprintf+0x69c>
    1a96:	80 37       	cpi	r24, 0x70	; 112
    1a98:	19 f0       	breq	.+6      	; 0x1aa0 <vfprintf+0x51c>
    1a9a:	88 37       	cpi	r24, 0x78	; 120
    1a9c:	11 f0       	breq	.+4      	; 0x1aa2 <vfprintf+0x51e>
    1a9e:	c0 c0       	rjmp	.+384    	; 0x1c20 <vfprintf+0x69c>
    1aa0:	00 61       	ori	r16, 0x10	; 16
    1aa2:	04 ff       	sbrs	r16, 4
    1aa4:	09 c0       	rjmp	.+18     	; 0x1ab8 <vfprintf+0x534>
    1aa6:	04 60       	ori	r16, 0x04	; 4
    1aa8:	07 c0       	rjmp	.+14     	; 0x1ab8 <vfprintf+0x534>
    1aaa:	24 ff       	sbrs	r18, 4
    1aac:	08 c0       	rjmp	.+16     	; 0x1abe <vfprintf+0x53a>
    1aae:	06 60       	ori	r16, 0x06	; 6
    1ab0:	06 c0       	rjmp	.+12     	; 0x1abe <vfprintf+0x53a>
    1ab2:	28 e0       	ldi	r18, 0x08	; 8
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <vfprintf+0x53e>
    1ab8:	20 e1       	ldi	r18, 0x10	; 16
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <vfprintf+0x53e>
    1abe:	20 e1       	ldi	r18, 0x10	; 16
    1ac0:	32 e0       	ldi	r19, 0x02	; 2
    1ac2:	52 01       	movw	r10, r4
    1ac4:	07 ff       	sbrs	r16, 7
    1ac6:	09 c0       	rjmp	.+18     	; 0x1ada <vfprintf+0x556>
    1ac8:	f4 e0       	ldi	r31, 0x04	; 4
    1aca:	af 0e       	add	r10, r31
    1acc:	b1 1c       	adc	r11, r1
    1ace:	f2 01       	movw	r30, r4
    1ad0:	60 81       	ld	r22, Z
    1ad2:	71 81       	ldd	r23, Z+1	; 0x01
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	93 81       	ldd	r25, Z+3	; 0x03
    1ad8:	08 c0       	rjmp	.+16     	; 0x1aea <vfprintf+0x566>
    1ada:	f2 e0       	ldi	r31, 0x02	; 2
    1adc:	af 0e       	add	r10, r31
    1ade:	b1 1c       	adc	r11, r1
    1ae0:	f2 01       	movw	r30, r4
    1ae2:	60 81       	ld	r22, Z
    1ae4:	71 81       	ldd	r23, Z+1	; 0x01
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a3 01       	movw	r20, r6
    1aec:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <__ultoa_invert>
    1af0:	e8 2e       	mov	r14, r24
    1af2:	e6 18       	sub	r14, r6
    1af4:	0f 77       	andi	r16, 0x7F	; 127
    1af6:	30 2e       	mov	r3, r16
    1af8:	36 fe       	sbrs	r3, 6
    1afa:	0b c0       	rjmp	.+22     	; 0x1b12 <vfprintf+0x58e>
    1afc:	33 2d       	mov	r19, r3
    1afe:	3e 7f       	andi	r19, 0xFE	; 254
    1b00:	e1 16       	cp	r14, r17
    1b02:	50 f4       	brcc	.+20     	; 0x1b18 <vfprintf+0x594>
    1b04:	34 fe       	sbrs	r3, 4
    1b06:	0a c0       	rjmp	.+20     	; 0x1b1c <vfprintf+0x598>
    1b08:	32 fc       	sbrc	r3, 2
    1b0a:	08 c0       	rjmp	.+16     	; 0x1b1c <vfprintf+0x598>
    1b0c:	33 2d       	mov	r19, r3
    1b0e:	3e 7e       	andi	r19, 0xEE	; 238
    1b10:	05 c0       	rjmp	.+10     	; 0x1b1c <vfprintf+0x598>
    1b12:	0e 2d       	mov	r16, r14
    1b14:	33 2d       	mov	r19, r3
    1b16:	03 c0       	rjmp	.+6      	; 0x1b1e <vfprintf+0x59a>
    1b18:	0e 2d       	mov	r16, r14
    1b1a:	01 c0       	rjmp	.+2      	; 0x1b1e <vfprintf+0x59a>
    1b1c:	01 2f       	mov	r16, r17
    1b1e:	34 ff       	sbrs	r19, 4
    1b20:	0c c0       	rjmp	.+24     	; 0x1b3a <vfprintf+0x5b6>
    1b22:	fe 01       	movw	r30, r28
    1b24:	ee 0d       	add	r30, r14
    1b26:	f1 1d       	adc	r31, r1
    1b28:	80 81       	ld	r24, Z
    1b2a:	80 33       	cpi	r24, 0x30	; 48
    1b2c:	11 f4       	brne	.+4      	; 0x1b32 <vfprintf+0x5ae>
    1b2e:	39 7e       	andi	r19, 0xE9	; 233
    1b30:	08 c0       	rjmp	.+16     	; 0x1b42 <vfprintf+0x5be>
    1b32:	32 ff       	sbrs	r19, 2
    1b34:	05 c0       	rjmp	.+10     	; 0x1b40 <vfprintf+0x5bc>
    1b36:	0e 5f       	subi	r16, 0xFE	; 254
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <vfprintf+0x5be>
    1b3a:	83 2f       	mov	r24, r19
    1b3c:	86 78       	andi	r24, 0x86	; 134
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <vfprintf+0x5be>
    1b40:	0f 5f       	subi	r16, 0xFF	; 255
    1b42:	33 fd       	sbrc	r19, 3
    1b44:	13 c0       	rjmp	.+38     	; 0x1b6c <vfprintf+0x5e8>
    1b46:	30 ff       	sbrs	r19, 0
    1b48:	06 c0       	rjmp	.+12     	; 0x1b56 <vfprintf+0x5d2>
    1b4a:	1e 2d       	mov	r17, r14
    1b4c:	0f 15       	cp	r16, r15
    1b4e:	18 f4       	brcc	.+6      	; 0x1b56 <vfprintf+0x5d2>
    1b50:	1f 0d       	add	r17, r15
    1b52:	10 1b       	sub	r17, r16
    1b54:	0f 2d       	mov	r16, r15
    1b56:	0f 15       	cp	r16, r15
    1b58:	68 f4       	brcc	.+26     	; 0x1b74 <vfprintf+0x5f0>
    1b5a:	b6 01       	movw	r22, r12
    1b5c:	80 e2       	ldi	r24, 0x20	; 32
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	3b 8b       	std	Y+19, r19	; 0x13
    1b62:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1b66:	0f 5f       	subi	r16, 0xFF	; 255
    1b68:	3b 89       	ldd	r19, Y+19	; 0x13
    1b6a:	f5 cf       	rjmp	.-22     	; 0x1b56 <vfprintf+0x5d2>
    1b6c:	0f 15       	cp	r16, r15
    1b6e:	10 f4       	brcc	.+4      	; 0x1b74 <vfprintf+0x5f0>
    1b70:	f0 1a       	sub	r15, r16
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <vfprintf+0x5f2>
    1b74:	f1 2c       	mov	r15, r1
    1b76:	34 ff       	sbrs	r19, 4
    1b78:	12 c0       	rjmp	.+36     	; 0x1b9e <vfprintf+0x61a>
    1b7a:	b6 01       	movw	r22, r12
    1b7c:	80 e3       	ldi	r24, 0x30	; 48
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	3b 8b       	std	Y+19, r19	; 0x13
    1b82:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1b86:	3b 89       	ldd	r19, Y+19	; 0x13
    1b88:	32 ff       	sbrs	r19, 2
    1b8a:	17 c0       	rjmp	.+46     	; 0x1bba <vfprintf+0x636>
    1b8c:	31 fd       	sbrc	r19, 1
    1b8e:	03 c0       	rjmp	.+6      	; 0x1b96 <vfprintf+0x612>
    1b90:	88 e7       	ldi	r24, 0x78	; 120
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <vfprintf+0x616>
    1b96:	88 e5       	ldi	r24, 0x58	; 88
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	b6 01       	movw	r22, r12
    1b9c:	0c c0       	rjmp	.+24     	; 0x1bb6 <vfprintf+0x632>
    1b9e:	83 2f       	mov	r24, r19
    1ba0:	86 78       	andi	r24, 0x86	; 134
    1ba2:	59 f0       	breq	.+22     	; 0x1bba <vfprintf+0x636>
    1ba4:	31 ff       	sbrs	r19, 1
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <vfprintf+0x628>
    1ba8:	8b e2       	ldi	r24, 0x2B	; 43
    1baa:	01 c0       	rjmp	.+2      	; 0x1bae <vfprintf+0x62a>
    1bac:	80 e2       	ldi	r24, 0x20	; 32
    1bae:	37 fd       	sbrc	r19, 7
    1bb0:	8d e2       	ldi	r24, 0x2D	; 45
    1bb2:	b6 01       	movw	r22, r12
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1bba:	e1 16       	cp	r14, r17
    1bbc:	38 f4       	brcc	.+14     	; 0x1bcc <vfprintf+0x648>
    1bbe:	b6 01       	movw	r22, r12
    1bc0:	80 e3       	ldi	r24, 0x30	; 48
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1bc8:	11 50       	subi	r17, 0x01	; 1
    1bca:	f7 cf       	rjmp	.-18     	; 0x1bba <vfprintf+0x636>
    1bcc:	ea 94       	dec	r14
    1bce:	f3 01       	movw	r30, r6
    1bd0:	ee 0d       	add	r30, r14
    1bd2:	f1 1d       	adc	r31, r1
    1bd4:	80 81       	ld	r24, Z
    1bd6:	b6 01       	movw	r22, r12
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1bde:	e1 10       	cpse	r14, r1
    1be0:	f5 cf       	rjmp	.-22     	; 0x1bcc <vfprintf+0x648>
    1be2:	14 c0       	rjmp	.+40     	; 0x1c0c <vfprintf+0x688>
    1be4:	f4 e0       	ldi	r31, 0x04	; 4
    1be6:	ff 15       	cp	r31, r15
    1be8:	58 f5       	brcc	.+86     	; 0x1c40 <vfprintf+0x6bc>
    1bea:	84 e0       	ldi	r24, 0x04	; 4
    1bec:	f8 1a       	sub	r15, r24
    1bee:	33 fe       	sbrs	r3, 3
    1bf0:	1e c0       	rjmp	.+60     	; 0x1c2e <vfprintf+0x6aa>
    1bf2:	21 10       	cpse	r2, r1
    1bf4:	26 c0       	rjmp	.+76     	; 0x1c42 <vfprintf+0x6be>
    1bf6:	03 ff       	sbrs	r16, 3
    1bf8:	2a c0       	rjmp	.+84     	; 0x1c4e <vfprintf+0x6ca>
    1bfa:	06 e9       	ldi	r16, 0x96	; 150
    1bfc:	10 e0       	ldi	r17, 0x00	; 0
    1bfe:	f3 2d       	mov	r31, r3
    1c00:	f0 71       	andi	r31, 0x10	; 16
    1c02:	3f 2e       	mov	r3, r31
    1c04:	f8 01       	movw	r30, r16
    1c06:	84 91       	lpm	r24, Z
    1c08:	81 11       	cpse	r24, r1
    1c0a:	24 c0       	rjmp	.+72     	; 0x1c54 <vfprintf+0x6d0>
    1c0c:	ff 20       	and	r15, r15
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <vfprintf+0x68e>
    1c10:	e5 cc       	rjmp	.-1590   	; 0x15dc <vfprintf+0x58>
    1c12:	b6 01       	movw	r22, r12
    1c14:	80 e2       	ldi	r24, 0x20	; 32
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1c1c:	fa 94       	dec	r15
    1c1e:	f6 cf       	rjmp	.-20     	; 0x1c0c <vfprintf+0x688>
    1c20:	f6 01       	movw	r30, r12
    1c22:	86 81       	ldd	r24, Z+6	; 0x06
    1c24:	97 81       	ldd	r25, Z+7	; 0x07
    1c26:	26 c0       	rjmp	.+76     	; 0x1c74 <vfprintf+0x6f0>
    1c28:	8f ef       	ldi	r24, 0xFF	; 255
    1c2a:	9f ef       	ldi	r25, 0xFF	; 255
    1c2c:	23 c0       	rjmp	.+70     	; 0x1c74 <vfprintf+0x6f0>
    1c2e:	b6 01       	movw	r22, r12
    1c30:	80 e2       	ldi	r24, 0x20	; 32
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1c38:	fa 94       	dec	r15
    1c3a:	f1 10       	cpse	r15, r1
    1c3c:	f8 cf       	rjmp	.-16     	; 0x1c2e <vfprintf+0x6aa>
    1c3e:	d9 cf       	rjmp	.-78     	; 0x1bf2 <vfprintf+0x66e>
    1c40:	f1 2c       	mov	r15, r1
    1c42:	b6 01       	movw	r22, r12
    1c44:	82 2d       	mov	r24, r2
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1c4c:	d4 cf       	rjmp	.-88     	; 0x1bf6 <vfprintf+0x672>
    1c4e:	0a e9       	ldi	r16, 0x9A	; 154
    1c50:	10 e0       	ldi	r17, 0x00	; 0
    1c52:	d5 cf       	rjmp	.-86     	; 0x1bfe <vfprintf+0x67a>
    1c54:	31 10       	cpse	r3, r1
    1c56:	80 52       	subi	r24, 0x20	; 32
    1c58:	b6 01       	movw	r22, r12
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <fputc>
    1c60:	0f 5f       	subi	r16, 0xFF	; 255
    1c62:	1f 4f       	sbci	r17, 0xFF	; 255
    1c64:	cf cf       	rjmp	.-98     	; 0x1c04 <vfprintf+0x680>
    1c66:	23 e0       	ldi	r18, 0x03	; 3
    1c68:	2f 15       	cp	r18, r15
    1c6a:	10 f4       	brcc	.+4      	; 0x1c70 <vfprintf+0x6ec>
    1c6c:	83 e0       	ldi	r24, 0x03	; 3
    1c6e:	be cf       	rjmp	.-132    	; 0x1bec <vfprintf+0x668>
    1c70:	f1 2c       	mov	r15, r1
    1c72:	c1 cf       	rjmp	.-126    	; 0x1bf6 <vfprintf+0x672>
    1c74:	63 96       	adiw	r28, 0x13	; 19
    1c76:	e2 e1       	ldi	r30, 0x12	; 18
    1c78:	d7 c6       	rjmp	.+3502   	; 0x2a28 <__epilogue_restores__>

00001c7a <putval>:
    1c7a:	20 fd       	sbrc	r18, 0
    1c7c:	09 c0       	rjmp	.+18     	; 0x1c90 <putval+0x16>
    1c7e:	fc 01       	movw	r30, r24
    1c80:	23 fd       	sbrc	r18, 3
    1c82:	05 c0       	rjmp	.+10     	; 0x1c8e <putval+0x14>
    1c84:	22 ff       	sbrs	r18, 2
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <putval+0x12>
    1c88:	73 83       	std	Z+3, r23	; 0x03
    1c8a:	62 83       	std	Z+2, r22	; 0x02
    1c8c:	51 83       	std	Z+1, r21	; 0x01
    1c8e:	40 83       	st	Z, r20
    1c90:	08 95       	ret

00001c92 <mulacc>:
    1c92:	44 fd       	sbrc	r20, 4
    1c94:	10 c0       	rjmp	.+32     	; 0x1cb6 <mulacc+0x24>
    1c96:	46 fd       	sbrc	r20, 6
    1c98:	10 c0       	rjmp	.+32     	; 0x1cba <mulacc+0x28>
    1c9a:	db 01       	movw	r26, r22
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	aa 0f       	add	r26, r26
    1ca0:	bb 1f       	adc	r27, r27
    1ca2:	ee 1f       	adc	r30, r30
    1ca4:	ff 1f       	adc	r31, r31
    1ca6:	10 94       	com	r1
    1ca8:	d1 f7       	brne	.-12     	; 0x1c9e <mulacc+0xc>
    1caa:	6a 0f       	add	r22, r26
    1cac:	7b 1f       	adc	r23, r27
    1cae:	8e 1f       	adc	r24, r30
    1cb0:	9f 1f       	adc	r25, r31
    1cb2:	31 e0       	ldi	r19, 0x01	; 1
    1cb4:	03 c0       	rjmp	.+6      	; 0x1cbc <mulacc+0x2a>
    1cb6:	33 e0       	ldi	r19, 0x03	; 3
    1cb8:	01 c0       	rjmp	.+2      	; 0x1cbc <mulacc+0x2a>
    1cba:	34 e0       	ldi	r19, 0x04	; 4
    1cbc:	66 0f       	add	r22, r22
    1cbe:	77 1f       	adc	r23, r23
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	31 50       	subi	r19, 0x01	; 1
    1cc6:	d1 f7       	brne	.-12     	; 0x1cbc <mulacc+0x2a>
    1cc8:	62 0f       	add	r22, r18
    1cca:	71 1d       	adc	r23, r1
    1ccc:	81 1d       	adc	r24, r1
    1cce:	91 1d       	adc	r25, r1
    1cd0:	08 95       	ret

00001cd2 <skip_spaces>:
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	8c 01       	movw	r16, r24
    1cdc:	c8 01       	movw	r24, r16
    1cde:	f0 d7       	rcall	.+4064   	; 0x2cc0 <fgetc>
    1ce0:	ec 01       	movw	r28, r24
    1ce2:	97 fd       	sbrc	r25, 7
    1ce4:	07 c0       	rjmp	.+14     	; 0x1cf4 <skip_spaces+0x22>
    1ce6:	b3 d7       	rcall	.+3942   	; 0x2c4e <isspace>
    1ce8:	89 2b       	or	r24, r25
    1cea:	c1 f7       	brne	.-16     	; 0x1cdc <skip_spaces+0xa>
    1cec:	b8 01       	movw	r22, r16
    1cee:	ce 01       	movw	r24, r28
    1cf0:	0e 94 31 17 	call	0x2e62	; 0x2e62 <ungetc>
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	08 95       	ret

00001d00 <conv_int>:
    1d00:	a0 e0       	ldi	r26, 0x00	; 0
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e5 e8       	ldi	r30, 0x85	; 133
    1d06:	fe e0       	ldi	r31, 0x0E	; 14
    1d08:	79 c6       	rjmp	.+3314   	; 0x29fc <__prologue_saves__+0xc>
    1d0a:	7c 01       	movw	r14, r24
    1d0c:	8b 01       	movw	r16, r22
    1d0e:	6a 01       	movw	r12, r20
    1d10:	d2 2f       	mov	r29, r18
    1d12:	d6 d7       	rcall	.+4012   	; 0x2cc0 <fgetc>
    1d14:	9c 01       	movw	r18, r24
    1d16:	33 27       	eor	r19, r19
    1d18:	2b 32       	cpi	r18, 0x2B	; 43
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	21 f0       	breq	.+8      	; 0x1d26 <conv_int+0x26>
    1d1e:	2d 32       	cpi	r18, 0x2D	; 45
    1d20:	31 05       	cpc	r19, r1
    1d22:	51 f4       	brne	.+20     	; 0x1d38 <conv_int+0x38>
    1d24:	d0 68       	ori	r29, 0x80	; 128
    1d26:	01 50       	subi	r16, 0x01	; 1
    1d28:	11 09       	sbc	r17, r1
    1d2a:	11 f4       	brne	.+4      	; 0x1d30 <conv_int+0x30>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	63 c0       	rjmp	.+198    	; 0x1df6 <conv_int+0xf6>
    1d30:	c7 01       	movw	r24, r14
    1d32:	c6 d7       	rcall	.+3980   	; 0x2cc0 <fgetc>
    1d34:	97 fd       	sbrc	r25, 7
    1d36:	fa cf       	rjmp	.-12     	; 0x1d2c <conv_int+0x2c>
    1d38:	cd 2f       	mov	r28, r29
    1d3a:	cd 7f       	andi	r28, 0xFD	; 253
    1d3c:	2d 2f       	mov	r18, r29
    1d3e:	20 73       	andi	r18, 0x30	; 48
    1d40:	f9 f4       	brne	.+62     	; 0x1d80 <conv_int+0x80>
    1d42:	80 33       	cpi	r24, 0x30	; 48
    1d44:	e9 f4       	brne	.+58     	; 0x1d80 <conv_int+0x80>
    1d46:	58 01       	movw	r10, r16
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	a8 1a       	sub	r10, r24
    1d4c:	b1 08       	sbc	r11, r1
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <conv_int+0x52>
    1d50:	3f c0       	rjmp	.+126    	; 0x1dd0 <conv_int+0xd0>
    1d52:	c7 01       	movw	r24, r14
    1d54:	b5 d7       	rcall	.+3946   	; 0x2cc0 <fgetc>
    1d56:	97 fd       	sbrc	r25, 7
    1d58:	3b c0       	rjmp	.+118    	; 0x1dd0 <conv_int+0xd0>
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	2f 7d       	andi	r18, 0xDF	; 223
    1d5e:	28 35       	cpi	r18, 0x58	; 88
    1d60:	49 f4       	brne	.+18     	; 0x1d74 <conv_int+0x74>
    1d62:	c2 64       	ori	r28, 0x42	; 66
    1d64:	02 50       	subi	r16, 0x02	; 2
    1d66:	11 09       	sbc	r17, r1
    1d68:	99 f1       	breq	.+102    	; 0x1dd0 <conv_int+0xd0>
    1d6a:	c7 01       	movw	r24, r14
    1d6c:	a9 d7       	rcall	.+3922   	; 0x2cc0 <fgetc>
    1d6e:	97 ff       	sbrs	r25, 7
    1d70:	07 c0       	rjmp	.+14     	; 0x1d80 <conv_int+0x80>
    1d72:	2e c0       	rjmp	.+92     	; 0x1dd0 <conv_int+0xd0>
    1d74:	d6 ff       	sbrs	r29, 6
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <conv_int+0x7c>
    1d78:	c2 60       	ori	r28, 0x02	; 2
    1d7a:	01 c0       	rjmp	.+2      	; 0x1d7e <conv_int+0x7e>
    1d7c:	c2 61       	ori	r28, 0x12	; 18
    1d7e:	85 01       	movw	r16, r10
    1d80:	81 2c       	mov	r8, r1
    1d82:	91 2c       	mov	r9, r1
    1d84:	54 01       	movw	r10, r8
    1d86:	20 ed       	ldi	r18, 0xD0	; 208
    1d88:	28 0f       	add	r18, r24
    1d8a:	28 30       	cpi	r18, 0x08	; 8
    1d8c:	80 f0       	brcs	.+32     	; 0x1dae <conv_int+0xae>
    1d8e:	c4 ff       	sbrs	r28, 4
    1d90:	04 c0       	rjmp	.+8      	; 0x1d9a <conv_int+0x9a>
    1d92:	b7 01       	movw	r22, r14
    1d94:	0e 94 31 17 	call	0x2e62	; 0x2e62 <ungetc>
    1d98:	18 c0       	rjmp	.+48     	; 0x1dca <conv_int+0xca>
    1d9a:	2a 30       	cpi	r18, 0x0A	; 10
    1d9c:	40 f0       	brcs	.+16     	; 0x1dae <conv_int+0xae>
    1d9e:	c6 ff       	sbrs	r28, 6
    1da0:	f8 cf       	rjmp	.-16     	; 0x1d92 <conv_int+0x92>
    1da2:	2f 7d       	andi	r18, 0xDF	; 223
    1da4:	3f ee       	ldi	r19, 0xEF	; 239
    1da6:	32 0f       	add	r19, r18
    1da8:	36 30       	cpi	r19, 0x06	; 6
    1daa:	98 f7       	brcc	.-26     	; 0x1d92 <conv_int+0x92>
    1dac:	27 50       	subi	r18, 0x07	; 7
    1dae:	4c 2f       	mov	r20, r28
    1db0:	c5 01       	movw	r24, r10
    1db2:	b4 01       	movw	r22, r8
    1db4:	6e df       	rcall	.-292    	; 0x1c92 <mulacc>
    1db6:	4b 01       	movw	r8, r22
    1db8:	5c 01       	movw	r10, r24
    1dba:	c2 60       	ori	r28, 0x02	; 2
    1dbc:	01 50       	subi	r16, 0x01	; 1
    1dbe:	11 09       	sbc	r17, r1
    1dc0:	51 f0       	breq	.+20     	; 0x1dd6 <conv_int+0xd6>
    1dc2:	c7 01       	movw	r24, r14
    1dc4:	7d d7       	rcall	.+3834   	; 0x2cc0 <fgetc>
    1dc6:	97 ff       	sbrs	r25, 7
    1dc8:	de cf       	rjmp	.-68     	; 0x1d86 <conv_int+0x86>
    1dca:	c1 fd       	sbrc	r28, 1
    1dcc:	04 c0       	rjmp	.+8      	; 0x1dd6 <conv_int+0xd6>
    1dce:	ae cf       	rjmp	.-164    	; 0x1d2c <conv_int+0x2c>
    1dd0:	81 2c       	mov	r8, r1
    1dd2:	91 2c       	mov	r9, r1
    1dd4:	54 01       	movw	r10, r8
    1dd6:	c7 ff       	sbrs	r28, 7
    1dd8:	08 c0       	rjmp	.+16     	; 0x1dea <conv_int+0xea>
    1dda:	b0 94       	com	r11
    1ddc:	a0 94       	com	r10
    1dde:	90 94       	com	r9
    1de0:	80 94       	com	r8
    1de2:	81 1c       	adc	r8, r1
    1de4:	91 1c       	adc	r9, r1
    1de6:	a1 1c       	adc	r10, r1
    1de8:	b1 1c       	adc	r11, r1
    1dea:	2c 2f       	mov	r18, r28
    1dec:	b5 01       	movw	r22, r10
    1dee:	a4 01       	movw	r20, r8
    1df0:	c6 01       	movw	r24, r12
    1df2:	43 df       	rcall	.-378    	; 0x1c7a <putval>
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	ec e0       	ldi	r30, 0x0C	; 12
    1dfc:	1b c6       	rjmp	.+3126   	; 0x2a34 <__epilogue_restores__+0xc>

00001dfe <conv_brk>:
    1dfe:	a0 e2       	ldi	r26, 0x20	; 32
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e4 e0       	ldi	r30, 0x04	; 4
    1e04:	ff e0       	ldi	r31, 0x0F	; 15
    1e06:	f6 c5       	rjmp	.+3052   	; 0x29f4 <__prologue_saves__+0x4>
    1e08:	4c 01       	movw	r8, r24
    1e0a:	5b 01       	movw	r10, r22
    1e0c:	7a 01       	movw	r14, r20
    1e0e:	8e 01       	movw	r16, r28
    1e10:	0f 5f       	subi	r16, 0xFF	; 255
    1e12:	1f 4f       	sbci	r17, 0xFF	; 255
    1e14:	68 01       	movw	r12, r16
    1e16:	80 e2       	ldi	r24, 0x20	; 32
    1e18:	f8 01       	movw	r30, r16
    1e1a:	11 92       	st	Z+, r1
    1e1c:	8a 95       	dec	r24
    1e1e:	e9 f7       	brne	.-6      	; 0x1e1a <conv_brk+0x1c>
    1e20:	f4 01       	movw	r30, r8
    1e22:	63 80       	ldd	r6, Z+3	; 0x03
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	50 e0       	ldi	r21, 0x00	; 0
    1e28:	71 2c       	mov	r7, r1
    1e2a:	41 2c       	mov	r4, r1
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	a1 e0       	ldi	r26, 0x01	; 1
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	f9 01       	movw	r30, r18
    1e34:	63 fc       	sbrc	r6, 3
    1e36:	55 90       	lpm	r5, Z+
    1e38:	63 fe       	sbrs	r6, 3
    1e3a:	51 90       	ld	r5, Z+
    1e3c:	8f 01       	movw	r16, r30
    1e3e:	95 2d       	mov	r25, r5
    1e40:	9f 01       	movw	r18, r30
    1e42:	51 10       	cpse	r5, r1
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <conv_brk+0x4e>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	7e c0       	rjmp	.+252    	; 0x1f48 <conv_brk+0x14a>
    1e4c:	fe e5       	ldi	r31, 0x5E	; 94
    1e4e:	5f 12       	cpse	r5, r31
    1e50:	03 c0       	rjmp	.+6      	; 0x1e58 <conv_brk+0x5a>
    1e52:	41 15       	cp	r20, r1
    1e54:	51 05       	cpc	r21, r1
    1e56:	61 f1       	breq	.+88     	; 0x1eb0 <conv_brk+0xb2>
    1e58:	68 2f       	mov	r22, r24
    1e5a:	70 e0       	ldi	r23, 0x00	; 0
    1e5c:	64 17       	cp	r22, r20
    1e5e:	75 07       	cpc	r23, r21
    1e60:	4c f4       	brge	.+18     	; 0x1e74 <conv_brk+0x76>
    1e62:	6d e5       	ldi	r22, 0x5D	; 93
    1e64:	56 16       	cp	r5, r22
    1e66:	69 f1       	breq	.+90     	; 0x1ec2 <conv_brk+0xc4>
    1e68:	ed e2       	ldi	r30, 0x2D	; 45
    1e6a:	5e 12       	cpse	r5, r30
    1e6c:	03 c0       	rjmp	.+6      	; 0x1e74 <conv_brk+0x76>
    1e6e:	44 20       	and	r4, r4
    1e70:	09 f1       	breq	.+66     	; 0x1eb4 <conv_brk+0xb6>
    1e72:	03 c0       	rjmp	.+6      	; 0x1e7a <conv_brk+0x7c>
    1e74:	41 10       	cpse	r4, r1
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <conv_brk+0x7c>
    1e78:	75 2c       	mov	r7, r5
    1e7a:	69 2f       	mov	r22, r25
    1e7c:	66 95       	lsr	r22
    1e7e:	66 95       	lsr	r22
    1e80:	66 95       	lsr	r22
    1e82:	f6 01       	movw	r30, r12
    1e84:	e6 0f       	add	r30, r22
    1e86:	f1 1d       	adc	r31, r1
    1e88:	69 2f       	mov	r22, r25
    1e8a:	67 70       	andi	r22, 0x07	; 7
    1e8c:	8d 01       	movw	r16, r26
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <conv_brk+0x96>
    1e90:	00 0f       	add	r16, r16
    1e92:	11 1f       	adc	r17, r17
    1e94:	6a 95       	dec	r22
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <conv_brk+0x92>
    1e98:	b8 01       	movw	r22, r16
    1e9a:	70 81       	ld	r23, Z
    1e9c:	67 2b       	or	r22, r23
    1e9e:	60 83       	st	Z, r22
    1ea0:	97 15       	cp	r25, r7
    1ea2:	59 f0       	breq	.+22     	; 0x1eba <conv_brk+0xbc>
    1ea4:	97 15       	cp	r25, r7
    1ea6:	10 f4       	brcc	.+4      	; 0x1eac <conv_brk+0xae>
    1ea8:	9f 5f       	subi	r25, 0xFF	; 255
    1eaa:	e7 cf       	rjmp	.-50     	; 0x1e7a <conv_brk+0x7c>
    1eac:	91 50       	subi	r25, 0x01	; 1
    1eae:	e5 cf       	rjmp	.-54     	; 0x1e7a <conv_brk+0x7c>
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	04 c0       	rjmp	.+8      	; 0x1ebc <conv_brk+0xbe>
    1eb4:	44 24       	eor	r4, r4
    1eb6:	43 94       	inc	r4
    1eb8:	01 c0       	rjmp	.+2      	; 0x1ebc <conv_brk+0xbe>
    1eba:	41 2c       	mov	r4, r1
    1ebc:	4f 5f       	subi	r20, 0xFF	; 255
    1ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec0:	b8 cf       	rjmp	.-144    	; 0x1e32 <conv_brk+0x34>
    1ec2:	44 20       	and	r4, r4
    1ec4:	19 f0       	breq	.+6      	; 0x1ecc <conv_brk+0xce>
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	90 62       	ori	r25, 0x20	; 32
    1eca:	9e 83       	std	Y+6, r25	; 0x06
    1ecc:	81 11       	cpse	r24, r1
    1ece:	03 c0       	rjmp	.+6      	; 0x1ed6 <conv_brk+0xd8>
    1ed0:	77 24       	eor	r7, r7
    1ed2:	73 94       	inc	r7
    1ed4:	18 c0       	rjmp	.+48     	; 0x1f06 <conv_brk+0x108>
    1ed6:	f6 01       	movw	r30, r12
    1ed8:	9e 01       	movw	r18, r28
    1eda:	2f 5d       	subi	r18, 0xDF	; 223
    1edc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ede:	80 81       	ld	r24, Z
    1ee0:	80 95       	com	r24
    1ee2:	81 93       	st	Z+, r24
    1ee4:	e2 17       	cp	r30, r18
    1ee6:	f3 07       	cpc	r31, r19
    1ee8:	d1 f7       	brne	.-12     	; 0x1ede <conv_brk+0xe0>
    1eea:	f2 cf       	rjmp	.-28     	; 0x1ed0 <conv_brk+0xd2>
    1eec:	e1 14       	cp	r14, r1
    1eee:	f1 04       	cpc	r15, r1
    1ef0:	29 f0       	breq	.+10     	; 0x1efc <conv_brk+0xfe>
    1ef2:	f7 01       	movw	r30, r14
    1ef4:	80 83       	st	Z, r24
    1ef6:	c7 01       	movw	r24, r14
    1ef8:	01 96       	adiw	r24, 0x01	; 1
    1efa:	7c 01       	movw	r14, r24
    1efc:	91 e0       	ldi	r25, 0x01	; 1
    1efe:	a9 1a       	sub	r10, r25
    1f00:	b1 08       	sbc	r11, r1
    1f02:	71 2c       	mov	r7, r1
    1f04:	d9 f0       	breq	.+54     	; 0x1f3c <conv_brk+0x13e>
    1f06:	c4 01       	movw	r24, r8
    1f08:	db d6       	rcall	.+3510   	; 0x2cc0 <fgetc>
    1f0a:	97 fd       	sbrc	r25, 7
    1f0c:	15 c0       	rjmp	.+42     	; 0x1f38 <conv_brk+0x13a>
    1f0e:	28 2f       	mov	r18, r24
    1f10:	26 95       	lsr	r18
    1f12:	26 95       	lsr	r18
    1f14:	26 95       	lsr	r18
    1f16:	f6 01       	movw	r30, r12
    1f18:	e2 0f       	add	r30, r18
    1f1a:	f1 1d       	adc	r31, r1
    1f1c:	20 81       	ld	r18, Z
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	ac 01       	movw	r20, r24
    1f22:	47 70       	andi	r20, 0x07	; 7
    1f24:	55 27       	eor	r21, r21
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <conv_brk+0x12e>
    1f28:	35 95       	asr	r19
    1f2a:	27 95       	ror	r18
    1f2c:	4a 95       	dec	r20
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <conv_brk+0x12a>
    1f30:	20 fd       	sbrc	r18, 0
    1f32:	dc cf       	rjmp	.-72     	; 0x1eec <conv_brk+0xee>
    1f34:	b4 01       	movw	r22, r8
    1f36:	95 d7       	rcall	.+3882   	; 0x2e62 <ungetc>
    1f38:	71 10       	cpse	r7, r1
    1f3a:	85 cf       	rjmp	.-246    	; 0x1e46 <conv_brk+0x48>
    1f3c:	e1 14       	cp	r14, r1
    1f3e:	f1 04       	cpc	r15, r1
    1f40:	11 f0       	breq	.+4      	; 0x1f46 <conv_brk+0x148>
    1f42:	f7 01       	movw	r30, r14
    1f44:	10 82       	st	Z, r1
    1f46:	c8 01       	movw	r24, r16
    1f48:	a0 96       	adiw	r28, 0x20	; 32
    1f4a:	e0 e1       	ldi	r30, 0x10	; 16
    1f4c:	6f c5       	rjmp	.+2782   	; 0x2a2c <__epilogue_restores__+0x4>

00001f4e <conv_flt>:
    1f4e:	a6 e0       	ldi	r26, 0x06	; 6
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	ec ea       	ldi	r30, 0xAC	; 172
    1f54:	ff e0       	ldi	r31, 0x0F	; 15
    1f56:	4c c5       	rjmp	.+2712   	; 0x29f0 <__prologue_saves__>
    1f58:	5c 01       	movw	r10, r24
    1f5a:	7b 01       	movw	r14, r22
    1f5c:	1a 01       	movw	r2, r20
    1f5e:	b0 d6       	rcall	.+3424   	; 0x2cc0 <fgetc>
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
    1f64:	99 27       	eor	r25, r25
    1f66:	8b 32       	cpi	r24, 0x2B	; 43
    1f68:	91 05       	cpc	r25, r1
    1f6a:	21 f0       	breq	.+8      	; 0x1f74 <conv_flt+0x26>
    1f6c:	8d 97       	sbiw	r24, 0x2d	; 45
    1f6e:	81 f4       	brne	.+32     	; 0x1f90 <conv_flt+0x42>
    1f70:	10 e8       	ldi	r17, 0x80	; 128
    1f72:	01 c0       	rjmp	.+2      	; 0x1f76 <conv_flt+0x28>
    1f74:	10 e0       	ldi	r17, 0x00	; 0
    1f76:	21 e0       	ldi	r18, 0x01	; 1
    1f78:	e2 1a       	sub	r14, r18
    1f7a:	f1 08       	sbc	r15, r1
    1f7c:	11 f4       	brne	.+4      	; 0x1f82 <conv_flt+0x34>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	1e c1       	rjmp	.+572    	; 0x21be <conv_flt+0x270>
    1f82:	c5 01       	movw	r24, r10
    1f84:	9d d6       	rcall	.+3386   	; 0x2cc0 <fgetc>
    1f86:	9e 83       	std	Y+6, r25	; 0x06
    1f88:	8d 83       	std	Y+5, r24	; 0x05
    1f8a:	97 ff       	sbrs	r25, 7
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <conv_flt+0x44>
    1f8e:	f7 cf       	rjmp	.-18     	; 0x1f7e <conv_flt+0x30>
    1f90:	10 e0       	ldi	r17, 0x00	; 0
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	63 d6       	rcall	.+3270   	; 0x2c5e <tolower>
    1f98:	89 36       	cpi	r24, 0x69	; 105
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	49 f0       	breq	.+18     	; 0x1fb0 <conv_flt+0x62>
    1f9e:	8e 36       	cpi	r24, 0x6E	; 110
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <conv_flt+0x58>
    1fa4:	38 c0       	rjmp	.+112    	; 0x2016 <conv_flt+0xc8>
    1fa6:	65 ee       	ldi	r22, 0xE5	; 229
    1fa8:	86 2e       	mov	r8, r22
    1faa:	61 e0       	ldi	r22, 0x01	; 1
    1fac:	96 2e       	mov	r9, r22
    1fae:	04 c0       	rjmp	.+8      	; 0x1fb8 <conv_flt+0x6a>
    1fb0:	78 ee       	ldi	r23, 0xE8	; 232
    1fb2:	87 2e       	mov	r8, r23
    1fb4:	71 e0       	ldi	r23, 0x01	; 1
    1fb6:	97 2e       	mov	r9, r23
    1fb8:	ef ef       	ldi	r30, 0xFF	; 255
    1fba:	8e 1a       	sub	r8, r30
    1fbc:	9e 0a       	sbc	r9, r30
    1fbe:	f4 01       	movw	r30, r8
    1fc0:	31 97       	sbiw	r30, 0x01	; 1
    1fc2:	04 91       	lpm	r16, Z
    1fc4:	00 23       	and	r16, r16
    1fc6:	b1 f0       	breq	.+44     	; 0x1ff4 <conv_flt+0xa6>
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	e8 1a       	sub	r14, r24
    1fcc:	f1 08       	sbc	r15, r1
    1fce:	59 f0       	breq	.+22     	; 0x1fe6 <conv_flt+0x98>
    1fd0:	c5 01       	movw	r24, r10
    1fd2:	76 d6       	rcall	.+3308   	; 0x2cc0 <fgetc>
    1fd4:	6c 01       	movw	r12, r24
    1fd6:	97 fd       	sbrc	r25, 7
    1fd8:	06 c0       	rjmp	.+12     	; 0x1fe6 <conv_flt+0x98>
    1fda:	41 d6       	rcall	.+3202   	; 0x2c5e <tolower>
    1fdc:	08 17       	cp	r16, r24
    1fde:	61 f3       	breq	.-40     	; 0x1fb8 <conv_flt+0x6a>
    1fe0:	b5 01       	movw	r22, r10
    1fe2:	c6 01       	movw	r24, r12
    1fe4:	3e d7       	rcall	.+3708   	; 0x2e62 <ungetc>
    1fe6:	9b ee       	ldi	r25, 0xEB	; 235
    1fe8:	89 16       	cp	r8, r25
    1fea:	91 e0       	ldi	r25, 0x01	; 1
    1fec:	99 06       	cpc	r9, r25
    1fee:	09 f0       	breq	.+2      	; 0x1ff2 <conv_flt+0xa4>
    1ff0:	c6 cf       	rjmp	.-116    	; 0x1f7e <conv_flt+0x30>
    1ff2:	05 c0       	rjmp	.+10     	; 0x1ffe <conv_flt+0xb0>
    1ff4:	f8 ee       	ldi	r31, 0xE8	; 232
    1ff6:	8f 16       	cp	r8, r31
    1ff8:	f1 e0       	ldi	r31, 0x01	; 1
    1ffa:	9f 06       	cpc	r9, r31
    1ffc:	29 f0       	breq	.+10     	; 0x2008 <conv_flt+0xba>
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	a0 e8       	ldi	r26, 0x80	; 128
    2004:	bf e7       	ldi	r27, 0x7F	; 127
    2006:	04 c0       	rjmp	.+8      	; 0x2010 <conv_flt+0xc2>
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	a0 ec       	ldi	r26, 0xC0	; 192
    200e:	bf e7       	ldi	r27, 0x7F	; 127
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	c4 c0       	rjmp	.+392    	; 0x219e <conv_flt+0x250>
    2016:	41 2c       	mov	r4, r1
    2018:	51 2c       	mov	r5, r1
    201a:	32 01       	movw	r6, r4
    201c:	c1 2c       	mov	r12, r1
    201e:	d1 2c       	mov	r13, r1
    2020:	2d 81       	ldd	r18, Y+5	; 0x05
    2022:	20 53       	subi	r18, 0x30	; 48
    2024:	2a 30       	cpi	r18, 0x0A	; 10
    2026:	10 f5       	brcc	.+68     	; 0x206c <conv_flt+0x11e>
    2028:	01 2f       	mov	r16, r17
    202a:	02 60       	ori	r16, 0x02	; 2
    202c:	81 2f       	mov	r24, r17
    202e:	88 70       	andi	r24, 0x08	; 8
    2030:	12 ff       	sbrs	r17, 2
    2032:	06 c0       	rjmp	.+12     	; 0x2040 <conv_flt+0xf2>
    2034:	81 11       	cpse	r24, r1
    2036:	20 c0       	rjmp	.+64     	; 0x2078 <conv_flt+0x12a>
    2038:	2f ef       	ldi	r18, 0xFF	; 255
    203a:	c2 1a       	sub	r12, r18
    203c:	d2 0a       	sbc	r13, r18
    203e:	1c c0       	rjmp	.+56     	; 0x2078 <conv_flt+0x12a>
    2040:	88 23       	and	r24, r24
    2042:	19 f0       	breq	.+6      	; 0x204a <conv_flt+0xfc>
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	c8 1a       	sub	r12, r24
    2048:	d1 08       	sbc	r13, r1
    204a:	40 e2       	ldi	r20, 0x20	; 32
    204c:	c3 01       	movw	r24, r6
    204e:	b2 01       	movw	r22, r4
    2050:	20 de       	rcall	.-960    	; 0x1c92 <mulacc>
    2052:	2b 01       	movw	r4, r22
    2054:	3c 01       	movw	r6, r24
    2056:	98 e9       	ldi	r25, 0x98	; 152
    2058:	49 16       	cp	r4, r25
    205a:	99 e9       	ldi	r25, 0x99	; 153
    205c:	59 06       	cpc	r5, r25
    205e:	69 06       	cpc	r6, r25
    2060:	99 e1       	ldi	r25, 0x19	; 25
    2062:	79 06       	cpc	r7, r25
    2064:	48 f0       	brcs	.+18     	; 0x2078 <conv_flt+0x12a>
    2066:	01 2f       	mov	r16, r17
    2068:	06 60       	ori	r16, 0x06	; 6
    206a:	06 c0       	rjmp	.+12     	; 0x2078 <conv_flt+0x12a>
    206c:	2e 3f       	cpi	r18, 0xFE	; 254
    206e:	89 f4       	brne	.+34     	; 0x2092 <conv_flt+0x144>
    2070:	13 fd       	sbrc	r17, 3
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <conv_flt+0x144>
    2074:	01 2f       	mov	r16, r17
    2076:	08 60       	ori	r16, 0x08	; 8
    2078:	e1 e0       	ldi	r30, 0x01	; 1
    207a:	ee 1a       	sub	r14, r30
    207c:	f1 08       	sbc	r15, r1
    207e:	41 f0       	breq	.+16     	; 0x2090 <conv_flt+0x142>
    2080:	c5 01       	movw	r24, r10
    2082:	1e d6       	rcall	.+3132   	; 0x2cc0 <fgetc>
    2084:	9e 83       	std	Y+6, r25	; 0x06
    2086:	8d 83       	std	Y+5, r24	; 0x05
    2088:	10 2f       	mov	r17, r16
    208a:	97 ff       	sbrs	r25, 7
    208c:	c9 cf       	rjmp	.-110    	; 0x2020 <conv_flt+0xd2>
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <conv_flt+0x144>
    2090:	10 2f       	mov	r17, r16
    2092:	11 ff       	sbrs	r17, 1
    2094:	74 cf       	rjmp	.-280    	; 0x1f7e <conv_flt+0x30>
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	8f 7d       	andi	r24, 0xDF	; 223
    209a:	85 34       	cpi	r24, 0x45	; 69
    209c:	09 f0       	breq	.+2      	; 0x20a0 <conv_flt+0x152>
    209e:	4a c0       	rjmp	.+148    	; 0x2134 <conv_flt+0x1e6>
    20a0:	47 01       	movw	r8, r14
    20a2:	f1 e0       	ldi	r31, 0x01	; 1
    20a4:	8f 1a       	sub	r8, r31
    20a6:	91 08       	sbc	r9, r1
    20a8:	09 f4       	brne	.+2      	; 0x20ac <conv_flt+0x15e>
    20aa:	69 cf       	rjmp	.-302    	; 0x1f7e <conv_flt+0x30>
    20ac:	c5 01       	movw	r24, r10
    20ae:	08 d6       	rcall	.+3088   	; 0x2cc0 <fgetc>
    20b0:	9e 83       	std	Y+6, r25	; 0x06
    20b2:	8d 83       	std	Y+5, r24	; 0x05
    20b4:	97 fd       	sbrc	r25, 7
    20b6:	63 cf       	rjmp	.-314    	; 0x1f7e <conv_flt+0x30>
    20b8:	99 27       	eor	r25, r25
    20ba:	8b 32       	cpi	r24, 0x2B	; 43
    20bc:	91 05       	cpc	r25, r1
    20be:	19 f0       	breq	.+6      	; 0x20c6 <conv_flt+0x178>
    20c0:	8d 97       	sbiw	r24, 0x2d	; 45
    20c2:	59 f4       	brne	.+22     	; 0x20da <conv_flt+0x18c>
    20c4:	10 61       	ori	r17, 0x10	; 16
    20c6:	47 01       	movw	r8, r14
    20c8:	22 e0       	ldi	r18, 0x02	; 2
    20ca:	82 1a       	sub	r8, r18
    20cc:	91 08       	sbc	r9, r1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <conv_flt+0x184>
    20d0:	56 cf       	rjmp	.-340    	; 0x1f7e <conv_flt+0x30>
    20d2:	c5 01       	movw	r24, r10
    20d4:	f5 d5       	rcall	.+3050   	; 0x2cc0 <fgetc>
    20d6:	9e 83       	std	Y+6, r25	; 0x06
    20d8:	8d 83       	std	Y+5, r24	; 0x05
    20da:	8d 81       	ldd	r24, Y+5	; 0x05
    20dc:	9e 81       	ldd	r25, Y+6	; 0x06
    20de:	c0 97       	sbiw	r24, 0x30	; 48
    20e0:	0a 97       	sbiw	r24, 0x0a	; 10
    20e2:	08 f0       	brcs	.+2      	; 0x20e6 <conv_flt+0x198>
    20e4:	4c cf       	rjmp	.-360    	; 0x1f7e <conv_flt+0x30>
    20e6:	74 01       	movw	r14, r8
    20e8:	81 2c       	mov	r8, r1
    20ea:	91 2c       	mov	r9, r1
    20ec:	b4 01       	movw	r22, r8
    20ee:	99 0c       	add	r9, r9
    20f0:	88 0b       	sbc	r24, r24
    20f2:	99 0b       	sbc	r25, r25
    20f4:	2d 81       	ldd	r18, Y+5	; 0x05
    20f6:	20 53       	subi	r18, 0x30	; 48
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	cb dd       	rcall	.-1130   	; 0x1c92 <mulacc>
    20fc:	ab 01       	movw	r20, r22
    20fe:	bc 01       	movw	r22, r24
    2100:	4a 01       	movw	r8, r20
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	e8 1a       	sub	r14, r24
    2106:	f1 08       	sbc	r15, r1
    2108:	69 f0       	breq	.+26     	; 0x2124 <conv_flt+0x1d6>
    210a:	c5 01       	movw	r24, r10
    210c:	49 83       	std	Y+1, r20	; 0x01
    210e:	5a 83       	std	Y+2, r21	; 0x02
    2110:	6b 83       	std	Y+3, r22	; 0x03
    2112:	7c 83       	std	Y+4, r23	; 0x04
    2114:	d5 d5       	rcall	.+2986   	; 0x2cc0 <fgetc>
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
    211a:	c0 97       	sbiw	r24, 0x30	; 48
    211c:	49 81       	ldd	r20, Y+1	; 0x01
    211e:	5a 81       	ldd	r21, Y+2	; 0x02
    2120:	0a 97       	sbiw	r24, 0x0a	; 10
    2122:	20 f3       	brcs	.-56     	; 0x20ec <conv_flt+0x19e>
    2124:	14 ff       	sbrs	r17, 4
    2126:	04 c0       	rjmp	.+8      	; 0x2130 <conv_flt+0x1e2>
    2128:	88 24       	eor	r8, r8
    212a:	99 24       	eor	r9, r9
    212c:	84 1a       	sub	r8, r20
    212e:	95 0a       	sbc	r9, r21
    2130:	c8 0c       	add	r12, r8
    2132:	d9 1c       	adc	r13, r9
    2134:	ef 28       	or	r14, r15
    2136:	39 f0       	breq	.+14     	; 0x2146 <conv_flt+0x1f8>
    2138:	ed 81       	ldd	r30, Y+5	; 0x05
    213a:	fe 81       	ldd	r31, Y+6	; 0x06
    213c:	f7 fd       	sbrc	r31, 7
    213e:	03 c0       	rjmp	.+6      	; 0x2146 <conv_flt+0x1f8>
    2140:	b5 01       	movw	r22, r10
    2142:	cf 01       	movw	r24, r30
    2144:	8e d6       	rcall	.+3356   	; 0x2e62 <ungetc>
    2146:	c3 01       	movw	r24, r6
    2148:	b2 01       	movw	r22, r4
    214a:	82 d2       	rcall	.+1284   	; 0x2650 <__floatunsisf>
    214c:	d7 fe       	sbrs	r13, 7
    214e:	08 c0       	rjmp	.+16     	; 0x2160 <conv_flt+0x212>
    2150:	d1 94       	neg	r13
    2152:	c1 94       	neg	r12
    2154:	d1 08       	sbc	r13, r1
    2156:	54 e0       	ldi	r21, 0x04	; 4
    2158:	85 2e       	mov	r8, r21
    215a:	52 e0       	ldi	r21, 0x02	; 2
    215c:	95 2e       	mov	r9, r21
    215e:	04 c0       	rjmp	.+8      	; 0x2168 <conv_flt+0x21a>
    2160:	4c e1       	ldi	r20, 0x1C	; 28
    2162:	84 2e       	mov	r8, r20
    2164:	42 e0       	ldi	r20, 0x02	; 2
    2166:	94 2e       	mov	r9, r20
    2168:	54 01       	movw	r10, r8
    216a:	f8 e1       	ldi	r31, 0x18	; 24
    216c:	af 1a       	sub	r10, r31
    216e:	b1 08       	sbc	r11, r1
    2170:	30 e2       	ldi	r19, 0x20	; 32
    2172:	e3 2e       	mov	r14, r19
    2174:	f1 2c       	mov	r15, r1
    2176:	ce 14       	cp	r12, r14
    2178:	df 04       	cpc	r13, r15
    217a:	48 f0       	brcs	.+18     	; 0x218e <conv_flt+0x240>
    217c:	f4 01       	movw	r30, r8
    217e:	25 91       	lpm	r18, Z+
    2180:	35 91       	lpm	r19, Z+
    2182:	45 91       	lpm	r20, Z+
    2184:	54 91       	lpm	r21, Z
    2186:	46 d3       	rcall	.+1676   	; 0x2814 <__mulsf3>
    2188:	ce 18       	sub	r12, r14
    218a:	df 08       	sbc	r13, r15
    218c:	f4 cf       	rjmp	.-24     	; 0x2176 <conv_flt+0x228>
    218e:	24 e0       	ldi	r18, 0x04	; 4
    2190:	82 1a       	sub	r8, r18
    2192:	91 08       	sbc	r9, r1
    2194:	f6 94       	lsr	r15
    2196:	e7 94       	ror	r14
    2198:	8a 14       	cp	r8, r10
    219a:	9b 04       	cpc	r9, r11
    219c:	61 f7       	brne	.-40     	; 0x2176 <conv_flt+0x228>
    219e:	17 ff       	sbrs	r17, 7
    21a0:	05 c0       	rjmp	.+10     	; 0x21ac <conv_flt+0x25e>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	b0 58       	subi	r27, 0x80	; 128
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	21 14       	cp	r2, r1
    21ae:	31 04       	cpc	r3, r1
    21b0:	29 f0       	breq	.+10     	; 0x21bc <conv_flt+0x26e>
    21b2:	f1 01       	movw	r30, r2
    21b4:	60 83       	st	Z, r22
    21b6:	71 83       	std	Z+1, r23	; 0x01
    21b8:	82 83       	std	Z+2, r24	; 0x02
    21ba:	93 83       	std	Z+3, r25	; 0x03
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	26 96       	adiw	r28, 0x06	; 6
    21c0:	e2 e1       	ldi	r30, 0x12	; 18
    21c2:	32 c4       	rjmp	.+2148   	; 0x2a28 <__epilogue_restores__>

000021c4 <vfscanf>:
    21c4:	a1 e0       	ldi	r26, 0x01	; 1
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e7 ee       	ldi	r30, 0xE7	; 231
    21ca:	f0 e1       	ldi	r31, 0x10	; 16
    21cc:	13 c4       	rjmp	.+2086   	; 0x29f4 <__prologue_saves__+0x4>
    21ce:	6c 01       	movw	r12, r24
    21d0:	2b 01       	movw	r4, r22
    21d2:	4a 01       	movw	r8, r20
    21d4:	fc 01       	movw	r30, r24
    21d6:	17 82       	std	Z+7, r1	; 0x07
    21d8:	16 82       	std	Z+6, r1	; 0x06
    21da:	a1 2c       	mov	r10, r1
    21dc:	f6 01       	movw	r30, r12
    21de:	f3 80       	ldd	r15, Z+3	; 0x03
    21e0:	f2 01       	movw	r30, r4
    21e2:	f3 fc       	sbrc	r15, 3
    21e4:	85 91       	lpm	r24, Z+
    21e6:	f3 fe       	sbrs	r15, 3
    21e8:	81 91       	ld	r24, Z+
    21ea:	48 2f       	mov	r20, r24
    21ec:	2f 01       	movw	r4, r30
    21ee:	88 23       	and	r24, r24
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <vfscanf+0x30>
    21f2:	01 c1       	rjmp	.+514    	; 0x23f6 <vfscanf+0x232>
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	49 83       	std	Y+1, r20	; 0x01
    21f8:	2a d5       	rcall	.+2644   	; 0x2c4e <isspace>
    21fa:	49 81       	ldd	r20, Y+1	; 0x01
    21fc:	89 2b       	or	r24, r25
    21fe:	19 f0       	breq	.+6      	; 0x2206 <vfscanf+0x42>
    2200:	c6 01       	movw	r24, r12
    2202:	67 dd       	rcall	.-1330   	; 0x1cd2 <skip_spaces>
    2204:	eb cf       	rjmp	.-42     	; 0x21dc <vfscanf+0x18>
    2206:	45 32       	cpi	r20, 0x25	; 37
    2208:	41 f4       	brne	.+16     	; 0x221a <vfscanf+0x56>
    220a:	f2 01       	movw	r30, r4
    220c:	f3 fc       	sbrc	r15, 3
    220e:	45 91       	lpm	r20, Z+
    2210:	f3 fe       	sbrs	r15, 3
    2212:	41 91       	ld	r20, Z+
    2214:	2f 01       	movw	r4, r30
    2216:	45 32       	cpi	r20, 0x25	; 37
    2218:	59 f4       	brne	.+22     	; 0x2230 <vfscanf+0x6c>
    221a:	c6 01       	movw	r24, r12
    221c:	49 83       	std	Y+1, r20	; 0x01
    221e:	50 d5       	rcall	.+2720   	; 0x2cc0 <fgetc>
    2220:	49 81       	ldd	r20, Y+1	; 0x01
    2222:	97 fd       	sbrc	r25, 7
    2224:	e6 c0       	rjmp	.+460    	; 0x23f2 <vfscanf+0x22e>
    2226:	48 17       	cp	r20, r24
    2228:	c9 f2       	breq	.-78     	; 0x21dc <vfscanf+0x18>
    222a:	b6 01       	movw	r22, r12
    222c:	1a d6       	rcall	.+3124   	; 0x2e62 <ungetc>
    222e:	e3 c0       	rjmp	.+454    	; 0x23f6 <vfscanf+0x232>
    2230:	4a 32       	cpi	r20, 0x2A	; 42
    2232:	39 f4       	brne	.+14     	; 0x2242 <vfscanf+0x7e>
    2234:	f3 fc       	sbrc	r15, 3
    2236:	45 91       	lpm	r20, Z+
    2238:	f3 fe       	sbrs	r15, 3
    223a:	41 91       	ld	r20, Z+
    223c:	2f 01       	movw	r4, r30
    223e:	51 e0       	ldi	r21, 0x01	; 1
    2240:	01 c0       	rjmp	.+2      	; 0x2244 <vfscanf+0x80>
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	32 01       	movw	r6, r4
    2246:	00 e0       	ldi	r16, 0x00	; 0
    2248:	10 e0       	ldi	r17, 0x00	; 0
    224a:	20 ed       	ldi	r18, 0xD0	; 208
    224c:	24 0f       	add	r18, r20
    224e:	2a 30       	cpi	r18, 0x0A	; 10
    2250:	80 f4       	brcc	.+32     	; 0x2272 <vfscanf+0xae>
    2252:	52 60       	ori	r21, 0x02	; 2
    2254:	b8 01       	movw	r22, r16
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	40 e2       	ldi	r20, 0x20	; 32
    225c:	59 83       	std	Y+1, r21	; 0x01
    225e:	19 dd       	rcall	.-1486   	; 0x1c92 <mulacc>
    2260:	8b 01       	movw	r16, r22
    2262:	f3 01       	movw	r30, r6
    2264:	f3 fc       	sbrc	r15, 3
    2266:	45 91       	lpm	r20, Z+
    2268:	f3 fe       	sbrs	r15, 3
    226a:	41 91       	ld	r20, Z+
    226c:	3f 01       	movw	r6, r30
    226e:	59 81       	ldd	r21, Y+1	; 0x01
    2270:	ec cf       	rjmp	.-40     	; 0x224a <vfscanf+0x86>
    2272:	b5 2e       	mov	r11, r21
    2274:	34 2f       	mov	r19, r20
    2276:	23 01       	movw	r4, r6
    2278:	51 ff       	sbrs	r21, 1
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <vfscanf+0xc0>
    227c:	01 15       	cp	r16, r1
    227e:	11 05       	cpc	r17, r1
    2280:	19 f4       	brne	.+6      	; 0x2288 <vfscanf+0xc4>
    2282:	b9 c0       	rjmp	.+370    	; 0x23f6 <vfscanf+0x232>
    2284:	0f ef       	ldi	r16, 0xFF	; 255
    2286:	1f ef       	ldi	r17, 0xFF	; 255
    2288:	48 36       	cpi	r20, 0x68	; 104
    228a:	19 f0       	breq	.+6      	; 0x2292 <vfscanf+0xce>
    228c:	4c 36       	cpi	r20, 0x6C	; 108
    228e:	59 f0       	breq	.+22     	; 0x22a6 <vfscanf+0xe2>
    2290:	13 c0       	rjmp	.+38     	; 0x22b8 <vfscanf+0xf4>
    2292:	f3 01       	movw	r30, r6
    2294:	f3 fc       	sbrc	r15, 3
    2296:	35 91       	lpm	r19, Z+
    2298:	f3 fe       	sbrs	r15, 3
    229a:	31 91       	ld	r19, Z+
    229c:	2f 01       	movw	r4, r30
    229e:	38 36       	cpi	r19, 0x68	; 104
    22a0:	59 f4       	brne	.+22     	; 0x22b8 <vfscanf+0xf4>
    22a2:	58 60       	ori	r21, 0x08	; 8
    22a4:	b5 2e       	mov	r11, r21
    22a6:	fb 2d       	mov	r31, r11
    22a8:	f4 60       	ori	r31, 0x04	; 4
    22aa:	bf 2e       	mov	r11, r31
    22ac:	f2 01       	movw	r30, r4
    22ae:	f3 fc       	sbrc	r15, 3
    22b0:	35 91       	lpm	r19, Z+
    22b2:	f3 fe       	sbrs	r15, 3
    22b4:	31 91       	ld	r19, Z+
    22b6:	2f 01       	movw	r4, r30
    22b8:	33 23       	and	r19, r19
    22ba:	09 f4       	brne	.+2      	; 0x22be <vfscanf+0xfa>
    22bc:	9c c0       	rjmp	.+312    	; 0x23f6 <vfscanf+0x232>
    22be:	63 2f       	mov	r22, r19
    22c0:	70 e0       	ldi	r23, 0x00	; 0
    22c2:	83 ed       	ldi	r24, 0xD3	; 211
    22c4:	91 e0       	ldi	r25, 0x01	; 1
    22c6:	39 83       	std	Y+1, r19	; 0x01
    22c8:	d2 d4       	rcall	.+2468   	; 0x2c6e <strchr_P>
    22ca:	39 81       	ldd	r19, Y+1	; 0x01
    22cc:	89 2b       	or	r24, r25
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <vfscanf+0x10e>
    22d0:	92 c0       	rjmp	.+292    	; 0x23f6 <vfscanf+0x232>
    22d2:	b0 fc       	sbrc	r11, 0
    22d4:	07 c0       	rjmp	.+14     	; 0x22e4 <vfscanf+0x120>
    22d6:	f4 01       	movw	r30, r8
    22d8:	e0 80       	ld	r14, Z
    22da:	f1 80       	ldd	r15, Z+1	; 0x01
    22dc:	c4 01       	movw	r24, r8
    22de:	02 96       	adiw	r24, 0x02	; 2
    22e0:	4c 01       	movw	r8, r24
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <vfscanf+0x124>
    22e4:	e1 2c       	mov	r14, r1
    22e6:	f1 2c       	mov	r15, r1
    22e8:	3e 36       	cpi	r19, 0x6E	; 110
    22ea:	49 f4       	brne	.+18     	; 0x22fe <vfscanf+0x13a>
    22ec:	f6 01       	movw	r30, r12
    22ee:	46 81       	ldd	r20, Z+6	; 0x06
    22f0:	57 81       	ldd	r21, Z+7	; 0x07
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	70 e0       	ldi	r23, 0x00	; 0
    22f6:	2b 2d       	mov	r18, r11
    22f8:	c7 01       	movw	r24, r14
    22fa:	bf dc       	rcall	.-1666   	; 0x1c7a <putval>
    22fc:	6f cf       	rjmp	.-290    	; 0x21dc <vfscanf+0x18>
    22fe:	33 36       	cpi	r19, 0x63	; 99
    2300:	a1 f4       	brne	.+40     	; 0x232a <vfscanf+0x166>
    2302:	b1 fc       	sbrc	r11, 1
    2304:	02 c0       	rjmp	.+4      	; 0x230a <vfscanf+0x146>
    2306:	01 e0       	ldi	r16, 0x01	; 1
    2308:	10 e0       	ldi	r17, 0x00	; 0
    230a:	c6 01       	movw	r24, r12
    230c:	d9 d4       	rcall	.+2482   	; 0x2cc0 <fgetc>
    230e:	97 fd       	sbrc	r25, 7
    2310:	70 c0       	rjmp	.+224    	; 0x23f2 <vfscanf+0x22e>
    2312:	e1 14       	cp	r14, r1
    2314:	f1 04       	cpc	r15, r1
    2316:	29 f0       	breq	.+10     	; 0x2322 <vfscanf+0x15e>
    2318:	f7 01       	movw	r30, r14
    231a:	80 83       	st	Z, r24
    231c:	c7 01       	movw	r24, r14
    231e:	01 96       	adiw	r24, 0x01	; 1
    2320:	7c 01       	movw	r14, r24
    2322:	01 50       	subi	r16, 0x01	; 1
    2324:	11 09       	sbc	r17, r1
    2326:	89 f7       	brne	.-30     	; 0x230a <vfscanf+0x146>
    2328:	60 c0       	rjmp	.+192    	; 0x23ea <vfscanf+0x226>
    232a:	3b 35       	cpi	r19, 0x5B	; 91
    232c:	51 f4       	brne	.+20     	; 0x2342 <vfscanf+0x17e>
    232e:	92 01       	movw	r18, r4
    2330:	a7 01       	movw	r20, r14
    2332:	b8 01       	movw	r22, r16
    2334:	c6 01       	movw	r24, r12
    2336:	63 dd       	rcall	.-1338   	; 0x1dfe <conv_brk>
    2338:	2c 01       	movw	r4, r24
    233a:	89 2b       	or	r24, r25
    233c:	09 f0       	breq	.+2      	; 0x2340 <vfscanf+0x17c>
    233e:	55 c0       	rjmp	.+170    	; 0x23ea <vfscanf+0x226>
    2340:	4f c0       	rjmp	.+158    	; 0x23e0 <vfscanf+0x21c>
    2342:	c6 01       	movw	r24, r12
    2344:	39 83       	std	Y+1, r19	; 0x01
    2346:	c5 dc       	rcall	.-1654   	; 0x1cd2 <skip_spaces>
    2348:	39 81       	ldd	r19, Y+1	; 0x01
    234a:	97 fd       	sbrc	r25, 7
    234c:	52 c0       	rjmp	.+164    	; 0x23f2 <vfscanf+0x22e>
    234e:	3f 36       	cpi	r19, 0x6F	; 111
    2350:	c1 f1       	breq	.+112    	; 0x23c2 <vfscanf+0x1fe>
    2352:	40 f4       	brcc	.+16     	; 0x2364 <vfscanf+0x1a0>
    2354:	34 36       	cpi	r19, 0x64	; 100
    2356:	89 f1       	breq	.+98     	; 0x23ba <vfscanf+0x1f6>
    2358:	39 36       	cpi	r19, 0x69	; 105
    235a:	b1 f1       	breq	.+108    	; 0x23c8 <vfscanf+0x204>
    235c:	38 35       	cpi	r19, 0x58	; 88
    235e:	09 f0       	breq	.+2      	; 0x2362 <vfscanf+0x19e>
    2360:	39 c0       	rjmp	.+114    	; 0x23d4 <vfscanf+0x210>
    2362:	27 c0       	rjmp	.+78     	; 0x23b2 <vfscanf+0x1ee>
    2364:	33 37       	cpi	r19, 0x73	; 115
    2366:	a1 f0       	breq	.+40     	; 0x2390 <vfscanf+0x1cc>
    2368:	18 f4       	brcc	.+6      	; 0x2370 <vfscanf+0x1ac>
    236a:	30 37       	cpi	r19, 0x70	; 112
    236c:	11 f1       	breq	.+68     	; 0x23b2 <vfscanf+0x1ee>
    236e:	32 c0       	rjmp	.+100    	; 0x23d4 <vfscanf+0x210>
    2370:	35 37       	cpi	r19, 0x75	; 117
    2372:	19 f1       	breq	.+70     	; 0x23ba <vfscanf+0x1f6>
    2374:	38 37       	cpi	r19, 0x78	; 120
    2376:	e9 f0       	breq	.+58     	; 0x23b2 <vfscanf+0x1ee>
    2378:	2d c0       	rjmp	.+90     	; 0x23d4 <vfscanf+0x210>
    237a:	e1 14       	cp	r14, r1
    237c:	f1 04       	cpc	r15, r1
    237e:	29 f0       	breq	.+10     	; 0x238a <vfscanf+0x1c6>
    2380:	f7 01       	movw	r30, r14
    2382:	60 82       	st	Z, r6
    2384:	c7 01       	movw	r24, r14
    2386:	01 96       	adiw	r24, 0x01	; 1
    2388:	7c 01       	movw	r14, r24
    238a:	01 50       	subi	r16, 0x01	; 1
    238c:	11 09       	sbc	r17, r1
    238e:	59 f0       	breq	.+22     	; 0x23a6 <vfscanf+0x1e2>
    2390:	c6 01       	movw	r24, r12
    2392:	96 d4       	rcall	.+2348   	; 0x2cc0 <fgetc>
    2394:	3c 01       	movw	r6, r24
    2396:	97 fd       	sbrc	r25, 7
    2398:	06 c0       	rjmp	.+12     	; 0x23a6 <vfscanf+0x1e2>
    239a:	59 d4       	rcall	.+2226   	; 0x2c4e <isspace>
    239c:	89 2b       	or	r24, r25
    239e:	69 f3       	breq	.-38     	; 0x237a <vfscanf+0x1b6>
    23a0:	b6 01       	movw	r22, r12
    23a2:	c3 01       	movw	r24, r6
    23a4:	5e d5       	rcall	.+2748   	; 0x2e62 <ungetc>
    23a6:	e1 14       	cp	r14, r1
    23a8:	f1 04       	cpc	r15, r1
    23aa:	f9 f0       	breq	.+62     	; 0x23ea <vfscanf+0x226>
    23ac:	f7 01       	movw	r30, r14
    23ae:	10 82       	st	Z, r1
    23b0:	1c c0       	rjmp	.+56     	; 0x23ea <vfscanf+0x226>
    23b2:	fb 2d       	mov	r31, r11
    23b4:	f0 64       	ori	r31, 0x40	; 64
    23b6:	bf 2e       	mov	r11, r31
    23b8:	07 c0       	rjmp	.+14     	; 0x23c8 <vfscanf+0x204>
    23ba:	8b 2d       	mov	r24, r11
    23bc:	80 62       	ori	r24, 0x20	; 32
    23be:	b8 2e       	mov	r11, r24
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <vfscanf+0x204>
    23c2:	9b 2d       	mov	r25, r11
    23c4:	90 61       	ori	r25, 0x10	; 16
    23c6:	b9 2e       	mov	r11, r25
    23c8:	2b 2d       	mov	r18, r11
    23ca:	a7 01       	movw	r20, r14
    23cc:	b8 01       	movw	r22, r16
    23ce:	c6 01       	movw	r24, r12
    23d0:	97 dc       	rcall	.-1746   	; 0x1d00 <conv_int>
    23d2:	04 c0       	rjmp	.+8      	; 0x23dc <vfscanf+0x218>
    23d4:	a7 01       	movw	r20, r14
    23d6:	b8 01       	movw	r22, r16
    23d8:	c6 01       	movw	r24, r12
    23da:	b9 dd       	rcall	.-1166   	; 0x1f4e <conv_flt>
    23dc:	81 11       	cpse	r24, r1
    23de:	05 c0       	rjmp	.+10     	; 0x23ea <vfscanf+0x226>
    23e0:	f6 01       	movw	r30, r12
    23e2:	83 81       	ldd	r24, Z+3	; 0x03
    23e4:	80 73       	andi	r24, 0x30	; 48
    23e6:	29 f4       	brne	.+10     	; 0x23f2 <vfscanf+0x22e>
    23e8:	06 c0       	rjmp	.+12     	; 0x23f6 <vfscanf+0x232>
    23ea:	b0 fc       	sbrc	r11, 0
    23ec:	f7 ce       	rjmp	.-530    	; 0x21dc <vfscanf+0x18>
    23ee:	a3 94       	inc	r10
    23f0:	f5 ce       	rjmp	.-534    	; 0x21dc <vfscanf+0x18>
    23f2:	aa 20       	and	r10, r10
    23f4:	19 f0       	breq	.+6      	; 0x23fc <vfscanf+0x238>
    23f6:	8a 2d       	mov	r24, r10
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <vfscanf+0x23c>
    23fc:	8f ef       	ldi	r24, 0xFF	; 255
    23fe:	9f ef       	ldi	r25, 0xFF	; 255
    2400:	21 96       	adiw	r28, 0x01	; 1
    2402:	e0 e1       	ldi	r30, 0x10	; 16
    2404:	13 c3       	rjmp	.+1574   	; 0x2a2c <__epilogue_restores__+0x4>

00002406 <__subsf3>:
    2406:	50 58       	subi	r21, 0x80	; 128

00002408 <__addsf3>:
    2408:	bb 27       	eor	r27, r27
    240a:	aa 27       	eor	r26, r26
    240c:	0e d0       	rcall	.+28     	; 0x242a <__addsf3x>
    240e:	bd c1       	rjmp	.+890    	; 0x278a <__fp_round>
    2410:	ae d1       	rcall	.+860    	; 0x276e <__fp_pscA>
    2412:	30 f0       	brcs	.+12     	; 0x2420 <__addsf3+0x18>
    2414:	b3 d1       	rcall	.+870    	; 0x277c <__fp_pscB>
    2416:	20 f0       	brcs	.+8      	; 0x2420 <__addsf3+0x18>
    2418:	31 f4       	brne	.+12     	; 0x2426 <__addsf3+0x1e>
    241a:	9f 3f       	cpi	r25, 0xFF	; 255
    241c:	11 f4       	brne	.+4      	; 0x2422 <__addsf3+0x1a>
    241e:	1e f4       	brtc	.+6      	; 0x2426 <__addsf3+0x1e>
    2420:	7e c1       	rjmp	.+764    	; 0x271e <__fp_nan>
    2422:	0e f4       	brtc	.+2      	; 0x2426 <__addsf3+0x1e>
    2424:	e0 95       	com	r30
    2426:	e7 fb       	bst	r30, 7
    2428:	74 c1       	rjmp	.+744    	; 0x2712 <__fp_inf>

0000242a <__addsf3x>:
    242a:	e9 2f       	mov	r30, r25
    242c:	bf d1       	rcall	.+894    	; 0x27ac <__fp_split3>
    242e:	80 f3       	brcs	.-32     	; 0x2410 <__addsf3+0x8>
    2430:	ba 17       	cp	r27, r26
    2432:	62 07       	cpc	r22, r18
    2434:	73 07       	cpc	r23, r19
    2436:	84 07       	cpc	r24, r20
    2438:	95 07       	cpc	r25, r21
    243a:	18 f0       	brcs	.+6      	; 0x2442 <__addsf3x+0x18>
    243c:	71 f4       	brne	.+28     	; 0x245a <__addsf3x+0x30>
    243e:	9e f5       	brtc	.+102    	; 0x24a6 <__addsf3x+0x7c>
    2440:	d7 c1       	rjmp	.+942    	; 0x27f0 <__fp_zero>
    2442:	0e f4       	brtc	.+2      	; 0x2446 <__addsf3x+0x1c>
    2444:	e0 95       	com	r30
    2446:	0b 2e       	mov	r0, r27
    2448:	ba 2f       	mov	r27, r26
    244a:	a0 2d       	mov	r26, r0
    244c:	0b 01       	movw	r0, r22
    244e:	b9 01       	movw	r22, r18
    2450:	90 01       	movw	r18, r0
    2452:	0c 01       	movw	r0, r24
    2454:	ca 01       	movw	r24, r20
    2456:	a0 01       	movw	r20, r0
    2458:	11 24       	eor	r1, r1
    245a:	ff 27       	eor	r31, r31
    245c:	59 1b       	sub	r21, r25
    245e:	99 f0       	breq	.+38     	; 0x2486 <__addsf3x+0x5c>
    2460:	59 3f       	cpi	r21, 0xF9	; 249
    2462:	50 f4       	brcc	.+20     	; 0x2478 <__addsf3x+0x4e>
    2464:	50 3e       	cpi	r21, 0xE0	; 224
    2466:	68 f1       	brcs	.+90     	; 0x24c2 <__addsf3x+0x98>
    2468:	1a 16       	cp	r1, r26
    246a:	f0 40       	sbci	r31, 0x00	; 0
    246c:	a2 2f       	mov	r26, r18
    246e:	23 2f       	mov	r18, r19
    2470:	34 2f       	mov	r19, r20
    2472:	44 27       	eor	r20, r20
    2474:	58 5f       	subi	r21, 0xF8	; 248
    2476:	f3 cf       	rjmp	.-26     	; 0x245e <__addsf3x+0x34>
    2478:	46 95       	lsr	r20
    247a:	37 95       	ror	r19
    247c:	27 95       	ror	r18
    247e:	a7 95       	ror	r26
    2480:	f0 40       	sbci	r31, 0x00	; 0
    2482:	53 95       	inc	r21
    2484:	c9 f7       	brne	.-14     	; 0x2478 <__addsf3x+0x4e>
    2486:	7e f4       	brtc	.+30     	; 0x24a6 <__addsf3x+0x7c>
    2488:	1f 16       	cp	r1, r31
    248a:	ba 0b       	sbc	r27, r26
    248c:	62 0b       	sbc	r22, r18
    248e:	73 0b       	sbc	r23, r19
    2490:	84 0b       	sbc	r24, r20
    2492:	ba f0       	brmi	.+46     	; 0x24c2 <__addsf3x+0x98>
    2494:	91 50       	subi	r25, 0x01	; 1
    2496:	a1 f0       	breq	.+40     	; 0x24c0 <__addsf3x+0x96>
    2498:	ff 0f       	add	r31, r31
    249a:	bb 1f       	adc	r27, r27
    249c:	66 1f       	adc	r22, r22
    249e:	77 1f       	adc	r23, r23
    24a0:	88 1f       	adc	r24, r24
    24a2:	c2 f7       	brpl	.-16     	; 0x2494 <__addsf3x+0x6a>
    24a4:	0e c0       	rjmp	.+28     	; 0x24c2 <__addsf3x+0x98>
    24a6:	ba 0f       	add	r27, r26
    24a8:	62 1f       	adc	r22, r18
    24aa:	73 1f       	adc	r23, r19
    24ac:	84 1f       	adc	r24, r20
    24ae:	48 f4       	brcc	.+18     	; 0x24c2 <__addsf3x+0x98>
    24b0:	87 95       	ror	r24
    24b2:	77 95       	ror	r23
    24b4:	67 95       	ror	r22
    24b6:	b7 95       	ror	r27
    24b8:	f7 95       	ror	r31
    24ba:	9e 3f       	cpi	r25, 0xFE	; 254
    24bc:	08 f0       	brcs	.+2      	; 0x24c0 <__addsf3x+0x96>
    24be:	b3 cf       	rjmp	.-154    	; 0x2426 <__addsf3+0x1e>
    24c0:	93 95       	inc	r25
    24c2:	88 0f       	add	r24, r24
    24c4:	08 f0       	brcs	.+2      	; 0x24c8 <__addsf3x+0x9e>
    24c6:	99 27       	eor	r25, r25
    24c8:	ee 0f       	add	r30, r30
    24ca:	97 95       	ror	r25
    24cc:	87 95       	ror	r24
    24ce:	08 95       	ret

000024d0 <atan>:
    24d0:	df 93       	push	r29
    24d2:	dd 27       	eor	r29, r29
    24d4:	b9 2f       	mov	r27, r25
    24d6:	bf 77       	andi	r27, 0x7F	; 127
    24d8:	40 e8       	ldi	r20, 0x80	; 128
    24da:	5f e3       	ldi	r21, 0x3F	; 63
    24dc:	16 16       	cp	r1, r22
    24de:	17 06       	cpc	r1, r23
    24e0:	48 07       	cpc	r20, r24
    24e2:	5b 07       	cpc	r21, r27
    24e4:	10 f4       	brcc	.+4      	; 0x24ea <atan+0x1a>
    24e6:	d9 2f       	mov	r29, r25
    24e8:	8e d1       	rcall	.+796    	; 0x2806 <inverse>
    24ea:	9f 93       	push	r25
    24ec:	8f 93       	push	r24
    24ee:	7f 93       	push	r23
    24f0:	6f 93       	push	r22
    24f2:	35 d2       	rcall	.+1130   	; 0x295e <square>
    24f4:	e8 e6       	ldi	r30, 0x68	; 104
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	15 d1       	rcall	.+554    	; 0x2724 <__fp_powser>
    24fa:	47 d1       	rcall	.+654    	; 0x278a <__fp_round>
    24fc:	2f 91       	pop	r18
    24fe:	3f 91       	pop	r19
    2500:	4f 91       	pop	r20
    2502:	5f 91       	pop	r21
    2504:	93 d1       	rcall	.+806    	; 0x282c <__mulsf3x>
    2506:	dd 23       	and	r29, r29
    2508:	49 f0       	breq	.+18     	; 0x251c <atan+0x4c>
    250a:	90 58       	subi	r25, 0x80	; 128
    250c:	a2 ea       	ldi	r26, 0xA2	; 162
    250e:	2a ed       	ldi	r18, 0xDA	; 218
    2510:	3f e0       	ldi	r19, 0x0F	; 15
    2512:	49 ec       	ldi	r20, 0xC9	; 201
    2514:	5f e3       	ldi	r21, 0x3F	; 63
    2516:	d0 78       	andi	r29, 0x80	; 128
    2518:	5d 27       	eor	r21, r29
    251a:	87 df       	rcall	.-242    	; 0x242a <__addsf3x>
    251c:	df 91       	pop	r29
    251e:	35 c1       	rjmp	.+618    	; 0x278a <__fp_round>

00002520 <__cmpsf2>:
    2520:	d4 d0       	rcall	.+424    	; 0x26ca <__fp_cmp>
    2522:	08 f4       	brcc	.+2      	; 0x2526 <__cmpsf2+0x6>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	08 95       	ret

00002528 <__divsf3>:
    2528:	0c d0       	rcall	.+24     	; 0x2542 <__divsf3x>
    252a:	2f c1       	rjmp	.+606    	; 0x278a <__fp_round>
    252c:	27 d1       	rcall	.+590    	; 0x277c <__fp_pscB>
    252e:	40 f0       	brcs	.+16     	; 0x2540 <__divsf3+0x18>
    2530:	1e d1       	rcall	.+572    	; 0x276e <__fp_pscA>
    2532:	30 f0       	brcs	.+12     	; 0x2540 <__divsf3+0x18>
    2534:	21 f4       	brne	.+8      	; 0x253e <__divsf3+0x16>
    2536:	5f 3f       	cpi	r21, 0xFF	; 255
    2538:	19 f0       	breq	.+6      	; 0x2540 <__divsf3+0x18>
    253a:	eb c0       	rjmp	.+470    	; 0x2712 <__fp_inf>
    253c:	51 11       	cpse	r21, r1
    253e:	59 c1       	rjmp	.+690    	; 0x27f2 <__fp_szero>
    2540:	ee c0       	rjmp	.+476    	; 0x271e <__fp_nan>

00002542 <__divsf3x>:
    2542:	34 d1       	rcall	.+616    	; 0x27ac <__fp_split3>
    2544:	98 f3       	brcs	.-26     	; 0x252c <__divsf3+0x4>

00002546 <__divsf3_pse>:
    2546:	99 23       	and	r25, r25
    2548:	c9 f3       	breq	.-14     	; 0x253c <__divsf3+0x14>
    254a:	55 23       	and	r21, r21
    254c:	b1 f3       	breq	.-20     	; 0x253a <__divsf3+0x12>
    254e:	95 1b       	sub	r25, r21
    2550:	55 0b       	sbc	r21, r21
    2552:	bb 27       	eor	r27, r27
    2554:	aa 27       	eor	r26, r26
    2556:	62 17       	cp	r22, r18
    2558:	73 07       	cpc	r23, r19
    255a:	84 07       	cpc	r24, r20
    255c:	38 f0       	brcs	.+14     	; 0x256c <__divsf3_pse+0x26>
    255e:	9f 5f       	subi	r25, 0xFF	; 255
    2560:	5f 4f       	sbci	r21, 0xFF	; 255
    2562:	22 0f       	add	r18, r18
    2564:	33 1f       	adc	r19, r19
    2566:	44 1f       	adc	r20, r20
    2568:	aa 1f       	adc	r26, r26
    256a:	a9 f3       	breq	.-22     	; 0x2556 <__divsf3_pse+0x10>
    256c:	33 d0       	rcall	.+102    	; 0x25d4 <__divsf3_pse+0x8e>
    256e:	0e 2e       	mov	r0, r30
    2570:	3a f0       	brmi	.+14     	; 0x2580 <__divsf3_pse+0x3a>
    2572:	e0 e8       	ldi	r30, 0x80	; 128
    2574:	30 d0       	rcall	.+96     	; 0x25d6 <__divsf3_pse+0x90>
    2576:	91 50       	subi	r25, 0x01	; 1
    2578:	50 40       	sbci	r21, 0x00	; 0
    257a:	e6 95       	lsr	r30
    257c:	00 1c       	adc	r0, r0
    257e:	ca f7       	brpl	.-14     	; 0x2572 <__divsf3_pse+0x2c>
    2580:	29 d0       	rcall	.+82     	; 0x25d4 <__divsf3_pse+0x8e>
    2582:	fe 2f       	mov	r31, r30
    2584:	27 d0       	rcall	.+78     	; 0x25d4 <__divsf3_pse+0x8e>
    2586:	66 0f       	add	r22, r22
    2588:	77 1f       	adc	r23, r23
    258a:	88 1f       	adc	r24, r24
    258c:	bb 1f       	adc	r27, r27
    258e:	26 17       	cp	r18, r22
    2590:	37 07       	cpc	r19, r23
    2592:	48 07       	cpc	r20, r24
    2594:	ab 07       	cpc	r26, r27
    2596:	b0 e8       	ldi	r27, 0x80	; 128
    2598:	09 f0       	breq	.+2      	; 0x259c <__divsf3_pse+0x56>
    259a:	bb 0b       	sbc	r27, r27
    259c:	80 2d       	mov	r24, r0
    259e:	bf 01       	movw	r22, r30
    25a0:	ff 27       	eor	r31, r31
    25a2:	93 58       	subi	r25, 0x83	; 131
    25a4:	5f 4f       	sbci	r21, 0xFF	; 255
    25a6:	2a f0       	brmi	.+10     	; 0x25b2 <__divsf3_pse+0x6c>
    25a8:	9e 3f       	cpi	r25, 0xFE	; 254
    25aa:	51 05       	cpc	r21, r1
    25ac:	68 f0       	brcs	.+26     	; 0x25c8 <__divsf3_pse+0x82>
    25ae:	b1 c0       	rjmp	.+354    	; 0x2712 <__fp_inf>
    25b0:	20 c1       	rjmp	.+576    	; 0x27f2 <__fp_szero>
    25b2:	5f 3f       	cpi	r21, 0xFF	; 255
    25b4:	ec f3       	brlt	.-6      	; 0x25b0 <__divsf3_pse+0x6a>
    25b6:	98 3e       	cpi	r25, 0xE8	; 232
    25b8:	dc f3       	brlt	.-10     	; 0x25b0 <__divsf3_pse+0x6a>
    25ba:	86 95       	lsr	r24
    25bc:	77 95       	ror	r23
    25be:	67 95       	ror	r22
    25c0:	b7 95       	ror	r27
    25c2:	f7 95       	ror	r31
    25c4:	9f 5f       	subi	r25, 0xFF	; 255
    25c6:	c9 f7       	brne	.-14     	; 0x25ba <__divsf3_pse+0x74>
    25c8:	88 0f       	add	r24, r24
    25ca:	91 1d       	adc	r25, r1
    25cc:	96 95       	lsr	r25
    25ce:	87 95       	ror	r24
    25d0:	97 f9       	bld	r25, 7
    25d2:	08 95       	ret
    25d4:	e1 e0       	ldi	r30, 0x01	; 1
    25d6:	66 0f       	add	r22, r22
    25d8:	77 1f       	adc	r23, r23
    25da:	88 1f       	adc	r24, r24
    25dc:	bb 1f       	adc	r27, r27
    25de:	62 17       	cp	r22, r18
    25e0:	73 07       	cpc	r23, r19
    25e2:	84 07       	cpc	r24, r20
    25e4:	ba 07       	cpc	r27, r26
    25e6:	20 f0       	brcs	.+8      	; 0x25f0 <__divsf3_pse+0xaa>
    25e8:	62 1b       	sub	r22, r18
    25ea:	73 0b       	sbc	r23, r19
    25ec:	84 0b       	sbc	r24, r20
    25ee:	ba 0b       	sbc	r27, r26
    25f0:	ee 1f       	adc	r30, r30
    25f2:	88 f7       	brcc	.-30     	; 0x25d6 <__divsf3_pse+0x90>
    25f4:	e0 95       	com	r30
    25f6:	08 95       	ret

000025f8 <__fixunssfsi>:
    25f8:	e1 d0       	rcall	.+450    	; 0x27bc <__fp_splitA>
    25fa:	88 f0       	brcs	.+34     	; 0x261e <__fixunssfsi+0x26>
    25fc:	9f 57       	subi	r25, 0x7F	; 127
    25fe:	90 f0       	brcs	.+36     	; 0x2624 <__fixunssfsi+0x2c>
    2600:	b9 2f       	mov	r27, r25
    2602:	99 27       	eor	r25, r25
    2604:	b7 51       	subi	r27, 0x17	; 23
    2606:	a0 f0       	brcs	.+40     	; 0x2630 <__fixunssfsi+0x38>
    2608:	d1 f0       	breq	.+52     	; 0x263e <__fixunssfsi+0x46>
    260a:	66 0f       	add	r22, r22
    260c:	77 1f       	adc	r23, r23
    260e:	88 1f       	adc	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	1a f0       	brmi	.+6      	; 0x261a <__fixunssfsi+0x22>
    2614:	ba 95       	dec	r27
    2616:	c9 f7       	brne	.-14     	; 0x260a <__fixunssfsi+0x12>
    2618:	12 c0       	rjmp	.+36     	; 0x263e <__fixunssfsi+0x46>
    261a:	b1 30       	cpi	r27, 0x01	; 1
    261c:	81 f0       	breq	.+32     	; 0x263e <__fixunssfsi+0x46>
    261e:	e8 d0       	rcall	.+464    	; 0x27f0 <__fp_zero>
    2620:	b1 e0       	ldi	r27, 0x01	; 1
    2622:	08 95       	ret
    2624:	e5 c0       	rjmp	.+458    	; 0x27f0 <__fp_zero>
    2626:	67 2f       	mov	r22, r23
    2628:	78 2f       	mov	r23, r24
    262a:	88 27       	eor	r24, r24
    262c:	b8 5f       	subi	r27, 0xF8	; 248
    262e:	39 f0       	breq	.+14     	; 0x263e <__fixunssfsi+0x46>
    2630:	b9 3f       	cpi	r27, 0xF9	; 249
    2632:	cc f3       	brlt	.-14     	; 0x2626 <__fixunssfsi+0x2e>
    2634:	86 95       	lsr	r24
    2636:	77 95       	ror	r23
    2638:	67 95       	ror	r22
    263a:	b3 95       	inc	r27
    263c:	d9 f7       	brne	.-10     	; 0x2634 <__fixunssfsi+0x3c>
    263e:	3e f4       	brtc	.+14     	; 0x264e <__fixunssfsi+0x56>
    2640:	90 95       	com	r25
    2642:	80 95       	com	r24
    2644:	70 95       	com	r23
    2646:	61 95       	neg	r22
    2648:	7f 4f       	sbci	r23, 0xFF	; 255
    264a:	8f 4f       	sbci	r24, 0xFF	; 255
    264c:	9f 4f       	sbci	r25, 0xFF	; 255
    264e:	08 95       	ret

00002650 <__floatunsisf>:
    2650:	e8 94       	clt
    2652:	09 c0       	rjmp	.+18     	; 0x2666 <__floatsisf+0x12>

00002654 <__floatsisf>:
    2654:	97 fb       	bst	r25, 7
    2656:	3e f4       	brtc	.+14     	; 0x2666 <__floatsisf+0x12>
    2658:	90 95       	com	r25
    265a:	80 95       	com	r24
    265c:	70 95       	com	r23
    265e:	61 95       	neg	r22
    2660:	7f 4f       	sbci	r23, 0xFF	; 255
    2662:	8f 4f       	sbci	r24, 0xFF	; 255
    2664:	9f 4f       	sbci	r25, 0xFF	; 255
    2666:	99 23       	and	r25, r25
    2668:	a9 f0       	breq	.+42     	; 0x2694 <__floatsisf+0x40>
    266a:	f9 2f       	mov	r31, r25
    266c:	96 e9       	ldi	r25, 0x96	; 150
    266e:	bb 27       	eor	r27, r27
    2670:	93 95       	inc	r25
    2672:	f6 95       	lsr	r31
    2674:	87 95       	ror	r24
    2676:	77 95       	ror	r23
    2678:	67 95       	ror	r22
    267a:	b7 95       	ror	r27
    267c:	f1 11       	cpse	r31, r1
    267e:	f8 cf       	rjmp	.-16     	; 0x2670 <__floatsisf+0x1c>
    2680:	fa f4       	brpl	.+62     	; 0x26c0 <__floatsisf+0x6c>
    2682:	bb 0f       	add	r27, r27
    2684:	11 f4       	brne	.+4      	; 0x268a <__floatsisf+0x36>
    2686:	60 ff       	sbrs	r22, 0
    2688:	1b c0       	rjmp	.+54     	; 0x26c0 <__floatsisf+0x6c>
    268a:	6f 5f       	subi	r22, 0xFF	; 255
    268c:	7f 4f       	sbci	r23, 0xFF	; 255
    268e:	8f 4f       	sbci	r24, 0xFF	; 255
    2690:	9f 4f       	sbci	r25, 0xFF	; 255
    2692:	16 c0       	rjmp	.+44     	; 0x26c0 <__floatsisf+0x6c>
    2694:	88 23       	and	r24, r24
    2696:	11 f0       	breq	.+4      	; 0x269c <__floatsisf+0x48>
    2698:	96 e9       	ldi	r25, 0x96	; 150
    269a:	11 c0       	rjmp	.+34     	; 0x26be <__floatsisf+0x6a>
    269c:	77 23       	and	r23, r23
    269e:	21 f0       	breq	.+8      	; 0x26a8 <__floatsisf+0x54>
    26a0:	9e e8       	ldi	r25, 0x8E	; 142
    26a2:	87 2f       	mov	r24, r23
    26a4:	76 2f       	mov	r23, r22
    26a6:	05 c0       	rjmp	.+10     	; 0x26b2 <__floatsisf+0x5e>
    26a8:	66 23       	and	r22, r22
    26aa:	71 f0       	breq	.+28     	; 0x26c8 <__floatsisf+0x74>
    26ac:	96 e8       	ldi	r25, 0x86	; 134
    26ae:	86 2f       	mov	r24, r22
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	60 e0       	ldi	r22, 0x00	; 0
    26b4:	2a f0       	brmi	.+10     	; 0x26c0 <__floatsisf+0x6c>
    26b6:	9a 95       	dec	r25
    26b8:	66 0f       	add	r22, r22
    26ba:	77 1f       	adc	r23, r23
    26bc:	88 1f       	adc	r24, r24
    26be:	da f7       	brpl	.-10     	; 0x26b6 <__floatsisf+0x62>
    26c0:	88 0f       	add	r24, r24
    26c2:	96 95       	lsr	r25
    26c4:	87 95       	ror	r24
    26c6:	97 f9       	bld	r25, 7
    26c8:	08 95       	ret

000026ca <__fp_cmp>:
    26ca:	99 0f       	add	r25, r25
    26cc:	00 08       	sbc	r0, r0
    26ce:	55 0f       	add	r21, r21
    26d0:	aa 0b       	sbc	r26, r26
    26d2:	e0 e8       	ldi	r30, 0x80	; 128
    26d4:	fe ef       	ldi	r31, 0xFE	; 254
    26d6:	16 16       	cp	r1, r22
    26d8:	17 06       	cpc	r1, r23
    26da:	e8 07       	cpc	r30, r24
    26dc:	f9 07       	cpc	r31, r25
    26de:	c0 f0       	brcs	.+48     	; 0x2710 <__fp_cmp+0x46>
    26e0:	12 16       	cp	r1, r18
    26e2:	13 06       	cpc	r1, r19
    26e4:	e4 07       	cpc	r30, r20
    26e6:	f5 07       	cpc	r31, r21
    26e8:	98 f0       	brcs	.+38     	; 0x2710 <__fp_cmp+0x46>
    26ea:	62 1b       	sub	r22, r18
    26ec:	73 0b       	sbc	r23, r19
    26ee:	84 0b       	sbc	r24, r20
    26f0:	95 0b       	sbc	r25, r21
    26f2:	39 f4       	brne	.+14     	; 0x2702 <__fp_cmp+0x38>
    26f4:	0a 26       	eor	r0, r26
    26f6:	61 f0       	breq	.+24     	; 0x2710 <__fp_cmp+0x46>
    26f8:	23 2b       	or	r18, r19
    26fa:	24 2b       	or	r18, r20
    26fc:	25 2b       	or	r18, r21
    26fe:	21 f4       	brne	.+8      	; 0x2708 <__fp_cmp+0x3e>
    2700:	08 95       	ret
    2702:	0a 26       	eor	r0, r26
    2704:	09 f4       	brne	.+2      	; 0x2708 <__fp_cmp+0x3e>
    2706:	a1 40       	sbci	r26, 0x01	; 1
    2708:	a6 95       	lsr	r26
    270a:	8f ef       	ldi	r24, 0xFF	; 255
    270c:	81 1d       	adc	r24, r1
    270e:	81 1d       	adc	r24, r1
    2710:	08 95       	ret

00002712 <__fp_inf>:
    2712:	97 f9       	bld	r25, 7
    2714:	9f 67       	ori	r25, 0x7F	; 127
    2716:	80 e8       	ldi	r24, 0x80	; 128
    2718:	70 e0       	ldi	r23, 0x00	; 0
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	08 95       	ret

0000271e <__fp_nan>:
    271e:	9f ef       	ldi	r25, 0xFF	; 255
    2720:	80 ec       	ldi	r24, 0xC0	; 192
    2722:	08 95       	ret

00002724 <__fp_powser>:
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	1f 93       	push	r17
    272a:	0f 93       	push	r16
    272c:	ff 92       	push	r15
    272e:	ef 92       	push	r14
    2730:	df 92       	push	r13
    2732:	7b 01       	movw	r14, r22
    2734:	8c 01       	movw	r16, r24
    2736:	68 94       	set
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <__fp_powser+0x20>
    273a:	da 2e       	mov	r13, r26
    273c:	ef 01       	movw	r28, r30
    273e:	76 d0       	rcall	.+236    	; 0x282c <__mulsf3x>
    2740:	fe 01       	movw	r30, r28
    2742:	e8 94       	clt
    2744:	a5 91       	lpm	r26, Z+
    2746:	25 91       	lpm	r18, Z+
    2748:	35 91       	lpm	r19, Z+
    274a:	45 91       	lpm	r20, Z+
    274c:	55 91       	lpm	r21, Z+
    274e:	ae f3       	brts	.-22     	; 0x273a <__fp_powser+0x16>
    2750:	ef 01       	movw	r28, r30
    2752:	6b de       	rcall	.-810    	; 0x242a <__addsf3x>
    2754:	fe 01       	movw	r30, r28
    2756:	97 01       	movw	r18, r14
    2758:	a8 01       	movw	r20, r16
    275a:	da 94       	dec	r13
    275c:	79 f7       	brne	.-34     	; 0x273c <__fp_powser+0x18>
    275e:	df 90       	pop	r13
    2760:	ef 90       	pop	r14
    2762:	ff 90       	pop	r15
    2764:	0f 91       	pop	r16
    2766:	1f 91       	pop	r17
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	08 95       	ret

0000276e <__fp_pscA>:
    276e:	00 24       	eor	r0, r0
    2770:	0a 94       	dec	r0
    2772:	16 16       	cp	r1, r22
    2774:	17 06       	cpc	r1, r23
    2776:	18 06       	cpc	r1, r24
    2778:	09 06       	cpc	r0, r25
    277a:	08 95       	ret

0000277c <__fp_pscB>:
    277c:	00 24       	eor	r0, r0
    277e:	0a 94       	dec	r0
    2780:	12 16       	cp	r1, r18
    2782:	13 06       	cpc	r1, r19
    2784:	14 06       	cpc	r1, r20
    2786:	05 06       	cpc	r0, r21
    2788:	08 95       	ret

0000278a <__fp_round>:
    278a:	09 2e       	mov	r0, r25
    278c:	03 94       	inc	r0
    278e:	00 0c       	add	r0, r0
    2790:	11 f4       	brne	.+4      	; 0x2796 <__fp_round+0xc>
    2792:	88 23       	and	r24, r24
    2794:	52 f0       	brmi	.+20     	; 0x27aa <__fp_round+0x20>
    2796:	bb 0f       	add	r27, r27
    2798:	40 f4       	brcc	.+16     	; 0x27aa <__fp_round+0x20>
    279a:	bf 2b       	or	r27, r31
    279c:	11 f4       	brne	.+4      	; 0x27a2 <__fp_round+0x18>
    279e:	60 ff       	sbrs	r22, 0
    27a0:	04 c0       	rjmp	.+8      	; 0x27aa <__fp_round+0x20>
    27a2:	6f 5f       	subi	r22, 0xFF	; 255
    27a4:	7f 4f       	sbci	r23, 0xFF	; 255
    27a6:	8f 4f       	sbci	r24, 0xFF	; 255
    27a8:	9f 4f       	sbci	r25, 0xFF	; 255
    27aa:	08 95       	ret

000027ac <__fp_split3>:
    27ac:	57 fd       	sbrc	r21, 7
    27ae:	90 58       	subi	r25, 0x80	; 128
    27b0:	44 0f       	add	r20, r20
    27b2:	55 1f       	adc	r21, r21
    27b4:	59 f0       	breq	.+22     	; 0x27cc <__fp_splitA+0x10>
    27b6:	5f 3f       	cpi	r21, 0xFF	; 255
    27b8:	71 f0       	breq	.+28     	; 0x27d6 <__fp_splitA+0x1a>
    27ba:	47 95       	ror	r20

000027bc <__fp_splitA>:
    27bc:	88 0f       	add	r24, r24
    27be:	97 fb       	bst	r25, 7
    27c0:	99 1f       	adc	r25, r25
    27c2:	61 f0       	breq	.+24     	; 0x27dc <__fp_splitA+0x20>
    27c4:	9f 3f       	cpi	r25, 0xFF	; 255
    27c6:	79 f0       	breq	.+30     	; 0x27e6 <__fp_splitA+0x2a>
    27c8:	87 95       	ror	r24
    27ca:	08 95       	ret
    27cc:	12 16       	cp	r1, r18
    27ce:	13 06       	cpc	r1, r19
    27d0:	14 06       	cpc	r1, r20
    27d2:	55 1f       	adc	r21, r21
    27d4:	f2 cf       	rjmp	.-28     	; 0x27ba <__fp_split3+0xe>
    27d6:	46 95       	lsr	r20
    27d8:	f1 df       	rcall	.-30     	; 0x27bc <__fp_splitA>
    27da:	08 c0       	rjmp	.+16     	; 0x27ec <__fp_splitA+0x30>
    27dc:	16 16       	cp	r1, r22
    27de:	17 06       	cpc	r1, r23
    27e0:	18 06       	cpc	r1, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	f1 cf       	rjmp	.-30     	; 0x27c8 <__fp_splitA+0xc>
    27e6:	86 95       	lsr	r24
    27e8:	71 05       	cpc	r23, r1
    27ea:	61 05       	cpc	r22, r1
    27ec:	08 94       	sec
    27ee:	08 95       	ret

000027f0 <__fp_zero>:
    27f0:	e8 94       	clt

000027f2 <__fp_szero>:
    27f2:	bb 27       	eor	r27, r27
    27f4:	66 27       	eor	r22, r22
    27f6:	77 27       	eor	r23, r23
    27f8:	cb 01       	movw	r24, r22
    27fa:	97 f9       	bld	r25, 7
    27fc:	08 95       	ret

000027fe <__gesf2>:
    27fe:	65 df       	rcall	.-310    	; 0x26ca <__fp_cmp>
    2800:	08 f4       	brcc	.+2      	; 0x2804 <__gesf2+0x6>
    2802:	8f ef       	ldi	r24, 0xFF	; 255
    2804:	08 95       	ret

00002806 <inverse>:
    2806:	9b 01       	movw	r18, r22
    2808:	ac 01       	movw	r20, r24
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	70 e0       	ldi	r23, 0x00	; 0
    280e:	80 e8       	ldi	r24, 0x80	; 128
    2810:	9f e3       	ldi	r25, 0x3F	; 63
    2812:	8a ce       	rjmp	.-748    	; 0x2528 <__divsf3>

00002814 <__mulsf3>:
    2814:	0b d0       	rcall	.+22     	; 0x282c <__mulsf3x>
    2816:	b9 cf       	rjmp	.-142    	; 0x278a <__fp_round>
    2818:	aa df       	rcall	.-172    	; 0x276e <__fp_pscA>
    281a:	28 f0       	brcs	.+10     	; 0x2826 <__mulsf3+0x12>
    281c:	af df       	rcall	.-162    	; 0x277c <__fp_pscB>
    281e:	18 f0       	brcs	.+6      	; 0x2826 <__mulsf3+0x12>
    2820:	95 23       	and	r25, r21
    2822:	09 f0       	breq	.+2      	; 0x2826 <__mulsf3+0x12>
    2824:	76 cf       	rjmp	.-276    	; 0x2712 <__fp_inf>
    2826:	7b cf       	rjmp	.-266    	; 0x271e <__fp_nan>
    2828:	11 24       	eor	r1, r1
    282a:	e3 cf       	rjmp	.-58     	; 0x27f2 <__fp_szero>

0000282c <__mulsf3x>:
    282c:	bf df       	rcall	.-130    	; 0x27ac <__fp_split3>
    282e:	a0 f3       	brcs	.-24     	; 0x2818 <__mulsf3+0x4>

00002830 <__mulsf3_pse>:
    2830:	95 9f       	mul	r25, r21
    2832:	d1 f3       	breq	.-12     	; 0x2828 <__mulsf3+0x14>
    2834:	95 0f       	add	r25, r21
    2836:	50 e0       	ldi	r21, 0x00	; 0
    2838:	55 1f       	adc	r21, r21
    283a:	62 9f       	mul	r22, r18
    283c:	f0 01       	movw	r30, r0
    283e:	72 9f       	mul	r23, r18
    2840:	bb 27       	eor	r27, r27
    2842:	f0 0d       	add	r31, r0
    2844:	b1 1d       	adc	r27, r1
    2846:	63 9f       	mul	r22, r19
    2848:	aa 27       	eor	r26, r26
    284a:	f0 0d       	add	r31, r0
    284c:	b1 1d       	adc	r27, r1
    284e:	aa 1f       	adc	r26, r26
    2850:	64 9f       	mul	r22, r20
    2852:	66 27       	eor	r22, r22
    2854:	b0 0d       	add	r27, r0
    2856:	a1 1d       	adc	r26, r1
    2858:	66 1f       	adc	r22, r22
    285a:	82 9f       	mul	r24, r18
    285c:	22 27       	eor	r18, r18
    285e:	b0 0d       	add	r27, r0
    2860:	a1 1d       	adc	r26, r1
    2862:	62 1f       	adc	r22, r18
    2864:	73 9f       	mul	r23, r19
    2866:	b0 0d       	add	r27, r0
    2868:	a1 1d       	adc	r26, r1
    286a:	62 1f       	adc	r22, r18
    286c:	83 9f       	mul	r24, r19
    286e:	a0 0d       	add	r26, r0
    2870:	61 1d       	adc	r22, r1
    2872:	22 1f       	adc	r18, r18
    2874:	74 9f       	mul	r23, r20
    2876:	33 27       	eor	r19, r19
    2878:	a0 0d       	add	r26, r0
    287a:	61 1d       	adc	r22, r1
    287c:	23 1f       	adc	r18, r19
    287e:	84 9f       	mul	r24, r20
    2880:	60 0d       	add	r22, r0
    2882:	21 1d       	adc	r18, r1
    2884:	82 2f       	mov	r24, r18
    2886:	76 2f       	mov	r23, r22
    2888:	6a 2f       	mov	r22, r26
    288a:	11 24       	eor	r1, r1
    288c:	9f 57       	subi	r25, 0x7F	; 127
    288e:	50 40       	sbci	r21, 0x00	; 0
    2890:	8a f0       	brmi	.+34     	; 0x28b4 <__mulsf3_pse+0x84>
    2892:	e1 f0       	breq	.+56     	; 0x28cc <__mulsf3_pse+0x9c>
    2894:	88 23       	and	r24, r24
    2896:	4a f0       	brmi	.+18     	; 0x28aa <__mulsf3_pse+0x7a>
    2898:	ee 0f       	add	r30, r30
    289a:	ff 1f       	adc	r31, r31
    289c:	bb 1f       	adc	r27, r27
    289e:	66 1f       	adc	r22, r22
    28a0:	77 1f       	adc	r23, r23
    28a2:	88 1f       	adc	r24, r24
    28a4:	91 50       	subi	r25, 0x01	; 1
    28a6:	50 40       	sbci	r21, 0x00	; 0
    28a8:	a9 f7       	brne	.-22     	; 0x2894 <__mulsf3_pse+0x64>
    28aa:	9e 3f       	cpi	r25, 0xFE	; 254
    28ac:	51 05       	cpc	r21, r1
    28ae:	70 f0       	brcs	.+28     	; 0x28cc <__mulsf3_pse+0x9c>
    28b0:	30 cf       	rjmp	.-416    	; 0x2712 <__fp_inf>
    28b2:	9f cf       	rjmp	.-194    	; 0x27f2 <__fp_szero>
    28b4:	5f 3f       	cpi	r21, 0xFF	; 255
    28b6:	ec f3       	brlt	.-6      	; 0x28b2 <__mulsf3_pse+0x82>
    28b8:	98 3e       	cpi	r25, 0xE8	; 232
    28ba:	dc f3       	brlt	.-10     	; 0x28b2 <__mulsf3_pse+0x82>
    28bc:	86 95       	lsr	r24
    28be:	77 95       	ror	r23
    28c0:	67 95       	ror	r22
    28c2:	b7 95       	ror	r27
    28c4:	f7 95       	ror	r31
    28c6:	e7 95       	ror	r30
    28c8:	9f 5f       	subi	r25, 0xFF	; 255
    28ca:	c1 f7       	brne	.-16     	; 0x28bc <__mulsf3_pse+0x8c>
    28cc:	fe 2b       	or	r31, r30
    28ce:	88 0f       	add	r24, r24
    28d0:	91 1d       	adc	r25, r1
    28d2:	96 95       	lsr	r25
    28d4:	87 95       	ror	r24
    28d6:	97 f9       	bld	r25, 7
    28d8:	08 95       	ret
    28da:	11 f4       	brne	.+4      	; 0x28e0 <__mulsf3_pse+0xb0>
    28dc:	0e f4       	brtc	.+2      	; 0x28e0 <__mulsf3_pse+0xb0>
    28de:	1f cf       	rjmp	.-450    	; 0x271e <__fp_nan>
    28e0:	41 c0       	rjmp	.+130    	; 0x2964 <__fp_mpack>

000028e2 <sqrt>:
    28e2:	6c df       	rcall	.-296    	; 0x27bc <__fp_splitA>
    28e4:	d0 f3       	brcs	.-12     	; 0x28da <__mulsf3_pse+0xaa>
    28e6:	99 23       	and	r25, r25
    28e8:	d9 f3       	breq	.-10     	; 0x28e0 <__mulsf3_pse+0xb0>
    28ea:	ce f3       	brts	.-14     	; 0x28de <__mulsf3_pse+0xae>
    28ec:	9f 57       	subi	r25, 0x7F	; 127
    28ee:	55 0b       	sbc	r21, r21
    28f0:	87 ff       	sbrs	r24, 7
    28f2:	46 d0       	rcall	.+140    	; 0x2980 <__fp_norm2>
    28f4:	00 24       	eor	r0, r0
    28f6:	a0 e6       	ldi	r26, 0x60	; 96
    28f8:	40 ea       	ldi	r20, 0xA0	; 160
    28fa:	90 01       	movw	r18, r0
    28fc:	80 58       	subi	r24, 0x80	; 128
    28fe:	56 95       	lsr	r21
    2900:	97 95       	ror	r25
    2902:	28 f4       	brcc	.+10     	; 0x290e <sqrt+0x2c>
    2904:	80 5c       	subi	r24, 0xC0	; 192
    2906:	66 0f       	add	r22, r22
    2908:	77 1f       	adc	r23, r23
    290a:	88 1f       	adc	r24, r24
    290c:	20 f0       	brcs	.+8      	; 0x2916 <sqrt+0x34>
    290e:	26 17       	cp	r18, r22
    2910:	37 07       	cpc	r19, r23
    2912:	48 07       	cpc	r20, r24
    2914:	30 f4       	brcc	.+12     	; 0x2922 <sqrt+0x40>
    2916:	62 1b       	sub	r22, r18
    2918:	73 0b       	sbc	r23, r19
    291a:	84 0b       	sbc	r24, r20
    291c:	20 29       	or	r18, r0
    291e:	31 29       	or	r19, r1
    2920:	4a 2b       	or	r20, r26
    2922:	a6 95       	lsr	r26
    2924:	17 94       	ror	r1
    2926:	07 94       	ror	r0
    2928:	20 25       	eor	r18, r0
    292a:	31 25       	eor	r19, r1
    292c:	4a 27       	eor	r20, r26
    292e:	58 f7       	brcc	.-42     	; 0x2906 <sqrt+0x24>
    2930:	66 0f       	add	r22, r22
    2932:	77 1f       	adc	r23, r23
    2934:	88 1f       	adc	r24, r24
    2936:	20 f0       	brcs	.+8      	; 0x2940 <sqrt+0x5e>
    2938:	26 17       	cp	r18, r22
    293a:	37 07       	cpc	r19, r23
    293c:	48 07       	cpc	r20, r24
    293e:	30 f4       	brcc	.+12     	; 0x294c <sqrt+0x6a>
    2940:	62 0b       	sbc	r22, r18
    2942:	73 0b       	sbc	r23, r19
    2944:	84 0b       	sbc	r24, r20
    2946:	20 0d       	add	r18, r0
    2948:	31 1d       	adc	r19, r1
    294a:	41 1d       	adc	r20, r1
    294c:	a0 95       	com	r26
    294e:	81 f7       	brne	.-32     	; 0x2930 <sqrt+0x4e>
    2950:	b9 01       	movw	r22, r18
    2952:	84 2f       	mov	r24, r20
    2954:	91 58       	subi	r25, 0x81	; 129
    2956:	88 0f       	add	r24, r24
    2958:	96 95       	lsr	r25
    295a:	87 95       	ror	r24
    295c:	08 95       	ret

0000295e <square>:
    295e:	9b 01       	movw	r18, r22
    2960:	ac 01       	movw	r20, r24
    2962:	58 cf       	rjmp	.-336    	; 0x2814 <__mulsf3>

00002964 <__fp_mpack>:
    2964:	9f 3f       	cpi	r25, 0xFF	; 255
    2966:	31 f0       	breq	.+12     	; 0x2974 <__fp_mpack_finite+0xc>

00002968 <__fp_mpack_finite>:
    2968:	91 50       	subi	r25, 0x01	; 1
    296a:	20 f4       	brcc	.+8      	; 0x2974 <__fp_mpack_finite+0xc>
    296c:	87 95       	ror	r24
    296e:	77 95       	ror	r23
    2970:	67 95       	ror	r22
    2972:	b7 95       	ror	r27
    2974:	88 0f       	add	r24, r24
    2976:	91 1d       	adc	r25, r1
    2978:	96 95       	lsr	r25
    297a:	87 95       	ror	r24
    297c:	97 f9       	bld	r25, 7
    297e:	08 95       	ret

00002980 <__fp_norm2>:
    2980:	91 50       	subi	r25, 0x01	; 1
    2982:	50 40       	sbci	r21, 0x00	; 0
    2984:	66 0f       	add	r22, r22
    2986:	77 1f       	adc	r23, r23
    2988:	88 1f       	adc	r24, r24
    298a:	d2 f7       	brpl	.-12     	; 0x2980 <__fp_norm2>
    298c:	08 95       	ret

0000298e <__udivmodsi4>:
    298e:	a1 e2       	ldi	r26, 0x21	; 33
    2990:	1a 2e       	mov	r1, r26
    2992:	aa 1b       	sub	r26, r26
    2994:	bb 1b       	sub	r27, r27
    2996:	fd 01       	movw	r30, r26
    2998:	0d c0       	rjmp	.+26     	; 0x29b4 <__udivmodsi4_ep>

0000299a <__udivmodsi4_loop>:
    299a:	aa 1f       	adc	r26, r26
    299c:	bb 1f       	adc	r27, r27
    299e:	ee 1f       	adc	r30, r30
    29a0:	ff 1f       	adc	r31, r31
    29a2:	a2 17       	cp	r26, r18
    29a4:	b3 07       	cpc	r27, r19
    29a6:	e4 07       	cpc	r30, r20
    29a8:	f5 07       	cpc	r31, r21
    29aa:	20 f0       	brcs	.+8      	; 0x29b4 <__udivmodsi4_ep>
    29ac:	a2 1b       	sub	r26, r18
    29ae:	b3 0b       	sbc	r27, r19
    29b0:	e4 0b       	sbc	r30, r20
    29b2:	f5 0b       	sbc	r31, r21

000029b4 <__udivmodsi4_ep>:
    29b4:	66 1f       	adc	r22, r22
    29b6:	77 1f       	adc	r23, r23
    29b8:	88 1f       	adc	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	1a 94       	dec	r1
    29be:	69 f7       	brne	.-38     	; 0x299a <__udivmodsi4_loop>
    29c0:	60 95       	com	r22
    29c2:	70 95       	com	r23
    29c4:	80 95       	com	r24
    29c6:	90 95       	com	r25
    29c8:	9b 01       	movw	r18, r22
    29ca:	ac 01       	movw	r20, r24
    29cc:	bd 01       	movw	r22, r26
    29ce:	cf 01       	movw	r24, r30
    29d0:	08 95       	ret

000029d2 <__umulhisi3>:
    29d2:	a2 9f       	mul	r26, r18
    29d4:	b0 01       	movw	r22, r0
    29d6:	b3 9f       	mul	r27, r19
    29d8:	c0 01       	movw	r24, r0
    29da:	a3 9f       	mul	r26, r19
    29dc:	70 0d       	add	r23, r0
    29de:	81 1d       	adc	r24, r1
    29e0:	11 24       	eor	r1, r1
    29e2:	91 1d       	adc	r25, r1
    29e4:	b2 9f       	mul	r27, r18
    29e6:	70 0d       	add	r23, r0
    29e8:	81 1d       	adc	r24, r1
    29ea:	11 24       	eor	r1, r1
    29ec:	91 1d       	adc	r25, r1
    29ee:	08 95       	ret

000029f0 <__prologue_saves__>:
    29f0:	2f 92       	push	r2
    29f2:	3f 92       	push	r3
    29f4:	4f 92       	push	r4
    29f6:	5f 92       	push	r5
    29f8:	6f 92       	push	r6
    29fa:	7f 92       	push	r7
    29fc:	8f 92       	push	r8
    29fe:	9f 92       	push	r9
    2a00:	af 92       	push	r10
    2a02:	bf 92       	push	r11
    2a04:	cf 92       	push	r12
    2a06:	df 92       	push	r13
    2a08:	ef 92       	push	r14
    2a0a:	ff 92       	push	r15
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	ca 1b       	sub	r28, r26
    2a1a:	db 0b       	sbc	r29, r27
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
    2a26:	09 94       	ijmp

00002a28 <__epilogue_restores__>:
    2a28:	2a 88       	ldd	r2, Y+18	; 0x12
    2a2a:	39 88       	ldd	r3, Y+17	; 0x11
    2a2c:	48 88       	ldd	r4, Y+16	; 0x10
    2a2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a30:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a32:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a34:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a36:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a38:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a3a:	b9 84       	ldd	r11, Y+9	; 0x09
    2a3c:	c8 84       	ldd	r12, Y+8	; 0x08
    2a3e:	df 80       	ldd	r13, Y+7	; 0x07
    2a40:	ee 80       	ldd	r14, Y+6	; 0x06
    2a42:	fd 80       	ldd	r15, Y+5	; 0x05
    2a44:	0c 81       	ldd	r16, Y+4	; 0x04
    2a46:	1b 81       	ldd	r17, Y+3	; 0x03
    2a48:	aa 81       	ldd	r26, Y+2	; 0x02
    2a4a:	b9 81       	ldd	r27, Y+1	; 0x01
    2a4c:	ce 0f       	add	r28, r30
    2a4e:	d1 1d       	adc	r29, r1
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	ed 01       	movw	r28, r26
    2a5c:	08 95       	ret

00002a5e <atof>:
    2a5e:	66 27       	eor	r22, r22
    2a60:	77 27       	eor	r23, r23
    2a62:	76 c2       	rjmp	.+1260   	; 0x2f50 <strtod>

00002a64 <atoi>:
    2a64:	fc 01       	movw	r30, r24
    2a66:	88 27       	eor	r24, r24
    2a68:	99 27       	eor	r25, r25
    2a6a:	e8 94       	clt
    2a6c:	21 91       	ld	r18, Z+
    2a6e:	20 32       	cpi	r18, 0x20	; 32
    2a70:	e9 f3       	breq	.-6      	; 0x2a6c <atoi+0x8>
    2a72:	29 30       	cpi	r18, 0x09	; 9
    2a74:	10 f0       	brcs	.+4      	; 0x2a7a <atoi+0x16>
    2a76:	2e 30       	cpi	r18, 0x0E	; 14
    2a78:	c8 f3       	brcs	.-14     	; 0x2a6c <atoi+0x8>
    2a7a:	2b 32       	cpi	r18, 0x2B	; 43
    2a7c:	39 f0       	breq	.+14     	; 0x2a8c <atoi+0x28>
    2a7e:	2d 32       	cpi	r18, 0x2D	; 45
    2a80:	31 f4       	brne	.+12     	; 0x2a8e <atoi+0x2a>
    2a82:	68 94       	set
    2a84:	03 c0       	rjmp	.+6      	; 0x2a8c <atoi+0x28>
    2a86:	14 d1       	rcall	.+552    	; 0x2cb0 <__mulhi_const_10>
    2a88:	82 0f       	add	r24, r18
    2a8a:	91 1d       	adc	r25, r1
    2a8c:	21 91       	ld	r18, Z+
    2a8e:	20 53       	subi	r18, 0x30	; 48
    2a90:	2a 30       	cpi	r18, 0x0A	; 10
    2a92:	c8 f3       	brcs	.-14     	; 0x2a86 <atoi+0x22>
    2a94:	1e f4       	brtc	.+6      	; 0x2a9c <atoi+0x38>
    2a96:	90 95       	com	r25
    2a98:	81 95       	neg	r24
    2a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9c:	08 95       	ret

00002a9e <__ftoa_engine>:
    2a9e:	28 30       	cpi	r18, 0x08	; 8
    2aa0:	08 f0       	brcs	.+2      	; 0x2aa4 <__ftoa_engine+0x6>
    2aa2:	27 e0       	ldi	r18, 0x07	; 7
    2aa4:	33 27       	eor	r19, r19
    2aa6:	da 01       	movw	r26, r20
    2aa8:	99 0f       	add	r25, r25
    2aaa:	31 1d       	adc	r19, r1
    2aac:	87 fd       	sbrc	r24, 7
    2aae:	91 60       	ori	r25, 0x01	; 1
    2ab0:	00 96       	adiw	r24, 0x00	; 0
    2ab2:	61 05       	cpc	r22, r1
    2ab4:	71 05       	cpc	r23, r1
    2ab6:	39 f4       	brne	.+14     	; 0x2ac6 <__ftoa_engine+0x28>
    2ab8:	32 60       	ori	r19, 0x02	; 2
    2aba:	2e 5f       	subi	r18, 0xFE	; 254
    2abc:	3d 93       	st	X+, r19
    2abe:	30 e3       	ldi	r19, 0x30	; 48
    2ac0:	2a 95       	dec	r18
    2ac2:	e1 f7       	brne	.-8      	; 0x2abc <__ftoa_engine+0x1e>
    2ac4:	08 95       	ret
    2ac6:	9f 3f       	cpi	r25, 0xFF	; 255
    2ac8:	30 f0       	brcs	.+12     	; 0x2ad6 <__ftoa_engine+0x38>
    2aca:	80 38       	cpi	r24, 0x80	; 128
    2acc:	71 05       	cpc	r23, r1
    2ace:	61 05       	cpc	r22, r1
    2ad0:	09 f0       	breq	.+2      	; 0x2ad4 <__ftoa_engine+0x36>
    2ad2:	3c 5f       	subi	r19, 0xFC	; 252
    2ad4:	3c 5f       	subi	r19, 0xFC	; 252
    2ad6:	3d 93       	st	X+, r19
    2ad8:	91 30       	cpi	r25, 0x01	; 1
    2ada:	08 f0       	brcs	.+2      	; 0x2ade <__ftoa_engine+0x40>
    2adc:	80 68       	ori	r24, 0x80	; 128
    2ade:	91 1d       	adc	r25, r1
    2ae0:	df 93       	push	r29
    2ae2:	cf 93       	push	r28
    2ae4:	1f 93       	push	r17
    2ae6:	0f 93       	push	r16
    2ae8:	ff 92       	push	r15
    2aea:	ef 92       	push	r14
    2aec:	19 2f       	mov	r17, r25
    2aee:	98 7f       	andi	r25, 0xF8	; 248
    2af0:	96 95       	lsr	r25
    2af2:	e9 2f       	mov	r30, r25
    2af4:	96 95       	lsr	r25
    2af6:	96 95       	lsr	r25
    2af8:	e9 0f       	add	r30, r25
    2afa:	ff 27       	eor	r31, r31
    2afc:	e8 50       	subi	r30, 0x08	; 8
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	99 27       	eor	r25, r25
    2b02:	33 27       	eor	r19, r19
    2b04:	ee 24       	eor	r14, r14
    2b06:	ff 24       	eor	r15, r15
    2b08:	a7 01       	movw	r20, r14
    2b0a:	e7 01       	movw	r28, r14
    2b0c:	05 90       	lpm	r0, Z+
    2b0e:	08 94       	sec
    2b10:	07 94       	ror	r0
    2b12:	28 f4       	brcc	.+10     	; 0x2b1e <__ftoa_engine+0x80>
    2b14:	36 0f       	add	r19, r22
    2b16:	e7 1e       	adc	r14, r23
    2b18:	f8 1e       	adc	r15, r24
    2b1a:	49 1f       	adc	r20, r25
    2b1c:	51 1d       	adc	r21, r1
    2b1e:	66 0f       	add	r22, r22
    2b20:	77 1f       	adc	r23, r23
    2b22:	88 1f       	adc	r24, r24
    2b24:	99 1f       	adc	r25, r25
    2b26:	06 94       	lsr	r0
    2b28:	a1 f7       	brne	.-24     	; 0x2b12 <__ftoa_engine+0x74>
    2b2a:	05 90       	lpm	r0, Z+
    2b2c:	07 94       	ror	r0
    2b2e:	28 f4       	brcc	.+10     	; 0x2b3a <__ftoa_engine+0x9c>
    2b30:	e7 0e       	add	r14, r23
    2b32:	f8 1e       	adc	r15, r24
    2b34:	49 1f       	adc	r20, r25
    2b36:	56 1f       	adc	r21, r22
    2b38:	c1 1d       	adc	r28, r1
    2b3a:	77 0f       	add	r23, r23
    2b3c:	88 1f       	adc	r24, r24
    2b3e:	99 1f       	adc	r25, r25
    2b40:	66 1f       	adc	r22, r22
    2b42:	06 94       	lsr	r0
    2b44:	a1 f7       	brne	.-24     	; 0x2b2e <__ftoa_engine+0x90>
    2b46:	05 90       	lpm	r0, Z+
    2b48:	07 94       	ror	r0
    2b4a:	28 f4       	brcc	.+10     	; 0x2b56 <__ftoa_engine+0xb8>
    2b4c:	f8 0e       	add	r15, r24
    2b4e:	49 1f       	adc	r20, r25
    2b50:	56 1f       	adc	r21, r22
    2b52:	c7 1f       	adc	r28, r23
    2b54:	d1 1d       	adc	r29, r1
    2b56:	88 0f       	add	r24, r24
    2b58:	99 1f       	adc	r25, r25
    2b5a:	66 1f       	adc	r22, r22
    2b5c:	77 1f       	adc	r23, r23
    2b5e:	06 94       	lsr	r0
    2b60:	a1 f7       	brne	.-24     	; 0x2b4a <__ftoa_engine+0xac>
    2b62:	05 90       	lpm	r0, Z+
    2b64:	07 94       	ror	r0
    2b66:	20 f4       	brcc	.+8      	; 0x2b70 <__ftoa_engine+0xd2>
    2b68:	49 0f       	add	r20, r25
    2b6a:	56 1f       	adc	r21, r22
    2b6c:	c7 1f       	adc	r28, r23
    2b6e:	d8 1f       	adc	r29, r24
    2b70:	99 0f       	add	r25, r25
    2b72:	66 1f       	adc	r22, r22
    2b74:	77 1f       	adc	r23, r23
    2b76:	88 1f       	adc	r24, r24
    2b78:	06 94       	lsr	r0
    2b7a:	a9 f7       	brne	.-22     	; 0x2b66 <__ftoa_engine+0xc8>
    2b7c:	84 91       	lpm	r24, Z
    2b7e:	10 95       	com	r17
    2b80:	17 70       	andi	r17, 0x07	; 7
    2b82:	41 f0       	breq	.+16     	; 0x2b94 <__ftoa_engine+0xf6>
    2b84:	d6 95       	lsr	r29
    2b86:	c7 95       	ror	r28
    2b88:	57 95       	ror	r21
    2b8a:	47 95       	ror	r20
    2b8c:	f7 94       	ror	r15
    2b8e:	e7 94       	ror	r14
    2b90:	1a 95       	dec	r17
    2b92:	c1 f7       	brne	.-16     	; 0x2b84 <__ftoa_engine+0xe6>
    2b94:	ee e9       	ldi	r30, 0x9E	; 158
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	68 94       	set
    2b9a:	15 90       	lpm	r1, Z+
    2b9c:	15 91       	lpm	r17, Z+
    2b9e:	35 91       	lpm	r19, Z+
    2ba0:	65 91       	lpm	r22, Z+
    2ba2:	95 91       	lpm	r25, Z+
    2ba4:	05 90       	lpm	r0, Z+
    2ba6:	7f e2       	ldi	r23, 0x2F	; 47
    2ba8:	73 95       	inc	r23
    2baa:	e1 18       	sub	r14, r1
    2bac:	f1 0a       	sbc	r15, r17
    2bae:	43 0b       	sbc	r20, r19
    2bb0:	56 0b       	sbc	r21, r22
    2bb2:	c9 0b       	sbc	r28, r25
    2bb4:	d0 09       	sbc	r29, r0
    2bb6:	c0 f7       	brcc	.-16     	; 0x2ba8 <__ftoa_engine+0x10a>
    2bb8:	e1 0c       	add	r14, r1
    2bba:	f1 1e       	adc	r15, r17
    2bbc:	43 1f       	adc	r20, r19
    2bbe:	56 1f       	adc	r21, r22
    2bc0:	c9 1f       	adc	r28, r25
    2bc2:	d0 1d       	adc	r29, r0
    2bc4:	7e f4       	brtc	.+30     	; 0x2be4 <__ftoa_engine+0x146>
    2bc6:	70 33       	cpi	r23, 0x30	; 48
    2bc8:	11 f4       	brne	.+4      	; 0x2bce <__ftoa_engine+0x130>
    2bca:	8a 95       	dec	r24
    2bcc:	e6 cf       	rjmp	.-52     	; 0x2b9a <__ftoa_engine+0xfc>
    2bce:	e8 94       	clt
    2bd0:	01 50       	subi	r16, 0x01	; 1
    2bd2:	30 f0       	brcs	.+12     	; 0x2be0 <__ftoa_engine+0x142>
    2bd4:	08 0f       	add	r16, r24
    2bd6:	0a f4       	brpl	.+2      	; 0x2bda <__ftoa_engine+0x13c>
    2bd8:	00 27       	eor	r16, r16
    2bda:	02 17       	cp	r16, r18
    2bdc:	08 f4       	brcc	.+2      	; 0x2be0 <__ftoa_engine+0x142>
    2bde:	20 2f       	mov	r18, r16
    2be0:	23 95       	inc	r18
    2be2:	02 2f       	mov	r16, r18
    2be4:	7a 33       	cpi	r23, 0x3A	; 58
    2be6:	28 f0       	brcs	.+10     	; 0x2bf2 <__ftoa_engine+0x154>
    2be8:	79 e3       	ldi	r23, 0x39	; 57
    2bea:	7d 93       	st	X+, r23
    2bec:	2a 95       	dec	r18
    2bee:	e9 f7       	brne	.-6      	; 0x2bea <__ftoa_engine+0x14c>
    2bf0:	10 c0       	rjmp	.+32     	; 0x2c12 <__ftoa_engine+0x174>
    2bf2:	7d 93       	st	X+, r23
    2bf4:	2a 95       	dec	r18
    2bf6:	89 f6       	brne	.-94     	; 0x2b9a <__ftoa_engine+0xfc>
    2bf8:	06 94       	lsr	r0
    2bfa:	97 95       	ror	r25
    2bfc:	67 95       	ror	r22
    2bfe:	37 95       	ror	r19
    2c00:	17 95       	ror	r17
    2c02:	17 94       	ror	r1
    2c04:	e1 18       	sub	r14, r1
    2c06:	f1 0a       	sbc	r15, r17
    2c08:	43 0b       	sbc	r20, r19
    2c0a:	56 0b       	sbc	r21, r22
    2c0c:	c9 0b       	sbc	r28, r25
    2c0e:	d0 09       	sbc	r29, r0
    2c10:	98 f0       	brcs	.+38     	; 0x2c38 <__ftoa_engine+0x19a>
    2c12:	23 95       	inc	r18
    2c14:	7e 91       	ld	r23, -X
    2c16:	73 95       	inc	r23
    2c18:	7a 33       	cpi	r23, 0x3A	; 58
    2c1a:	08 f0       	brcs	.+2      	; 0x2c1e <__ftoa_engine+0x180>
    2c1c:	70 e3       	ldi	r23, 0x30	; 48
    2c1e:	7c 93       	st	X, r23
    2c20:	20 13       	cpse	r18, r16
    2c22:	b8 f7       	brcc	.-18     	; 0x2c12 <__ftoa_engine+0x174>
    2c24:	7e 91       	ld	r23, -X
    2c26:	70 61       	ori	r23, 0x10	; 16
    2c28:	7d 93       	st	X+, r23
    2c2a:	30 f0       	brcs	.+12     	; 0x2c38 <__ftoa_engine+0x19a>
    2c2c:	83 95       	inc	r24
    2c2e:	71 e3       	ldi	r23, 0x31	; 49
    2c30:	7d 93       	st	X+, r23
    2c32:	70 e3       	ldi	r23, 0x30	; 48
    2c34:	2a 95       	dec	r18
    2c36:	e1 f7       	brne	.-8      	; 0x2c30 <__ftoa_engine+0x192>
    2c38:	11 24       	eor	r1, r1
    2c3a:	ef 90       	pop	r14
    2c3c:	ff 90       	pop	r15
    2c3e:	0f 91       	pop	r16
    2c40:	1f 91       	pop	r17
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	99 27       	eor	r25, r25
    2c48:	87 fd       	sbrc	r24, 7
    2c4a:	90 95       	com	r25
    2c4c:	08 95       	ret

00002c4e <isspace>:
    2c4e:	91 11       	cpse	r25, r1
    2c50:	d1 c2       	rjmp	.+1442   	; 0x31f4 <__ctype_isfalse>
    2c52:	80 32       	cpi	r24, 0x20	; 32
    2c54:	19 f0       	breq	.+6      	; 0x2c5c <isspace+0xe>
    2c56:	89 50       	subi	r24, 0x09	; 9
    2c58:	85 50       	subi	r24, 0x05	; 5
    2c5a:	d0 f7       	brcc	.-12     	; 0x2c50 <isspace+0x2>
    2c5c:	08 95       	ret

00002c5e <tolower>:
    2c5e:	91 11       	cpse	r25, r1
    2c60:	08 95       	ret
    2c62:	81 54       	subi	r24, 0x41	; 65
    2c64:	8a 51       	subi	r24, 0x1A	; 26
    2c66:	08 f4       	brcc	.+2      	; 0x2c6a <tolower+0xc>
    2c68:	80 5e       	subi	r24, 0xE0	; 224
    2c6a:	85 5a       	subi	r24, 0xA5	; 165
    2c6c:	08 95       	ret

00002c6e <strchr_P>:
    2c6e:	fc 01       	movw	r30, r24
    2c70:	05 90       	lpm	r0, Z+
    2c72:	06 16       	cp	r0, r22
    2c74:	21 f0       	breq	.+8      	; 0x2c7e <strchr_P+0x10>
    2c76:	00 20       	and	r0, r0
    2c78:	d9 f7       	brne	.-10     	; 0x2c70 <strchr_P+0x2>
    2c7a:	c0 01       	movw	r24, r0
    2c7c:	08 95       	ret
    2c7e:	31 97       	sbiw	r30, 0x01	; 1
    2c80:	cf 01       	movw	r24, r30
    2c82:	08 95       	ret

00002c84 <strnlen_P>:
    2c84:	fc 01       	movw	r30, r24
    2c86:	05 90       	lpm	r0, Z+
    2c88:	61 50       	subi	r22, 0x01	; 1
    2c8a:	70 40       	sbci	r23, 0x00	; 0
    2c8c:	01 10       	cpse	r0, r1
    2c8e:	d8 f7       	brcc	.-10     	; 0x2c86 <strnlen_P+0x2>
    2c90:	80 95       	com	r24
    2c92:	90 95       	com	r25
    2c94:	8e 0f       	add	r24, r30
    2c96:	9f 1f       	adc	r25, r31
    2c98:	08 95       	ret

00002c9a <strnlen>:
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	61 50       	subi	r22, 0x01	; 1
    2c9e:	70 40       	sbci	r23, 0x00	; 0
    2ca0:	01 90       	ld	r0, Z+
    2ca2:	01 10       	cpse	r0, r1
    2ca4:	d8 f7       	brcc	.-10     	; 0x2c9c <strnlen+0x2>
    2ca6:	80 95       	com	r24
    2ca8:	90 95       	com	r25
    2caa:	8e 0f       	add	r24, r30
    2cac:	9f 1f       	adc	r25, r31
    2cae:	08 95       	ret

00002cb0 <__mulhi_const_10>:
    2cb0:	7a e0       	ldi	r23, 0x0A	; 10
    2cb2:	97 9f       	mul	r25, r23
    2cb4:	90 2d       	mov	r25, r0
    2cb6:	87 9f       	mul	r24, r23
    2cb8:	80 2d       	mov	r24, r0
    2cba:	91 0d       	add	r25, r1
    2cbc:	11 24       	eor	r1, r1
    2cbe:	08 95       	ret

00002cc0 <fgetc>:
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    2cc4:	ec 01       	movw	r28, r24
    2cc6:	2b 81       	ldd	r18, Y+3	; 0x03
    2cc8:	20 ff       	sbrs	r18, 0
    2cca:	33 c0       	rjmp	.+102    	; 0x2d32 <fgetc+0x72>
    2ccc:	26 ff       	sbrs	r18, 6
    2cce:	0a c0       	rjmp	.+20     	; 0x2ce4 <fgetc+0x24>
    2cd0:	2f 7b       	andi	r18, 0xBF	; 191
    2cd2:	2b 83       	std	Y+3, r18	; 0x03
    2cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cd6:	9f 81       	ldd	r25, Y+7	; 0x07
    2cd8:	01 96       	adiw	r24, 0x01	; 1
    2cda:	9f 83       	std	Y+7, r25	; 0x07
    2cdc:	8e 83       	std	Y+6, r24	; 0x06
    2cde:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	29 c0       	rjmp	.+82     	; 0x2d36 <fgetc+0x76>
    2ce4:	22 ff       	sbrs	r18, 2
    2ce6:	0f c0       	rjmp	.+30     	; 0x2d06 <fgetc+0x46>
    2ce8:	e8 81       	ld	r30, Y
    2cea:	f9 81       	ldd	r31, Y+1	; 0x01
    2cec:	80 81       	ld	r24, Z
    2cee:	08 2e       	mov	r0, r24
    2cf0:	00 0c       	add	r0, r0
    2cf2:	99 0b       	sbc	r25, r25
    2cf4:	00 97       	sbiw	r24, 0x00	; 0
    2cf6:	19 f4       	brne	.+6      	; 0x2cfe <fgetc+0x3e>
    2cf8:	20 62       	ori	r18, 0x20	; 32
    2cfa:	2b 83       	std	Y+3, r18	; 0x03
    2cfc:	1a c0       	rjmp	.+52     	; 0x2d32 <fgetc+0x72>
    2cfe:	31 96       	adiw	r30, 0x01	; 1
    2d00:	f9 83       	std	Y+1, r31	; 0x01
    2d02:	e8 83       	st	Y, r30
    2d04:	0e c0       	rjmp	.+28     	; 0x2d22 <fgetc+0x62>
    2d06:	ea 85       	ldd	r30, Y+10	; 0x0a
    2d08:	fb 85       	ldd	r31, Y+11	; 0x0b
    2d0a:	09 95       	icall
    2d0c:	97 ff       	sbrs	r25, 7
    2d0e:	09 c0       	rjmp	.+18     	; 0x2d22 <fgetc+0x62>
    2d10:	2b 81       	ldd	r18, Y+3	; 0x03
    2d12:	01 96       	adiw	r24, 0x01	; 1
    2d14:	11 f0       	breq	.+4      	; 0x2d1a <fgetc+0x5a>
    2d16:	80 e2       	ldi	r24, 0x20	; 32
    2d18:	01 c0       	rjmp	.+2      	; 0x2d1c <fgetc+0x5c>
    2d1a:	80 e1       	ldi	r24, 0x10	; 16
    2d1c:	82 2b       	or	r24, r18
    2d1e:	8b 83       	std	Y+3, r24	; 0x03
    2d20:	08 c0       	rjmp	.+16     	; 0x2d32 <fgetc+0x72>
    2d22:	2e 81       	ldd	r18, Y+6	; 0x06
    2d24:	3f 81       	ldd	r19, Y+7	; 0x07
    2d26:	2f 5f       	subi	r18, 0xFF	; 255
    2d28:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2a:	3f 83       	std	Y+7, r19	; 0x07
    2d2c:	2e 83       	std	Y+6, r18	; 0x06
    2d2e:	99 27       	eor	r25, r25
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <fgetc+0x76>
    2d32:	8f ef       	ldi	r24, 0xFF	; 255
    2d34:	9f ef       	ldi	r25, 0xFF	; 255
    2d36:	df 91       	pop	r29
    2d38:	cf 91       	pop	r28
    2d3a:	08 95       	ret

00002d3c <fprintf>:
    2d3c:	a0 e0       	ldi	r26, 0x00	; 0
    2d3e:	b0 e0       	ldi	r27, 0x00	; 0
    2d40:	e3 ea       	ldi	r30, 0xA3	; 163
    2d42:	f6 e1       	ldi	r31, 0x16	; 22
    2d44:	65 ce       	rjmp	.-822    	; 0x2a10 <__prologue_saves__+0x20>
    2d46:	ae 01       	movw	r20, r28
    2d48:	47 5f       	subi	r20, 0xF7	; 247
    2d4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4e:	78 85       	ldd	r23, Y+8	; 0x08
    2d50:	8d 81       	ldd	r24, Y+5	; 0x05
    2d52:	9e 81       	ldd	r25, Y+6	; 0x06
    2d54:	0e 94 c2 0a 	call	0x1584	; 0x1584 <vfprintf>
    2d58:	e2 e0       	ldi	r30, 0x02	; 2
    2d5a:	76 ce       	rjmp	.-788    	; 0x2a48 <__epilogue_restores__+0x20>

00002d5c <fputc>:
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
    2d64:	fb 01       	movw	r30, r22
    2d66:	23 81       	ldd	r18, Z+3	; 0x03
    2d68:	21 fd       	sbrc	r18, 1
    2d6a:	03 c0       	rjmp	.+6      	; 0x2d72 <fputc+0x16>
    2d6c:	8f ef       	ldi	r24, 0xFF	; 255
    2d6e:	9f ef       	ldi	r25, 0xFF	; 255
    2d70:	28 c0       	rjmp	.+80     	; 0x2dc2 <fputc+0x66>
    2d72:	22 ff       	sbrs	r18, 2
    2d74:	16 c0       	rjmp	.+44     	; 0x2da2 <fputc+0x46>
    2d76:	46 81       	ldd	r20, Z+6	; 0x06
    2d78:	57 81       	ldd	r21, Z+7	; 0x07
    2d7a:	24 81       	ldd	r18, Z+4	; 0x04
    2d7c:	35 81       	ldd	r19, Z+5	; 0x05
    2d7e:	42 17       	cp	r20, r18
    2d80:	53 07       	cpc	r21, r19
    2d82:	44 f4       	brge	.+16     	; 0x2d94 <fputc+0x38>
    2d84:	a0 81       	ld	r26, Z
    2d86:	b1 81       	ldd	r27, Z+1	; 0x01
    2d88:	9d 01       	movw	r18, r26
    2d8a:	2f 5f       	subi	r18, 0xFF	; 255
    2d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8e:	31 83       	std	Z+1, r19	; 0x01
    2d90:	20 83       	st	Z, r18
    2d92:	8c 93       	st	X, r24
    2d94:	26 81       	ldd	r18, Z+6	; 0x06
    2d96:	37 81       	ldd	r19, Z+7	; 0x07
    2d98:	2f 5f       	subi	r18, 0xFF	; 255
    2d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d9c:	37 83       	std	Z+7, r19	; 0x07
    2d9e:	26 83       	std	Z+6, r18	; 0x06
    2da0:	10 c0       	rjmp	.+32     	; 0x2dc2 <fputc+0x66>
    2da2:	eb 01       	movw	r28, r22
    2da4:	09 2f       	mov	r16, r25
    2da6:	18 2f       	mov	r17, r24
    2da8:	00 84       	ldd	r0, Z+8	; 0x08
    2daa:	f1 85       	ldd	r31, Z+9	; 0x09
    2dac:	e0 2d       	mov	r30, r0
    2dae:	09 95       	icall
    2db0:	89 2b       	or	r24, r25
    2db2:	e1 f6       	brne	.-72     	; 0x2d6c <fputc+0x10>
    2db4:	8e 81       	ldd	r24, Y+6	; 0x06
    2db6:	9f 81       	ldd	r25, Y+7	; 0x07
    2db8:	01 96       	adiw	r24, 0x01	; 1
    2dba:	9f 83       	std	Y+7, r25	; 0x07
    2dbc:	8e 83       	std	Y+6, r24	; 0x06
    2dbe:	81 2f       	mov	r24, r17
    2dc0:	90 2f       	mov	r25, r16
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	1f 91       	pop	r17
    2dc8:	0f 91       	pop	r16
    2dca:	08 95       	ret

00002dcc <fwrite>:
    2dcc:	a0 e0       	ldi	r26, 0x00	; 0
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	eb ee       	ldi	r30, 0xEB	; 235
    2dd2:	f6 e1       	ldi	r31, 0x16	; 22
    2dd4:	13 ce       	rjmp	.-986    	; 0x29fc <__prologue_saves__+0xc>
    2dd6:	5b 01       	movw	r10, r22
    2dd8:	4a 01       	movw	r8, r20
    2dda:	79 01       	movw	r14, r18
    2ddc:	d9 01       	movw	r26, r18
    2dde:	13 96       	adiw	r26, 0x03	; 3
    2de0:	2c 91       	ld	r18, X
    2de2:	21 ff       	sbrs	r18, 1
    2de4:	1d c0       	rjmp	.+58     	; 0x2e20 <fwrite+0x54>
    2de6:	c0 e0       	ldi	r28, 0x00	; 0
    2de8:	d0 e0       	ldi	r29, 0x00	; 0
    2dea:	c8 15       	cp	r28, r8
    2dec:	d9 05       	cpc	r29, r9
    2dee:	d9 f0       	breq	.+54     	; 0x2e26 <fwrite+0x5a>
    2df0:	8c 01       	movw	r16, r24
    2df2:	6c 01       	movw	r12, r24
    2df4:	ca 0c       	add	r12, r10
    2df6:	db 1c       	adc	r13, r11
    2df8:	c8 01       	movw	r24, r16
    2dfa:	0c 15       	cp	r16, r12
    2dfc:	1d 05       	cpc	r17, r13
    2dfe:	71 f0       	breq	.+28     	; 0x2e1c <fwrite+0x50>
    2e00:	0f 5f       	subi	r16, 0xFF	; 255
    2e02:	1f 4f       	sbci	r17, 0xFF	; 255
    2e04:	d7 01       	movw	r26, r14
    2e06:	18 96       	adiw	r26, 0x08	; 8
    2e08:	ed 91       	ld	r30, X+
    2e0a:	fc 91       	ld	r31, X
    2e0c:	19 97       	sbiw	r26, 0x09	; 9
    2e0e:	b7 01       	movw	r22, r14
    2e10:	dc 01       	movw	r26, r24
    2e12:	8c 91       	ld	r24, X
    2e14:	09 95       	icall
    2e16:	89 2b       	or	r24, r25
    2e18:	79 f3       	breq	.-34     	; 0x2df8 <fwrite+0x2c>
    2e1a:	05 c0       	rjmp	.+10     	; 0x2e26 <fwrite+0x5a>
    2e1c:	21 96       	adiw	r28, 0x01	; 1
    2e1e:	e5 cf       	rjmp	.-54     	; 0x2dea <fwrite+0x1e>
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	01 c0       	rjmp	.+2      	; 0x2e28 <fwrite+0x5c>
    2e26:	ce 01       	movw	r24, r28
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	ec e0       	ldi	r30, 0x0C	; 12
    2e2e:	02 ce       	rjmp	.-1020   	; 0x2a34 <__epilogue_restores__+0xc>

00002e30 <printf>:
    2e30:	a0 e0       	ldi	r26, 0x00	; 0
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	ed e1       	ldi	r30, 0x1D	; 29
    2e36:	f7 e1       	ldi	r31, 0x17	; 23
    2e38:	eb cd       	rjmp	.-1066   	; 0x2a10 <__prologue_saves__+0x20>
    2e3a:	ae 01       	movw	r20, r28
    2e3c:	4b 5f       	subi	r20, 0xFB	; 251
    2e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e40:	fa 01       	movw	r30, r20
    2e42:	61 91       	ld	r22, Z+
    2e44:	71 91       	ld	r23, Z+
    2e46:	af 01       	movw	r20, r30
    2e48:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <__iob+0x2>
    2e4c:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <__iob+0x3>
    2e50:	0e 94 c2 0a 	call	0x1584	; 0x1584 <vfprintf>
    2e54:	e2 e0       	ldi	r30, 0x02	; 2
    2e56:	f8 cd       	rjmp	.-1040   	; 0x2a48 <__epilogue_restores__+0x20>

00002e58 <putchar>:
    2e58:	60 91 fa 03 	lds	r22, 0x03FA	; 0x8003fa <__iob+0x2>
    2e5c:	70 91 fb 03 	lds	r23, 0x03FB	; 0x8003fb <__iob+0x3>
    2e60:	7d cf       	rjmp	.-262    	; 0x2d5c <fputc>

00002e62 <ungetc>:
    2e62:	fb 01       	movw	r30, r22
    2e64:	23 81       	ldd	r18, Z+3	; 0x03
    2e66:	20 ff       	sbrs	r18, 0
    2e68:	12 c0       	rjmp	.+36     	; 0x2e8e <ungetc+0x2c>
    2e6a:	26 fd       	sbrc	r18, 6
    2e6c:	10 c0       	rjmp	.+32     	; 0x2e8e <ungetc+0x2c>
    2e6e:	8f 3f       	cpi	r24, 0xFF	; 255
    2e70:	3f ef       	ldi	r19, 0xFF	; 255
    2e72:	93 07       	cpc	r25, r19
    2e74:	61 f0       	breq	.+24     	; 0x2e8e <ungetc+0x2c>
    2e76:	82 83       	std	Z+2, r24	; 0x02
    2e78:	2f 7d       	andi	r18, 0xDF	; 223
    2e7a:	20 64       	ori	r18, 0x40	; 64
    2e7c:	23 83       	std	Z+3, r18	; 0x03
    2e7e:	26 81       	ldd	r18, Z+6	; 0x06
    2e80:	37 81       	ldd	r19, Z+7	; 0x07
    2e82:	21 50       	subi	r18, 0x01	; 1
    2e84:	31 09       	sbc	r19, r1
    2e86:	37 83       	std	Z+7, r19	; 0x07
    2e88:	26 83       	std	Z+6, r18	; 0x06
    2e8a:	99 27       	eor	r25, r25
    2e8c:	08 95       	ret
    2e8e:	8f ef       	ldi	r24, 0xFF	; 255
    2e90:	9f ef       	ldi	r25, 0xFF	; 255
    2e92:	08 95       	ret

00002e94 <__ultoa_invert>:
    2e94:	fa 01       	movw	r30, r20
    2e96:	aa 27       	eor	r26, r26
    2e98:	28 30       	cpi	r18, 0x08	; 8
    2e9a:	51 f1       	breq	.+84     	; 0x2ef0 <__ultoa_invert+0x5c>
    2e9c:	20 31       	cpi	r18, 0x10	; 16
    2e9e:	81 f1       	breq	.+96     	; 0x2f00 <__ultoa_invert+0x6c>
    2ea0:	e8 94       	clt
    2ea2:	6f 93       	push	r22
    2ea4:	6e 7f       	andi	r22, 0xFE	; 254
    2ea6:	6e 5f       	subi	r22, 0xFE	; 254
    2ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eaa:	8f 4f       	sbci	r24, 0xFF	; 255
    2eac:	9f 4f       	sbci	r25, 0xFF	; 255
    2eae:	af 4f       	sbci	r26, 0xFF	; 255
    2eb0:	b1 e0       	ldi	r27, 0x01	; 1
    2eb2:	3e d0       	rcall	.+124    	; 0x2f30 <__ultoa_invert+0x9c>
    2eb4:	b4 e0       	ldi	r27, 0x04	; 4
    2eb6:	3c d0       	rcall	.+120    	; 0x2f30 <__ultoa_invert+0x9c>
    2eb8:	67 0f       	add	r22, r23
    2eba:	78 1f       	adc	r23, r24
    2ebc:	89 1f       	adc	r24, r25
    2ebe:	9a 1f       	adc	r25, r26
    2ec0:	a1 1d       	adc	r26, r1
    2ec2:	68 0f       	add	r22, r24
    2ec4:	79 1f       	adc	r23, r25
    2ec6:	8a 1f       	adc	r24, r26
    2ec8:	91 1d       	adc	r25, r1
    2eca:	a1 1d       	adc	r26, r1
    2ecc:	6a 0f       	add	r22, r26
    2ece:	71 1d       	adc	r23, r1
    2ed0:	81 1d       	adc	r24, r1
    2ed2:	91 1d       	adc	r25, r1
    2ed4:	a1 1d       	adc	r26, r1
    2ed6:	20 d0       	rcall	.+64     	; 0x2f18 <__ultoa_invert+0x84>
    2ed8:	09 f4       	brne	.+2      	; 0x2edc <__ultoa_invert+0x48>
    2eda:	68 94       	set
    2edc:	3f 91       	pop	r19
    2ede:	2a e0       	ldi	r18, 0x0A	; 10
    2ee0:	26 9f       	mul	r18, r22
    2ee2:	11 24       	eor	r1, r1
    2ee4:	30 19       	sub	r19, r0
    2ee6:	30 5d       	subi	r19, 0xD0	; 208
    2ee8:	31 93       	st	Z+, r19
    2eea:	de f6       	brtc	.-74     	; 0x2ea2 <__ultoa_invert+0xe>
    2eec:	cf 01       	movw	r24, r30
    2eee:	08 95       	ret
    2ef0:	46 2f       	mov	r20, r22
    2ef2:	47 70       	andi	r20, 0x07	; 7
    2ef4:	40 5d       	subi	r20, 0xD0	; 208
    2ef6:	41 93       	st	Z+, r20
    2ef8:	b3 e0       	ldi	r27, 0x03	; 3
    2efa:	0f d0       	rcall	.+30     	; 0x2f1a <__ultoa_invert+0x86>
    2efc:	c9 f7       	brne	.-14     	; 0x2ef0 <__ultoa_invert+0x5c>
    2efe:	f6 cf       	rjmp	.-20     	; 0x2eec <__ultoa_invert+0x58>
    2f00:	46 2f       	mov	r20, r22
    2f02:	4f 70       	andi	r20, 0x0F	; 15
    2f04:	40 5d       	subi	r20, 0xD0	; 208
    2f06:	4a 33       	cpi	r20, 0x3A	; 58
    2f08:	18 f0       	brcs	.+6      	; 0x2f10 <__ultoa_invert+0x7c>
    2f0a:	49 5d       	subi	r20, 0xD9	; 217
    2f0c:	31 fd       	sbrc	r19, 1
    2f0e:	40 52       	subi	r20, 0x20	; 32
    2f10:	41 93       	st	Z+, r20
    2f12:	02 d0       	rcall	.+4      	; 0x2f18 <__ultoa_invert+0x84>
    2f14:	a9 f7       	brne	.-22     	; 0x2f00 <__ultoa_invert+0x6c>
    2f16:	ea cf       	rjmp	.-44     	; 0x2eec <__ultoa_invert+0x58>
    2f18:	b4 e0       	ldi	r27, 0x04	; 4
    2f1a:	a6 95       	lsr	r26
    2f1c:	97 95       	ror	r25
    2f1e:	87 95       	ror	r24
    2f20:	77 95       	ror	r23
    2f22:	67 95       	ror	r22
    2f24:	ba 95       	dec	r27
    2f26:	c9 f7       	brne	.-14     	; 0x2f1a <__ultoa_invert+0x86>
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	61 05       	cpc	r22, r1
    2f2c:	71 05       	cpc	r23, r1
    2f2e:	08 95       	ret
    2f30:	9b 01       	movw	r18, r22
    2f32:	ac 01       	movw	r20, r24
    2f34:	0a 2e       	mov	r0, r26
    2f36:	06 94       	lsr	r0
    2f38:	57 95       	ror	r21
    2f3a:	47 95       	ror	r20
    2f3c:	37 95       	ror	r19
    2f3e:	27 95       	ror	r18
    2f40:	ba 95       	dec	r27
    2f42:	c9 f7       	brne	.-14     	; 0x2f36 <__ultoa_invert+0xa2>
    2f44:	62 0f       	add	r22, r18
    2f46:	73 1f       	adc	r23, r19
    2f48:	84 1f       	adc	r24, r20
    2f4a:	95 1f       	adc	r25, r21
    2f4c:	a0 1d       	adc	r26, r0
    2f4e:	08 95       	ret

00002f50 <strtod>:
    2f50:	a0 e0       	ldi	r26, 0x00	; 0
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	ed ea       	ldi	r30, 0xAD	; 173
    2f56:	f7 e1       	ldi	r31, 0x17	; 23
    2f58:	4f cd       	rjmp	.-1378   	; 0x29f8 <__prologue_saves__+0x8>
    2f5a:	ec 01       	movw	r28, r24
    2f5c:	7b 01       	movw	r14, r22
    2f5e:	61 15       	cp	r22, r1
    2f60:	71 05       	cpc	r23, r1
    2f62:	19 f0       	breq	.+6      	; 0x2f6a <strtod+0x1a>
    2f64:	db 01       	movw	r26, r22
    2f66:	8d 93       	st	X+, r24
    2f68:	9c 93       	st	X, r25
    2f6a:	8e 01       	movw	r16, r28
    2f6c:	0f 5f       	subi	r16, 0xFF	; 255
    2f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f70:	78 80       	ld	r7, Y
    2f72:	87 2d       	mov	r24, r7
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	6b de       	rcall	.-810    	; 0x2c4e <isspace>
    2f78:	89 2b       	or	r24, r25
    2f7a:	11 f0       	breq	.+4      	; 0x2f80 <strtod+0x30>
    2f7c:	e8 01       	movw	r28, r16
    2f7e:	f5 cf       	rjmp	.-22     	; 0x2f6a <strtod+0x1a>
    2f80:	bd e2       	ldi	r27, 0x2D	; 45
    2f82:	7b 12       	cpse	r7, r27
    2f84:	05 c0       	rjmp	.+10     	; 0x2f90 <strtod+0x40>
    2f86:	0f 5f       	subi	r16, 0xFF	; 255
    2f88:	1f 4f       	sbci	r17, 0xFF	; 255
    2f8a:	79 80       	ldd	r7, Y+1	; 0x01
    2f8c:	c1 e0       	ldi	r28, 0x01	; 1
    2f8e:	08 c0       	rjmp	.+16     	; 0x2fa0 <strtod+0x50>
    2f90:	eb e2       	ldi	r30, 0x2B	; 43
    2f92:	7e 12       	cpse	r7, r30
    2f94:	04 c0       	rjmp	.+8      	; 0x2f9e <strtod+0x4e>
    2f96:	8e 01       	movw	r16, r28
    2f98:	0e 5f       	subi	r16, 0xFE	; 254
    2f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f9c:	79 80       	ldd	r7, Y+1	; 0x01
    2f9e:	c0 e0       	ldi	r28, 0x00	; 0
    2fa0:	68 01       	movw	r12, r16
    2fa2:	f1 e0       	ldi	r31, 0x01	; 1
    2fa4:	cf 1a       	sub	r12, r31
    2fa6:	d1 08       	sbc	r13, r1
    2fa8:	43 e0       	ldi	r20, 0x03	; 3
    2faa:	50 e0       	ldi	r21, 0x00	; 0
    2fac:	60 ea       	ldi	r22, 0xA0	; 160
    2fae:	71 e0       	ldi	r23, 0x01	; 1
    2fb0:	c6 01       	movw	r24, r12
    2fb2:	23 d1       	rcall	.+582    	; 0x31fa <strncasecmp_P>
    2fb4:	89 2b       	or	r24, r25
    2fb6:	e9 f4       	brne	.+58     	; 0x2ff2 <strtod+0xa2>
    2fb8:	68 01       	movw	r12, r16
    2fba:	22 e0       	ldi	r18, 0x02	; 2
    2fbc:	c2 0e       	add	r12, r18
    2fbe:	d1 1c       	adc	r13, r1
    2fc0:	45 e0       	ldi	r20, 0x05	; 5
    2fc2:	50 e0       	ldi	r21, 0x00	; 0
    2fc4:	6b e9       	ldi	r22, 0x9B	; 155
    2fc6:	71 e0       	ldi	r23, 0x01	; 1
    2fc8:	c6 01       	movw	r24, r12
    2fca:	17 d1       	rcall	.+558    	; 0x31fa <strncasecmp_P>
    2fcc:	89 2b       	or	r24, r25
    2fce:	21 f4       	brne	.+8      	; 0x2fd8 <strtod+0x88>
    2fd0:	68 01       	movw	r12, r16
    2fd2:	87 e0       	ldi	r24, 0x07	; 7
    2fd4:	c8 0e       	add	r12, r24
    2fd6:	d1 1c       	adc	r13, r1
    2fd8:	e1 14       	cp	r14, r1
    2fda:	f1 04       	cpc	r15, r1
    2fdc:	19 f0       	breq	.+6      	; 0x2fe4 <strtod+0x94>
    2fde:	d7 01       	movw	r26, r14
    2fe0:	cd 92       	st	X+, r12
    2fe2:	dc 92       	st	X, r13
    2fe4:	c1 11       	cpse	r28, r1
    2fe6:	f9 c0       	rjmp	.+498    	; 0x31da <strtod+0x28a>
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	70 e0       	ldi	r23, 0x00	; 0
    2fec:	80 e8       	ldi	r24, 0x80	; 128
    2fee:	9f e7       	ldi	r25, 0x7F	; 127
    2ff0:	fd c0       	rjmp	.+506    	; 0x31ec <strtod+0x29c>
    2ff2:	43 e0       	ldi	r20, 0x03	; 3
    2ff4:	50 e0       	ldi	r21, 0x00	; 0
    2ff6:	68 e9       	ldi	r22, 0x98	; 152
    2ff8:	71 e0       	ldi	r23, 0x01	; 1
    2ffa:	c6 01       	movw	r24, r12
    2ffc:	fe d0       	rcall	.+508    	; 0x31fa <strncasecmp_P>
    2ffe:	89 2b       	or	r24, r25
    3000:	51 f4       	brne	.+20     	; 0x3016 <strtod+0xc6>
    3002:	e1 14       	cp	r14, r1
    3004:	f1 04       	cpc	r15, r1
    3006:	09 f4       	brne	.+2      	; 0x300a <strtod+0xba>
    3008:	ed c0       	rjmp	.+474    	; 0x31e4 <strtod+0x294>
    300a:	0e 5f       	subi	r16, 0xFE	; 254
    300c:	1f 4f       	sbci	r17, 0xFF	; 255
    300e:	f7 01       	movw	r30, r14
    3010:	11 83       	std	Z+1, r17	; 0x01
    3012:	00 83       	st	Z, r16
    3014:	e7 c0       	rjmp	.+462    	; 0x31e4 <strtod+0x294>
    3016:	68 01       	movw	r12, r16
    3018:	60 e0       	ldi	r22, 0x00	; 0
    301a:	70 e0       	ldi	r23, 0x00	; 0
    301c:	cb 01       	movw	r24, r22
    301e:	00 e0       	ldi	r16, 0x00	; 0
    3020:	10 e0       	ldi	r17, 0x00	; 0
    3022:	f6 01       	movw	r30, r12
    3024:	d0 ed       	ldi	r29, 0xD0	; 208
    3026:	d7 0d       	add	r29, r7
    3028:	da 30       	cpi	r29, 0x0A	; 10
    302a:	50 f5       	brcc	.+84     	; 0x3080 <strtod+0x130>
    302c:	2c 2f       	mov	r18, r28
    302e:	22 60       	ori	r18, 0x02	; 2
    3030:	62 2e       	mov	r6, r18
    3032:	2c 2f       	mov	r18, r28
    3034:	28 70       	andi	r18, 0x08	; 8
    3036:	c2 ff       	sbrs	r28, 2
    3038:	05 c0       	rjmp	.+10     	; 0x3044 <strtod+0xf4>
    303a:	21 11       	cpse	r18, r1
    303c:	27 c0       	rjmp	.+78     	; 0x308c <strtod+0x13c>
    303e:	0f 5f       	subi	r16, 0xFF	; 255
    3040:	1f 4f       	sbci	r17, 0xFF	; 255
    3042:	24 c0       	rjmp	.+72     	; 0x308c <strtod+0x13c>
    3044:	22 23       	and	r18, r18
    3046:	11 f0       	breq	.+4      	; 0x304c <strtod+0xfc>
    3048:	01 50       	subi	r16, 0x01	; 1
    304a:	11 09       	sbc	r17, r1
    304c:	a5 e0       	ldi	r26, 0x05	; 5
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	9b 01       	movw	r18, r22
    3052:	ac 01       	movw	r20, r24
    3054:	ea d0       	rcall	.+468    	; 0x322a <__muluhisi3>
    3056:	4b 01       	movw	r8, r22
    3058:	5c 01       	movw	r10, r24
    305a:	88 0c       	add	r8, r8
    305c:	99 1c       	adc	r9, r9
    305e:	aa 1c       	adc	r10, r10
    3060:	bb 1c       	adc	r11, r11
    3062:	c5 01       	movw	r24, r10
    3064:	b4 01       	movw	r22, r8
    3066:	6d 0f       	add	r22, r29
    3068:	71 1d       	adc	r23, r1
    306a:	81 1d       	adc	r24, r1
    306c:	91 1d       	adc	r25, r1
    306e:	68 39       	cpi	r22, 0x98	; 152
    3070:	a9 e9       	ldi	r26, 0x99	; 153
    3072:	7a 07       	cpc	r23, r26
    3074:	8a 07       	cpc	r24, r26
    3076:	a9 e1       	ldi	r26, 0x19	; 25
    3078:	9a 07       	cpc	r25, r26
    307a:	40 f0       	brcs	.+16     	; 0x308c <strtod+0x13c>
    307c:	c6 60       	ori	r28, 0x06	; 6
    307e:	05 c0       	rjmp	.+10     	; 0x308a <strtod+0x13a>
    3080:	de 3f       	cpi	r29, 0xFE	; 254
    3082:	51 f4       	brne	.+20     	; 0x3098 <strtod+0x148>
    3084:	c3 fd       	sbrc	r28, 3
    3086:	44 c0       	rjmp	.+136    	; 0x3110 <strtod+0x1c0>
    3088:	c8 60       	ori	r28, 0x08	; 8
    308a:	6c 2e       	mov	r6, r28
    308c:	bf ef       	ldi	r27, 0xFF	; 255
    308e:	cb 1a       	sub	r12, r27
    3090:	db 0a       	sbc	r13, r27
    3092:	70 80       	ld	r7, Z
    3094:	c6 2d       	mov	r28, r6
    3096:	c5 cf       	rjmp	.-118    	; 0x3022 <strtod+0xd2>
    3098:	2d 2f       	mov	r18, r29
    309a:	2f 7d       	andi	r18, 0xDF	; 223
    309c:	25 31       	cpi	r18, 0x15	; 21
    309e:	c1 f5       	brne	.+112    	; 0x3110 <strtod+0x1c0>
    30a0:	40 81       	ld	r20, Z
    30a2:	4d 32       	cpi	r20, 0x2D	; 45
    30a4:	11 f4       	brne	.+4      	; 0x30aa <strtod+0x15a>
    30a6:	c0 61       	ori	r28, 0x10	; 16
    30a8:	06 c0       	rjmp	.+12     	; 0x30b6 <strtod+0x166>
    30aa:	4b 32       	cpi	r20, 0x2B	; 43
    30ac:	21 f0       	breq	.+8      	; 0x30b6 <strtod+0x166>
    30ae:	31 96       	adiw	r30, 0x01	; 1
    30b0:	21 e0       	ldi	r18, 0x01	; 1
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	06 c0       	rjmp	.+12     	; 0x30c2 <strtod+0x172>
    30b6:	32 96       	adiw	r30, 0x02	; 2
    30b8:	d6 01       	movw	r26, r12
    30ba:	11 96       	adiw	r26, 0x01	; 1
    30bc:	4c 91       	ld	r20, X
    30be:	22 e0       	ldi	r18, 0x02	; 2
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	a0 ed       	ldi	r26, 0xD0	; 208
    30c4:	a4 0f       	add	r26, r20
    30c6:	aa 30       	cpi	r26, 0x0A	; 10
    30c8:	18 f0       	brcs	.+6      	; 0x30d0 <strtod+0x180>
    30ca:	e2 1b       	sub	r30, r18
    30cc:	f3 0b       	sbc	r31, r19
    30ce:	20 c0       	rjmp	.+64     	; 0x3110 <strtod+0x1c0>
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	50 e0       	ldi	r21, 0x00	; 0
    30d4:	40 38       	cpi	r20, 0x80	; 128
    30d6:	bc e0       	ldi	r27, 0x0C	; 12
    30d8:	5b 07       	cpc	r21, r27
    30da:	5c f4       	brge	.+22     	; 0x30f2 <strtod+0x1a2>
    30dc:	9a 01       	movw	r18, r20
    30de:	22 0f       	add	r18, r18
    30e0:	33 1f       	adc	r19, r19
    30e2:	22 0f       	add	r18, r18
    30e4:	33 1f       	adc	r19, r19
    30e6:	42 0f       	add	r20, r18
    30e8:	53 1f       	adc	r21, r19
    30ea:	44 0f       	add	r20, r20
    30ec:	55 1f       	adc	r21, r21
    30ee:	4a 0f       	add	r20, r26
    30f0:	51 1d       	adc	r21, r1
    30f2:	31 96       	adiw	r30, 0x01	; 1
    30f4:	df 01       	movw	r26, r30
    30f6:	11 97       	sbiw	r26, 0x01	; 1
    30f8:	2c 91       	ld	r18, X
    30fa:	a0 ed       	ldi	r26, 0xD0	; 208
    30fc:	a2 0f       	add	r26, r18
    30fe:	aa 30       	cpi	r26, 0x0A	; 10
    3100:	48 f3       	brcs	.-46     	; 0x30d4 <strtod+0x184>
    3102:	c4 ff       	sbrs	r28, 4
    3104:	03 c0       	rjmp	.+6      	; 0x310c <strtod+0x1bc>
    3106:	51 95       	neg	r21
    3108:	41 95       	neg	r20
    310a:	51 09       	sbc	r21, r1
    310c:	04 0f       	add	r16, r20
    310e:	15 1f       	adc	r17, r21
    3110:	c1 ff       	sbrs	r28, 1
    3112:	07 c0       	rjmp	.+14     	; 0x3122 <strtod+0x1d2>
    3114:	e1 14       	cp	r14, r1
    3116:	f1 04       	cpc	r15, r1
    3118:	21 f0       	breq	.+8      	; 0x3122 <strtod+0x1d2>
    311a:	31 97       	sbiw	r30, 0x01	; 1
    311c:	d7 01       	movw	r26, r14
    311e:	ed 93       	st	X+, r30
    3120:	fc 93       	st	X, r31
    3122:	96 da       	rcall	.-2772   	; 0x2650 <__floatunsisf>
    3124:	c3 70       	andi	r28, 0x03	; 3
    3126:	c3 30       	cpi	r28, 0x03	; 3
    3128:	19 f0       	breq	.+6      	; 0x3130 <strtod+0x1e0>
    312a:	6b 01       	movw	r12, r22
    312c:	7c 01       	movw	r14, r24
    312e:	06 c0       	rjmp	.+12     	; 0x313c <strtod+0x1ec>
    3130:	6b 01       	movw	r12, r22
    3132:	7c 01       	movw	r14, r24
    3134:	f7 fa       	bst	r15, 7
    3136:	f0 94       	com	r15
    3138:	f7 f8       	bld	r15, 7
    313a:	f0 94       	com	r15
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	a9 01       	movw	r20, r18
    3142:	c7 01       	movw	r24, r14
    3144:	b6 01       	movw	r22, r12
    3146:	ec d9       	rcall	.-3112   	; 0x2520 <__cmpsf2>
    3148:	88 23       	and	r24, r24
    314a:	09 f4       	brne	.+2      	; 0x314e <strtod+0x1fe>
    314c:	43 c0       	rjmp	.+134    	; 0x31d4 <strtod+0x284>
    314e:	17 ff       	sbrs	r17, 7
    3150:	06 c0       	rjmp	.+12     	; 0x315e <strtod+0x20e>
    3152:	11 95       	neg	r17
    3154:	01 95       	neg	r16
    3156:	11 09       	sbc	r17, r1
    3158:	c7 eb       	ldi	r28, 0xB7	; 183
    315a:	d1 e0       	ldi	r29, 0x01	; 1
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <strtod+0x212>
    315e:	cf ec       	ldi	r28, 0xCF	; 207
    3160:	d1 e0       	ldi	r29, 0x01	; 1
    3162:	5e 01       	movw	r10, r28
    3164:	b8 e1       	ldi	r27, 0x18	; 24
    3166:	ab 1a       	sub	r10, r27
    3168:	b1 08       	sbc	r11, r1
    316a:	46 01       	movw	r8, r12
    316c:	be 2d       	mov	r27, r14
    316e:	af 2d       	mov	r26, r15
    3170:	90 e2       	ldi	r25, 0x20	; 32
    3172:	e9 2e       	mov	r14, r25
    3174:	f1 2c       	mov	r15, r1
    3176:	0e 15       	cp	r16, r14
    3178:	1f 05       	cpc	r17, r15
    317a:	7c f0       	brlt	.+30     	; 0x319a <strtod+0x24a>
    317c:	fe 01       	movw	r30, r28
    317e:	25 91       	lpm	r18, Z+
    3180:	35 91       	lpm	r19, Z+
    3182:	45 91       	lpm	r20, Z+
    3184:	54 91       	lpm	r21, Z
    3186:	b4 01       	movw	r22, r8
    3188:	8b 2f       	mov	r24, r27
    318a:	9a 2f       	mov	r25, r26
    318c:	43 db       	rcall	.-2426   	; 0x2814 <__mulsf3>
    318e:	4b 01       	movw	r8, r22
    3190:	b8 2f       	mov	r27, r24
    3192:	a9 2f       	mov	r26, r25
    3194:	0e 19       	sub	r16, r14
    3196:	1f 09       	sbc	r17, r15
    3198:	ee cf       	rjmp	.-36     	; 0x3176 <strtod+0x226>
    319a:	24 97       	sbiw	r28, 0x04	; 4
    319c:	f5 94       	asr	r15
    319e:	e7 94       	ror	r14
    31a0:	ca 15       	cp	r28, r10
    31a2:	db 05       	cpc	r29, r11
    31a4:	41 f7       	brne	.-48     	; 0x3176 <strtod+0x226>
    31a6:	64 01       	movw	r12, r8
    31a8:	eb 2e       	mov	r14, r27
    31aa:	fa 2e       	mov	r15, r26
    31ac:	8e 2d       	mov	r24, r14
    31ae:	88 0f       	add	r24, r24
    31b0:	8f 2d       	mov	r24, r15
    31b2:	88 1f       	adc	r24, r24
    31b4:	8f 3f       	cpi	r24, 0xFF	; 255
    31b6:	41 f0       	breq	.+16     	; 0x31c8 <strtod+0x278>
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	a9 01       	movw	r20, r18
    31be:	c7 01       	movw	r24, r14
    31c0:	b6 01       	movw	r22, r12
    31c2:	ae d9       	rcall	.-3236   	; 0x2520 <__cmpsf2>
    31c4:	81 11       	cpse	r24, r1
    31c6:	06 c0       	rjmp	.+12     	; 0x31d4 <strtod+0x284>
    31c8:	82 e2       	ldi	r24, 0x22	; 34
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <errno+0x1>
    31d0:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <errno>
    31d4:	c7 01       	movw	r24, r14
    31d6:	b6 01       	movw	r22, r12
    31d8:	09 c0       	rjmp	.+18     	; 0x31ec <strtod+0x29c>
    31da:	60 e0       	ldi	r22, 0x00	; 0
    31dc:	70 e0       	ldi	r23, 0x00	; 0
    31de:	80 e8       	ldi	r24, 0x80	; 128
    31e0:	9f ef       	ldi	r25, 0xFF	; 255
    31e2:	04 c0       	rjmp	.+8      	; 0x31ec <strtod+0x29c>
    31e4:	60 e0       	ldi	r22, 0x00	; 0
    31e6:	70 e0       	ldi	r23, 0x00	; 0
    31e8:	80 ec       	ldi	r24, 0xC0	; 192
    31ea:	9f e7       	ldi	r25, 0x7F	; 127
    31ec:	cd b7       	in	r28, 0x3d	; 61
    31ee:	de b7       	in	r29, 0x3e	; 62
    31f0:	ee e0       	ldi	r30, 0x0E	; 14
    31f2:	1e cc       	rjmp	.-1988   	; 0x2a30 <__epilogue_restores__+0x8>

000031f4 <__ctype_isfalse>:
    31f4:	99 27       	eor	r25, r25
    31f6:	88 27       	eor	r24, r24

000031f8 <__ctype_istrue>:
    31f8:	08 95       	ret

000031fa <strncasecmp_P>:
    31fa:	fb 01       	movw	r30, r22
    31fc:	dc 01       	movw	r26, r24
    31fe:	41 50       	subi	r20, 0x01	; 1
    3200:	50 40       	sbci	r21, 0x00	; 0
    3202:	88 f0       	brcs	.+34     	; 0x3226 <strncasecmp_P+0x2c>
    3204:	8d 91       	ld	r24, X+
    3206:	81 34       	cpi	r24, 0x41	; 65
    3208:	1c f0       	brlt	.+6      	; 0x3210 <strncasecmp_P+0x16>
    320a:	8b 35       	cpi	r24, 0x5B	; 91
    320c:	0c f4       	brge	.+2      	; 0x3210 <strncasecmp_P+0x16>
    320e:	80 5e       	subi	r24, 0xE0	; 224
    3210:	65 91       	lpm	r22, Z+
    3212:	61 34       	cpi	r22, 0x41	; 65
    3214:	1c f0       	brlt	.+6      	; 0x321c <strncasecmp_P+0x22>
    3216:	6b 35       	cpi	r22, 0x5B	; 91
    3218:	0c f4       	brge	.+2      	; 0x321c <strncasecmp_P+0x22>
    321a:	60 5e       	subi	r22, 0xE0	; 224
    321c:	86 1b       	sub	r24, r22
    321e:	61 11       	cpse	r22, r1
    3220:	71 f3       	breq	.-36     	; 0x31fe <strncasecmp_P+0x4>
    3222:	99 0b       	sbc	r25, r25
    3224:	08 95       	ret
    3226:	88 1b       	sub	r24, r24
    3228:	fc cf       	rjmp	.-8      	; 0x3222 <strncasecmp_P+0x28>

0000322a <__muluhisi3>:
    322a:	d3 db       	rcall	.-2138   	; 0x29d2 <__umulhisi3>
    322c:	a5 9f       	mul	r26, r21
    322e:	90 0d       	add	r25, r0
    3230:	b4 9f       	mul	r27, r20
    3232:	90 0d       	add	r25, r0
    3234:	a4 9f       	mul	r26, r20
    3236:	80 0d       	add	r24, r0
    3238:	91 1d       	adc	r25, r1
    323a:	11 24       	eor	r1, r1
    323c:	08 95       	ret

0000323e <_exit>:
    323e:	f8 94       	cli

00003240 <__stop_program>:
    3240:	ff cf       	rjmp	.-2      	; 0x3240 <__stop_program>
