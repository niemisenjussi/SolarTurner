
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ac  00800100  00005b96  00005c2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005b96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011a  008002ac  008002ac  00005dd6  2**0
                  ALLOC
  3 .stab         00005dd8  00000000  00000000  00005dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001fea  00000000  00000000  0000bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000db9a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000dbac  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	6e c1       	rjmp	.+732    	; 0x2de <__ctors_end>
       2:	00 00       	nop
       4:	89 c1       	rjmp	.+786    	; 0x318 <__bad_interrupt>
       6:	00 00       	nop
       8:	87 c1       	rjmp	.+782    	; 0x318 <__bad_interrupt>
       a:	00 00       	nop
       c:	85 c1       	rjmp	.+778    	; 0x318 <__bad_interrupt>
       e:	00 00       	nop
      10:	83 c1       	rjmp	.+774    	; 0x318 <__bad_interrupt>
      12:	00 00       	nop
      14:	81 c1       	rjmp	.+770    	; 0x318 <__bad_interrupt>
      16:	00 00       	nop
      18:	7f c1       	rjmp	.+766    	; 0x318 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7d c1       	rjmp	.+762    	; 0x318 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7b c1       	rjmp	.+758    	; 0x318 <__bad_interrupt>
      22:	00 00       	nop
      24:	79 c1       	rjmp	.+754    	; 0x318 <__bad_interrupt>
      26:	00 00       	nop
      28:	77 c1       	rjmp	.+750    	; 0x318 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a4 c4       	rjmp	.+2376   	; 0x976 <__vector_11>
      2e:	00 00       	nop
      30:	73 c1       	rjmp	.+742    	; 0x318 <__bad_interrupt>
      32:	00 00       	nop
      34:	71 c1       	rjmp	.+738    	; 0x318 <__bad_interrupt>
      36:	00 00       	nop
      38:	6f c1       	rjmp	.+734    	; 0x318 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6d c1       	rjmp	.+730    	; 0x318 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6b c1       	rjmp	.+726    	; 0x318 <__bad_interrupt>
      42:	00 00       	nop
      44:	69 c1       	rjmp	.+722    	; 0x318 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 b6 1d 	jmp	0x3b6c	; 0x3b6c <__vector_18>
      4c:	65 c1       	rjmp	.+714    	; 0x318 <__bad_interrupt>
      4e:	00 00       	nop
      50:	63 c1       	rjmp	.+710    	; 0x318 <__bad_interrupt>
      52:	00 00       	nop
      54:	61 c1       	rjmp	.+706    	; 0x318 <__bad_interrupt>
      56:	00 00       	nop
      58:	5f c1       	rjmp	.+702    	; 0x318 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5d c1       	rjmp	.+698    	; 0x318 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5b c1       	rjmp	.+694    	; 0x318 <__bad_interrupt>
      62:	00 00       	nop
      64:	59 c1       	rjmp	.+690    	; 0x318 <__bad_interrupt>
      66:	00 00       	nop
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 05       	cpc	r19, r15
      96:	a8 4c       	sbci	r26, 0xC8	; 200
      98:	cd b2       	in	r12, 0x1d	; 29
      9a:	d4 4e       	sbci	r29, 0xE4	; 228
      9c:	b9 38       	cpi	r27, 0x89	; 137
      9e:	36 a9       	ldd	r19, Z+54	; 0x36
      a0:	02 0c       	add	r0, r2
      a2:	50 b9       	out	0x00, r21	; 0
      a4:	91 86       	std	Z+9, r9	; 0x09
      a6:	88 08       	sbc	r8, r8
      a8:	3c a6       	std	Y+44, r3	; 0x2c
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	2a be       	out	0x3a, r2	; 58
      ae:	00 00       	nop
      b0:	00 80       	ld	r0, Z
      b2:	3f 00       	.word	0x003f	; ????

000000b4 <__trampolines_end>:
      b4:	6e 61       	ori	r22, 0x1E	; 30
      b6:	6e 00       	.word	0x006e	; ????

000000b8 <__c.2177>:
      b8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e8:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     108:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     118:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     128:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     138:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     148:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     158:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     168:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     178:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     188:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     198:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001b6 <pstr_nan>:
     1b6:	4e 41 4e                                            NAN

000001b9 <pstr_inity>:
     1b9:	49 4e 49 54 59                                      INITY

000001be <pstr_inf>:
     1be:	49 4e 46                                            INF

000001c1 <pwr_m10>:
     1c1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     1d1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001d9 <pwr_p10>:
     1d9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1e9:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000001f1 <__c.2345>:
     1f1:	56 6f 6c 74 61 67 65 20 4d 69 6e 3a 00              Voltage Min:.

000001fe <__c.2341>:
     1fe:	63 61 6c 69 62 72 61 74 69 6f 6e 20 72 65 61 64     calibration read
     20e:	79 0a 00                                            y..

00000211 <__c.2336>:
     211:	52 57 20 6d 61 78 3a 20 00                          RW max: .

0000021a <__c.2329>:
     21a:	46 57 20 6d 69 6e 3a 20 00                          FW min: .

00000223 <__c.2321>:
     223:	63 61 6c 69 62 72 61 74 69 6e 67 20 6d 6f 74 6f     calibrating moto
     233:	72 3a 00                                            r:.

00000236 <__c.2310>:
     236:	53 68 75 74 64 6f 77 6e 0a 00                       Shutdown..

00000240 <__c.2302>:
     240:	20 41 44 43 5f 76 61 6c 75 65 3a 00                  ADC_value:.

0000024c <__c.2300>:
     24c:	6d 6f 74 6f 72 3a 00                                motor:.

00000253 <__c.2289>:
     253:	52 75 6e 6e 69 6e 67 20 6d 6f 74 6f 72 20 00        Running motor .

00000262 <__c.2287>:
     262:	45 52 52 2c 64 69 72 0a 00                          ERR,dir..

0000026b <__c.2269>:
     26b:	74 69 6d 65 6f 75 74 0a 00                          timeout..

00000274 <__c.2218>:
     274:	41 45 52 52 0a 00                                   AERR..

0000027a <__c.2518>:
     27a:	4d 41 4e 0a 00                                      MAN..

0000027f <__c.2516>:
     27f:	4f 4b 0a 00                                         OK..

00000283 <__c.2511>:
     283:	4d 41 4e 0a 00                                      MAN..

00000288 <__c.2509>:
     288:	4f 4b 0a 00                                         OK..

0000028c <__c.2498>:
     28c:	45 52 52 0a 00                                      ERR..

00000291 <__c.2374>:
     291:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     2a1:	47 00                                               G.

000002a3 <pstr_an>:
     2a3:	61 6e 00                                            an.

000002a6 <pstr_nfinity>:
     2a6:	6e 66 69 6e 69 74 79 00                             nfinity.

000002ae <pwr_m10>:
     2ae:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2be:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002c6 <pwr_p10>:
     2c6:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     2d6:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000002de <__ctors_end>:
     2de:	11 24       	eor	r1, r1
     2e0:	1f be       	out	0x3f, r1	; 63
     2e2:	cf ef       	ldi	r28, 0xFF	; 255
     2e4:	d8 e0       	ldi	r29, 0x08	; 8
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	cd bf       	out	0x3d, r28	; 61

000002ea <__do_copy_data>:
     2ea:	12 e0       	ldi	r17, 0x02	; 2
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	b1 e0       	ldi	r27, 0x01	; 1
     2f0:	e6 e9       	ldi	r30, 0x96	; 150
     2f2:	fb e5       	ldi	r31, 0x5B	; 91
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <__do_copy_data+0x10>
     2f6:	05 90       	lpm	r0, Z+
     2f8:	0d 92       	st	X+, r0
     2fa:	ac 3a       	cpi	r26, 0xAC	; 172
     2fc:	b1 07       	cpc	r27, r17
     2fe:	d9 f7       	brne	.-10     	; 0x2f6 <__do_copy_data+0xc>

00000300 <__do_clear_bss>:
     300:	23 e0       	ldi	r18, 0x03	; 3
     302:	ac ea       	ldi	r26, 0xAC	; 172
     304:	b2 e0       	ldi	r27, 0x02	; 2
     306:	01 c0       	rjmp	.+2      	; 0x30a <.do_clear_bss_start>

00000308 <.do_clear_bss_loop>:
     308:	1d 92       	st	X+, r1

0000030a <.do_clear_bss_start>:
     30a:	a6 3c       	cpi	r26, 0xC6	; 198
     30c:	b2 07       	cpc	r27, r18
     30e:	e1 f7       	brne	.-8      	; 0x308 <.do_clear_bss_loop>
     310:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <main>
     314:	0c 94 c9 2d 	jmp	0x5b92	; 0x5b92 <_exit>

00000318 <__bad_interrupt>:
     318:	73 ce       	rjmp	.-794    	; 0x0 <__vectors>

0000031a <initLED>:
#define DISABLE_LED LED_PORT &= ~(1<<LED_PIN_NUM);
#define ENABLE_LED LED_PORT |= (1<<LED_PIN_NUM);
#define TOGGLE_LED LED_PORT ^= (1<<LED_PIN_NUM);

void initLED(void){
    LED_DDR |= (1<<LED_PIN_NUM); 
     31a:	25 9a       	sbi	0x04, 5	; 4
     31c:	08 95       	ret

0000031e <put_char0>:



int put_char0(char c, FILE *stream){
	 //if (c == '\n') put_char0('\r', stream);
	 loop_until_bit_is_set(UCSR0A, UDRE0);
     31e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     322:	95 ff       	sbrs	r25, 5
     324:	fc cf       	rjmp	.-8      	; 0x31e <put_char0>
	 UDR0 = c;
     326:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	 return 0;
}
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	08 95       	ret

00000330 <USART_Init>:
	 loop_until_bit_is_set(UCSR3A, UDRE3);
	 UDR3 = c;
	 return 0;
}
*/
void USART_Init(FILE *port0, uint32_t br0){
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	ec 01       	movw	r28, r24
	uint32_t MYUBRR = 0;
	//int MYUBRR = 16; // 16 = 115200, 34 = 57600
	if (port0 != NULL){
     336:	89 2b       	or	r24, r25
     338:	09 f4       	brne	.+2      	; 0x33c <USART_Init+0xc>
     33a:	41 c0       	rjmp	.+130    	; 0x3be <USART_Init+0x8e>
		MYUBRR = F_CPU/(8*br0)-1;
     33c:	44 0f       	add	r20, r20
     33e:	55 1f       	adc	r21, r21
     340:	66 1f       	adc	r22, r22
     342:	77 1f       	adc	r23, r23
     344:	44 0f       	add	r20, r20
     346:	55 1f       	adc	r21, r21
     348:	66 1f       	adc	r22, r22
     34a:	77 1f       	adc	r23, r23
     34c:	9a 01       	movw	r18, r20
     34e:	ab 01       	movw	r20, r22
     350:	22 0f       	add	r18, r18
     352:	33 1f       	adc	r19, r19
     354:	44 1f       	adc	r20, r20
     356:	55 1f       	adc	r21, r21
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	74 e2       	ldi	r23, 0x24	; 36
     35c:	84 ef       	ldi	r24, 0xF4	; 244
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	0e 94 a3 29 	call	0x5346	; 0x5346 <__udivmodsi4>
     364:	ba 01       	movw	r22, r20
     366:	a9 01       	movw	r20, r18
     368:	41 50       	subi	r20, 0x01	; 1
     36a:	51 09       	sbc	r21, r1
     36c:	61 09       	sbc	r22, r1
     36e:	71 09       	sbc	r23, r1
		//DEbug serial
		DDRD |= 0x02; //TXD0 output
     370:	51 9a       	sbi	0x0a, 1	; 10
		DDRD &= ~(1<<0); //RXD0 input
     372:	50 98       	cbi	0x0a, 0	; 10
		UBRR0H = (uint8_t)(MYUBRR>>8);
     374:	bb 27       	eor	r27, r27
     376:	a7 2f       	mov	r26, r23
     378:	96 2f       	mov	r25, r22
     37a:	85 2f       	mov	r24, r21
     37c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		UBRR0L = (uint8_t)MYUBRR;
     380:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		UCSR0B |= (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); //|(1<<TXCIE0);
     384:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     388:	88 69       	ori	r24, 0x98	; 152
     38a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     38e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     392:	86 60       	ori	r24, 0x06	; 6
     394:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		UCSR0A |= (1<<U2X0);
     398:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     39c:	82 60       	ori	r24, 0x02	; 2
     39e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		*port0 = serial_port0;
     3a2:	8e e0       	ldi	r24, 0x0E	; 14
     3a4:	e0 e0       	ldi	r30, 0x00	; 0
     3a6:	f1 e0       	ldi	r31, 0x01	; 1
     3a8:	de 01       	movw	r26, r28
     3aa:	01 90       	ld	r0, Z+
     3ac:	0d 92       	st	X+, r0
     3ae:	8a 95       	dec	r24
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <USART_Init+0x7a>
		//if (defaultport == 0){
		stdout = &serial_port0; //Required for printf init
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <__iob+0x3>
     3ba:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <__iob+0x2>
		*port3 = serial_port3;
		if (defaultport == 3){
			stdout = &serial_port3; //Required for printf init
		}
	}*/
}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <USART_Transmit0>:

void USART_Transmit0( unsigned char data ){
	while ( !( UCSR0A & (1<<UDRE0)) );
     3c4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     3c8:	95 ff       	sbrs	r25, 5
     3ca:	fc cf       	rjmp	.-8      	; 0x3c4 <USART_Transmit0>
	UDR0 = data;
     3cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     3d0:	08 95       	ret

000003d2 <USART0_Flush>:
/*void USART_Transmit(unsigned char data){   
	while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0 = data;
}*/

void USART0_Flush( void ){
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <USART0_Flush+0x6>
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ){
		dummy = UDR0;
     3d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	UDR0 = data;
}*/

void USART0_Flush( void ){
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ){
     3d8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     3dc:	87 fd       	sbrc	r24, 7
     3de:	fa cf       	rjmp	.-12     	; 0x3d4 <USART0_Flush+0x2>
     3e0:	08 95       	ret

000003e2 <uart_getchar>:
}
*/

unsigned char uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
     3e2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     3e6:	87 ff       	sbrs	r24, 7
     3e8:	fc cf       	rjmp	.-8      	; 0x3e2 <uart_getchar>
    return(UDR0);
     3ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
     3ee:	08 95       	ret

000003f0 <waitResponce>:


void waitResponce(const char *string, uint8_t length){
     3f0:	ac 01       	movw	r20, r24
	cli();
     3f2:	f8 94       	cli
	uint8_t match=0;
     3f4:	20 e0       	ldi	r18, 0x00	; 0
	while(length != match){
     3f6:	62 17       	cp	r22, r18
     3f8:	a9 f0       	breq	.+42     	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
#include <avr/io.h>	

#define USART_FREQ 16000000UL

__attribute__((always_inline)) inline static uint8_t USART_Receive0(void) {
	while ( !(UCSR0A & (1<<RXC0)) );
     3fa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     3fe:	97 ff       	sbrs	r25, 7
     400:	fc cf       	rjmp	.-8      	; 0x3fa <waitResponce+0xa>
	return UDR0;
     402:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		if (USART_Receive0() == pgm_read_byte(string+match)){
     406:	fa 01       	movw	r30, r20
     408:	e2 0f       	add	r30, r18
     40a:	f1 1d       	adc	r31, r1
     40c:	e4 91       	lpm	r30, Z
     40e:	e9 17       	cp	r30, r25
     410:	79 f0       	breq	.+30     	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
			match ++;
		}
		else{
			match = 0;
     412:	20 e0       	ldi	r18, 0x00	; 0


void waitResponce(const char *string, uint8_t length){
	cli();
	uint8_t match=0;
	while(length != match){
     414:	61 11       	cpse	r22, r1
     416:	f1 cf       	rjmp	.-30     	; 0x3fa <waitResponce+0xa>
	UDR0 = data;
}*/

void USART0_Flush( void ){
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ){
     418:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     41c:	87 ff       	sbrs	r24, 7
     41e:	06 c0       	rjmp	.+12     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
		dummy = UDR0;
     420:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	UDR0 = data;
}*/

void USART0_Flush( void ){
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ){
     424:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     428:	87 fd       	sbrc	r24, 7
     42a:	fa cf       	rjmp	.-12     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
		else{
			match = 0;
		}
	}
	USART0_Flush();
	sei();
     42c:	78 94       	sei
     42e:	08 95       	ret
void waitResponce(const char *string, uint8_t length){
	cli();
	uint8_t match=0;
	while(length != match){
		if (USART_Receive0() == pgm_read_byte(string+match)){
			match ++;
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	e1 cf       	rjmp	.-62     	; 0x3f6 <waitResponce+0x6>

00000434 <GetVoltage>:
#define ADC_PORT PORTC
#define ADC_DIR  DDRC

uint16_t GetVoltage(uint8_t Sensor, uint8_t ADCRange)
{
    ADMUX = Sensor+ADCRange;
     434:	86 0f       	add	r24, r22
     436:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
     43a:	87 ec       	ldi	r24, 0xC7	; 199
     43c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    
    do {} while (bit_is_set(ADCSRA,6));
     440:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     444:	86 fd       	sbrc	r24, 6
     446:	fc cf       	rjmp	.-8      	; 0x440 <GetVoltage+0xc>
    
    return ADCW;     
     448:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     44c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     450:	08 95       	ret

00000452 <GetOverSampledVoltage>:
#define ADC_PORT PORTC
#define ADC_DIR  DDRC

uint16_t GetVoltage(uint8_t Sensor, uint8_t ADCRange)
{
    ADMUX = Sensor+ADCRange;
     452:	86 0f       	add	r24, r22
     454:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
     458:	97 ec       	ldi	r25, 0xC7	; 199
     45a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    
    do {} while (bit_is_set(ADCSRA,6));
     45e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     462:	96 fd       	sbrc	r25, 6
     464:	fc cf       	rjmp	.-8      	; 0x45e <GetOverSampledVoltage+0xc>
    
    return ADCW;     
     466:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     46a:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	31 e0       	ldi	r19, 0x01	; 1
}

uint32_t GetOverSampledVoltage(uint8_t Sensor, uint8_t ADCRange){
    GetVoltage(Sensor,ADCRange);
    uint32_t tempvoltage = 0;
     472:	40 e0       	ldi	r20, 0x00	; 0
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	ba 01       	movw	r22, r20
#define ADC_DIR  DDRC

uint16_t GetVoltage(uint8_t Sensor, uint8_t ADCRange)
{
    ADMUX = Sensor+ADCRange;
    ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
     478:	a7 ec       	ldi	r26, 0xC7	; 199
#define ADC_PORT PORTC
#define ADC_DIR  DDRC

uint16_t GetVoltage(uint8_t Sensor, uint8_t ADCRange)
{
    ADMUX = Sensor+ADCRange;
     47a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
     47e:	a0 93 7a 00 	sts	0x007A, r26	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    
    do {} while (bit_is_set(ADCSRA,6));
     482:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     486:	96 fd       	sbrc	r25, 6
     488:	fc cf       	rjmp	.-8      	; 0x482 <GetOverSampledVoltage+0x30>
    
    return ADCW;     
     48a:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     48e:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

uint32_t GetOverSampledVoltage(uint8_t Sensor, uint8_t ADCRange){
    GetVoltage(Sensor,ADCRange);
    uint32_t tempvoltage = 0;
    for (uint16_t i=0;i < 256;i++){
        tempvoltage += GetVoltage(Sensor, ADCRange);
     492:	4e 0f       	add	r20, r30
     494:	5f 1f       	adc	r21, r31
     496:	61 1d       	adc	r22, r1
     498:	71 1d       	adc	r23, r1
     49a:	21 50       	subi	r18, 0x01	; 1
     49c:	31 09       	sbc	r19, r1
}

uint32_t GetOverSampledVoltage(uint8_t Sensor, uint8_t ADCRange){
    GetVoltage(Sensor,ADCRange);
    uint32_t tempvoltage = 0;
    for (uint16_t i=0;i < 256;i++){
     49e:	69 f7       	brne	.-38     	; 0x47a <GetOverSampledVoltage+0x28>
        tempvoltage += GetVoltage(Sensor, ADCRange);
    }
    tempvoltage = tempvoltage>>4;
     4a0:	cb 01       	movw	r24, r22
     4a2:	ba 01       	movw	r22, r20
     4a4:	24 e0       	ldi	r18, 0x04	; 4
     4a6:	96 95       	lsr	r25
     4a8:	87 95       	ror	r24
     4aa:	77 95       	ror	r23
     4ac:	67 95       	ror	r22
     4ae:	2a 95       	dec	r18
     4b0:	d1 f7       	brne	.-12     	; 0x4a6 <GetOverSampledVoltage+0x54>
    return tempvoltage;
}
     4b2:	08 95       	ret

000004b4 <initADC>:

void initADC(void){
    ADC_DIR = 0x00;  //All input
     4b4:	17 b8       	out	0x07, r1	; 7
    ADC_PORT = 0x00; //Pulldown
     4b6:	18 b8       	out	0x08, r1	; 8
     4b8:	08 95       	ret

000004ba <AVGVoltage>:
}


uint16_t AVGVoltage(uint8_t Sensor, uint8_t ADCRange, uint8_t num_of_samples){
     4ba:	cf 92       	push	r12
     4bc:	df 92       	push	r13
     4be:	ef 92       	push	r14
     4c0:	ff 92       	push	r15
     4c2:	24 2f       	mov	r18, r20
#define ADC_PORT PORTC
#define ADC_DIR  DDRC

uint16_t GetVoltage(uint8_t Sensor, uint8_t ADCRange)
{
    ADMUX = Sensor+ADCRange;
     4c4:	86 0f       	add	r24, r22
     4c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
     4ca:	97 ec       	ldi	r25, 0xC7	; 199
     4cc:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    
    do {} while (bit_is_set(ADCSRA,6));
     4d0:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     4d4:	96 fd       	sbrc	r25, 6
     4d6:	fc cf       	rjmp	.-8      	; 0x4d0 <AVGVoltage+0x16>
    
    return ADCW;     
     4d8:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     4dc:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>


uint16_t AVGVoltage(uint8_t Sensor, uint8_t ADCRange, uint8_t num_of_samples){
    GetVoltage(Sensor,ADCRange);    
    uint32_t res = 0;
    for (uint8_t i=0; i<num_of_samples; i++){
     4e0:	22 23       	and	r18, r18
     4e2:	49 f1       	breq	.+82     	; 0x536 <AVGVoltage+0x7c>
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	c1 2c       	mov	r12, r1
     4e8:	d1 2c       	mov	r13, r1
     4ea:	76 01       	movw	r14, r12
#define ADC_DIR  DDRC

uint16_t GetVoltage(uint8_t Sensor, uint8_t ADCRange)
{
    ADMUX = Sensor+ADCRange;
    ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
     4ec:	47 ec       	ldi	r20, 0xC7	; 199
#define ADC_PORT PORTC
#define ADC_DIR  DDRC

uint16_t GetVoltage(uint8_t Sensor, uint8_t ADCRange)
{
    ADMUX = Sensor+ADCRange;
     4ee:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
     4f2:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    
    do {} while (bit_is_set(ADCSRA,6));
     4f6:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     4fa:	96 fd       	sbrc	r25, 6
     4fc:	fc cf       	rjmp	.-8      	; 0x4f6 <AVGVoltage+0x3c>
    
    return ADCW;     
     4fe:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     502:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

uint16_t AVGVoltage(uint8_t Sensor, uint8_t ADCRange, uint8_t num_of_samples){
    GetVoltage(Sensor,ADCRange);    
    uint32_t res = 0;
    for (uint8_t i=0; i<num_of_samples; i++){
        res += GetVoltage(Sensor, ADCRange);
     506:	ce 0e       	add	r12, r30
     508:	df 1e       	adc	r13, r31
     50a:	e1 1c       	adc	r14, r1
     50c:	f1 1c       	adc	r15, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     50e:	95 e3       	ldi	r25, 0x35	; 53
     510:	9a 95       	dec	r25
     512:	f1 f7       	brne	.-4      	; 0x510 <AVGVoltage+0x56>
     514:	00 00       	nop


uint16_t AVGVoltage(uint8_t Sensor, uint8_t ADCRange, uint8_t num_of_samples){
    GetVoltage(Sensor,ADCRange);    
    uint32_t res = 0;
    for (uint8_t i=0; i<num_of_samples; i++){
     516:	3f 5f       	subi	r19, 0xFF	; 255
     518:	32 13       	cpse	r19, r18
     51a:	e9 cf       	rjmp	.-46     	; 0x4ee <AVGVoltage+0x34>
        res += GetVoltage(Sensor, ADCRange);
        _delay_us(10);
    }
    uint16_t final = res/num_of_samples;
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	c7 01       	movw	r24, r14
     524:	b6 01       	movw	r22, r12
     526:	0e 94 a3 29 	call	0x5346	; 0x5346 <__udivmodsi4>
    return final;
}
     52a:	c9 01       	movw	r24, r18
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	df 90       	pop	r13
     532:	cf 90       	pop	r12
     534:	08 95       	ret
}


uint16_t AVGVoltage(uint8_t Sensor, uint8_t ADCRange, uint8_t num_of_samples){
    GetVoltage(Sensor,ADCRange);    
    uint32_t res = 0;
     536:	c1 2c       	mov	r12, r1
     538:	d1 2c       	mov	r13, r1
     53a:	76 01       	movw	r14, r12
     53c:	ef cf       	rjmp	.-34     	; 0x51c <AVGVoltage+0x62>

0000053e <Actuator_ADC>:
    }
    uint16_t final = res/num_of_samples;
    return final;
}

uint32_t Actuator_ADC(uint8_t Sensor, uint8_t ADCRange){
     53e:	86 0f       	add	r24, r22
     540:	2a e0       	ldi	r18, 0x0A	; 10
    uint32_t res = 0;
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	ba 01       	movw	r22, r20
#define ADC_DIR  DDRC

uint16_t GetVoltage(uint8_t Sensor, uint8_t ADCRange)
{
    ADMUX = Sensor+ADCRange;
    ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
     548:	37 ec       	ldi	r19, 0xC7	; 199
#define ADC_PORT PORTC
#define ADC_DIR  DDRC

uint16_t GetVoltage(uint8_t Sensor, uint8_t ADCRange)
{
    ADMUX = Sensor+ADCRange;
     54a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRA = 0b11000111; //tämä toimi AC kanssa 128 jakaja
     54e:	30 93 7a 00 	sts	0x007A, r19	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    
    do {} while (bit_is_set(ADCSRA,6));
     552:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     556:	96 fd       	sbrc	r25, 6
     558:	fc cf       	rjmp	.-8      	; 0x552 <Actuator_ADC+0x14>
    
    return ADCW;     
     55a:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     55e:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}

uint32_t Actuator_ADC(uint8_t Sensor, uint8_t ADCRange){
    uint32_t res = 0;
    for (uint8_t i=0; i<10;i++){
        res += GetVoltage(Sensor, ADCRange);
     562:	4e 0f       	add	r20, r30
     564:	5f 1f       	adc	r21, r31
     566:	61 1d       	adc	r22, r1
     568:	71 1d       	adc	r23, r1
     56a:	21 50       	subi	r18, 0x01	; 1
    return final;
}

uint32_t Actuator_ADC(uint8_t Sensor, uint8_t ADCRange){
    uint32_t res = 0;
    for (uint8_t i=0; i<10;i++){
     56c:	71 f7       	brne	.-36     	; 0x54a <Actuator_ADC+0xc>
        res += GetVoltage(Sensor, ADCRange);
    }
    return res;
}
     56e:	cb 01       	movw	r24, r22
     570:	ba 01       	movw	r22, r20
     572:	08 95       	ret

00000574 <angleConversion>:
       // fprintf_P(port, PSTR("MINLERR\n"));
    }
    return length;
}
//Returns angle between -90.0 - 90.0, input value is in millimeters.
float angleConversion(uint16_t f){
     574:	4f 92       	push	r4
     576:	5f 92       	push	r5
     578:	6f 92       	push	r6
     57a:	7f 92       	push	r7
     57c:	8f 92       	push	r8
     57e:	9f 92       	push	r9
     580:	af 92       	push	r10
     582:	bf 92       	push	r11
     584:	cf 92       	push	r12
     586:	df 92       	push	r13
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	ac 01       	movw	r20, r24
    return -(360L*atan((2*ANGLE_C*ANGLE_X-sqrt((-ANGLE_C*ANGLE_C + 2*ANGLE_C*f - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)*
     58e:	9c 01       	movw	r18, r24
     590:	ac e7       	ldi	r26, 0x7C	; 124
     592:	b1 e0       	ldi	r27, 0x01	; 1
     594:	0e 94 c5 29 	call	0x538a	; 0x538a <__umulhisi3>
     598:	6b 01       	movw	r12, r22
     59a:	7c 01       	movw	r14, r24
     59c:	ba 01       	movw	r22, r20
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
     5a6:	9b 01       	movw	r18, r22
     5a8:	ac 01       	movw	r20, r24
     5aa:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     5ae:	4b 01       	movw	r8, r22
     5b0:	5c 01       	movw	r10, r24
     5b2:	c7 01       	movw	r24, r14
     5b4:	b6 01       	movw	r22, r12
     5b6:	64 50       	subi	r22, 0x04	; 4
     5b8:	7d 48       	sbci	r23, 0x8D	; 141
     5ba:	81 09       	sbc	r24, r1
     5bc:	91 09       	sbc	r25, r1
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*f + pow(f,2.0)- ANGLE_X*ANGLE_X - ANGLE_Y*ANGLE_Y)))/
     5be:	24 e0       	ldi	r18, 0x04	; 4
     5c0:	c2 0e       	add	r12, r18
     5c2:	2d e8       	ldi	r18, 0x8D	; 141
     5c4:	d2 1e       	adc	r13, r18
     5c6:	e1 1c       	adc	r14, r1
     5c8:	f1 1c       	adc	r15, r1
    }
    return length;
}
//Returns angle between -90.0 - 90.0, input value is in millimeters.
float angleConversion(uint16_t f){
    return -(360L*atan((2*ANGLE_C*ANGLE_X-sqrt((-ANGLE_C*ANGLE_C + 2*ANGLE_C*f - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)*
     5ca:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <__floatsisf>
     5ce:	a5 01       	movw	r20, r10
     5d0:	94 01       	movw	r18, r8
     5d2:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	32 e4       	ldi	r19, 0x42	; 66
     5da:	4f ee       	ldi	r20, 0xEF	; 239
     5dc:	58 e4       	ldi	r21, 0x48	; 72
     5de:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e4       	ldi	r19, 0x40	; 64
     5e6:	4c e1       	ldi	r20, 0x1C	; 28
     5e8:	55 e4       	ldi	r21, 0x45	; 69
     5ea:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     5ee:	2b 01       	movw	r4, r22
     5f0:	3c 01       	movw	r6, r24
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*f + pow(f,2.0)- ANGLE_X*ANGLE_X - ANGLE_Y*ANGLE_Y)))/
     5f2:	c7 01       	movw	r24, r14
     5f4:	b6 01       	movw	r22, r12
     5f6:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <__floatsisf>
     5fa:	a5 01       	movw	r20, r10
     5fc:	94 01       	movw	r18, r8
     5fe:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	32 e4       	ldi	r19, 0x42	; 66
     606:	4f ee       	ldi	r20, 0xEF	; 239
     608:	58 e4       	ldi	r21, 0x48	; 72
     60a:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e4       	ldi	r19, 0x40	; 64
     612:	4c e1       	ldi	r20, 0x1C	; 28
     614:	55 e4       	ldi	r21, 0x45	; 69
     616:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     61a:	9b 01       	movw	r18, r22
     61c:	ac 01       	movw	r20, r24
    }
    return length;
}
//Returns angle between -90.0 - 90.0, input value is in millimeters.
float angleConversion(uint16_t f){
    return -(360L*atan((2*ANGLE_C*ANGLE_X-sqrt((-ANGLE_C*ANGLE_C + 2*ANGLE_C*f - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)*
     61e:	c3 01       	movw	r24, r6
     620:	b2 01       	movw	r22, r4
     622:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     626:	0e 94 3c 29 	call	0x5278	; 0x5278 <sqrt>
     62a:	9b 01       	movw	r18, r22
     62c:	ac 01       	movw	r20, r24
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	72 ee       	ldi	r23, 0xE2	; 226
     632:	81 e8       	ldi	r24, 0x81	; 129
     634:	98 e4       	ldi	r25, 0x48	; 72
     636:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     63a:	6b 01       	movw	r12, r22
     63c:	7c 01       	movw	r14, r24
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*f + pow(f,2.0)- ANGLE_X*ANGLE_X - ANGLE_Y*ANGLE_Y)))/
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*ANGLE_Y - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)))/M_PI;
     63e:	a5 01       	movw	r20, r10
     640:	94 01       	movw	r18, r8
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	7c e3       	ldi	r23, 0x3C	; 60
     646:	87 e5       	ldi	r24, 0x57	; 87
     648:	97 e4       	ldi	r25, 0x47	; 71
     64a:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	32 e4       	ldi	r19, 0x42	; 66
     652:	4f ee       	ldi	r20, 0xEF	; 239
     654:	58 e4       	ldi	r21, 0x48	; 72
     656:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e4       	ldi	r19, 0x40	; 64
     65e:	4c e1       	ldi	r20, 0x1C	; 28
     660:	55 e4       	ldi	r21, 0x45	; 69
     662:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     666:	9b 01       	movw	r18, r22
     668:	ac 01       	movw	r20, r24
    }
    return length;
}
//Returns angle between -90.0 - 90.0, input value is in millimeters.
float angleConversion(uint16_t f){
    return -(360L*atan((2*ANGLE_C*ANGLE_X-sqrt((-ANGLE_C*ANGLE_C + 2*ANGLE_C*f - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)*
     66a:	c7 01       	movw	r24, r14
     66c:	b6 01       	movw	r22, r12
     66e:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
     672:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <atan>
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	44 eb       	ldi	r20, 0xB4	; 180
     67c:	53 e4       	ldi	r21, 0x43	; 67
     67e:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     682:	90 58       	subi	r25, 0x80	; 128
     684:	2b ed       	ldi	r18, 0xDB	; 219
     686:	3f e0       	ldi	r19, 0x0F	; 15
     688:	49 e4       	ldi	r20, 0x49	; 73
     68a:	50 e4       	ldi	r21, 0x40	; 64
     68c:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*f + pow(f,2.0)- ANGLE_X*ANGLE_X - ANGLE_Y*ANGLE_Y)))/
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*ANGLE_Y - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)))/M_PI;
}
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	cf 90       	pop	r12
     698:	bf 90       	pop	r11
     69a:	af 90       	pop	r10
     69c:	9f 90       	pop	r9
     69e:	8f 90       	pop	r8
     6a0:	7f 90       	pop	r7
     6a2:	6f 90       	pop	r6
     6a4:	5f 90       	pop	r5
     6a6:	4f 90       	pop	r4
     6a8:	08 95       	ret

000006aa <tiltConversion>:

//Returns tilt angle between 0 to 90 degrees positive. input values in millimeters 
float tiltConversion(uint16_t f){
     6aa:	4f 92       	push	r4
     6ac:	5f 92       	push	r5
     6ae:	6f 92       	push	r6
     6b0:	7f 92       	push	r7
     6b2:	8f 92       	push	r8
     6b4:	9f 92       	push	r9
     6b6:	af 92       	push	r10
     6b8:	bf 92       	push	r11
     6ba:	cf 92       	push	r12
     6bc:	df 92       	push	r13
     6be:	ef 92       	push	r14
     6c0:	ff 92       	push	r15
     6c2:	ac 01       	movw	r20, r24
    return 90.0-(360L*atan((2L*TILT_C*TILT_X-sqrt((-TILT_C*TILT_C + 2*TILT_C*f - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)*
     6c4:	9c 01       	movw	r18, r24
     6c6:	a4 e5       	ldi	r26, 0x54	; 84
     6c8:	b1 e0       	ldi	r27, 0x01	; 1
     6ca:	0e 94 c5 29 	call	0x538a	; 0x538a <__umulhisi3>
     6ce:	6b 01       	movw	r12, r22
     6d0:	7c 01       	movw	r14, r24
     6d2:	ba 01       	movw	r22, r20
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
     6dc:	9b 01       	movw	r18, r22
     6de:	ac 01       	movw	r20, r24
     6e0:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     6e4:	4b 01       	movw	r8, r22
     6e6:	5c 01       	movw	r10, r24
     6e8:	c7 01       	movw	r24, r14
     6ea:	b6 01       	movw	r22, r12
     6ec:	64 5e       	subi	r22, 0xE4	; 228
     6ee:	70 47       	sbci	r23, 0x70	; 112
     6f0:	81 09       	sbc	r24, r1
     6f2:	91 09       	sbc	r25, r1
              (TILT_C*TILT_C + 2L*TILT_C*f + pow(f,2.0)- TILT_X*TILT_X - TILT_Y*TILT_Y)))/
     6f4:	24 ee       	ldi	r18, 0xE4	; 228
     6f6:	c2 0e       	add	r12, r18
     6f8:	20 e7       	ldi	r18, 0x70	; 112
     6fa:	d2 1e       	adc	r13, r18
     6fc:	e1 1c       	adc	r14, r1
     6fe:	f1 1c       	adc	r15, r1
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*ANGLE_Y - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)))/M_PI;
}

//Returns tilt angle between 0 to 90 degrees positive. input values in millimeters 
float tiltConversion(uint16_t f){
    return 90.0-(360L*atan((2L*TILT_C*TILT_X-sqrt((-TILT_C*TILT_C + 2*TILT_C*f - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)*
     700:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <__floatsisf>
     704:	a5 01       	movw	r20, r10
     706:	94 01       	movw	r18, r8
     708:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     70c:	20 e4       	ldi	r18, 0x40	; 64
     70e:	3c e0       	ldi	r19, 0x0C	; 12
     710:	49 e7       	ldi	r20, 0x79	; 121
     712:	58 e4       	ldi	r21, 0x48	; 72
     714:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	32 e4       	ldi	r19, 0x42	; 66
     71c:	44 ea       	ldi	r20, 0xA4	; 164
     71e:	56 e4       	ldi	r21, 0x46	; 70
     720:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     724:	2b 01       	movw	r4, r22
     726:	3c 01       	movw	r6, r24
              (TILT_C*TILT_C + 2L*TILT_C*f + pow(f,2.0)- TILT_X*TILT_X - TILT_Y*TILT_Y)))/
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <__floatsisf>
     730:	a5 01       	movw	r20, r10
     732:	94 01       	movw	r18, r8
     734:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     738:	20 e4       	ldi	r18, 0x40	; 64
     73a:	3c e0       	ldi	r19, 0x0C	; 12
     73c:	49 e7       	ldi	r20, 0x79	; 121
     73e:	58 e4       	ldi	r21, 0x48	; 72
     740:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	32 e4       	ldi	r19, 0x42	; 66
     748:	44 ea       	ldi	r20, 0xA4	; 164
     74a:	56 e4       	ldi	r21, 0x46	; 70
     74c:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     750:	9b 01       	movw	r18, r22
     752:	ac 01       	movw	r20, r24
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*ANGLE_Y - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)))/M_PI;
}

//Returns tilt angle between 0 to 90 degrees positive. input values in millimeters 
float tiltConversion(uint16_t f){
    return 90.0-(360L*atan((2L*TILT_C*TILT_X-sqrt((-TILT_C*TILT_C + 2*TILT_C*f - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)*
     754:	c3 01       	movw	r24, r6
     756:	b2 01       	movw	r22, r4
     758:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     75c:	0e 94 3c 29 	call	0x5278	; 0x5278 <sqrt>
     760:	9b 01       	movw	r18, r22
     762:	ac 01       	movw	r20, r24
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	7d ea       	ldi	r23, 0xAD	; 173
     768:	87 e2       	ldi	r24, 0x27	; 39
     76a:	98 e4       	ldi	r25, 0x48	; 72
     76c:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     770:	6b 01       	movw	r12, r22
     772:	7c 01       	movw	r14, r24
              (TILT_C*TILT_C + 2L*TILT_C*f + pow(f,2.0)- TILT_X*TILT_X - TILT_Y*TILT_Y)))/
              (TILT_C*TILT_C + 2L*TILT_C*TILT_Y - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)))/M_PI;
     774:	a5 01       	movw	r20, r10
     776:	94 01       	movw	r18, r8
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	70 e6       	ldi	r23, 0x60	; 96
     77c:	8f e9       	ldi	r24, 0x9F	; 159
     77e:	96 ec       	ldi	r25, 0xC6	; 198
     780:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     784:	20 e4       	ldi	r18, 0x40	; 64
     786:	3c e0       	ldi	r19, 0x0C	; 12
     788:	49 e7       	ldi	r20, 0x79	; 121
     78a:	58 e4       	ldi	r21, 0x48	; 72
     78c:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	32 e4       	ldi	r19, 0x42	; 66
     794:	44 ea       	ldi	r20, 0xA4	; 164
     796:	56 e4       	ldi	r21, 0x46	; 70
     798:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     79c:	9b 01       	movw	r18, r22
     79e:	ac 01       	movw	r20, r24
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*ANGLE_Y - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)))/M_PI;
}

//Returns tilt angle between 0 to 90 degrees positive. input values in millimeters 
float tiltConversion(uint16_t f){
    return 90.0-(360L*atan((2L*TILT_C*TILT_X-sqrt((-TILT_C*TILT_C + 2*TILT_C*f - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)*
     7a0:	c7 01       	movw	r24, r14
     7a2:	b6 01       	movw	r22, r12
     7a4:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
     7a8:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <atan>
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	44 eb       	ldi	r20, 0xB4	; 180
     7b2:	53 e4       	ldi	r21, 0x43	; 67
     7b4:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
              (TILT_C*TILT_C + 2L*TILT_C*f + pow(f,2.0)- TILT_X*TILT_X - TILT_Y*TILT_Y)))/
              (TILT_C*TILT_C + 2L*TILT_C*TILT_Y - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)))/M_PI;
     7b8:	2b ed       	ldi	r18, 0xDB	; 219
     7ba:	3f e0       	ldi	r19, 0x0F	; 15
     7bc:	49 e4       	ldi	r20, 0x49	; 73
     7be:	50 e4       	ldi	r21, 0x40	; 64
     7c0:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
     7c4:	9b 01       	movw	r18, r22
     7c6:	ac 01       	movw	r20, r24
            (ANGLE_C*ANGLE_C + 2*ANGLE_C*ANGLE_Y - pow(f,2.0) + ANGLE_X*ANGLE_X + ANGLE_Y*ANGLE_Y)))/M_PI;
}

//Returns tilt angle between 0 to 90 degrees positive. input values in millimeters 
float tiltConversion(uint16_t f){
    return 90.0-(360L*atan((2L*TILT_C*TILT_X-sqrt((-TILT_C*TILT_C + 2*TILT_C*f - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)*
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	84 eb       	ldi	r24, 0xB4	; 180
     7ce:	92 e4       	ldi	r25, 0x42	; 66
     7d0:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
              (TILT_C*TILT_C + 2L*TILT_C*f + pow(f,2.0)- TILT_X*TILT_X - TILT_Y*TILT_Y)))/
              (TILT_C*TILT_C + 2L*TILT_C*TILT_Y - pow(f,2.0) + TILT_X*TILT_X + TILT_Y*TILT_Y)))/M_PI;
}
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	df 90       	pop	r13
     7da:	cf 90       	pop	r12
     7dc:	bf 90       	pop	r11
     7de:	af 90       	pop	r10
     7e0:	9f 90       	pop	r9
     7e2:	8f 90       	pop	r8
     7e4:	7f 90       	pop	r7
     7e6:	6f 90       	pop	r6
     7e8:	5f 90       	pop	r5
     7ea:	4f 90       	pop	r4
     7ec:	08 95       	ret

000007ee <angleDegToLength>:

uint16_t angleDegToLength(float angle){
     7ee:	8f 92       	push	r8
     7f0:	9f 92       	push	r9
     7f2:	af 92       	push	r10
     7f4:	bf 92       	push	r11
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
    float alfa = (angle+180)*DEG2RAD;
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	44 e3       	ldi	r20, 0x34	; 52
     804:	53 e4       	ldi	r21, 0x43	; 67
     806:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     80a:	2b ed       	ldi	r18, 0xDB	; 219
     80c:	3f e0       	ldi	r19, 0x0F	; 15
     80e:	49 e4       	ldi	r20, 0x49	; 73
     810:	50 e4       	ldi	r21, 0x40	; 64
     812:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	44 e3       	ldi	r20, 0x34	; 52
     81c:	53 e4       	ldi	r21, 0x43	; 67
     81e:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
     822:	6b 01       	movw	r12, r22
     824:	7c 01       	movw	r14, r24
    return sqrt(pow((cos(alfa)*ANGLE_C+ANGLE_Y),2.0)+pow((ANGLE_X-sin(alfa)*ANGLE_C),2.0));
     826:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <cos>
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	4e e3       	ldi	r20, 0x3E	; 62
     830:	53 e4       	ldi	r21, 0x43	; 67
     832:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	48 e4       	ldi	r20, 0x48	; 72
     83c:	52 e4       	ldi	r21, 0x42	; 66
     83e:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     842:	4b 01       	movw	r8, r22
     844:	5c 01       	movw	r10, r24
     846:	c7 01       	movw	r24, r14
     848:	b6 01       	movw	r22, r12
     84a:	0e 94 32 29 	call	0x5264	; 0x5264 <sin>
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	4e e3       	ldi	r20, 0x3E	; 62
     854:	53 e4       	ldi	r21, 0x43	; 67
     856:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     85a:	9b 01       	movw	r18, r22
     85c:	ac 01       	movw	r20, r24
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	8f e2       	ldi	r24, 0x2F	; 47
     864:	94 e4       	ldi	r25, 0x44	; 68
     866:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     86a:	6b 01       	movw	r12, r22
     86c:	7c 01       	movw	r14, r24
     86e:	a5 01       	movw	r20, r10
     870:	94 01       	movw	r18, r8
     872:	c5 01       	movw	r24, r10
     874:	b4 01       	movw	r22, r8
     876:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     87a:	4b 01       	movw	r8, r22
     87c:	5c 01       	movw	r10, r24
     87e:	a7 01       	movw	r20, r14
     880:	96 01       	movw	r18, r12
     882:	c7 01       	movw	r24, r14
     884:	b6 01       	movw	r22, r12
     886:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     88a:	9b 01       	movw	r18, r22
     88c:	ac 01       	movw	r20, r24
     88e:	c5 01       	movw	r24, r10
     890:	b4 01       	movw	r22, r8
     892:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     896:	0e 94 3c 29 	call	0x5278	; 0x5278 <sqrt>
     89a:	0e 94 88 27 	call	0x4f10	; 0x4f10 <__fixunssfsi>
}
     89e:	cb 01       	movw	r24, r22
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	df 90       	pop	r13
     8a6:	cf 90       	pop	r12
     8a8:	bf 90       	pop	r11
     8aa:	af 90       	pop	r10
     8ac:	9f 90       	pop	r9
     8ae:	8f 90       	pop	r8
     8b0:	08 95       	ret

000008b2 <tiltDegToLength>:

uint16_t tiltDegToLength(float angle){
     8b2:	8f 92       	push	r8
     8b4:	9f 92       	push	r9
     8b6:	af 92       	push	r10
     8b8:	bf 92       	push	r11
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
    float alfa = (angle+90)*DEG2RAD;
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	44 eb       	ldi	r20, 0xB4	; 180
     8c8:	52 e4       	ldi	r21, 0x42	; 66
     8ca:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     8ce:	2b ed       	ldi	r18, 0xDB	; 219
     8d0:	3f e0       	ldi	r19, 0x0F	; 15
     8d2:	49 e4       	ldi	r20, 0x49	; 73
     8d4:	50 e4       	ldi	r21, 0x40	; 64
     8d6:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	44 e3       	ldi	r20, 0x34	; 52
     8e0:	53 e4       	ldi	r21, 0x43	; 67
     8e2:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
     8e6:	6b 01       	movw	r12, r22
     8e8:	7c 01       	movw	r14, r24
    return sqrt(pow((cos(alfa)*TILT_C+TILT_Y),2.0)+pow((TILT_X-sin(alfa)*TILT_C),2.0));
     8ea:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <cos>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	4a e2       	ldi	r20, 0x2A	; 42
     8f4:	53 e4       	ldi	r21, 0x43	; 67
     8f6:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	41 e1       	ldi	r20, 0x11	; 17
     900:	53 e4       	ldi	r21, 0x43	; 67
     902:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     906:	4b 01       	movw	r8, r22
     908:	5c 01       	movw	r10, r24
     90a:	c7 01       	movw	r24, r14
     90c:	b6 01       	movw	r22, r12
     90e:	0e 94 32 29 	call	0x5264	; 0x5264 <sin>
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	4a e2       	ldi	r20, 0x2A	; 42
     918:	53 e4       	ldi	r21, 0x43	; 67
     91a:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     91e:	9b 01       	movw	r18, r22
     920:	ac 01       	movw	r20, r24
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	70 e8       	ldi	r23, 0x80	; 128
     926:	8c ef       	ldi	r24, 0xFC	; 252
     928:	93 e4       	ldi	r25, 0x43	; 67
     92a:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     92e:	6b 01       	movw	r12, r22
     930:	7c 01       	movw	r14, r24
     932:	a5 01       	movw	r20, r10
     934:	94 01       	movw	r18, r8
     936:	c5 01       	movw	r24, r10
     938:	b4 01       	movw	r22, r8
     93a:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     93e:	4b 01       	movw	r8, r22
     940:	5c 01       	movw	r10, r24
     942:	a7 01       	movw	r20, r14
     944:	96 01       	movw	r18, r12
     946:	c7 01       	movw	r24, r14
     948:	b6 01       	movw	r22, r12
     94a:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	c5 01       	movw	r24, r10
     954:	b4 01       	movw	r22, r8
     956:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     95a:	0e 94 3c 29 	call	0x5278	; 0x5278 <sqrt>
     95e:	0e 94 88 27 	call	0x4f10	; 0x4f10 <__fixunssfsi>
}
     962:	cb 01       	movw	r24, r22
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	df 90       	pop	r13
     96a:	cf 90       	pop	r12
     96c:	bf 90       	pop	r11
     96e:	af 90       	pop	r10
     970:	9f 90       	pop	r9
     972:	8f 90       	pop	r8
     974:	08 95       	ret

00000976 <__vector_11>:
volatile int8_t running_motor = -1;
FILE *port;


//16bit timer interrupt
ISR(TIMER1_COMPA_vect){
     976:	1f 92       	push	r1
     978:	0f 92       	push	r0
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	0f 92       	push	r0
     97e:	11 24       	eor	r1, r1
     980:	8f 93       	push	r24
     982:	9f 93       	push	r25
    systick ++;
     984:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <__data_end>
     988:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <__data_end+0x1>
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <__data_end+0x1>
     992:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <__data_end>
}
     996:	9f 91       	pop	r25
     998:	8f 91       	pop	r24
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	0f 90       	pop	r0
     9a0:	1f 90       	pop	r1
     9a2:	18 95       	reti

000009a4 <getTiltMotorMinAngle>:
         m->move_length_mm = m->current_length - m->set_length;
     }
}

float getMotorMinAngle(volatile motor *m){
    return m->min_angle;
     9a4:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <motors+0x93>
     9a8:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <motors+0x94>
     9ac:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <motors+0x95>
     9b0:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <motors+0x96>
}


float getTiltMotorMinAngle(void){
    return getMotorMinAngle(&motors[TILT_MOTOR]);
}
     9b4:	08 95       	ret

000009b6 <getAngleMotorMinAngle>:
         m->move_length_mm = m->current_length - m->set_length;
     }
}

float getMotorMinAngle(volatile motor *m){
    return m->min_angle;
     9b6:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <motors+0x2f>
     9ba:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <motors+0x30>
     9be:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <motors+0x31>
     9c2:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <motors+0x32>
    return getMotorMinAngle(&motors[TILT_MOTOR]);
}

float getAngleMotorMinAngle(void){
     return getMotorMinAngle(&motors[ANGLE_MOTOR]);
}
     9c6:	08 95       	ret

000009c8 <getTiltMotorMaxAngle>:
float getMotorMinAngle(volatile motor *m){
    return m->min_angle;
}

float getMotorMaxAngle(volatile motor *m){
    return m->min_angle + m->angle_range;
     9c8:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <motors+0x93>
     9cc:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <motors+0x94>
     9d0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <motors+0x95>
     9d4:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <motors+0x96>
     9d8:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <motors+0x97>
     9dc:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <motors+0x98>
     9e0:	40 91 a8 01 	lds	r20, 0x01A8	; 0x8001a8 <motors+0x99>
     9e4:	50 91 a9 01 	lds	r21, 0x01A9	; 0x8001a9 <motors+0x9a>
     9e8:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__addsf3>
     return getMotorMinAngle(&motors[ANGLE_MOTOR]);
}

float getTiltMotorMaxAngle(void){
     return getMotorMaxAngle(&motors[TILT_MOTOR]);
}
     9ec:	08 95       	ret

000009ee <getAngleMotorMaxAngle>:
float getMotorMinAngle(volatile motor *m){
    return m->min_angle;
}

float getMotorMaxAngle(volatile motor *m){
    return m->min_angle + m->angle_range;
     9ee:	ef e0       	ldi	r30, 0x0F	; 15
     9f0:	f1 e0       	ldi	r31, 0x01	; 1
     9f2:	67 a5       	ldd	r22, Z+47	; 0x2f
     9f4:	70 a9       	ldd	r23, Z+48	; 0x30
     9f6:	81 a9       	ldd	r24, Z+49	; 0x31
     9f8:	92 a9       	ldd	r25, Z+50	; 0x32
     9fa:	23 a9       	ldd	r18, Z+51	; 0x33
     9fc:	34 a9       	ldd	r19, Z+52	; 0x34
     9fe:	45 a9       	ldd	r20, Z+53	; 0x35
     a00:	56 a9       	ldd	r21, Z+54	; 0x36
     a02:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__addsf3>
     return getMotorMaxAngle(&motors[TILT_MOTOR]);
}

float getAngleMotorMaxAngle(void){
     return getMotorMaxAngle(&motors[ANGLE_MOTOR]);
}
     a06:	08 95       	ret

00000a08 <getTiltActuatorCurrentLength>:

uint16_t getTiltActuatorCurrentLength(void){
    return motors[TILT_MOTOR].current_length;
     a08:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <motors+0x87>
     a0c:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <motors+0x88>
}
     a10:	08 95       	ret

00000a12 <getAngleActuatorCurrentLength>:

uint16_t getAngleActuatorCurrentLength(void){
    return motors[ANGLE_MOTOR].current_length;
     a12:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <motors+0x23>
     a16:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <motors+0x24>
}
     a1a:	08 95       	ret

00000a1c <getTiltActuatorSetLength>:

uint16_t getTiltActuatorSetLength(void){
    return motors[TILT_MOTOR].set_length;
     a1c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <motors+0x89>
     a20:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <motors+0x8a>
}
     a24:	08 95       	ret

00000a26 <getAngleActuatorSetLength>:

uint16_t getAngleActuatorSetLength(void){
    return motors[ANGLE_MOTOR].set_length;
     a26:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <motors+0x25>
     a2a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <motors+0x26>
}
     a2e:	08 95       	ret

00000a30 <getAngle>:

float getAngle(void){
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
}


//returns motor final calculated position in degrees
float getMotorPosition(volatile motor *m){
    float aoffset = m->angle_correction(m->current_length);
     a34:	cf e0       	ldi	r28, 0x0F	; 15
     a36:	d1 e0       	ldi	r29, 0x01	; 1
     a38:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <motors+0x50>
     a3c:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <motors+0x51>
     a40:	8b a1       	ldd	r24, Y+35	; 0x23
     a42:	9c a1       	ldd	r25, Y+36	; 0x24
     a44:	09 95       	icall
    return m->angle_reference + aoffset;
     a46:	2f a9       	ldd	r18, Y+55	; 0x37
     a48:	38 ad       	ldd	r19, Y+56	; 0x38
     a4a:	49 ad       	ldd	r20, Y+57	; 0x39
     a4c:	5a ad       	ldd	r21, Y+58	; 0x3a
     a4e:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
    return motors[ANGLE_MOTOR].set_length;
}

float getAngle(void){
    return getMotorPosition(&motors[ANGLE_MOTOR]);
}
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	08 95       	ret

00000a58 <getTilt>:
}


//returns motor final calculated position in degrees
float getMotorPosition(volatile motor *m){
    float aoffset = m->angle_correction(m->current_length);
     a58:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <motors+0xb4>
     a5c:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <motors+0xb5>
     a60:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <motors+0x87>
     a64:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <motors+0x88>
     a68:	09 95       	icall
    return m->angle_reference + aoffset;
     a6a:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <motors+0x9b>
     a6e:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <motors+0x9c>
     a72:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <motors+0x9d>
     a76:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <motors+0x9e>
     a7a:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__addsf3>
    return getMotorPosition(&motors[ANGLE_MOTOR]);
}

float getTilt(void){
    return getMotorPosition(&motors[TILT_MOTOR]);
}
     a7e:	08 95       	ret

00000a80 <getSetAngle>:

//Returns current Angle Set value
float getSetAngle(void){
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
        ie. 180 +offset  => 180 + +90 = 270 degrees
    */
}

float getMotorSetPosition(volatile motor *m){
    float aoffset = m->angle_correction(m->set_length);
     a84:	cf e0       	ldi	r28, 0x0F	; 15
     a86:	d1 e0       	ldi	r29, 0x01	; 1
     a88:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <motors+0x50>
     a8c:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <motors+0x51>
     a90:	8d a1       	ldd	r24, Y+37	; 0x25
     a92:	9e a1       	ldd	r25, Y+38	; 0x26
     a94:	09 95       	icall
    return m->angle_reference + aoffset;
     a96:	2f a9       	ldd	r18, Y+55	; 0x37
     a98:	38 ad       	ldd	r19, Y+56	; 0x38
     a9a:	49 ad       	ldd	r20, Y+57	; 0x39
     a9c:	5a ad       	ldd	r21, Y+58	; 0x3a
     a9e:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
}

//Returns current Angle Set value
float getSetAngle(void){
    return getMotorSetPosition(&motors[ANGLE_MOTOR]);
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <getSetTilt>:
        ie. 180 +offset  => 180 + +90 = 270 degrees
    */
}

float getMotorSetPosition(volatile motor *m){
    float aoffset = m->angle_correction(m->set_length);
     aa8:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <motors+0xb4>
     aac:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <motors+0xb5>
     ab0:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <motors+0x89>
     ab4:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <motors+0x8a>
     ab8:	09 95       	icall
    return m->angle_reference + aoffset;
     aba:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <motors+0x9b>
     abe:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <motors+0x9c>
     ac2:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <motors+0x9d>
     ac6:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <motors+0x9e>
     aca:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__addsf3>
}

//Returns current Tilt Set value  
float getSetTilt(void){
    return getMotorSetPosition(&motors[TILT_MOTOR]);
}
     ace:	08 95       	ret

00000ad0 <setAngle>:

//This function is used to set wanted Angle value
uint8_t setAngle(float angle){
     ad0:	8f 92       	push	r8
     ad2:	9f 92       	push	r9
     ad4:	af 92       	push	r10
     ad6:	bf 92       	push	r11
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	6b 01       	movw	r12, r22
     ae2:	7c 01       	movw	r14, r24
    Private function which sets a new position to given motor.
    Motor min/max angles are checked and min,max values are used
    if new angle is lower or higher
*/
uint8_t setMotorPosition(volatile motor *m, float angle){
    m->status = WAITING;
     ae4:	86 e0       	ldi	r24, 0x06	; 6
     ae6:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <motors+0x4f>
    //vefify that angle is in between valid range
    if (angle >= m->min_angle && angle <= (m->min_angle + m->angle_range)){
     aea:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <motors+0x2f>
     aee:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <motors+0x30>
     af2:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <motors+0x31>
     af6:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <motors+0x32>
     afa:	c7 01       	movw	r24, r14
     afc:	b6 01       	movw	r22, r12
     afe:	0e 94 c4 28 	call	0x5188	; 0x5188 <__gesf2>
     b02:	87 fd       	sbrc	r24, 7
     b04:	1b c0       	rjmp	.+54     	; 0xb3c <setAngle+0x6c>
     b06:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <motors+0x2f>
     b0a:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <motors+0x30>
     b0e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <motors+0x31>
     b12:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <motors+0x32>
     b16:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <motors+0x33>
     b1a:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <motors+0x34>
     b1e:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <motors+0x35>
     b22:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <motors+0x36>
     b26:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     b2a:	9b 01       	movw	r18, r22
     b2c:	ac 01       	movw	r20, r24
     b2e:	c7 01       	movw	r24, r14
     b30:	b6 01       	movw	r22, r12
     b32:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__cmpsf2>
     b36:	18 16       	cp	r1, r24
     b38:	0c f0       	brlt	.+2      	; 0xb3c <setAngle+0x6c>
     b3a:	cc c0       	rjmp	.+408    	; 0xcd4 <setAngle+0x204>
            
        return 0;
    }

    //angle is bigger than allowed => use max angle
    if (angle > (m->min_angle + m->angle_range)){
     b3c:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <motors+0x2f>
     b40:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <motors+0x30>
     b44:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <motors+0x31>
     b48:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <motors+0x32>
     b4c:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <motors+0x33>
     b50:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <motors+0x34>
     b54:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <motors+0x35>
     b58:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <motors+0x36>
     b5c:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     b60:	9b 01       	movw	r18, r22
     b62:	ac 01       	movw	r20, r24
     b64:	c7 01       	movw	r24, r14
     b66:	b6 01       	movw	r22, r12
     b68:	0e 94 c4 28 	call	0x5188	; 0x5188 <__gesf2>
     b6c:	18 16       	cp	r1, r24
     b6e:	0c f4       	brge	.+2      	; 0xb72 <setAngle+0xa2>
     b70:	57 c0       	rjmp	.+174    	; 0xc20 <setAngle+0x150>
            newlen = m->actuator_max_limit - 1;
        }
        m->set_length = newlen; 
    }
    //angle is smaller than allowed => use minimum angle
    else if (angle < m->min_angle){
     b72:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <motors+0x2f>
     b76:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <motors+0x30>
     b7a:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <motors+0x31>
     b7e:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <motors+0x32>
     b82:	c7 01       	movw	r24, r14
     b84:	b6 01       	movw	r22, r12
     b86:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__cmpsf2>
     b8a:	87 fd       	sbrc	r24, 7
     b8c:	7e c0       	rjmp	.+252    	; 0xc8a <setAngle+0x1ba>
        if (newlen < m->actuator_min_limit){
            newlen = m->actuator_min_limit + 1; 
        }
        m->set_length = newlen;
    }
    m->timeout_value = 0;
     b8e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <motors+0x4b>
     b92:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <motors+0x4c>
     b96:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <motors+0x4d>
     b9a:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <motors+0x4e>
    return 1;
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
     b9e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <motors+0x23>
     ba2:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <motors+0x24>
     ba6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <motors+0x25>
     baa:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <motors+0x26>
     bae:	28 17       	cp	r18, r24
     bb0:	39 07       	cpc	r19, r25
     bb2:	38 f1       	brcs	.+78     	; 0xc02 <setAngle+0x132>
         m->move_length_mm = m->set_length - m->current_length;
     }
     else if (m->current_length > m->set_length){
     bb4:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <motors+0x23>
     bb8:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <motors+0x24>
     bbc:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <motors+0x25>
     bc0:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <motors+0x26>
     bc4:	82 17       	cp	r24, r18
     bc6:	93 07       	cpc	r25, r19
     bc8:	70 f4       	brcc	.+28     	; 0xbe6 <setAngle+0x116>
         m->move_length_mm = m->current_length - m->set_length;
     bca:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <motors+0x23>
     bce:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <motors+0x24>
     bd2:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <motors+0x25>
     bd6:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <motors+0x26>
     bda:	82 1b       	sub	r24, r18
     bdc:	93 0b       	sbc	r25, r19
     bde:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <motors+0x63>
     be2:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <motors+0x62>
        m->set_length = newlen;
    }
    m->timeout_value = 0;
    
    calculateMoveLength(m);
    systick = 0;
     be6:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <__data_end+0x1>
     bea:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <__data_end>
    return 1;
     bee:	81 e0       	ldi	r24, 0x01	; 1
}

//This function is used to set wanted Angle value
uint8_t setAngle(float angle){
    return setMotorPosition(&motors[ANGLE_MOTOR], angle);
}
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	df 90       	pop	r13
     bf6:	cf 90       	pop	r12
     bf8:	bf 90       	pop	r11
     bfa:	af 90       	pop	r10
     bfc:	9f 90       	pop	r9
     bfe:	8f 90       	pop	r8
     c00:	08 95       	ret
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
         m->move_length_mm = m->set_length - m->current_length;
     c02:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <motors+0x25>
     c06:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <motors+0x26>
     c0a:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <motors+0x23>
     c0e:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <motors+0x24>
     c12:	82 1b       	sub	r24, r18
     c14:	93 0b       	sbc	r25, r19
     c16:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <motors+0x63>
     c1a:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <motors+0x62>
     c1e:	e3 cf       	rjmp	.-58     	; 0xbe6 <setAngle+0x116>
        return 0;
    }

    //angle is bigger than allowed => use max angle
    if (angle > (m->min_angle + m->angle_range)){
        uint16_t newlen = m->angle_to_length((m->min_angle+m->angle_range) - m->angle_reference); 
     c20:	e0 90 67 01 	lds	r14, 0x0167	; 0x800167 <motors+0x58>
     c24:	f0 90 68 01 	lds	r15, 0x0168	; 0x800168 <motors+0x59>
     c28:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <motors+0x2f>
     c2c:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <motors+0x30>
     c30:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <motors+0x31>
     c34:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <motors+0x32>
     c38:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <motors+0x33>
     c3c:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <motors+0x34>
     c40:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <motors+0x35>
     c44:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <motors+0x36>
     c48:	80 90 46 01 	lds	r8, 0x0146	; 0x800146 <motors+0x37>
     c4c:	90 90 47 01 	lds	r9, 0x0147	; 0x800147 <motors+0x38>
     c50:	a0 90 48 01 	lds	r10, 0x0148	; 0x800148 <motors+0x39>
     c54:	b0 90 49 01 	lds	r11, 0x0149	; 0x800149 <motors+0x3a>
     c58:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     c5c:	a5 01       	movw	r20, r10
     c5e:	94 01       	movw	r18, r8
     c60:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     c64:	f7 01       	movw	r30, r14
     c66:	09 95       	icall
        if (newlen > m->actuator_max_limit){
     c68:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <motors+0x45>
     c6c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <motors+0x46>
     c70:	28 17       	cp	r18, r24
     c72:	39 07       	cpc	r19, r25
     c74:	28 f4       	brcc	.+10     	; 0xc80 <setAngle+0x1b0>
            newlen = m->actuator_max_limit - 1;
     c76:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <motors+0x45>
     c7a:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <motors+0x46>
     c7e:	01 97       	sbiw	r24, 0x01	; 1
    else if (angle < m->min_angle){
        uint16_t newlen = m->angle_to_length(m->min_angle - m->angle_reference); 
        if (newlen < m->actuator_min_limit){
            newlen = m->actuator_min_limit + 1; 
        }
        m->set_length = newlen;
     c80:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <motors+0x26>
     c84:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <motors+0x25>
     c88:	82 cf       	rjmp	.-252    	; 0xb8e <setAngle+0xbe>
        }
        m->set_length = newlen; 
    }
    //angle is smaller than allowed => use minimum angle
    else if (angle < m->min_angle){
        uint16_t newlen = m->angle_to_length(m->min_angle - m->angle_reference); 
     c8a:	e0 90 67 01 	lds	r14, 0x0167	; 0x800167 <motors+0x58>
     c8e:	f0 90 68 01 	lds	r15, 0x0168	; 0x800168 <motors+0x59>
     c92:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <motors+0x2f>
     c96:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <motors+0x30>
     c9a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <motors+0x31>
     c9e:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <motors+0x32>
     ca2:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <motors+0x37>
     ca6:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <motors+0x38>
     caa:	40 91 48 01 	lds	r20, 0x0148	; 0x800148 <motors+0x39>
     cae:	50 91 49 01 	lds	r21, 0x0149	; 0x800149 <motors+0x3a>
     cb2:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     cb6:	f7 01       	movw	r30, r14
     cb8:	09 95       	icall
        if (newlen < m->actuator_min_limit){
     cba:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <motors+0x43>
     cbe:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <motors+0x44>
     cc2:	82 17       	cp	r24, r18
     cc4:	93 07       	cpc	r25, r19
     cc6:	e0 f6       	brcc	.-72     	; 0xc80 <setAngle+0x1b0>
            newlen = m->actuator_min_limit + 1; 
     cc8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <motors+0x43>
     ccc:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <motors+0x44>
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	d6 cf       	rjmp	.-84     	; 0xc80 <setAngle+0x1b0>
*/
uint8_t setMotorPosition(volatile motor *m, float angle){
    m->status = WAITING;
    //vefify that angle is in between valid range
    if (angle >= m->min_angle && angle <= (m->min_angle + m->angle_range)){
        m->timeout_value = 0; //Clear timeout value on every angle change
     cd4:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <motors+0x4b>
     cd8:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <motors+0x4c>
     cdc:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <motors+0x4d>
     ce0:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <motors+0x4e>
        uint16_t len = m->angle_to_length(angle - m->angle_reference);
     ce4:	a0 90 67 01 	lds	r10, 0x0167	; 0x800167 <motors+0x58>
     ce8:	b0 90 68 01 	lds	r11, 0x0168	; 0x800168 <motors+0x59>
     cec:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <motors+0x37>
     cf0:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <motors+0x38>
     cf4:	40 91 48 01 	lds	r20, 0x0148	; 0x800148 <motors+0x39>
     cf8:	50 91 49 01 	lds	r21, 0x0149	; 0x800149 <motors+0x3a>
     cfc:	c7 01       	movw	r24, r14
     cfe:	b6 01       	movw	r22, r12
     d00:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     d04:	f5 01       	movw	r30, r10
     d06:	09 95       	icall
    
        //fix hysteresis offset
        if (len > m->set_length){ //Setting bigger angle
     d08:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <motors+0x25>
     d0c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <motors+0x26>
     d10:	28 17       	cp	r18, r24
     d12:	39 07       	cpc	r19, r25
     d14:	b0 f5       	brcc	.+108    	; 0xd82 <setAngle+0x2b2>
            uint16_t newlen = len + (m->length_hysteresis);
     d16:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <motors+0x2d>
     d1a:	82 0f       	add	r24, r18
     d1c:	91 1d       	adc	r25, r1
            if (newlen > m->actuator_max_limit){
     d1e:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <motors+0x45>
     d22:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <motors+0x46>
     d26:	28 17       	cp	r18, r24
     d28:	39 07       	cpc	r19, r25
     d2a:	08 f4       	brcc	.+2      	; 0xd2e <setAngle+0x25e>
     d2c:	4b c0       	rjmp	.+150    	; 0xdc4 <setAngle+0x2f4>
        else{ //Setting lower angle
            uint16_t newlen = len - (m->length_hysteresis);
            if (newlen < m->actuator_min_limit){
                newlen = m->actuator_min_limit+1;
            }
            m->set_length = newlen;
     d2e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <motors+0x26>
     d32:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <motors+0x25>
    return 1;
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
     d36:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <motors+0x23>
     d3a:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <motors+0x24>
     d3e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <motors+0x25>
     d42:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <motors+0x26>
     d46:	28 17       	cp	r18, r24
     d48:	39 07       	cpc	r19, r25
     d4a:	60 f1       	brcs	.+88     	; 0xda4 <setAngle+0x2d4>
         m->move_length_mm = m->set_length - m->current_length;
     }
     else if (m->current_length > m->set_length){
     d4c:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <motors+0x23>
     d50:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <motors+0x24>
     d54:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <motors+0x25>
     d58:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <motors+0x26>
     d5c:	82 17       	cp	r24, r18
     d5e:	93 07       	cpc	r25, r19
     d60:	b8 f5       	brcc	.+110    	; 0xdd0 <setAngle+0x300>
         m->move_length_mm = m->current_length - m->set_length;
     d62:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <motors+0x23>
     d66:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <motors+0x24>
     d6a:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <motors+0x25>
     d6e:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <motors+0x26>
     d72:	82 1b       	sub	r24, r18
     d74:	93 0b       	sbc	r25, r19
     d76:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <motors+0x63>
     d7a:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <motors+0x62>
            m->set_length = newlen;
        }

        calculateMoveLength(m);  
            
        return 0;
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	37 cf       	rjmp	.-402    	; 0xbf0 <setAngle+0x120>
                newlen = m->actuator_max_limit-1;
            }
            m->set_length = newlen;
        }
        else{ //Setting lower angle
            uint16_t newlen = len - (m->length_hysteresis);
     d82:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <motors+0x2d>
     d86:	82 1b       	sub	r24, r18
     d88:	91 09       	sbc	r25, r1
            if (newlen < m->actuator_min_limit){
     d8a:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <motors+0x43>
     d8e:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <motors+0x44>
     d92:	82 17       	cp	r24, r18
     d94:	93 07       	cpc	r25, r19
     d96:	58 f6       	brcc	.-106    	; 0xd2e <setAngle+0x25e>
                newlen = m->actuator_min_limit+1;
     d98:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <motors+0x43>
     d9c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <motors+0x44>
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	c5 cf       	rjmp	.-118    	; 0xd2e <setAngle+0x25e>
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
         m->move_length_mm = m->set_length - m->current_length;
     da4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <motors+0x25>
     da8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <motors+0x26>
     dac:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <motors+0x23>
     db0:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <motors+0x24>
     db4:	82 1b       	sub	r24, r18
     db6:	93 0b       	sbc	r25, r19
     db8:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <motors+0x63>
     dbc:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <motors+0x62>
            m->set_length = newlen;
        }

        calculateMoveLength(m);  
            
        return 0;
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	16 cf       	rjmp	.-468    	; 0xbf0 <setAngle+0x120>
    
        //fix hysteresis offset
        if (len > m->set_length){ //Setting bigger angle
            uint16_t newlen = len + (m->length_hysteresis);
            if (newlen > m->actuator_max_limit){
                newlen = m->actuator_max_limit-1;
     dc4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <motors+0x45>
     dc8:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <motors+0x46>
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	af cf       	rjmp	.-162    	; 0xd2e <setAngle+0x25e>
            m->set_length = newlen;
        }

        calculateMoveLength(m);  
            
        return 0;
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	0e cf       	rjmp	.-484    	; 0xbf0 <setAngle+0x120>

00000dd4 <setTilt>:
uint8_t setAngle(float angle){
    return setMotorPosition(&motors[ANGLE_MOTOR], angle);
}

//This function is used to set wanted TILT angle
uint8_t setTilt(float tilt){
     dd4:	8f 92       	push	r8
     dd6:	9f 92       	push	r9
     dd8:	af 92       	push	r10
     dda:	bf 92       	push	r11
     ddc:	cf 92       	push	r12
     dde:	df 92       	push	r13
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	6b 01       	movw	r12, r22
     de6:	7c 01       	movw	r14, r24
    Private function which sets a new position to given motor.
    Motor min/max angles are checked and min,max values are used
    if new angle is lower or higher
*/
uint8_t setMotorPosition(volatile motor *m, float angle){
    m->status = WAITING;
     de8:	86 e0       	ldi	r24, 0x06	; 6
     dea:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <motors+0xb3>
    //vefify that angle is in between valid range
    if (angle >= m->min_angle && angle <= (m->min_angle + m->angle_range)){
     dee:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <motors+0x93>
     df2:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <motors+0x94>
     df6:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <motors+0x95>
     dfa:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <motors+0x96>
     dfe:	c7 01       	movw	r24, r14
     e00:	b6 01       	movw	r22, r12
     e02:	0e 94 c4 28 	call	0x5188	; 0x5188 <__gesf2>
     e06:	87 fd       	sbrc	r24, 7
     e08:	1b c0       	rjmp	.+54     	; 0xe40 <setTilt+0x6c>
     e0a:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <motors+0x93>
     e0e:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <motors+0x94>
     e12:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <motors+0x95>
     e16:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <motors+0x96>
     e1a:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <motors+0x97>
     e1e:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <motors+0x98>
     e22:	40 91 a8 01 	lds	r20, 0x01A8	; 0x8001a8 <motors+0x99>
     e26:	50 91 a9 01 	lds	r21, 0x01A9	; 0x8001a9 <motors+0x9a>
     e2a:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     e2e:	9b 01       	movw	r18, r22
     e30:	ac 01       	movw	r20, r24
     e32:	c7 01       	movw	r24, r14
     e34:	b6 01       	movw	r22, r12
     e36:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__cmpsf2>
     e3a:	18 16       	cp	r1, r24
     e3c:	0c f0       	brlt	.+2      	; 0xe40 <setTilt+0x6c>
     e3e:	cc c0       	rjmp	.+408    	; 0xfd8 <setTilt+0x204>
            
        return 0;
    }

    //angle is bigger than allowed => use max angle
    if (angle > (m->min_angle + m->angle_range)){
     e40:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <motors+0x93>
     e44:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <motors+0x94>
     e48:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <motors+0x95>
     e4c:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <motors+0x96>
     e50:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <motors+0x97>
     e54:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <motors+0x98>
     e58:	40 91 a8 01 	lds	r20, 0x01A8	; 0x8001a8 <motors+0x99>
     e5c:	50 91 a9 01 	lds	r21, 0x01A9	; 0x8001a9 <motors+0x9a>
     e60:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     e64:	9b 01       	movw	r18, r22
     e66:	ac 01       	movw	r20, r24
     e68:	c7 01       	movw	r24, r14
     e6a:	b6 01       	movw	r22, r12
     e6c:	0e 94 c4 28 	call	0x5188	; 0x5188 <__gesf2>
     e70:	18 16       	cp	r1, r24
     e72:	0c f4       	brge	.+2      	; 0xe76 <setTilt+0xa2>
     e74:	57 c0       	rjmp	.+174    	; 0xf24 <setTilt+0x150>
            newlen = m->actuator_max_limit - 1;
        }
        m->set_length = newlen; 
    }
    //angle is smaller than allowed => use minimum angle
    else if (angle < m->min_angle){
     e76:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <motors+0x93>
     e7a:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <motors+0x94>
     e7e:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <motors+0x95>
     e82:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <motors+0x96>
     e86:	c7 01       	movw	r24, r14
     e88:	b6 01       	movw	r22, r12
     e8a:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__cmpsf2>
     e8e:	87 fd       	sbrc	r24, 7
     e90:	7e c0       	rjmp	.+252    	; 0xf8e <setTilt+0x1ba>
        if (newlen < m->actuator_min_limit){
            newlen = m->actuator_min_limit + 1; 
        }
        m->set_length = newlen;
    }
    m->timeout_value = 0;
     e92:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <motors+0xaf>
     e96:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <motors+0xb0>
     e9a:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <motors+0xb1>
     e9e:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <motors+0xb2>
    return 1;
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
     ea2:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <motors+0x87>
     ea6:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <motors+0x88>
     eaa:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <motors+0x89>
     eae:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <motors+0x8a>
     eb2:	28 17       	cp	r18, r24
     eb4:	39 07       	cpc	r19, r25
     eb6:	38 f1       	brcs	.+78     	; 0xf06 <setTilt+0x132>
         m->move_length_mm = m->set_length - m->current_length;
     }
     else if (m->current_length > m->set_length){
     eb8:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <motors+0x87>
     ebc:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <motors+0x88>
     ec0:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <motors+0x89>
     ec4:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <motors+0x8a>
     ec8:	82 17       	cp	r24, r18
     eca:	93 07       	cpc	r25, r19
     ecc:	70 f4       	brcc	.+28     	; 0xeea <setTilt+0x116>
         m->move_length_mm = m->current_length - m->set_length;
     ece:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <motors+0x87>
     ed2:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <motors+0x88>
     ed6:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <motors+0x89>
     eda:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <motors+0x8a>
     ede:	82 1b       	sub	r24, r18
     ee0:	93 0b       	sbc	r25, r19
     ee2:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <motors+0xc7>
     ee6:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <motors+0xc6>
        m->set_length = newlen;
    }
    m->timeout_value = 0;
    
    calculateMoveLength(m);
    systick = 0;
     eea:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <__data_end+0x1>
     eee:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <__data_end>
    return 1;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
}

//This function is used to set wanted TILT angle
uint8_t setTilt(float tilt){
    return setMotorPosition(&motors[TILT_MOTOR], tilt);
}
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	bf 90       	pop	r11
     efe:	af 90       	pop	r10
     f00:	9f 90       	pop	r9
     f02:	8f 90       	pop	r8
     f04:	08 95       	ret
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
         m->move_length_mm = m->set_length - m->current_length;
     f06:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <motors+0x89>
     f0a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <motors+0x8a>
     f0e:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <motors+0x87>
     f12:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <motors+0x88>
     f16:	82 1b       	sub	r24, r18
     f18:	93 0b       	sbc	r25, r19
     f1a:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <motors+0xc7>
     f1e:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <motors+0xc6>
     f22:	e3 cf       	rjmp	.-58     	; 0xeea <setTilt+0x116>
        return 0;
    }

    //angle is bigger than allowed => use max angle
    if (angle > (m->min_angle + m->angle_range)){
        uint16_t newlen = m->angle_to_length((m->min_angle+m->angle_range) - m->angle_reference); 
     f24:	e0 90 cb 01 	lds	r14, 0x01CB	; 0x8001cb <motors+0xbc>
     f28:	f0 90 cc 01 	lds	r15, 0x01CC	; 0x8001cc <motors+0xbd>
     f2c:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <motors+0x93>
     f30:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <motors+0x94>
     f34:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <motors+0x95>
     f38:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <motors+0x96>
     f3c:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <motors+0x97>
     f40:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <motors+0x98>
     f44:	40 91 a8 01 	lds	r20, 0x01A8	; 0x8001a8 <motors+0x99>
     f48:	50 91 a9 01 	lds	r21, 0x01A9	; 0x8001a9 <motors+0x9a>
     f4c:	80 90 aa 01 	lds	r8, 0x01AA	; 0x8001aa <motors+0x9b>
     f50:	90 90 ab 01 	lds	r9, 0x01AB	; 0x8001ab <motors+0x9c>
     f54:	a0 90 ac 01 	lds	r10, 0x01AC	; 0x8001ac <motors+0x9d>
     f58:	b0 90 ad 01 	lds	r11, 0x01AD	; 0x8001ad <motors+0x9e>
     f5c:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
     f60:	a5 01       	movw	r20, r10
     f62:	94 01       	movw	r18, r8
     f64:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     f68:	f7 01       	movw	r30, r14
     f6a:	09 95       	icall
        if (newlen > m->actuator_max_limit){
     f6c:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <motors+0xa9>
     f70:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <motors+0xaa>
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	28 f4       	brcc	.+10     	; 0xf84 <setTilt+0x1b0>
            newlen = m->actuator_max_limit - 1;
     f7a:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <motors+0xa9>
     f7e:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <motors+0xaa>
     f82:	01 97       	sbiw	r24, 0x01	; 1
    else if (angle < m->min_angle){
        uint16_t newlen = m->angle_to_length(m->min_angle - m->angle_reference); 
        if (newlen < m->actuator_min_limit){
            newlen = m->actuator_min_limit + 1; 
        }
        m->set_length = newlen;
     f84:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <motors+0x8a>
     f88:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <motors+0x89>
     f8c:	82 cf       	rjmp	.-252    	; 0xe92 <setTilt+0xbe>
        }
        m->set_length = newlen; 
    }
    //angle is smaller than allowed => use minimum angle
    else if (angle < m->min_angle){
        uint16_t newlen = m->angle_to_length(m->min_angle - m->angle_reference); 
     f8e:	e0 90 cb 01 	lds	r14, 0x01CB	; 0x8001cb <motors+0xbc>
     f92:	f0 90 cc 01 	lds	r15, 0x01CC	; 0x8001cc <motors+0xbd>
     f96:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <motors+0x93>
     f9a:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <motors+0x94>
     f9e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <motors+0x95>
     fa2:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <motors+0x96>
     fa6:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <motors+0x9b>
     faa:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <motors+0x9c>
     fae:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <motors+0x9d>
     fb2:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <motors+0x9e>
     fb6:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
     fba:	f7 01       	movw	r30, r14
     fbc:	09 95       	icall
        if (newlen < m->actuator_min_limit){
     fbe:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <motors+0xa7>
     fc2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <motors+0xa8>
     fc6:	82 17       	cp	r24, r18
     fc8:	93 07       	cpc	r25, r19
     fca:	e0 f6       	brcc	.-72     	; 0xf84 <setTilt+0x1b0>
            newlen = m->actuator_min_limit + 1; 
     fcc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <motors+0xa7>
     fd0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <motors+0xa8>
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	d6 cf       	rjmp	.-84     	; 0xf84 <setTilt+0x1b0>
*/
uint8_t setMotorPosition(volatile motor *m, float angle){
    m->status = WAITING;
    //vefify that angle is in between valid range
    if (angle >= m->min_angle && angle <= (m->min_angle + m->angle_range)){
        m->timeout_value = 0; //Clear timeout value on every angle change
     fd8:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <motors+0xaf>
     fdc:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <motors+0xb0>
     fe0:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <motors+0xb1>
     fe4:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <motors+0xb2>
        uint16_t len = m->angle_to_length(angle - m->angle_reference);
     fe8:	a0 90 cb 01 	lds	r10, 0x01CB	; 0x8001cb <motors+0xbc>
     fec:	b0 90 cc 01 	lds	r11, 0x01CC	; 0x8001cc <motors+0xbd>
     ff0:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <motors+0x9b>
     ff4:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <motors+0x9c>
     ff8:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <motors+0x9d>
     ffc:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <motors+0x9e>
    1000:	c7 01       	movw	r24, r14
    1002:	b6 01       	movw	r22, r12
    1004:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
    1008:	f5 01       	movw	r30, r10
    100a:	09 95       	icall
    
        //fix hysteresis offset
        if (len > m->set_length){ //Setting bigger angle
    100c:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <motors+0x89>
    1010:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <motors+0x8a>
    1014:	28 17       	cp	r18, r24
    1016:	39 07       	cpc	r19, r25
    1018:	b0 f5       	brcc	.+108    	; 0x1086 <setTilt+0x2b2>
            uint16_t newlen = len + (m->length_hysteresis);
    101a:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <motors+0x91>
    101e:	82 0f       	add	r24, r18
    1020:	91 1d       	adc	r25, r1
            if (newlen > m->actuator_max_limit){
    1022:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <motors+0xa9>
    1026:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <motors+0xaa>
    102a:	28 17       	cp	r18, r24
    102c:	39 07       	cpc	r19, r25
    102e:	08 f4       	brcc	.+2      	; 0x1032 <setTilt+0x25e>
    1030:	4b c0       	rjmp	.+150    	; 0x10c8 <setTilt+0x2f4>
        else{ //Setting lower angle
            uint16_t newlen = len - (m->length_hysteresis);
            if (newlen < m->actuator_min_limit){
                newlen = m->actuator_min_limit+1;
            }
            m->set_length = newlen;
    1032:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <motors+0x8a>
    1036:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <motors+0x89>
    return 1;
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
    103a:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <motors+0x87>
    103e:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <motors+0x88>
    1042:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <motors+0x89>
    1046:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <motors+0x8a>
    104a:	28 17       	cp	r18, r24
    104c:	39 07       	cpc	r19, r25
    104e:	60 f1       	brcs	.+88     	; 0x10a8 <setTilt+0x2d4>
         m->move_length_mm = m->set_length - m->current_length;
     }
     else if (m->current_length > m->set_length){
    1050:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <motors+0x87>
    1054:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <motors+0x88>
    1058:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <motors+0x89>
    105c:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <motors+0x8a>
    1060:	82 17       	cp	r24, r18
    1062:	93 07       	cpc	r25, r19
    1064:	b8 f5       	brcc	.+110    	; 0x10d4 <setTilt+0x300>
         m->move_length_mm = m->current_length - m->set_length;
    1066:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <motors+0x87>
    106a:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <motors+0x88>
    106e:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <motors+0x89>
    1072:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <motors+0x8a>
    1076:	82 1b       	sub	r24, r18
    1078:	93 0b       	sbc	r25, r19
    107a:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <motors+0xc7>
    107e:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <motors+0xc6>
            m->set_length = newlen;
        }

        calculateMoveLength(m);  
            
        return 0;
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	37 cf       	rjmp	.-402    	; 0xef4 <setTilt+0x120>
                newlen = m->actuator_max_limit-1;
            }
            m->set_length = newlen;
        }
        else{ //Setting lower angle
            uint16_t newlen = len - (m->length_hysteresis);
    1086:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <motors+0x91>
    108a:	82 1b       	sub	r24, r18
    108c:	91 09       	sbc	r25, r1
            if (newlen < m->actuator_min_limit){
    108e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <motors+0xa7>
    1092:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <motors+0xa8>
    1096:	82 17       	cp	r24, r18
    1098:	93 07       	cpc	r25, r19
    109a:	58 f6       	brcc	.-106    	; 0x1032 <setTilt+0x25e>
                newlen = m->actuator_min_limit+1;
    109c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <motors+0xa7>
    10a0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <motors+0xa8>
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	c5 cf       	rjmp	.-118    	; 0x1032 <setTilt+0x25e>
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
         m->move_length_mm = m->set_length - m->current_length;
    10a8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <motors+0x89>
    10ac:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <motors+0x8a>
    10b0:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <motors+0x87>
    10b4:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <motors+0x88>
    10b8:	82 1b       	sub	r24, r18
    10ba:	93 0b       	sbc	r25, r19
    10bc:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <motors+0xc7>
    10c0:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <motors+0xc6>
            m->set_length = newlen;
        }

        calculateMoveLength(m);  
            
        return 0;
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	16 cf       	rjmp	.-468    	; 0xef4 <setTilt+0x120>
    
        //fix hysteresis offset
        if (len > m->set_length){ //Setting bigger angle
            uint16_t newlen = len + (m->length_hysteresis);
            if (newlen > m->actuator_max_limit){
                newlen = m->actuator_max_limit-1;
    10c8:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <motors+0xa9>
    10cc:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <motors+0xaa>
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	af cf       	rjmp	.-162    	; 0x1032 <setTilt+0x25e>
            m->set_length = newlen;
        }

        calculateMoveLength(m);  
            
        return 0;
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	0e cf       	rjmp	.-484    	; 0xef4 <setTilt+0x120>

000010d8 <setTiltMotorLength>:
        motors[i].set_length = motors[i].current_length;
    }
}

uint8_t setMotorLength(volatile motor *m, uint16_t length){
    if (length >= m->actuator_min_limit && length <= m->actuator_max_limit){
    10d8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <motors+0xa7>
    10dc:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <motors+0xa8>
    10e0:	82 17       	cp	r24, r18
    10e2:	93 07       	cpc	r25, r19
    10e4:	38 f1       	brcs	.+78     	; 0x1134 <setTiltMotorLength+0x5c>
    10e6:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <motors+0xa9>
    10ea:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <motors+0xaa>
    10ee:	28 17       	cp	r18, r24
    10f0:	39 07       	cpc	r19, r25
    10f2:	00 f1       	brcs	.+64     	; 0x1134 <setTiltMotorLength+0x5c>
        //Execute move only if it is outside of hysteresis window
        if (m->current_length > m->set_length + m->length_hysteresis){
    10f4:	40 91 96 01 	lds	r20, 0x0196	; 0x800196 <motors+0x87>
    10f8:	50 91 97 01 	lds	r21, 0x0197	; 0x800197 <motors+0x88>
    10fc:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <motors+0x89>
    1100:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <motors+0x8a>
    1104:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <motors+0x91>
    1108:	26 0f       	add	r18, r22
    110a:	31 1d       	adc	r19, r1
    110c:	24 17       	cp	r18, r20
    110e:	35 07       	cpc	r19, r21
    1110:	78 f4       	brcc	.+30     	; 0x1130 <setTiltMotorLength+0x58>
            if (m->current_length < m->set_length - m->length_hysteresis){ 
    1112:	40 91 96 01 	lds	r20, 0x0196	; 0x800196 <motors+0x87>
    1116:	50 91 97 01 	lds	r21, 0x0197	; 0x800197 <motors+0x88>
    111a:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <motors+0x89>
    111e:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <motors+0x8a>
    1122:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <motors+0x91>
    1126:	26 1b       	sub	r18, r22
    1128:	31 09       	sbc	r19, r1
    112a:	42 17       	cp	r20, r18
    112c:	53 07       	cpc	r21, r19
    112e:	20 f0       	brcs	.+8      	; 0x1138 <setTiltMotorLength+0x60>
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
         m->move_length_mm = m->set_length - m->current_length;
     }
     else if (m->current_length > m->set_length){
         m->move_length_mm = m->current_length - m->set_length;
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	08 95       	ret
            }
        }
        return 0;
    }
    else{
        return 1;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    return setMotorPosition(&motors[TILT_MOTOR], tilt);
}

uint8_t setTiltMotorLength(uint16_t length){
    return setMotorLength(&motors[TILT_MOTOR], length);
}
    1136:	08 95       	ret
uint8_t setMotorLength(volatile motor *m, uint16_t length){
    if (length >= m->actuator_min_limit && length <= m->actuator_max_limit){
        //Execute move only if it is outside of hysteresis window
        if (m->current_length > m->set_length + m->length_hysteresis){
            if (m->current_length < m->set_length - m->length_hysteresis){ 
                m->set_length = length;
    1138:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <motors+0x8a>
    113c:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <motors+0x89>
                m->status = WAITING;
    1140:	86 e0       	ldi	r24, 0x06	; 6
    1142:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <motors+0xb3>
    return 1;
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
    1146:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <motors+0x87>
    114a:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <motors+0x88>
    114e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <motors+0x89>
    1152:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <motors+0x8a>
    1156:	28 17       	cp	r18, r24
    1158:	39 07       	cpc	r19, r25
    115a:	d0 f0       	brcs	.+52     	; 0x1190 <setTiltMotorLength+0xb8>
         m->move_length_mm = m->set_length - m->current_length;
     }
     else if (m->current_length > m->set_length){
    115c:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <motors+0x87>
    1160:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <motors+0x88>
    1164:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <motors+0x89>
    1168:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <motors+0x8a>
    116c:	82 17       	cp	r24, r18
    116e:	93 07       	cpc	r25, r19
    1170:	f8 f6       	brcc	.-66     	; 0x1130 <setTiltMotorLength+0x58>
         m->move_length_mm = m->current_length - m->set_length;
    1172:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <motors+0x87>
    1176:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <motors+0x88>
    117a:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <motors+0x89>
    117e:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <motors+0x8a>
    1182:	82 1b       	sub	r24, r18
    1184:	93 0b       	sbc	r25, r19
    1186:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <motors+0xc7>
    118a:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <motors+0xc6>
    118e:	d0 cf       	rjmp	.-96     	; 0x1130 <setTiltMotorLength+0x58>
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
         m->move_length_mm = m->set_length - m->current_length;
    1190:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <motors+0x89>
    1194:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <motors+0x8a>
    1198:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <motors+0x87>
    119c:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <motors+0x88>
    11a0:	82 1b       	sub	r24, r18
    11a2:	93 0b       	sbc	r25, r19
    11a4:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <motors+0xc7>
    11a8:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <motors+0xc6>
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	08 95       	ret

000011b0 <setAngleMotorLength>:
        motors[i].set_length = motors[i].current_length;
    }
}

uint8_t setMotorLength(volatile motor *m, uint16_t length){
    if (length >= m->actuator_min_limit && length <= m->actuator_max_limit){
    11b0:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <motors+0x43>
    11b4:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <motors+0x44>
    11b8:	82 17       	cp	r24, r18
    11ba:	93 07       	cpc	r25, r19
    11bc:	38 f1       	brcs	.+78     	; 0x120c <setAngleMotorLength+0x5c>
    11be:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <motors+0x45>
    11c2:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <motors+0x46>
    11c6:	28 17       	cp	r18, r24
    11c8:	39 07       	cpc	r19, r25
    11ca:	00 f1       	brcs	.+64     	; 0x120c <setAngleMotorLength+0x5c>
        //Execute move only if it is outside of hysteresis window
        if (m->current_length > m->set_length + m->length_hysteresis){
    11cc:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <motors+0x23>
    11d0:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <motors+0x24>
    11d4:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <motors+0x25>
    11d8:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <motors+0x26>
    11dc:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <motors+0x2d>
    11e0:	26 0f       	add	r18, r22
    11e2:	31 1d       	adc	r19, r1
    11e4:	24 17       	cp	r18, r20
    11e6:	35 07       	cpc	r19, r21
    11e8:	78 f4       	brcc	.+30     	; 0x1208 <setAngleMotorLength+0x58>
            if (m->current_length < m->set_length - m->length_hysteresis){ 
    11ea:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <motors+0x23>
    11ee:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <motors+0x24>
    11f2:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <motors+0x25>
    11f6:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <motors+0x26>
    11fa:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <motors+0x2d>
    11fe:	26 1b       	sub	r18, r22
    1200:	31 09       	sbc	r19, r1
    1202:	42 17       	cp	r20, r18
    1204:	53 07       	cpc	r21, r19
    1206:	20 f0       	brcs	.+8      	; 0x1210 <setAngleMotorLength+0x60>
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
         m->move_length_mm = m->set_length - m->current_length;
     }
     else if (m->current_length > m->set_length){
         m->move_length_mm = m->current_length - m->set_length;
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	08 95       	ret
            }
        }
        return 0;
    }
    else{
        return 1;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    return setMotorLength(&motors[TILT_MOTOR], length);
}

uint8_t setAngleMotorLength(uint16_t length){
    return setMotorLength(&motors[ANGLE_MOTOR], length);
}
    120e:	08 95       	ret
uint8_t setMotorLength(volatile motor *m, uint16_t length){
    if (length >= m->actuator_min_limit && length <= m->actuator_max_limit){
        //Execute move only if it is outside of hysteresis window
        if (m->current_length > m->set_length + m->length_hysteresis){
            if (m->current_length < m->set_length - m->length_hysteresis){ 
                m->set_length = length;
    1210:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <motors+0x26>
    1214:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <motors+0x25>
                m->status = WAITING;
    1218:	86 e0       	ldi	r24, 0x06	; 6
    121a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <motors+0x4f>
    return 1;
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
    121e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <motors+0x23>
    1222:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <motors+0x24>
    1226:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <motors+0x25>
    122a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <motors+0x26>
    122e:	28 17       	cp	r18, r24
    1230:	39 07       	cpc	r19, r25
    1232:	d0 f0       	brcs	.+52     	; 0x1268 <setAngleMotorLength+0xb8>
         m->move_length_mm = m->set_length - m->current_length;
     }
     else if (m->current_length > m->set_length){
    1234:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <motors+0x23>
    1238:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <motors+0x24>
    123c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <motors+0x25>
    1240:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <motors+0x26>
    1244:	82 17       	cp	r24, r18
    1246:	93 07       	cpc	r25, r19
    1248:	f8 f6       	brcc	.-66     	; 0x1208 <setAngleMotorLength+0x58>
         m->move_length_mm = m->current_length - m->set_length;
    124a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <motors+0x23>
    124e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <motors+0x24>
    1252:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <motors+0x25>
    1256:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <motors+0x26>
    125a:	82 1b       	sub	r24, r18
    125c:	93 0b       	sbc	r25, r19
    125e:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <motors+0x63>
    1262:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <motors+0x62>
    1266:	d0 cf       	rjmp	.-96     	; 0x1208 <setAngleMotorLength+0x58>
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
         m->move_length_mm = m->set_length - m->current_length;
    1268:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <motors+0x25>
    126c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <motors+0x26>
    1270:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <motors+0x23>
    1274:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <motors+0x24>
    1278:	82 1b       	sub	r24, r18
    127a:	93 0b       	sbc	r25, r19
    127c:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <motors+0x63>
    1280:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <motors+0x62>
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	08 95       	ret

00001288 <getAngleMotorStatus>:
    return setMotorLength(&motors[ANGLE_MOTOR], length);
}

//Returns Angle motor status  
motor_status getAngleMotorStatus(void){
    return motors[ANGLE_MOTOR].status;
    1288:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <motors+0x4f>
}
    128c:	08 95       	ret

0000128e <getTiltMotorStatus>:

//Returns Tilt motor status,   
motor_status getTiltMotorStatus(void){
    return motors[TILT_MOTOR].status;
    128e:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <motors+0xb3>
}
    1292:	08 95       	ret

00001294 <getTiltMotorAVGcurrent>:
uint16_t getAngleMoveLength(void){
    return getMotorMoveLength(&motors[ANGLE_MOTOR]);
}

float getMotorAVGcurrent(volatile motor *m){
    return m->avg_move_current;
    1294:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <motors+0xbe>
    1298:	70 91 ce 01 	lds	r23, 0x01CE	; 0x8001ce <motors+0xbf>
    129c:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <motors+0xc0>
    12a0:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <motors+0xc1>
    return motors[TILT_MOTOR].status;
}

float getTiltMotorAVGcurrent(void){
    return getMotorAVGcurrent(&motors[TILT_MOTOR]);
}
    12a4:	08 95       	ret

000012a6 <getAngleMotorAVGcurrent>:
uint16_t getAngleMoveLength(void){
    return getMotorMoveLength(&motors[ANGLE_MOTOR]);
}

float getMotorAVGcurrent(volatile motor *m){
    return m->avg_move_current;
    12a6:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <motors+0x5a>
    12aa:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <motors+0x5b>
    12ae:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <motors+0x5c>
    12b2:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <motors+0x5d>
    return getMotorAVGcurrent(&motors[TILT_MOTOR]);
}

float getAngleMotorAVGcurrent(void){
    return getMotorAVGcurrent(&motors[ANGLE_MOTOR]);
}
    12b6:	08 95       	ret

000012b8 <getTiltMotorMoveSpeed>:
float getMotorAVGcurrent(volatile motor *m){
    return m->avg_move_current;
}

float getMotorMoveSpeed(volatile motor *m){
    return m->move_speed_mm;
    12b8:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <motors+0xc2>
    12bc:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <motors+0xc3>
    12c0:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <motors+0xc4>
    12c4:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <motors+0xc5>
    return getMotorAVGcurrent(&motors[ANGLE_MOTOR]);
}

float getTiltMotorMoveSpeed(void){
    return getMotorMoveSpeed(&motors[TILT_MOTOR]);
}
    12c8:	08 95       	ret

000012ca <getAngleMotorMoveSpeed>:
float getMotorAVGcurrent(volatile motor *m){
    return m->avg_move_current;
}

float getMotorMoveSpeed(volatile motor *m){
    return m->move_speed_mm;
    12ca:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <motors+0x5e>
    12ce:	70 91 6e 01 	lds	r23, 0x016E	; 0x80016e <motors+0x5f>
    12d2:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <motors+0x60>
    12d6:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <motors+0x61>
    return getMotorMoveSpeed(&motors[TILT_MOTOR]);
}

float getAngleMotorMoveSpeed(void){
    return getMotorMoveSpeed(&motors[ANGLE_MOTOR]);
}
    12da:	08 95       	ret

000012dc <getTiltMoveLength>:
float getMotorMoveSpeed(volatile motor *m){
    return m->move_speed_mm;
}

uint16_t getMotorMoveLength(volatile motor *m){
    return m->move_length_mm;
    12dc:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <motors+0xc6>
    12e0:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <motors+0xc7>
    return getMotorMoveSpeed(&motors[ANGLE_MOTOR]);
}

uint16_t getTiltMoveLength(void){
    return getMotorMoveLength(&motors[TILT_MOTOR]);
}
    12e4:	08 95       	ret

000012e6 <getAngleMoveLength>:
float getMotorMoveSpeed(volatile motor *m){
    return m->move_speed_mm;
}

uint16_t getMotorMoveLength(volatile motor *m){
    return m->move_length_mm;
    12e6:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <motors+0x62>
    12ea:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <motors+0x63>
    return getMotorMoveLength(&motors[TILT_MOTOR]);
}

uint16_t getAngleMoveLength(void){
    return getMotorMoveLength(&motors[ANGLE_MOTOR]);
}
    12ee:	08 95       	ret

000012f0 <getMotorAVGcurrent>:

float getMotorAVGcurrent(volatile motor *m){
    return m->avg_move_current;
    12f0:	fc 01       	movw	r30, r24
    12f2:	e6 5a       	subi	r30, 0xA6	; 166
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	60 81       	ld	r22, Z
    12f8:	71 81       	ldd	r23, Z+1	; 0x01
    12fa:	82 81       	ldd	r24, Z+2	; 0x02
    12fc:	93 81       	ldd	r25, Z+3	; 0x03
}
    12fe:	08 95       	ret

00001300 <getMotorMoveSpeed>:

float getMotorMoveSpeed(volatile motor *m){
    return m->move_speed_mm;
    1300:	fc 01       	movw	r30, r24
    1302:	e2 5a       	subi	r30, 0xA2	; 162
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	60 81       	ld	r22, Z
    1308:	71 81       	ldd	r23, Z+1	; 0x01
    130a:	82 81       	ldd	r24, Z+2	; 0x02
    130c:	93 81       	ldd	r25, Z+3	; 0x03
}
    130e:	08 95       	ret

00001310 <getMotorMoveLength>:

uint16_t getMotorMoveLength(volatile motor *m){
    return m->move_length_mm;
    1310:	fc 01       	movw	r30, r24
    1312:	ee 59       	subi	r30, 0x9E	; 158
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	80 81       	ld	r24, Z
    1318:	91 81       	ldd	r25, Z+1	; 0x01
}
    131a:	08 95       	ret

0000131c <getMotorPosition>:


//returns motor final calculated position in degrees
float getMotorPosition(volatile motor *m){
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	ec 01       	movw	r28, r24
    float aoffset = m->angle_correction(m->current_length);
    1322:	fc 01       	movw	r30, r24
    1324:	e0 5b       	subi	r30, 0xB0	; 176
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	01 90       	ld	r0, Z+
    132a:	f0 81       	ld	r31, Z
    132c:	e0 2d       	mov	r30, r0
    132e:	8b a1       	ldd	r24, Y+35	; 0x23
    1330:	9c a1       	ldd	r25, Y+36	; 0x24
    1332:	09 95       	icall
    1334:	9b 01       	movw	r18, r22
    1336:	ac 01       	movw	r20, r24
    return m->angle_reference + aoffset;
    1338:	6f a9       	ldd	r22, Y+55	; 0x37
    133a:	78 ad       	ldd	r23, Y+56	; 0x38
    133c:	89 ad       	ldd	r24, Y+57	; 0x39
    133e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1340:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
        90 when actuator is at max position

        ie. 180 + offset => 180 + -90 = 90  degrees
        ie. 180 +offset  => 180 + +90 = 270 degrees
    */
}
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	08 95       	ret

0000134a <getMotorSetPosition>:

float getMotorSetPosition(volatile motor *m){
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	ec 01       	movw	r28, r24
    float aoffset = m->angle_correction(m->set_length);
    1350:	fc 01       	movw	r30, r24
    1352:	e0 5b       	subi	r30, 0xB0	; 176
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	01 90       	ld	r0, Z+
    1358:	f0 81       	ld	r31, Z
    135a:	e0 2d       	mov	r30, r0
    135c:	8d a1       	ldd	r24, Y+37	; 0x25
    135e:	9e a1       	ldd	r25, Y+38	; 0x26
    1360:	09 95       	icall
    1362:	9b 01       	movw	r18, r22
    1364:	ac 01       	movw	r20, r24
    return m->angle_reference + aoffset;
    1366:	6f a9       	ldd	r22, Y+55	; 0x37
    1368:	78 ad       	ldd	r23, Y+56	; 0x38
    136a:	89 ad       	ldd	r24, Y+57	; 0x39
    136c:	9a ad       	ldd	r25, Y+58	; 0x3a
    136e:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
}
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <measureActuatorCurrent>:

void measureActuatorCurrent(volatile motor *m){
    1378:	a0 e0       	ldi	r26, 0x00	; 0
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e2 ec       	ldi	r30, 0xC2	; 194
    137e:	f9 e0       	ldi	r31, 0x09	; 9
    1380:	0c 94 de 29 	jmp	0x53bc	; 0x53bc <__prologue_saves__+0x14>
    1384:	ec 01       	movw	r28, r24
    uint16_t voltage = AVGVoltage(m->actuator_current_adc_channel, 0x40, 2);
    1386:	88 a1       	ldd	r24, Y+32	; 0x20
    1388:	42 e0       	ldi	r20, 0x02	; 2
    138a:	60 e4       	ldi	r22, 0x40	; 64
    138c:	96 d8       	rcall	.-3796   	; 0x4ba <AVGVoltage>
    138e:	8c 01       	movw	r16, r24
    m->avg_move_current = (m->avg_move_current*9.0 + voltage) / 10.0; //one sample is effecting 1/5    
    1390:	c6 5a       	subi	r28, 0xA6	; 166
    1392:	df 4f       	sbci	r29, 0xFF	; 255
    1394:	68 81       	ld	r22, Y
    1396:	79 81       	ldd	r23, Y+1	; 0x01
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	9b 81       	ldd	r25, Y+3	; 0x03
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	40 e1       	ldi	r20, 0x10	; 16
    13a2:	51 e4       	ldi	r21, 0x41	; 65
    13a4:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
    13a8:	6b 01       	movw	r12, r22
    13aa:	7c 01       	movw	r14, r24
    13ac:	b8 01       	movw	r22, r16
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
    13b6:	9b 01       	movw	r18, r22
    13b8:	ac 01       	movw	r20, r24
    13ba:	c7 01       	movw	r24, r14
    13bc:	b6 01       	movw	r22, r12
    13be:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e2       	ldi	r20, 0x20	; 32
    13c8:	51 e4       	ldi	r21, 0x41	; 65
    13ca:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
    13ce:	68 83       	st	Y, r22
    13d0:	79 83       	std	Y+1, r23	; 0x01
    13d2:	8a 83       	std	Y+2, r24	; 0x02
    13d4:	9b 83       	std	Y+3, r25	; 0x03
}
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	e8 e0       	ldi	r30, 0x08	; 8
    13dc:	0c 94 fa 29 	jmp	0x53f4	; 0x53f4 <__epilogue_restores__+0x14>

000013e0 <setMotorPosition>:
/*
    Private function which sets a new position to given motor.
    Motor min/max angles are checked and min,max values are used
    if new angle is lower or higher
*/
uint8_t setMotorPosition(volatile motor *m, float angle){
    13e0:	8f 92       	push	r8
    13e2:	9f 92       	push	r9
    13e4:	af 92       	push	r10
    13e6:	bf 92       	push	r11
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	ec 01       	movw	r28, r24
    13f6:	6a 01       	movw	r12, r20
    13f8:	7b 01       	movw	r14, r22
    m->status = WAITING;
    13fa:	fc 01       	movw	r30, r24
    13fc:	e1 5b       	subi	r30, 0xB1	; 177
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	86 e0       	ldi	r24, 0x06	; 6
    1402:	80 83       	st	Z, r24
    //vefify that angle is in between valid range
    if (angle >= m->min_angle && angle <= (m->min_angle + m->angle_range)){
    1404:	6f a5       	ldd	r22, Y+47	; 0x2f
    1406:	78 a9       	ldd	r23, Y+48	; 0x30
    1408:	89 a9       	ldd	r24, Y+49	; 0x31
    140a:	9a a9       	ldd	r25, Y+50	; 0x32
    140c:	a7 01       	movw	r20, r14
    140e:	96 01       	movw	r18, r12
    1410:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__cmpsf2>
    1414:	18 16       	cp	r1, r24
    1416:	9c f0       	brlt	.+38     	; 0x143e <setMotorPosition+0x5e>
    1418:	6f a5       	ldd	r22, Y+47	; 0x2f
    141a:	78 a9       	ldd	r23, Y+48	; 0x30
    141c:	89 a9       	ldd	r24, Y+49	; 0x31
    141e:	9a a9       	ldd	r25, Y+50	; 0x32
    1420:	2b a9       	ldd	r18, Y+51	; 0x33
    1422:	3c a9       	ldd	r19, Y+52	; 0x34
    1424:	4d a9       	ldd	r20, Y+53	; 0x35
    1426:	5e a9       	ldd	r21, Y+54	; 0x36
    1428:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
    142c:	9b 01       	movw	r18, r22
    142e:	ac 01       	movw	r20, r24
    1430:	c7 01       	movw	r24, r14
    1432:	b6 01       	movw	r22, r12
    1434:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__cmpsf2>
    1438:	18 16       	cp	r1, r24
    143a:	0c f0       	brlt	.+2      	; 0x143e <setMotorPosition+0x5e>
    143c:	9b c0       	rjmp	.+310    	; 0x1574 <setMotorPosition+0x194>
            
        return 0;
    }

    //angle is bigger than allowed => use max angle
    if (angle > (m->min_angle + m->angle_range)){
    143e:	6f a5       	ldd	r22, Y+47	; 0x2f
    1440:	78 a9       	ldd	r23, Y+48	; 0x30
    1442:	89 a9       	ldd	r24, Y+49	; 0x31
    1444:	9a a9       	ldd	r25, Y+50	; 0x32
    1446:	2b a9       	ldd	r18, Y+51	; 0x33
    1448:	3c a9       	ldd	r19, Y+52	; 0x34
    144a:	4d a9       	ldd	r20, Y+53	; 0x35
    144c:	5e a9       	ldd	r21, Y+54	; 0x36
    144e:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
    1452:	9b 01       	movw	r18, r22
    1454:	ac 01       	movw	r20, r24
    1456:	c7 01       	movw	r24, r14
    1458:	b6 01       	movw	r22, r12
    145a:	0e 94 c4 28 	call	0x5188	; 0x5188 <__gesf2>
    145e:	18 16       	cp	r1, r24
    1460:	0c f4       	brge	.+2      	; 0x1464 <setMotorPosition+0x84>
    1462:	44 c0       	rjmp	.+136    	; 0x14ec <setMotorPosition+0x10c>
            newlen = m->actuator_max_limit - 1;
        }
        m->set_length = newlen; 
    }
    //angle is smaller than allowed => use minimum angle
    else if (angle < m->min_angle){
    1464:	2f a5       	ldd	r18, Y+47	; 0x2f
    1466:	38 a9       	ldd	r19, Y+48	; 0x30
    1468:	49 a9       	ldd	r20, Y+49	; 0x31
    146a:	5a a9       	ldd	r21, Y+50	; 0x32
    146c:	c7 01       	movw	r24, r14
    146e:	b6 01       	movw	r22, r12
    1470:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__cmpsf2>
    1474:	87 fd       	sbrc	r24, 7
    1476:	61 c0       	rjmp	.+194    	; 0x153a <setMotorPosition+0x15a>
        if (newlen < m->actuator_min_limit){
            newlen = m->actuator_min_limit + 1; 
        }
        m->set_length = newlen;
    }
    m->timeout_value = 0;
    1478:	fe 01       	movw	r30, r28
    147a:	e5 5b       	subi	r30, 0xB5	; 181
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	10 82       	st	Z, r1
    1480:	11 82       	std	Z+1, r1	; 0x01
    1482:	12 82       	std	Z+2, r1	; 0x02
    1484:	13 82       	std	Z+3, r1	; 0x03
    return 1;
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
    1486:	2b a1       	ldd	r18, Y+35	; 0x23
    1488:	3c a1       	ldd	r19, Y+36	; 0x24
    148a:	8d a1       	ldd	r24, Y+37	; 0x25
    148c:	9e a1       	ldd	r25, Y+38	; 0x26
    148e:	28 17       	cp	r18, r24
    1490:	39 07       	cpc	r19, r25
    1492:	08 f1       	brcs	.+66     	; 0x14d6 <setMotorPosition+0xf6>
         m->move_length_mm = m->set_length - m->current_length;
     }
     else if (m->current_length > m->set_length){
    1494:	2b a1       	ldd	r18, Y+35	; 0x23
    1496:	3c a1       	ldd	r19, Y+36	; 0x24
    1498:	8d a1       	ldd	r24, Y+37	; 0x25
    149a:	9e a1       	ldd	r25, Y+38	; 0x26
    149c:	82 17       	cp	r24, r18
    149e:	93 07       	cpc	r25, r19
    14a0:	50 f4       	brcc	.+20     	; 0x14b6 <setMotorPosition+0xd6>
         m->move_length_mm = m->current_length - m->set_length;
    14a2:	8b a1       	ldd	r24, Y+35	; 0x23
    14a4:	9c a1       	ldd	r25, Y+36	; 0x24
    14a6:	2d a1       	ldd	r18, Y+37	; 0x25
    14a8:	3e a1       	ldd	r19, Y+38	; 0x26
    14aa:	82 1b       	sub	r24, r18
    14ac:	93 0b       	sbc	r25, r19
    14ae:	ce 59       	subi	r28, 0x9E	; 158
    14b0:	df 4f       	sbci	r29, 0xFF	; 255
    14b2:	99 83       	std	Y+1, r25	; 0x01
    14b4:	88 83       	st	Y, r24
        m->set_length = newlen;
    }
    m->timeout_value = 0;
    
    calculateMoveLength(m);
    systick = 0;
    14b6:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <__data_end+0x1>
    14ba:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <__data_end>
    return 1;
    14be:	81 e0       	ldi	r24, 0x01	; 1
}   
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	ff 90       	pop	r15
    14c6:	ef 90       	pop	r14
    14c8:	df 90       	pop	r13
    14ca:	cf 90       	pop	r12
    14cc:	bf 90       	pop	r11
    14ce:	af 90       	pop	r10
    14d0:	9f 90       	pop	r9
    14d2:	8f 90       	pop	r8
    14d4:	08 95       	ret

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
         m->move_length_mm = m->set_length - m->current_length;
    14d6:	8d a1       	ldd	r24, Y+37	; 0x25
    14d8:	9e a1       	ldd	r25, Y+38	; 0x26
    14da:	2b a1       	ldd	r18, Y+35	; 0x23
    14dc:	3c a1       	ldd	r19, Y+36	; 0x24
    14de:	82 1b       	sub	r24, r18
    14e0:	93 0b       	sbc	r25, r19
    14e2:	ce 59       	subi	r28, 0x9E	; 158
    14e4:	df 4f       	sbci	r29, 0xFF	; 255
    14e6:	99 83       	std	Y+1, r25	; 0x01
    14e8:	88 83       	st	Y, r24
    14ea:	e5 cf       	rjmp	.-54     	; 0x14b6 <setMotorPosition+0xd6>
        return 0;
    }

    //angle is bigger than allowed => use max angle
    if (angle > (m->min_angle + m->angle_range)){
        uint16_t newlen = m->angle_to_length((m->min_angle+m->angle_range) - m->angle_reference); 
    14ec:	fe 01       	movw	r30, r28
    14ee:	e8 5a       	subi	r30, 0xA8	; 168
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	e0 80       	ld	r14, Z
    14f4:	f1 80       	ldd	r15, Z+1	; 0x01
    14f6:	6f a5       	ldd	r22, Y+47	; 0x2f
    14f8:	78 a9       	ldd	r23, Y+48	; 0x30
    14fa:	89 a9       	ldd	r24, Y+49	; 0x31
    14fc:	9a a9       	ldd	r25, Y+50	; 0x32
    14fe:	2b a9       	ldd	r18, Y+51	; 0x33
    1500:	3c a9       	ldd	r19, Y+52	; 0x34
    1502:	4d a9       	ldd	r20, Y+53	; 0x35
    1504:	5e a9       	ldd	r21, Y+54	; 0x36
    1506:	8f a8       	ldd	r8, Y+55	; 0x37
    1508:	98 ac       	ldd	r9, Y+56	; 0x38
    150a:	a9 ac       	ldd	r10, Y+57	; 0x39
    150c:	ba ac       	ldd	r11, Y+58	; 0x3a
    150e:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
    1512:	a5 01       	movw	r20, r10
    1514:	94 01       	movw	r18, r8
    1516:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
    151a:	f7 01       	movw	r30, r14
    151c:	09 95       	icall
        if (newlen > m->actuator_max_limit){
    151e:	fe 01       	movw	r30, r28
    1520:	eb 5b       	subi	r30, 0xBB	; 187
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	20 81       	ld	r18, Z
    1526:	31 81       	ldd	r19, Z+1	; 0x01
    1528:	28 17       	cp	r18, r24
    152a:	39 07       	cpc	r19, r25
    152c:	18 f4       	brcc	.+6      	; 0x1534 <setMotorPosition+0x154>
            newlen = m->actuator_max_limit - 1;
    152e:	80 81       	ld	r24, Z
    1530:	91 81       	ldd	r25, Z+1	; 0x01
    1532:	01 97       	sbiw	r24, 0x01	; 1
    else if (angle < m->min_angle){
        uint16_t newlen = m->angle_to_length(m->min_angle - m->angle_reference); 
        if (newlen < m->actuator_min_limit){
            newlen = m->actuator_min_limit + 1; 
        }
        m->set_length = newlen;
    1534:	9e a3       	std	Y+38, r25	; 0x26
    1536:	8d a3       	std	Y+37, r24	; 0x25
    1538:	9f cf       	rjmp	.-194    	; 0x1478 <setMotorPosition+0x98>
        }
        m->set_length = newlen; 
    }
    //angle is smaller than allowed => use minimum angle
    else if (angle < m->min_angle){
        uint16_t newlen = m->angle_to_length(m->min_angle - m->angle_reference); 
    153a:	fe 01       	movw	r30, r28
    153c:	e8 5a       	subi	r30, 0xA8	; 168
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	e0 80       	ld	r14, Z
    1542:	f1 80       	ldd	r15, Z+1	; 0x01
    1544:	6f a5       	ldd	r22, Y+47	; 0x2f
    1546:	78 a9       	ldd	r23, Y+48	; 0x30
    1548:	89 a9       	ldd	r24, Y+49	; 0x31
    154a:	9a a9       	ldd	r25, Y+50	; 0x32
    154c:	2f a9       	ldd	r18, Y+55	; 0x37
    154e:	38 ad       	ldd	r19, Y+56	; 0x38
    1550:	49 ad       	ldd	r20, Y+57	; 0x39
    1552:	5a ad       	ldd	r21, Y+58	; 0x3a
    1554:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
    1558:	f7 01       	movw	r30, r14
    155a:	09 95       	icall
        if (newlen < m->actuator_min_limit){
    155c:	fe 01       	movw	r30, r28
    155e:	ed 5b       	subi	r30, 0xBD	; 189
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	20 81       	ld	r18, Z
    1564:	31 81       	ldd	r19, Z+1	; 0x01
    1566:	82 17       	cp	r24, r18
    1568:	93 07       	cpc	r25, r19
    156a:	20 f7       	brcc	.-56     	; 0x1534 <setMotorPosition+0x154>
            newlen = m->actuator_min_limit + 1; 
    156c:	80 81       	ld	r24, Z
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	e0 cf       	rjmp	.-64     	; 0x1534 <setMotorPosition+0x154>
*/
uint8_t setMotorPosition(volatile motor *m, float angle){
    m->status = WAITING;
    //vefify that angle is in between valid range
    if (angle >= m->min_angle && angle <= (m->min_angle + m->angle_range)){
        m->timeout_value = 0; //Clear timeout value on every angle change
    1574:	fe 01       	movw	r30, r28
    1576:	e5 5b       	subi	r30, 0xB5	; 181
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	10 82       	st	Z, r1
    157c:	11 82       	std	Z+1, r1	; 0x01
    157e:	12 82       	std	Z+2, r1	; 0x02
    1580:	13 82       	std	Z+3, r1	; 0x03
        uint16_t len = m->angle_to_length(angle - m->angle_reference);
    1582:	3d 96       	adiw	r30, 0x0d	; 13
    1584:	a0 80       	ld	r10, Z
    1586:	b1 80       	ldd	r11, Z+1	; 0x01
    1588:	2f a9       	ldd	r18, Y+55	; 0x37
    158a:	38 ad       	ldd	r19, Y+56	; 0x38
    158c:	49 ad       	ldd	r20, Y+57	; 0x39
    158e:	5a ad       	ldd	r21, Y+58	; 0x3a
    1590:	c7 01       	movw	r24, r14
    1592:	b6 01       	movw	r22, r12
    1594:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__subsf3>
    1598:	f5 01       	movw	r30, r10
    159a:	09 95       	icall
    
        //fix hysteresis offset
        if (len > m->set_length){ //Setting bigger angle
    159c:	2d a1       	ldd	r18, Y+37	; 0x25
    159e:	3e a1       	ldd	r19, Y+38	; 0x26
    15a0:	28 17       	cp	r18, r24
    15a2:	39 07       	cpc	r19, r25
    15a4:	38 f5       	brcc	.+78     	; 0x15f4 <setMotorPosition+0x214>
            uint16_t newlen = len + (m->length_hysteresis);
    15a6:	2d a5       	ldd	r18, Y+45	; 0x2d
    15a8:	82 0f       	add	r24, r18
    15aa:	91 1d       	adc	r25, r1
            if (newlen > m->actuator_max_limit){
    15ac:	fe 01       	movw	r30, r28
    15ae:	eb 5b       	subi	r30, 0xBB	; 187
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	20 81       	ld	r18, Z
    15b4:	31 81       	ldd	r19, Z+1	; 0x01
    15b6:	28 17       	cp	r18, r24
    15b8:	39 07       	cpc	r19, r25
    15ba:	b8 f1       	brcs	.+110    	; 0x162a <setMotorPosition+0x24a>
        else{ //Setting lower angle
            uint16_t newlen = len - (m->length_hysteresis);
            if (newlen < m->actuator_min_limit){
                newlen = m->actuator_min_limit+1;
            }
            m->set_length = newlen;
    15bc:	9e a3       	std	Y+38, r25	; 0x26
    15be:	8d a3       	std	Y+37, r24	; 0x25
    return 1;
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
    15c0:	2b a1       	ldd	r18, Y+35	; 0x23
    15c2:	3c a1       	ldd	r19, Y+36	; 0x24
    15c4:	8d a1       	ldd	r24, Y+37	; 0x25
    15c6:	9e a1       	ldd	r25, Y+38	; 0x26
    15c8:	28 17       	cp	r18, r24
    15ca:	39 07       	cpc	r19, r25
    15cc:	10 f1       	brcs	.+68     	; 0x1612 <setMotorPosition+0x232>
         m->move_length_mm = m->set_length - m->current_length;
     }
     else if (m->current_length > m->set_length){
    15ce:	2b a1       	ldd	r18, Y+35	; 0x23
    15d0:	3c a1       	ldd	r19, Y+36	; 0x24
    15d2:	8d a1       	ldd	r24, Y+37	; 0x25
    15d4:	9e a1       	ldd	r25, Y+38	; 0x26
    15d6:	82 17       	cp	r24, r18
    15d8:	93 07       	cpc	r25, r19
    15da:	58 f5       	brcc	.+86     	; 0x1632 <setMotorPosition+0x252>
         m->move_length_mm = m->current_length - m->set_length;
    15dc:	8b a1       	ldd	r24, Y+35	; 0x23
    15de:	9c a1       	ldd	r25, Y+36	; 0x24
    15e0:	2d a1       	ldd	r18, Y+37	; 0x25
    15e2:	3e a1       	ldd	r19, Y+38	; 0x26
    15e4:	82 1b       	sub	r24, r18
    15e6:	93 0b       	sbc	r25, r19
    15e8:	ce 59       	subi	r28, 0x9E	; 158
    15ea:	df 4f       	sbci	r29, 0xFF	; 255
    15ec:	99 83       	std	Y+1, r25	; 0x01
    15ee:	88 83       	st	Y, r24
            m->set_length = newlen;
        }

        calculateMoveLength(m);  
            
        return 0;
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	66 cf       	rjmp	.-308    	; 0x14c0 <setMotorPosition+0xe0>
                newlen = m->actuator_max_limit-1;
            }
            m->set_length = newlen;
        }
        else{ //Setting lower angle
            uint16_t newlen = len - (m->length_hysteresis);
    15f4:	2d a5       	ldd	r18, Y+45	; 0x2d
    15f6:	82 1b       	sub	r24, r18
    15f8:	91 09       	sbc	r25, r1
            if (newlen < m->actuator_min_limit){
    15fa:	fe 01       	movw	r30, r28
    15fc:	ed 5b       	subi	r30, 0xBD	; 189
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	20 81       	ld	r18, Z
    1602:	31 81       	ldd	r19, Z+1	; 0x01
    1604:	82 17       	cp	r24, r18
    1606:	93 07       	cpc	r25, r19
    1608:	c8 f6       	brcc	.-78     	; 0x15bc <setMotorPosition+0x1dc>
                newlen = m->actuator_min_limit+1;
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	d5 cf       	rjmp	.-86     	; 0x15bc <setMotorPosition+0x1dc>
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
         m->move_length_mm = m->set_length - m->current_length;
    1612:	8d a1       	ldd	r24, Y+37	; 0x25
    1614:	9e a1       	ldd	r25, Y+38	; 0x26
    1616:	2b a1       	ldd	r18, Y+35	; 0x23
    1618:	3c a1       	ldd	r19, Y+36	; 0x24
    161a:	82 1b       	sub	r24, r18
    161c:	93 0b       	sbc	r25, r19
    161e:	ce 59       	subi	r28, 0x9E	; 158
    1620:	df 4f       	sbci	r29, 0xFF	; 255
    1622:	99 83       	std	Y+1, r25	; 0x01
    1624:	88 83       	st	Y, r24
            m->set_length = newlen;
        }

        calculateMoveLength(m);  
            
        return 0;
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	4b cf       	rjmp	.-362    	; 0x14c0 <setMotorPosition+0xe0>
    
        //fix hysteresis offset
        if (len > m->set_length){ //Setting bigger angle
            uint16_t newlen = len + (m->length_hysteresis);
            if (newlen > m->actuator_max_limit){
                newlen = m->actuator_max_limit-1;
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	c5 cf       	rjmp	.-118    	; 0x15bc <setMotorPosition+0x1dc>
            m->set_length = newlen;
        }

        calculateMoveLength(m);  
            
        return 0;
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	45 cf       	rjmp	.-374    	; 0x14c0 <setMotorPosition+0xe0>

00001636 <calculateMoveLength>:
    calculateMoveLength(m);
    systick = 0;
    return 1;
}   

void calculateMoveLength(volatile motor *m){
    1636:	fc 01       	movw	r30, r24
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
    1638:	23 a1       	ldd	r18, Z+35	; 0x23
    163a:	34 a1       	ldd	r19, Z+36	; 0x24
    163c:	85 a1       	ldd	r24, Z+37	; 0x25
    163e:	96 a1       	ldd	r25, Z+38	; 0x26
    1640:	28 17       	cp	r18, r24
    1642:	39 07       	cpc	r19, r25
    1644:	90 f0       	brcs	.+36     	; 0x166a <calculateMoveLength+0x34>
         m->move_length_mm = m->set_length - m->current_length;
     }
     else if (m->current_length > m->set_length){
    1646:	23 a1       	ldd	r18, Z+35	; 0x23
    1648:	34 a1       	ldd	r19, Z+36	; 0x24
    164a:	85 a1       	ldd	r24, Z+37	; 0x25
    164c:	96 a1       	ldd	r25, Z+38	; 0x26
    164e:	82 17       	cp	r24, r18
    1650:	93 07       	cpc	r25, r19
    1652:	50 f4       	brcc	.+20     	; 0x1668 <calculateMoveLength+0x32>
         m->move_length_mm = m->current_length - m->set_length;
    1654:	83 a1       	ldd	r24, Z+35	; 0x23
    1656:	94 a1       	ldd	r25, Z+36	; 0x24
    1658:	25 a1       	ldd	r18, Z+37	; 0x25
    165a:	36 a1       	ldd	r19, Z+38	; 0x26
    165c:	82 1b       	sub	r24, r18
    165e:	93 0b       	sbc	r25, r19
    1660:	ee 59       	subi	r30, 0x9E	; 158
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
    1668:	08 95       	ret
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
         m->move_length_mm = m->set_length - m->current_length;
    166a:	25 a1       	ldd	r18, Z+37	; 0x25
    166c:	36 a1       	ldd	r19, Z+38	; 0x26
    166e:	83 a1       	ldd	r24, Z+35	; 0x23
    1670:	94 a1       	ldd	r25, Z+36	; 0x24
    1672:	28 1b       	sub	r18, r24
    1674:	39 0b       	sbc	r19, r25
    1676:	ee 59       	subi	r30, 0x9E	; 158
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	31 83       	std	Z+1, r19	; 0x01
    167c:	20 83       	st	Z, r18
    167e:	08 95       	ret

00001680 <getMotorMinAngle>:
         m->move_length_mm = m->current_length - m->set_length;
     }
}

float getMotorMinAngle(volatile motor *m){
    return m->min_angle;
    1680:	fc 01       	movw	r30, r24
    1682:	67 a5       	ldd	r22, Z+47	; 0x2f
    1684:	70 a9       	ldd	r23, Z+48	; 0x30
    1686:	81 a9       	ldd	r24, Z+49	; 0x31
    1688:	92 a9       	ldd	r25, Z+50	; 0x32
}
    168a:	08 95       	ret

0000168c <getMotorMaxAngle>:

float getMotorMaxAngle(volatile motor *m){
    168c:	fc 01       	movw	r30, r24
    return m->min_angle + m->angle_range;
    168e:	67 a5       	ldd	r22, Z+47	; 0x2f
    1690:	70 a9       	ldd	r23, Z+48	; 0x30
    1692:	81 a9       	ldd	r24, Z+49	; 0x31
    1694:	92 a9       	ldd	r25, Z+50	; 0x32
    1696:	23 a9       	ldd	r18, Z+51	; 0x33
    1698:	34 a9       	ldd	r19, Z+52	; 0x34
    169a:	45 a9       	ldd	r20, Z+53	; 0x35
    169c:	56 a9       	ldd	r21, Z+54	; 0x36
    169e:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__addsf3>
}
    16a2:	08 95       	ret

000016a4 <shutdownMotors>:
  
   // GTCCR = 0x00;//Counter is started at the main loop Start Counter
}
void disableMotorPWM(volatile motor *m){

    *m->enable_port_addr &= ~(1<<m->enable_pin); //Disable motor => clear enable port
    16a4:	ef e0       	ldi	r30, 0x0F	; 15
    16a6:	f1 e0       	ldi	r31, 0x01	; 1
    16a8:	26 8d       	ldd	r18, Z+30	; 0x1e
    16aa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    16ac:	b3 8d       	ldd	r27, Z+27	; 0x1b
    16ae:	4c 91       	ld	r20, X
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	bc 01       	movw	r22, r24
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <shutdownMotors+0x18>
    16b8:	66 0f       	add	r22, r22
    16ba:	77 1f       	adc	r23, r23
    16bc:	2a 95       	dec	r18
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <shutdownMotors+0x14>
    16c0:	9b 01       	movw	r18, r22
    16c2:	20 95       	com	r18
    16c4:	30 95       	com	r19
    16c6:	24 23       	and	r18, r20
    16c8:	2c 93       	st	X, r18
    *m->fwd_TCCRA_addr = 0x00;//m.fwd_TCCRA_value;
    16ca:	a5 81       	ldd	r26, Z+5	; 0x05
    16cc:	b6 81       	ldd	r27, Z+6	; 0x06
    16ce:	1c 92       	st	X, r1
    *m->fwd_TCCRB_addr = 0x00;//m.fwd_TCCRB_value;
    16d0:	a0 85       	ldd	r26, Z+8	; 0x08
    16d2:	b1 85       	ldd	r27, Z+9	; 0x09
    16d4:	1c 92       	st	X, r1
    *m->fwd_OCR_addr = 0x00; //Init PWM to zero
    16d6:	a3 85       	ldd	r26, Z+11	; 0x0b
    16d8:	b4 85       	ldd	r27, Z+12	; 0x0c
    16da:	1c 92       	st	X, r1
    
    //Init reverse PWM settings
    *m->rev_TCCRA_addr = 0x00;//m.rev_TCCRA_value;
    16dc:	a2 89       	ldd	r26, Z+18	; 0x12
    16de:	b3 89       	ldd	r27, Z+19	; 0x13
    16e0:	1c 92       	st	X, r1
    *m->rev_TCCRB_addr = 0x00; //m.rev_TCCRB_value;
    16e2:	a5 89       	ldd	r26, Z+21	; 0x15
    16e4:	b6 89       	ldd	r27, Z+22	; 0x16
    16e6:	1c 92       	st	X, r1
    *m->rev_OCR_addr = 0x00; //Init PWM to zero
    16e8:	a0 8d       	ldd	r26, Z+24	; 0x18
    16ea:	b1 8d       	ldd	r27, Z+25	; 0x19
    16ec:	1c 92       	st	X, r1
    m->current_pwm = 0; //set PWM to zero
    16ee:	11 a2       	std	Z+33, r1	; 0x21
    m->timeout_value = 0; //Reset timeout values
    16f0:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <motors+0x4b>
    16f4:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <motors+0x4c>
    16f8:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <motors+0x4d>
    16fc:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <motors+0x4e>
    Shutdown all motors, this is used to activate manual mode
*/
void shutdownMotors(void){
    for (uint8_t i = 0; i<NUM_OF_MOTORS; i++){
        disableMotorPWM(&motors[i]);
        motors[i].set_length = motors[i].current_length;
    1700:	23 a1       	ldd	r18, Z+35	; 0x23
    1702:	34 a1       	ldd	r19, Z+36	; 0x24
    1704:	36 a3       	std	Z+38, r19	; 0x26
    1706:	25 a3       	std	Z+37, r18	; 0x25
  
   // GTCCR = 0x00;//Counter is started at the main loop Start Counter
}
void disableMotorPWM(volatile motor *m){

    *m->enable_port_addr &= ~(1<<m->enable_pin); //Disable motor => clear enable port
    1708:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <motors+0x82>
    170c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <motors+0x7e>
    1710:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <motors+0x7f>
    1714:	20 81       	ld	r18, Z
    1716:	02 c0       	rjmp	.+4      	; 0x171c <shutdownMotors+0x78>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	3a 95       	dec	r19
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <shutdownMotors+0x74>
    1720:	80 95       	com	r24
    1722:	90 95       	com	r25
    1724:	82 23       	and	r24, r18
    1726:	80 83       	st	Z, r24
    *m->fwd_TCCRA_addr = 0x00;//m.fwd_TCCRA_value;
    1728:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <motors+0x69>
    172c:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <motors+0x6a>
    1730:	10 82       	st	Z, r1
    *m->fwd_TCCRB_addr = 0x00;//m.fwd_TCCRB_value;
    1732:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <motors+0x6c>
    1736:	f0 91 7c 01 	lds	r31, 0x017C	; 0x80017c <motors+0x6d>
    173a:	10 82       	st	Z, r1
    *m->fwd_OCR_addr = 0x00; //Init PWM to zero
    173c:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <motors+0x6f>
    1740:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <motors+0x70>
    1744:	10 82       	st	Z, r1
    
    //Init reverse PWM settings
    *m->rev_TCCRA_addr = 0x00;//m.rev_TCCRA_value;
    1746:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <motors+0x76>
    174a:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <motors+0x77>
    174e:	10 82       	st	Z, r1
    *m->rev_TCCRB_addr = 0x00; //m.rev_TCCRB_value;
    1750:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <motors+0x79>
    1754:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <motors+0x7a>
    1758:	10 82       	st	Z, r1
    *m->rev_OCR_addr = 0x00; //Init PWM to zero
    175a:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <motors+0x7c>
    175e:	f0 91 8c 01 	lds	r31, 0x018C	; 0x80018c <motors+0x7d>
    1762:	10 82       	st	Z, r1
    m->current_pwm = 0; //set PWM to zero
    1764:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <motors+0x85>
    m->timeout_value = 0; //Reset timeout values
    1768:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <motors+0xaf>
    176c:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <motors+0xb0>
    1770:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <motors+0xb1>
    1774:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <motors+0xb2>
    Shutdown all motors, this is used to activate manual mode
*/
void shutdownMotors(void){
    for (uint8_t i = 0; i<NUM_OF_MOTORS; i++){
        disableMotorPWM(&motors[i]);
        motors[i].set_length = motors[i].current_length;
    1778:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <motors+0x87>
    177c:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <motors+0x88>
    1780:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <motors+0x8a>
    1784:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <motors+0x89>
    1788:	08 95       	ret

0000178a <setMotorLength>:
    }
}

uint8_t setMotorLength(volatile motor *m, uint16_t length){
    178a:	fc 01       	movw	r30, r24
    if (length >= m->actuator_min_limit && length <= m->actuator_max_limit){
    178c:	dc 01       	movw	r26, r24
    178e:	ad 5b       	subi	r26, 0xBD	; 189
    1790:	bf 4f       	sbci	r27, 0xFF	; 255
    1792:	8d 91       	ld	r24, X+
    1794:	9c 91       	ld	r25, X
    1796:	11 97       	sbiw	r26, 0x01	; 1
    1798:	68 17       	cp	r22, r24
    179a:	79 07       	cpc	r23, r25
    179c:	e0 f0       	brcs	.+56     	; 0x17d6 <setMotorLength+0x4c>
    179e:	12 96       	adiw	r26, 0x02	; 2
    17a0:	8d 91       	ld	r24, X+
    17a2:	9c 91       	ld	r25, X
    17a4:	86 17       	cp	r24, r22
    17a6:	97 07       	cpc	r25, r23
    17a8:	b0 f0       	brcs	.+44     	; 0x17d6 <setMotorLength+0x4c>
        //Execute move only if it is outside of hysteresis window
        if (m->current_length > m->set_length + m->length_hysteresis){
    17aa:	23 a1       	ldd	r18, Z+35	; 0x23
    17ac:	34 a1       	ldd	r19, Z+36	; 0x24
    17ae:	85 a1       	ldd	r24, Z+37	; 0x25
    17b0:	96 a1       	ldd	r25, Z+38	; 0x26
    17b2:	45 a5       	ldd	r20, Z+45	; 0x2d
    17b4:	84 0f       	add	r24, r20
    17b6:	91 1d       	adc	r25, r1
    17b8:	82 17       	cp	r24, r18
    17ba:	93 07       	cpc	r25, r19
    17bc:	50 f4       	brcc	.+20     	; 0x17d2 <setMotorLength+0x48>
            if (m->current_length < m->set_length - m->length_hysteresis){ 
    17be:	23 a1       	ldd	r18, Z+35	; 0x23
    17c0:	34 a1       	ldd	r19, Z+36	; 0x24
    17c2:	85 a1       	ldd	r24, Z+37	; 0x25
    17c4:	96 a1       	ldd	r25, Z+38	; 0x26
    17c6:	45 a5       	ldd	r20, Z+45	; 0x2d
    17c8:	84 1b       	sub	r24, r20
    17ca:	91 09       	sbc	r25, r1
    17cc:	28 17       	cp	r18, r24
    17ce:	39 07       	cpc	r19, r25
    17d0:	20 f0       	brcs	.+8      	; 0x17da <setMotorLength+0x50>
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
         m->move_length_mm = m->set_length - m->current_length;
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	08 95       	ret
            }
        }
        return 0;
    }
    else{
        return 1;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    17d8:	08 95       	ret
uint8_t setMotorLength(volatile motor *m, uint16_t length){
    if (length >= m->actuator_min_limit && length <= m->actuator_max_limit){
        //Execute move only if it is outside of hysteresis window
        if (m->current_length > m->set_length + m->length_hysteresis){
            if (m->current_length < m->set_length - m->length_hysteresis){ 
                m->set_length = length;
    17da:	76 a3       	std	Z+38, r23	; 0x26
    17dc:	65 a3       	std	Z+37, r22	; 0x25
                m->status = WAITING;
    17de:	86 e0       	ldi	r24, 0x06	; 6
    17e0:	df 01       	movw	r26, r30
    17e2:	a1 5b       	subi	r26, 0xB1	; 177
    17e4:	bf 4f       	sbci	r27, 0xFF	; 255
    17e6:	8c 93       	st	X, r24
    return 1;
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
    17e8:	23 a1       	ldd	r18, Z+35	; 0x23
    17ea:	34 a1       	ldd	r19, Z+36	; 0x24
    17ec:	85 a1       	ldd	r24, Z+37	; 0x25
    17ee:	96 a1       	ldd	r25, Z+38	; 0x26
    17f0:	28 17       	cp	r18, r24
    17f2:	39 07       	cpc	r19, r25
    17f4:	98 f0       	brcs	.+38     	; 0x181c <setMotorLength+0x92>
         m->move_length_mm = m->set_length - m->current_length;
     }
     else if (m->current_length > m->set_length){
    17f6:	23 a1       	ldd	r18, Z+35	; 0x23
    17f8:	34 a1       	ldd	r19, Z+36	; 0x24
    17fa:	85 a1       	ldd	r24, Z+37	; 0x25
    17fc:	96 a1       	ldd	r25, Z+38	; 0x26
    17fe:	82 17       	cp	r24, r18
    1800:	93 07       	cpc	r25, r19
    1802:	38 f7       	brcc	.-50     	; 0x17d2 <setMotorLength+0x48>
         m->move_length_mm = m->current_length - m->set_length;
    1804:	83 a1       	ldd	r24, Z+35	; 0x23
    1806:	94 a1       	ldd	r25, Z+36	; 0x24
    1808:	25 a1       	ldd	r18, Z+37	; 0x25
    180a:	36 a1       	ldd	r19, Z+38	; 0x26
    180c:	82 1b       	sub	r24, r18
    180e:	93 0b       	sbc	r25, r19
    1810:	ee 59       	subi	r30, 0x9E	; 158
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	91 83       	std	Z+1, r25	; 0x01
    1816:	80 83       	st	Z, r24
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	08 95       	ret
}   

void calculateMoveLength(volatile motor *m){
      //Store move length for speed calculations
     if (m->current_length < m->set_length){
         m->move_length_mm = m->set_length - m->current_length;
    181c:	25 a1       	ldd	r18, Z+37	; 0x25
    181e:	36 a1       	ldd	r19, Z+38	; 0x26
    1820:	83 a1       	ldd	r24, Z+35	; 0x23
    1822:	94 a1       	ldd	r25, Z+36	; 0x24
    1824:	28 1b       	sub	r18, r24
    1826:	39 0b       	sbc	r19, r25
    1828:	ee 59       	subi	r30, 0x9E	; 158
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	31 83       	std	Z+1, r19	; 0x01
    182e:	20 83       	st	Z, r18
    1830:	d0 cf       	rjmp	.-96     	; 0x17d2 <setMotorLength+0x48>

00001832 <calculateMoveSpeed>:
            }
        }
    }
}

void calculateMoveSpeed(volatile motor *m, uint16_t tick){
    1832:	a0 e0       	ldi	r26, 0x00	; 0
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ef e1       	ldi	r30, 0x1F	; 31
    1838:	fc e0       	ldi	r31, 0x0C	; 12
    183a:	0c 94 de 29 	jmp	0x53bc	; 0x53bc <__prologue_saves__+0x14>
    if (tick > 0 && m->move_length_mm > 0){
    183e:	61 15       	cp	r22, r1
    1840:	71 05       	cpc	r23, r1
    1842:	39 f0       	breq	.+14     	; 0x1852 <calculateMoveSpeed+0x20>
    1844:	fc 01       	movw	r30, r24
    1846:	ee 59       	subi	r30, 0x9E	; 158
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	20 81       	ld	r18, Z
    184c:	31 81       	ldd	r19, Z+1	; 0x01
    184e:	23 2b       	or	r18, r19
    1850:	69 f4       	brne	.+26     	; 0x186c <calculateMoveSpeed+0x3a>
        float milliseconds = tick;
        float mlen = m->move_length_mm;
        m->move_speed_mm = mlen / (milliseconds/100);
    }
    else{
        m->move_speed_mm = 0.0;
    1852:	fc 01       	movw	r30, r24
    1854:	e2 5a       	subi	r30, 0xA2	; 162
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	10 82       	st	Z, r1
    185a:	11 82       	std	Z+1, r1	; 0x01
    185c:	12 82       	std	Z+2, r1	; 0x02
    185e:	13 82       	std	Z+3, r1	; 0x03
    }
}
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	e8 e0       	ldi	r30, 0x08	; 8
    1866:	0c 94 fa 29 	jmp	0x53f4	; 0x53f4 <__epilogue_restores__+0x14>
    186a:	26 c0       	rjmp	.+76     	; 0x18b8 <calibrateMotors>
    186c:	8b 01       	movw	r16, r22
    186e:	ec 01       	movw	r28, r24
}

void calculateMoveSpeed(volatile motor *m, uint16_t tick){
    if (tick > 0 && m->move_length_mm > 0){
        float milliseconds = tick;
        float mlen = m->move_length_mm;
    1870:	60 81       	ld	r22, Z
    1872:	71 81       	ldd	r23, Z+1	; 0x01
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
    187c:	6b 01       	movw	r12, r22
    187e:	7c 01       	movw	r14, r24
    }
}

void calculateMoveSpeed(volatile motor *m, uint16_t tick){
    if (tick > 0 && m->move_length_mm > 0){
        float milliseconds = tick;
    1880:	b8 01       	movw	r22, r16
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
        float mlen = m->move_length_mm;
        m->move_speed_mm = mlen / (milliseconds/100);
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	48 ec       	ldi	r20, 0xC8	; 200
    1890:	52 e4       	ldi	r21, 0x42	; 66
    1892:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
    1896:	9b 01       	movw	r18, r22
    1898:	ac 01       	movw	r20, r24
    189a:	c7 01       	movw	r24, r14
    189c:	b6 01       	movw	r22, r12
    189e:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
    18a2:	c2 5a       	subi	r28, 0xA2	; 162
    18a4:	df 4f       	sbci	r29, 0xFF	; 255
    18a6:	68 83       	st	Y, r22
    18a8:	79 83       	std	Y+1, r23	; 0x01
    18aa:	8a 83       	std	Y+2, r24	; 0x02
    18ac:	9b 83       	std	Y+3, r25	; 0x03
    }
    else{
        m->move_speed_mm = 0.0;
    }
}
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	e8 e0       	ldi	r30, 0x08	; 8
    18b4:	0c 94 fa 29 	jmp	0x53f4	; 0x53f4 <__epilogue_restores__+0x14>

000018b8 <calibrateMotors>:
        volatile motor *m = &motors[i];
        setMotor(m, dir, 0);
    }
}

void calibrateMotors(void){
    18b8:	a0 e0       	ldi	r26, 0x00	; 0
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e2 e6       	ldi	r30, 0x62	; 98
    18be:	fc e0       	ldi	r31, 0x0C	; 12
    18c0:	0c 94 d4 29 	jmp	0x53a8	; 0x53a8 <__prologue_saves__>
    18c4:	e1 2c       	mov	r14, r1
    18c6:	f1 2c       	mov	r15, r1
    //return;
    for(uint8_t i=0; i<NUM_OF_MOTORS;i++){
        fprintf_P(port, PSTR("calibrating motor:"));
    18c8:	33 e2       	ldi	r19, 0x23	; 35
    18ca:	83 2e       	mov	r8, r19
    18cc:	32 e0       	ldi	r19, 0x02	; 2
    18ce:	93 2e       	mov	r9, r19
        fprintf(port, "%d\n",i);
    18d0:	4a ef       	ldi	r20, 0xFA	; 250
    18d2:	c4 2e       	mov	r12, r20
    18d4:	41 e0       	ldi	r20, 0x01	; 1
    18d6:	d4 2e       	mov	r13, r20
        volatile motor *m = &motors[i];
        uint16_t minval = 1024;
        uint16_t maxval = 0;
        setMotor(m, FORWARD, m->max_pwm);
    18d8:	54 e6       	ldi	r21, 0x64	; 100
    18da:	55 2e       	mov	r5, r21
  
   // GTCCR = 0x00;//Counter is started at the main loop Start Counter
}
void disableMotorPWM(volatile motor *m){

    *m->enable_port_addr &= ~(1<<m->enable_pin); //Disable motor => clear enable port
    18dc:	aa 24       	eor	r10, r10
    18de:	a3 94       	inc	r10
    18e0:	b1 2c       	mov	r11, r1
                break;
            }
            lastval = value;
            _delay_ms(500);
        }
        fprintf_P(port, PSTR("calibration ready\n"));
    18e2:	7e ef       	ldi	r23, 0xFE	; 254
    18e4:	27 2e       	mov	r2, r23
    18e6:	71 e0       	ldi	r23, 0x01	; 1
    18e8:	37 2e       	mov	r3, r23
}

void calibrateMotors(void){
    //return;
    for(uint8_t i=0; i<NUM_OF_MOTORS;i++){
        fprintf_P(port, PSTR("calibrating motor:"));
    18ea:	9f 92       	push	r9
    18ec:	8f 92       	push	r8
    18ee:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    18f2:	8f 93       	push	r24
    18f4:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    18f8:	8f 93       	push	r24
    18fa:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
        fprintf(port, "%d\n",i);
    18fe:	ff 92       	push	r15
    1900:	ef 92       	push	r14
    1902:	df 92       	push	r13
    1904:	cf 92       	push	r12
    1906:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    190a:	8f 93       	push	r24
    190c:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1910:	8f 93       	push	r24
    1912:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
        volatile motor *m = &motors[i];
        uint16_t minval = 1024;
        uint16_t maxval = 0;
        setMotor(m, FORWARD, m->max_pwm);
    1916:	5e 9c       	mul	r5, r14
    1918:	f0 01       	movw	r30, r0
    191a:	5f 9c       	mul	r5, r15
    191c:	f0 0d       	add	r31, r0
    191e:	11 24       	eor	r1, r1
    1920:	e1 5f       	subi	r30, 0xF1	; 241
    1922:	fe 4f       	sbci	r31, 0xFE	; 254
    1924:	86 a5       	ldd	r24, Z+46	; 0x2e
} 
//volatile uint8_t *OCRC_ADDR[] = {&OCR1CL, &OCR4AL }
//volatile uint8_t *OCRB_ADDR[] = {&OCR1BL, &OCR4BL }

void setMotor(volatile motor *m, uint8_t dir, uint8_t pwm){
    m->current_pwm = pwm;
    1926:	81 a3       	std	Z+33, r24	; 0x21
    if (pwm > 0){
    1928:	2d b7       	in	r18, 0x3d	; 61
    192a:	3e b7       	in	r19, 0x3e	; 62
    192c:	26 5f       	subi	r18, 0xF6	; 246
    192e:	3f 4f       	sbci	r19, 0xFF	; 255
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	3e bf       	out	0x3e, r19	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	2d bf       	out	0x3d, r18	; 61
    193a:	88 23       	and	r24, r24
    193c:	09 f4       	brne	.+2      	; 0x1940 <calibrateMotors+0x88>
    193e:	9a c1       	rjmp	.+820    	; 0x1c74 <calibrateMotors+0x3bc>
        if (dir == FORWARD){ //Forward
            *m->rev_OCR_addr = 0x00; //PWM pulse width
    1940:	a0 8d       	ldd	r26, Z+24	; 0x18
    1942:	b1 8d       	ldd	r27, Z+25	; 0x19
    1944:	1c 92       	st	X, r1
            *m->fwd_OCR_addr = pwm; 
    1946:	a3 85       	ldd	r26, Z+11	; 0x0b
    1948:	b4 85       	ldd	r27, Z+12	; 0x0c
    194a:	8c 93       	st	X, r24
            *m->rev_port_addr &= ~(1<<m->rev_pin);
    194c:	81 89       	ldd	r24, Z+17	; 0x11
    194e:	a5 85       	ldd	r26, Z+13	; 0x0d
    1950:	b6 85       	ldd	r27, Z+14	; 0x0e
    1952:	2c 91       	ld	r18, X
    1954:	a5 01       	movw	r20, r10
    1956:	02 c0       	rjmp	.+4      	; 0x195c <calibrateMotors+0xa4>
    1958:	44 0f       	add	r20, r20
    195a:	55 1f       	adc	r21, r21
    195c:	8a 95       	dec	r24
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <calibrateMotors+0xa0>
    1960:	ca 01       	movw	r24, r20
    1962:	80 95       	com	r24
    1964:	90 95       	com	r25
    1966:	82 23       	and	r24, r18
    1968:	8c 93       	st	X, r24
            *m->rev_TCCRA_addr = 0x00; //Disable reverse
    196a:	a2 89       	ldd	r26, Z+18	; 0x12
    196c:	b3 89       	ldd	r27, Z+19	; 0x13
    196e:	1c 92       	st	X, r1
            *m->fwd_TCCRA_addr = m->fwd_TCCRA_value; //Activate PWM forward
    1970:	a5 81       	ldd	r26, Z+5	; 0x05
    1972:	b6 81       	ldd	r27, Z+6	; 0x06
    1974:	87 81       	ldd	r24, Z+7	; 0x07
    1976:	8c 93       	st	X, r24
            
            *m->rev_TCCRB_addr = 0x00; //Disable clock Rev
    1978:	a5 89       	ldd	r26, Z+21	; 0x15
    197a:	b6 89       	ldd	r27, Z+22	; 0x16
    197c:	1c 92       	st	X, r1
            *m->fwd_TCCRB_addr = m->fwd_TCCRB_value;
    197e:	a0 85       	ldd	r26, Z+8	; 0x08
    1980:	b1 85       	ldd	r27, Z+9	; 0x09
    1982:	82 85       	ldd	r24, Z+10	; 0x0a
    1984:	8c 93       	st	X, r24
            *m->rev_TCCRA_addr = m->rev_TCCRA_value;

            *m->fwd_TCCRB_addr = 0x00;
            *m->rev_TCCRB_addr = m->rev_TCCRB_value;
        }        
        *m->enable_port_addr |= 1<<m->enable_pin; 
    1986:	86 8d       	ldd	r24, Z+30	; 0x1e
    1988:	02 8c       	ldd	r0, Z+26	; 0x1a
    198a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    198c:	e0 2d       	mov	r30, r0
    198e:	20 81       	ld	r18, Z
    1990:	d5 01       	movw	r26, r10
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <calibrateMotors+0xe0>
    1994:	aa 0f       	add	r26, r26
    1996:	bb 1f       	adc	r27, r27
    1998:	8a 95       	dec	r24
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <calibrateMotors+0xdc>
    199c:	cd 01       	movw	r24, r26
    199e:	82 2b       	or	r24, r18
    19a0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19a2:	5f ef       	ldi	r21, 0xFF	; 255
    19a4:	89 e6       	ldi	r24, 0x69	; 105
    19a6:	98 e1       	ldi	r25, 0x18	; 24
    19a8:	51 50       	subi	r21, 0x01	; 1
    19aa:	80 40       	sbci	r24, 0x00	; 0
    19ac:	90 40       	sbci	r25, 0x00	; 0
    19ae:	e1 f7       	brne	.-8      	; 0x19a8 <calibrateMotors+0xf0>
    19b0:	00 c0       	rjmp	.+0      	; 0x19b2 <calibrateMotors+0xfa>
    19b2:	00 00       	nop
    19b4:	94 e6       	ldi	r25, 0x64	; 100
    19b6:	49 2e       	mov	r4, r25
        fprintf(port, "%d\n",i);
        volatile motor *m = &motors[i];
        uint16_t minval = 1024;
        uint16_t maxval = 0;
        setMotor(m, FORWARD, m->max_pwm);
        uint16_t lastval = 0; // AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    19b8:	61 2c       	mov	r6, r1
    19ba:	71 2c       	mov	r7, r1
        _delay_ms(500);
        for(uint8_t wait = 0; wait < 100; wait++){
            uint16_t value = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    19bc:	5e 9c       	mul	r5, r14
    19be:	80 01       	movw	r16, r0
    19c0:	5f 9c       	mul	r5, r15
    19c2:	10 0d       	add	r17, r0
    19c4:	11 24       	eor	r1, r1
    19c6:	02 5d       	subi	r16, 0xD2	; 210
    19c8:	1e 4f       	sbci	r17, 0xFE	; 254
    19ca:	0e c0       	rjmp	.+28     	; 0x19e8 <calibrateMotors+0x130>
    19cc:	5f ef       	ldi	r21, 0xFF	; 255
    19ce:	89 e6       	ldi	r24, 0x69	; 105
    19d0:	98 e1       	ldi	r25, 0x18	; 24
    19d2:	51 50       	subi	r21, 0x01	; 1
    19d4:	80 40       	sbci	r24, 0x00	; 0
    19d6:	90 40       	sbci	r25, 0x00	; 0
    19d8:	e1 f7       	brne	.-8      	; 0x19d2 <calibrateMotors+0x11a>
    19da:	00 c0       	rjmp	.+0      	; 0x19dc <calibrateMotors+0x124>
    19dc:	00 00       	nop
    19de:	4a 94       	dec	r4
    19e0:	3e 01       	movw	r6, r28
        uint16_t minval = 1024;
        uint16_t maxval = 0;
        setMotor(m, FORWARD, m->max_pwm);
        uint16_t lastval = 0; // AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
        _delay_ms(500);
        for(uint8_t wait = 0; wait < 100; wait++){
    19e2:	44 20       	and	r4, r4
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <calibrateMotors+0x130>
    19e6:	6f c1       	rjmp	.+734    	; 0x1cc6 <calibrateMotors+0x40e>
            uint16_t value = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    19e8:	d8 01       	movw	r26, r16
    19ea:	8c 91       	ld	r24, X
    19ec:	44 e0       	ldi	r20, 0x04	; 4
    19ee:	60 e4       	ldi	r22, 0x40	; 64
    19f0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <AVGVoltage>
    19f4:	ec 01       	movw	r28, r24
            if (value > lastval - CALIBRATION_HYSTERESIS && value < lastval + CALIBRATION_HYSTERESIS){
    19f6:	c3 01       	movw	r24, r6
    19f8:	02 97       	sbiw	r24, 0x02	; 2
    19fa:	8c 17       	cp	r24, r28
    19fc:	9d 07       	cpc	r25, r29
    19fe:	30 f7       	brcc	.-52     	; 0x19cc <calibrateMotors+0x114>
    1a00:	b2 e0       	ldi	r27, 0x02	; 2
    1a02:	6b 0e       	add	r6, r27
    1a04:	71 1c       	adc	r7, r1
    1a06:	c6 15       	cp	r28, r6
    1a08:	d7 05       	cpc	r29, r7
    1a0a:	00 f7       	brcc	.-64     	; 0x19cc <calibrateMotors+0x114>
                fprintf_P(port, PSTR("FW min: "));
    1a0c:	aa e1       	ldi	r26, 0x1A	; 26
    1a0e:	b2 e0       	ldi	r27, 0x02	; 2
    1a10:	bf 93       	push	r27
    1a12:	af 93       	push	r26
    1a14:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1a18:	8f 93       	push	r24
    1a1a:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1a1e:	8f 93       	push	r24
    1a20:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
                fprintf(port, "%d\n",value);
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	df 92       	push	r13
    1a2a:	cf 92       	push	r12
    1a2c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1a30:	8f 93       	push	r24
    1a32:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1a36:	8f 93       	push	r24
    1a38:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
                minval = value;
                break;
    1a3c:	4d b7       	in	r20, 0x3d	; 61
    1a3e:	5e b7       	in	r21, 0x3e	; 62
    1a40:	46 5f       	subi	r20, 0xF6	; 246
    1a42:	5f 4f       	sbci	r21, 0xFF	; 255
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	5e bf       	out	0x3e, r21	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	4d bf       	out	0x3d, r20	; 61
            }
            lastval = value;
            _delay_ms(500);
        }
        setMotor(m, BACKWARD, m->max_pwm);
    1a4e:	5e 9c       	mul	r5, r14
    1a50:	f0 01       	movw	r30, r0
    1a52:	5f 9c       	mul	r5, r15
    1a54:	f0 0d       	add	r31, r0
    1a56:	11 24       	eor	r1, r1
    1a58:	e1 5f       	subi	r30, 0xF1	; 241
    1a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5c:	86 a5       	ldd	r24, Z+46	; 0x2e
} 
//volatile uint8_t *OCRC_ADDR[] = {&OCR1CL, &OCR4AL }
//volatile uint8_t *OCRB_ADDR[] = {&OCR1BL, &OCR4BL }

void setMotor(volatile motor *m, uint8_t dir, uint8_t pwm){
    m->current_pwm = pwm;
    1a5e:	81 a3       	std	Z+33, r24	; 0x21
    if (pwm > 0){
    1a60:	88 23       	and	r24, r24
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <calibrateMotors+0x1ae>
    1a64:	de c0       	rjmp	.+444    	; 0x1c22 <calibrateMotors+0x36a>
            
            *m->rev_TCCRB_addr = 0x00; //Disable clock Rev
            *m->fwd_TCCRB_addr = m->fwd_TCCRB_value;
        }
        else{ //Backward
            *m->fwd_OCR_addr = 0x00;
    1a66:	a3 85       	ldd	r26, Z+11	; 0x0b
    1a68:	b4 85       	ldd	r27, Z+12	; 0x0c
    1a6a:	1c 92       	st	X, r1
            *m->rev_OCR_addr = pwm; 
    1a6c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a6e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a70:	8c 93       	st	X, r24
            *m->fwd_port_addr &= ~(1<<m->fwd_pin);
    1a72:	84 81       	ldd	r24, Z+4	; 0x04
    1a74:	a0 81       	ld	r26, Z
    1a76:	b1 81       	ldd	r27, Z+1	; 0x01
    1a78:	2c 91       	ld	r18, X
    1a7a:	a5 01       	movw	r20, r10
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <calibrateMotors+0x1ca>
    1a7e:	44 0f       	add	r20, r20
    1a80:	55 1f       	adc	r21, r21
    1a82:	8a 95       	dec	r24
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <calibrateMotors+0x1c6>
    1a86:	ca 01       	movw	r24, r20
    1a88:	80 95       	com	r24
    1a8a:	90 95       	com	r25
    1a8c:	82 23       	and	r24, r18
    1a8e:	8c 93       	st	X, r24
            *m->fwd_TCCRA_addr = 0x00; //Disable FWD
    1a90:	a5 81       	ldd	r26, Z+5	; 0x05
    1a92:	b6 81       	ldd	r27, Z+6	; 0x06
    1a94:	1c 92       	st	X, r1
            *m->rev_TCCRA_addr = m->rev_TCCRA_value;
    1a96:	a2 89       	ldd	r26, Z+18	; 0x12
    1a98:	b3 89       	ldd	r27, Z+19	; 0x13
    1a9a:	84 89       	ldd	r24, Z+20	; 0x14
    1a9c:	8c 93       	st	X, r24

            *m->fwd_TCCRB_addr = 0x00;
    1a9e:	a0 85       	ldd	r26, Z+8	; 0x08
    1aa0:	b1 85       	ldd	r27, Z+9	; 0x09
    1aa2:	1c 92       	st	X, r1
            *m->rev_TCCRB_addr = m->rev_TCCRB_value;
    1aa4:	a5 89       	ldd	r26, Z+21	; 0x15
    1aa6:	b6 89       	ldd	r27, Z+22	; 0x16
    1aa8:	87 89       	ldd	r24, Z+23	; 0x17
    1aaa:	8c 93       	st	X, r24
        }        
        *m->enable_port_addr |= 1<<m->enable_pin; 
    1aac:	86 8d       	ldd	r24, Z+30	; 0x1e
    1aae:	02 8c       	ldd	r0, Z+26	; 0x1a
    1ab0:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1ab2:	e0 2d       	mov	r30, r0
    1ab4:	20 81       	ld	r18, Z
    1ab6:	d5 01       	movw	r26, r10
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <calibrateMotors+0x206>
    1aba:	aa 0f       	add	r26, r26
    1abc:	bb 1f       	adc	r27, r27
    1abe:	8a 95       	dec	r24
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <calibrateMotors+0x202>
    1ac2:	cd 01       	movw	r24, r26
    1ac4:	82 2b       	or	r24, r18
    1ac6:	80 83       	st	Z, r24
    1ac8:	5f ef       	ldi	r21, 0xFF	; 255
    1aca:	89 e6       	ldi	r24, 0x69	; 105
    1acc:	98 e1       	ldi	r25, 0x18	; 24
    1ace:	51 50       	subi	r21, 0x01	; 1
    1ad0:	80 40       	sbci	r24, 0x00	; 0
    1ad2:	90 40       	sbci	r25, 0x00	; 0
    1ad4:	e1 f7       	brne	.-8      	; 0x1ace <calibrateMotors+0x216>
    1ad6:	00 c0       	rjmp	.+0      	; 0x1ad8 <calibrateMotors+0x220>
    1ad8:	00 00       	nop
    1ada:	84 e6       	ldi	r24, 0x64	; 100
    1adc:	48 2e       	mov	r4, r24
            }
            lastval = value;
            _delay_ms(500);
        }
        setMotor(m, BACKWARD, m->max_pwm);
        lastval = 0; //AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    1ade:	61 2c       	mov	r6, r1
    1ae0:	71 2c       	mov	r7, r1
        _delay_ms(500);
        for(uint8_t wait = 0; wait < 100; wait++){
            uint16_t value = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    1ae2:	5e 9c       	mul	r5, r14
    1ae4:	80 01       	movw	r16, r0
    1ae6:	5f 9c       	mul	r5, r15
    1ae8:	10 0d       	add	r17, r0
    1aea:	11 24       	eor	r1, r1
    1aec:	02 5d       	subi	r16, 0xD2	; 210
    1aee:	1e 4f       	sbci	r17, 0xFE	; 254
    1af0:	0e c0       	rjmp	.+28     	; 0x1b0e <calibrateMotors+0x256>
    1af2:	3f ef       	ldi	r19, 0xFF	; 255
    1af4:	49 e6       	ldi	r20, 0x69	; 105
    1af6:	58 e1       	ldi	r21, 0x18	; 24
    1af8:	31 50       	subi	r19, 0x01	; 1
    1afa:	40 40       	sbci	r20, 0x00	; 0
    1afc:	50 40       	sbci	r21, 0x00	; 0
    1afe:	e1 f7       	brne	.-8      	; 0x1af8 <calibrateMotors+0x240>
    1b00:	00 c0       	rjmp	.+0      	; 0x1b02 <calibrateMotors+0x24a>
    1b02:	00 00       	nop
    1b04:	4a 94       	dec	r4
    1b06:	3c 01       	movw	r6, r24
            _delay_ms(500);
        }
        setMotor(m, BACKWARD, m->max_pwm);
        lastval = 0; //AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
        _delay_ms(500);
        for(uint8_t wait = 0; wait < 100; wait++){
    1b08:	44 20       	and	r4, r4
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <calibrateMotors+0x256>
    1b0c:	df c0       	rjmp	.+446    	; 0x1ccc <calibrateMotors+0x414>
            uint16_t value = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    1b0e:	d8 01       	movw	r26, r16
    1b10:	8c 91       	ld	r24, X
    1b12:	44 e0       	ldi	r20, 0x04	; 4
    1b14:	60 e4       	ldi	r22, 0x40	; 64
    1b16:	0e 94 5d 02 	call	0x4ba	; 0x4ba <AVGVoltage>
            if (value > lastval - CALIBRATION_HYSTERESIS && value < lastval + CALIBRATION_HYSTERESIS){
    1b1a:	93 01       	movw	r18, r6
    1b1c:	22 50       	subi	r18, 0x02	; 2
    1b1e:	31 09       	sbc	r19, r1
    1b20:	28 17       	cp	r18, r24
    1b22:	39 07       	cpc	r19, r25
    1b24:	30 f7       	brcc	.-52     	; 0x1af2 <calibrateMotors+0x23a>
    1b26:	b2 e0       	ldi	r27, 0x02	; 2
    1b28:	6b 0e       	add	r6, r27
    1b2a:	71 1c       	adc	r7, r1
    1b2c:	86 15       	cp	r24, r6
    1b2e:	97 05       	cpc	r25, r7
    1b30:	00 f7       	brcc	.-64     	; 0x1af2 <calibrateMotors+0x23a>
    1b32:	8c 01       	movw	r16, r24
                fprintf_P(port, PSTR("RW max: "));
    1b34:	a1 e1       	ldi	r26, 0x11	; 17
    1b36:	b2 e0       	ldi	r27, 0x02	; 2
    1b38:	bf 93       	push	r27
    1b3a:	af 93       	push	r26
    1b3c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1b40:	8f 93       	push	r24
    1b42:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1b46:	8f 93       	push	r24
    1b48:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
                fprintf(port, "%d\n", value);
    1b4c:	1f 93       	push	r17
    1b4e:	0f 93       	push	r16
    1b50:	df 92       	push	r13
    1b52:	cf 92       	push	r12
    1b54:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1b58:	8f 93       	push	r24
    1b5a:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1b5e:	8f 93       	push	r24
    1b60:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
                maxval = value;
                break;
    1b64:	2d b7       	in	r18, 0x3d	; 61
    1b66:	3e b7       	in	r19, 0x3e	; 62
    1b68:	26 5f       	subi	r18, 0xF6	; 246
    1b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	3e bf       	out	0x3e, r19	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	2d bf       	out	0x3d, r18	; 61
            }
            lastval = value;
            _delay_ms(500);
        }
        fprintf_P(port, PSTR("calibration ready\n"));
    1b76:	3f 92       	push	r3
    1b78:	2f 92       	push	r2
    1b7a:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1b7e:	8f 93       	push	r24
    1b80:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1b84:	8f 93       	push	r24
    1b86:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
        float min = minval;
        float max = maxval;
        fprintf_P(port, PSTR("Voltage Min:"));
    1b8a:	a1 ef       	ldi	r26, 0xF1	; 241
    1b8c:	b1 e0       	ldi	r27, 0x01	; 1
    1b8e:	bf 93       	push	r27
    1b90:	af 93       	push	r26
    1b92:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1b96:	8f 93       	push	r24
    1b98:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1b9c:	8f 93       	push	r24
    1b9e:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
            lastval = value;
            _delay_ms(500);
        }
        fprintf_P(port, PSTR("calibration ready\n"));
        float min = minval;
        float max = maxval;
    1ba2:	b8 01       	movw	r22, r16
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
        fprintf_P(port, PSTR("Voltage Min:"));
        fprintf(port, "%f Max:%f\n",(4700.0/1024.0)*min,(4700.0/1024.0)*max);
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 ee       	ldi	r19, 0xE0	; 224
    1bb0:	42 e9       	ldi	r20, 0x92	; 146
    1bb2:	50 e4       	ldi	r21, 0x40	; 64
    1bb4:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
    1bb8:	9f 93       	push	r25
    1bba:	8f 93       	push	r24
    1bbc:	7f 93       	push	r23
    1bbe:	6f 93       	push	r22
            }
            lastval = value;
            _delay_ms(500);
        }
        fprintf_P(port, PSTR("calibration ready\n"));
        float min = minval;
    1bc0:	be 01       	movw	r22, r28
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
        float max = maxval;
        fprintf_P(port, PSTR("Voltage Min:"));
        fprintf(port, "%f Max:%f\n",(4700.0/1024.0)*min,(4700.0/1024.0)*max);
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 ee       	ldi	r19, 0xE0	; 224
    1bce:	42 e9       	ldi	r20, 0x92	; 146
    1bd0:	50 e4       	ldi	r21, 0x40	; 64
    1bd2:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
    1bd6:	9f 93       	push	r25
    1bd8:	8f 93       	push	r24
    1bda:	7f 93       	push	r23
    1bdc:	6f 93       	push	r22
    1bde:	a4 ee       	ldi	r26, 0xE4	; 228
    1be0:	b1 e0       	ldi	r27, 0x01	; 1
    1be2:	bf 93       	push	r27
    1be4:	af 93       	push	r26
    1be6:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1bea:	8f 93       	push	r24
    1bec:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1bf0:	8f 93       	push	r24
    1bf2:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
    }
}

void calibrateMotors(void){
    //return;
    for(uint8_t i=0; i<NUM_OF_MOTORS;i++){
    1bf6:	2d b7       	in	r18, 0x3d	; 61
    1bf8:	3e b7       	in	r19, 0x3e	; 62
    1bfa:	2c 5e       	subi	r18, 0xEC	; 236
    1bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	3e bf       	out	0x3e, r19	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	2d bf       	out	0x3d, r18	; 61
    1c08:	31 e0       	ldi	r19, 0x01	; 1
    1c0a:	e3 16       	cp	r14, r19
    1c0c:	f1 04       	cpc	r15, r1
    1c0e:	29 f4       	brne	.+10     	; 0x1c1a <calibrateMotors+0x362>
        float min = minval;
        float max = maxval;
        fprintf_P(port, PSTR("Voltage Min:"));
        fprintf(port, "%f Max:%f\n",(4700.0/1024.0)*min,(4700.0/1024.0)*max);
    }
}
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	e2 e1       	ldi	r30, 0x12	; 18
    1c16:	0c 94 f0 29 	jmp	0x53e0	; 0x53e0 <__epilogue_restores__>
    1c1a:	ee 24       	eor	r14, r14
    1c1c:	e3 94       	inc	r14
    1c1e:	f1 2c       	mov	r15, r1
    1c20:	64 ce       	rjmp	.-824    	; 0x18ea <calibrateMotors+0x32>
  
   // GTCCR = 0x00;//Counter is started at the main loop Start Counter
}
void disableMotorPWM(volatile motor *m){

    *m->enable_port_addr &= ~(1<<m->enable_pin); //Disable motor => clear enable port
    1c22:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c24:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c26:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1c28:	2c 91       	ld	r18, X
    1c2a:	a5 01       	movw	r20, r10
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <calibrateMotors+0x37a>
    1c2e:	44 0f       	add	r20, r20
    1c30:	55 1f       	adc	r21, r21
    1c32:	8a 95       	dec	r24
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <calibrateMotors+0x376>
    1c36:	ca 01       	movw	r24, r20
    1c38:	80 95       	com	r24
    1c3a:	90 95       	com	r25
    1c3c:	82 23       	and	r24, r18
    1c3e:	8c 93       	st	X, r24
    *m->fwd_TCCRA_addr = 0x00;//m.fwd_TCCRA_value;
    1c40:	a5 81       	ldd	r26, Z+5	; 0x05
    1c42:	b6 81       	ldd	r27, Z+6	; 0x06
    1c44:	1c 92       	st	X, r1
    *m->fwd_TCCRB_addr = 0x00;//m.fwd_TCCRB_value;
    1c46:	a0 85       	ldd	r26, Z+8	; 0x08
    1c48:	b1 85       	ldd	r27, Z+9	; 0x09
    1c4a:	1c 92       	st	X, r1
    *m->fwd_OCR_addr = 0x00; //Init PWM to zero
    1c4c:	a3 85       	ldd	r26, Z+11	; 0x0b
    1c4e:	b4 85       	ldd	r27, Z+12	; 0x0c
    1c50:	1c 92       	st	X, r1
    
    //Init reverse PWM settings
    *m->rev_TCCRA_addr = 0x00;//m.rev_TCCRA_value;
    1c52:	a2 89       	ldd	r26, Z+18	; 0x12
    1c54:	b3 89       	ldd	r27, Z+19	; 0x13
    1c56:	1c 92       	st	X, r1
    *m->rev_TCCRB_addr = 0x00; //m.rev_TCCRB_value;
    1c58:	a5 89       	ldd	r26, Z+21	; 0x15
    1c5a:	b6 89       	ldd	r27, Z+22	; 0x16
    1c5c:	1c 92       	st	X, r1
    *m->rev_OCR_addr = 0x00; //Init PWM to zero
    1c5e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c60:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c62:	1c 92       	st	X, r1
    m->current_pwm = 0; //set PWM to zero
    1c64:	11 a2       	std	Z+33, r1	; 0x21
    m->timeout_value = 0; //Reset timeout values
    1c66:	e5 5b       	subi	r30, 0xB5	; 181
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	10 82       	st	Z, r1
    1c6c:	11 82       	std	Z+1, r1	; 0x01
    1c6e:	12 82       	std	Z+2, r1	; 0x02
    1c70:	13 82       	std	Z+3, r1	; 0x03
    1c72:	2a cf       	rjmp	.-428    	; 0x1ac8 <calibrateMotors+0x210>
  
   // GTCCR = 0x00;//Counter is started at the main loop Start Counter
}
void disableMotorPWM(volatile motor *m){

    *m->enable_port_addr &= ~(1<<m->enable_pin); //Disable motor => clear enable port
    1c74:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c76:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c78:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1c7a:	2c 91       	ld	r18, X
    1c7c:	a5 01       	movw	r20, r10
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <calibrateMotors+0x3cc>
    1c80:	44 0f       	add	r20, r20
    1c82:	55 1f       	adc	r21, r21
    1c84:	8a 95       	dec	r24
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <calibrateMotors+0x3c8>
    1c88:	ca 01       	movw	r24, r20
    1c8a:	80 95       	com	r24
    1c8c:	90 95       	com	r25
    1c8e:	82 23       	and	r24, r18
    1c90:	8c 93       	st	X, r24
    *m->fwd_TCCRA_addr = 0x00;//m.fwd_TCCRA_value;
    1c92:	a5 81       	ldd	r26, Z+5	; 0x05
    1c94:	b6 81       	ldd	r27, Z+6	; 0x06
    1c96:	1c 92       	st	X, r1
    *m->fwd_TCCRB_addr = 0x00;//m.fwd_TCCRB_value;
    1c98:	a0 85       	ldd	r26, Z+8	; 0x08
    1c9a:	b1 85       	ldd	r27, Z+9	; 0x09
    1c9c:	1c 92       	st	X, r1
    *m->fwd_OCR_addr = 0x00; //Init PWM to zero
    1c9e:	a3 85       	ldd	r26, Z+11	; 0x0b
    1ca0:	b4 85       	ldd	r27, Z+12	; 0x0c
    1ca2:	1c 92       	st	X, r1
    
    //Init reverse PWM settings
    *m->rev_TCCRA_addr = 0x00;//m.rev_TCCRA_value;
    1ca4:	a2 89       	ldd	r26, Z+18	; 0x12
    1ca6:	b3 89       	ldd	r27, Z+19	; 0x13
    1ca8:	1c 92       	st	X, r1
    *m->rev_TCCRB_addr = 0x00; //m.rev_TCCRB_value;
    1caa:	a5 89       	ldd	r26, Z+21	; 0x15
    1cac:	b6 89       	ldd	r27, Z+22	; 0x16
    1cae:	1c 92       	st	X, r1
    *m->rev_OCR_addr = 0x00; //Init PWM to zero
    1cb0:	a0 8d       	ldd	r26, Z+24	; 0x18
    1cb2:	b1 8d       	ldd	r27, Z+25	; 0x19
    1cb4:	1c 92       	st	X, r1
    m->current_pwm = 0; //set PWM to zero
    1cb6:	11 a2       	std	Z+33, r1	; 0x21
    m->timeout_value = 0; //Reset timeout values
    1cb8:	e5 5b       	subi	r30, 0xB5	; 181
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	10 82       	st	Z, r1
    1cbe:	11 82       	std	Z+1, r1	; 0x01
    1cc0:	12 82       	std	Z+2, r1	; 0x02
    1cc2:	13 82       	std	Z+3, r1	; 0x03
    1cc4:	6e ce       	rjmp	.-804    	; 0x19a2 <calibrateMotors+0xea>
    //return;
    for(uint8_t i=0; i<NUM_OF_MOTORS;i++){
        fprintf_P(port, PSTR("calibrating motor:"));
        fprintf(port, "%d\n",i);
        volatile motor *m = &motors[i];
        uint16_t minval = 1024;
    1cc6:	c0 e0       	ldi	r28, 0x00	; 0
    1cc8:	d4 e0       	ldi	r29, 0x04	; 4
    1cca:	c1 ce       	rjmp	.-638    	; 0x1a4e <calibrateMotors+0x196>
        uint16_t maxval = 0;
    1ccc:	00 e0       	ldi	r16, 0x00	; 0
    1cce:	10 e0       	ldi	r17, 0x00	; 0
    1cd0:	52 cf       	rjmp	.-348    	; 0x1b76 <calibrateMotors+0x2be>

00001cd2 <delayLoop_us>:
        fprintf(port, "%f Max:%f\n",(4700.0/1024.0)*min,(4700.0/1024.0)*max);
    }
}

void delayLoop_us(uint16_t delay){
    for (uint16_t i = 0; i < delay/50; i++){
    1cd2:	9c 01       	movw	r18, r24
    1cd4:	36 95       	lsr	r19
    1cd6:	27 95       	ror	r18
    1cd8:	ab e7       	ldi	r26, 0x7B	; 123
    1cda:	b4 e1       	ldi	r27, 0x14	; 20
    1cdc:	0e 94 c5 29 	call	0x538a	; 0x538a <__umulhisi3>
    1ce0:	96 95       	lsr	r25
    1ce2:	87 95       	ror	r24
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	59 f0       	breq	.+22     	; 0x1cfe <delayLoop_us+0x2c>
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cec:	4a ef       	ldi	r20, 0xFA	; 250
    1cee:	4a 95       	dec	r20
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <delayLoop_us+0x1c>
    1cf2:	00 c0       	rjmp	.+0      	; 0x1cf4 <delayLoop_us+0x22>
    1cf4:	2f 5f       	subi	r18, 0xFF	; 255
    1cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf8:	28 17       	cp	r18, r24
    1cfa:	39 07       	cpc	r19, r25
    1cfc:	b9 f7       	brne	.-18     	; 0x1cec <delayLoop_us+0x1a>
    1cfe:	08 95       	ret

00001d00 <disableMotorPWM>:
   //Set interrupt to TIMER1 COMPA
   TIMSK1 = 0x02; //OCIEA enabled
  
   // GTCCR = 0x00;//Counter is started at the main loop Start Counter
}
void disableMotorPWM(volatile motor *m){
    1d00:	fc 01       	movw	r30, r24

    *m->enable_port_addr &= ~(1<<m->enable_pin); //Disable motor => clear enable port
    1d02:	36 8d       	ldd	r19, Z+30	; 0x1e
    1d04:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d06:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1d08:	2c 91       	ld	r18, X
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <disableMotorPWM+0x14>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	3a 95       	dec	r19
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <disableMotorPWM+0x10>
    1d18:	80 95       	com	r24
    1d1a:	90 95       	com	r25
    1d1c:	82 23       	and	r24, r18
    1d1e:	8c 93       	st	X, r24
    *m->fwd_TCCRA_addr = 0x00;//m.fwd_TCCRA_value;
    1d20:	a5 81       	ldd	r26, Z+5	; 0x05
    1d22:	b6 81       	ldd	r27, Z+6	; 0x06
    1d24:	1c 92       	st	X, r1
    *m->fwd_TCCRB_addr = 0x00;//m.fwd_TCCRB_value;
    1d26:	a0 85       	ldd	r26, Z+8	; 0x08
    1d28:	b1 85       	ldd	r27, Z+9	; 0x09
    1d2a:	1c 92       	st	X, r1
    *m->fwd_OCR_addr = 0x00; //Init PWM to zero
    1d2c:	a3 85       	ldd	r26, Z+11	; 0x0b
    1d2e:	b4 85       	ldd	r27, Z+12	; 0x0c
    1d30:	1c 92       	st	X, r1
    
    //Init reverse PWM settings
    *m->rev_TCCRA_addr = 0x00;//m.rev_TCCRA_value;
    1d32:	a2 89       	ldd	r26, Z+18	; 0x12
    1d34:	b3 89       	ldd	r27, Z+19	; 0x13
    1d36:	1c 92       	st	X, r1
    *m->rev_TCCRB_addr = 0x00; //m.rev_TCCRB_value;
    1d38:	a5 89       	ldd	r26, Z+21	; 0x15
    1d3a:	b6 89       	ldd	r27, Z+22	; 0x16
    1d3c:	1c 92       	st	X, r1
    *m->rev_OCR_addr = 0x00; //Init PWM to zero
    1d3e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d40:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d42:	1c 92       	st	X, r1
    m->current_pwm = 0; //set PWM to zero
    1d44:	11 a2       	std	Z+33, r1	; 0x21
    m->timeout_value = 0; //Reset timeout values
    1d46:	e5 5b       	subi	r30, 0xB5	; 181
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	10 82       	st	Z, r1
    1d4c:	11 82       	std	Z+1, r1	; 0x01
    1d4e:	12 82       	std	Z+2, r1	; 0x02
    1d50:	13 82       	std	Z+3, r1	; 0x03
    1d52:	08 95       	ret

00001d54 <setMotor>:
} 
//volatile uint8_t *OCRC_ADDR[] = {&OCR1CL, &OCR4AL }
//volatile uint8_t *OCRB_ADDR[] = {&OCR1BL, &OCR4BL }

void setMotor(volatile motor *m, uint8_t dir, uint8_t pwm){
    1d54:	fc 01       	movw	r30, r24
    m->current_pwm = pwm;
    1d56:	41 a3       	std	Z+33, r20	; 0x21
    if (pwm > 0){
    1d58:	44 23       	and	r20, r20
    1d5a:	a1 f1       	breq	.+104    	; 0x1dc4 <setMotor+0x70>
        if (dir == FORWARD){ //Forward
    1d5c:	61 30       	cpi	r22, 0x01	; 1
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <setMotor+0xe>
    1d60:	5a c0       	rjmp	.+180    	; 0x1e16 <setMotor+0xc2>
            
            *m->rev_TCCRB_addr = 0x00; //Disable clock Rev
            *m->fwd_TCCRB_addr = m->fwd_TCCRB_value;
        }
        else{ //Backward
            *m->fwd_OCR_addr = 0x00;
    1d62:	a3 85       	ldd	r26, Z+11	; 0x0b
    1d64:	b4 85       	ldd	r27, Z+12	; 0x0c
    1d66:	1c 92       	st	X, r1
            *m->rev_OCR_addr = pwm; 
    1d68:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d6a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d6c:	4c 93       	st	X, r20
            *m->fwd_port_addr &= ~(1<<m->fwd_pin);
    1d6e:	34 81       	ldd	r19, Z+4	; 0x04
    1d70:	a0 81       	ld	r26, Z
    1d72:	b1 81       	ldd	r27, Z+1	; 0x01
    1d74:	2c 91       	ld	r18, X
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <setMotor+0x2c>
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	3a 95       	dec	r19
    1d82:	e2 f7       	brpl	.-8      	; 0x1d7c <setMotor+0x28>
    1d84:	80 95       	com	r24
    1d86:	90 95       	com	r25
    1d88:	82 23       	and	r24, r18
    1d8a:	8c 93       	st	X, r24
            *m->fwd_TCCRA_addr = 0x00; //Disable FWD
    1d8c:	a5 81       	ldd	r26, Z+5	; 0x05
    1d8e:	b6 81       	ldd	r27, Z+6	; 0x06
    1d90:	1c 92       	st	X, r1
            *m->rev_TCCRA_addr = m->rev_TCCRA_value;
    1d92:	a2 89       	ldd	r26, Z+18	; 0x12
    1d94:	b3 89       	ldd	r27, Z+19	; 0x13
    1d96:	84 89       	ldd	r24, Z+20	; 0x14
    1d98:	8c 93       	st	X, r24

            *m->fwd_TCCRB_addr = 0x00;
    1d9a:	a0 85       	ldd	r26, Z+8	; 0x08
    1d9c:	b1 85       	ldd	r27, Z+9	; 0x09
    1d9e:	1c 92       	st	X, r1
            *m->rev_TCCRB_addr = m->rev_TCCRB_value;
    1da0:	a5 89       	ldd	r26, Z+21	; 0x15
    1da2:	b6 89       	ldd	r27, Z+22	; 0x16
    1da4:	87 89       	ldd	r24, Z+23	; 0x17
    1da6:	8c 93       	st	X, r24
        }        
        *m->enable_port_addr |= 1<<m->enable_pin; 
    1da8:	36 8d       	ldd	r19, Z+30	; 0x1e
    1daa:	02 8c       	ldd	r0, Z+26	; 0x1a
    1dac:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1dae:	e0 2d       	mov	r30, r0
    1db0:	20 81       	ld	r18, Z
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	01 c0       	rjmp	.+2      	; 0x1dba <setMotor+0x66>
    1db8:	88 0f       	add	r24, r24
    1dba:	3a 95       	dec	r19
    1dbc:	ea f7       	brpl	.-6      	; 0x1db8 <setMotor+0x64>
    1dbe:	82 2b       	or	r24, r18
    1dc0:	80 83       	st	Z, r24
    1dc2:	08 95       	ret
  
   // GTCCR = 0x00;//Counter is started at the main loop Start Counter
}
void disableMotorPWM(volatile motor *m){

    *m->enable_port_addr &= ~(1<<m->enable_pin); //Disable motor => clear enable port
    1dc4:	36 8d       	ldd	r19, Z+30	; 0x1e
    1dc6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1dc8:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1dca:	2c 91       	ld	r18, X
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <setMotor+0x82>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	3a 95       	dec	r19
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <setMotor+0x7e>
    1dda:	80 95       	com	r24
    1ddc:	90 95       	com	r25
    1dde:	82 23       	and	r24, r18
    1de0:	8c 93       	st	X, r24
    *m->fwd_TCCRA_addr = 0x00;//m.fwd_TCCRA_value;
    1de2:	a5 81       	ldd	r26, Z+5	; 0x05
    1de4:	b6 81       	ldd	r27, Z+6	; 0x06
    1de6:	1c 92       	st	X, r1
    *m->fwd_TCCRB_addr = 0x00;//m.fwd_TCCRB_value;
    1de8:	a0 85       	ldd	r26, Z+8	; 0x08
    1dea:	b1 85       	ldd	r27, Z+9	; 0x09
    1dec:	1c 92       	st	X, r1
    *m->fwd_OCR_addr = 0x00; //Init PWM to zero
    1dee:	a3 85       	ldd	r26, Z+11	; 0x0b
    1df0:	b4 85       	ldd	r27, Z+12	; 0x0c
    1df2:	1c 92       	st	X, r1
    
    //Init reverse PWM settings
    *m->rev_TCCRA_addr = 0x00;//m.rev_TCCRA_value;
    1df4:	a2 89       	ldd	r26, Z+18	; 0x12
    1df6:	b3 89       	ldd	r27, Z+19	; 0x13
    1df8:	1c 92       	st	X, r1
    *m->rev_TCCRB_addr = 0x00; //m.rev_TCCRB_value;
    1dfa:	a5 89       	ldd	r26, Z+21	; 0x15
    1dfc:	b6 89       	ldd	r27, Z+22	; 0x16
    1dfe:	1c 92       	st	X, r1
    *m->rev_OCR_addr = 0x00; //Init PWM to zero
    1e00:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e02:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e04:	1c 92       	st	X, r1
    m->current_pwm = 0; //set PWM to zero
    1e06:	11 a2       	std	Z+33, r1	; 0x21
    m->timeout_value = 0; //Reset timeout values
    1e08:	e5 5b       	subi	r30, 0xB5	; 181
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	10 82       	st	Z, r1
    1e0e:	11 82       	std	Z+1, r1	; 0x01
    1e10:	12 82       	std	Z+2, r1	; 0x02
    1e12:	13 82       	std	Z+3, r1	; 0x03
    1e14:	08 95       	ret

void setMotor(volatile motor *m, uint8_t dir, uint8_t pwm){
    m->current_pwm = pwm;
    if (pwm > 0){
        if (dir == FORWARD){ //Forward
            *m->rev_OCR_addr = 0x00; //PWM pulse width
    1e16:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e18:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e1a:	1c 92       	st	X, r1
            *m->fwd_OCR_addr = pwm; 
    1e1c:	a3 85       	ldd	r26, Z+11	; 0x0b
    1e1e:	b4 85       	ldd	r27, Z+12	; 0x0c
    1e20:	4c 93       	st	X, r20
            *m->rev_port_addr &= ~(1<<m->rev_pin);
    1e22:	31 89       	ldd	r19, Z+17	; 0x11
    1e24:	a5 85       	ldd	r26, Z+13	; 0x0d
    1e26:	b6 85       	ldd	r27, Z+14	; 0x0e
    1e28:	2c 91       	ld	r18, X
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <setMotor+0xe0>
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	3a 95       	dec	r19
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <setMotor+0xdc>
    1e38:	80 95       	com	r24
    1e3a:	90 95       	com	r25
    1e3c:	82 23       	and	r24, r18
    1e3e:	8c 93       	st	X, r24
            *m->rev_TCCRA_addr = 0x00; //Disable reverse
    1e40:	a2 89       	ldd	r26, Z+18	; 0x12
    1e42:	b3 89       	ldd	r27, Z+19	; 0x13
    1e44:	1c 92       	st	X, r1
            *m->fwd_TCCRA_addr = m->fwd_TCCRA_value; //Activate PWM forward
    1e46:	a5 81       	ldd	r26, Z+5	; 0x05
    1e48:	b6 81       	ldd	r27, Z+6	; 0x06
    1e4a:	87 81       	ldd	r24, Z+7	; 0x07
    1e4c:	8c 93       	st	X, r24
            
            *m->rev_TCCRB_addr = 0x00; //Disable clock Rev
    1e4e:	a5 89       	ldd	r26, Z+21	; 0x15
    1e50:	b6 89       	ldd	r27, Z+22	; 0x16
    1e52:	1c 92       	st	X, r1
            *m->fwd_TCCRB_addr = m->fwd_TCCRB_value;
    1e54:	a0 85       	ldd	r26, Z+8	; 0x08
    1e56:	b1 85       	ldd	r27, Z+9	; 0x09
    1e58:	82 85       	ldd	r24, Z+10	; 0x0a
    1e5a:	8c 93       	st	X, r24
    1e5c:	a5 cf       	rjmp	.-182    	; 0x1da8 <setMotor+0x54>

00001e5e <forceMotors>:
        m->move_speed_mm = 0.0;
    }
}


void forceMotors(uint8_t dir, uint8_t time){
    1e5e:	a0 e0       	ldi	r26, 0x00	; 0
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e5 e3       	ldi	r30, 0x35	; 53
    1e64:	ff e0       	ldi	r31, 0x0F	; 15
    1e66:	0c 94 d5 29 	jmp	0x53aa	; 0x53aa <__prologue_saves__+0x2>
    1e6a:	c8 2f       	mov	r28, r24
    1e6c:	86 2e       	mov	r8, r22
    if (dir != FORWARD && dir != BACKWARD){
    1e6e:	82 30       	cpi	r24, 0x02	; 2
    1e70:	b0 f0       	brcs	.+44     	; 0x1e9e <forceMotors+0x40>
        fprintf_P(port, PSTR("ERR,dir\n"));
    1e72:	82 e6       	ldi	r24, 0x62	; 98
    1e74:	92 e0       	ldi	r25, 0x02	; 2
    1e76:	9f 93       	push	r25
    1e78:	8f 93       	push	r24
    1e7a:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1e7e:	8f 93       	push	r24
    1e80:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1e84:	8f 93       	push	r24
    1e86:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
        return;
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    fprintf_P(port, PSTR("Shutdown\n"));
    for (uint8_t i=0; i< 1; i++){
        volatile motor *m = &motors[i];
        setMotor(m, dir, 0);
    }
}
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	e1 e1       	ldi	r30, 0x11	; 17
    1e98:	0c 94 f1 29 	jmp	0x53e2	; 0x53e2 <__epilogue_restores__+0x2>
    1e9c:	ef c0       	rjmp	.+478    	; 0x207c <motorControl>
void forceMotors(uint8_t dir, uint8_t time){
    if (dir != FORWARD && dir != BACKWARD){
        fprintf_P(port, PSTR("ERR,dir\n"));
        return;
    }
    fprintf_P(port, PSTR("Running motor "));
    1e9e:	83 e5       	ldi	r24, 0x53	; 83
    1ea0:	92 e0       	ldi	r25, 0x02	; 2
    1ea2:	9f 93       	push	r25
    1ea4:	8f 93       	push	r24
    1ea6:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1eaa:	8f 93       	push	r24
    1eac:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1eb0:	8f 93       	push	r24
    1eb2:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
    fprintf(port, "%ds\n",time);
    1eb6:	1f 92       	push	r1
    1eb8:	8f 92       	push	r8
    1eba:	8f ee       	ldi	r24, 0xEF	; 239
    1ebc:	91 e0       	ldi	r25, 0x01	; 1
    1ebe:	9f 93       	push	r25
    1ec0:	8f 93       	push	r24
    1ec2:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1ec6:	8f 93       	push	r24
    1ec8:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1ecc:	8f 93       	push	r24
    1ece:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
    for (uint8_t i=0; i< 1; i++){
        volatile motor *m = &motors[i];
        setMotor(m, dir, m->max_pwm);
    1ed2:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <motors+0x2e>
    1ed6:	6c 2f       	mov	r22, r28
    1ed8:	8f e0       	ldi	r24, 0x0F	; 15
    1eda:	91 e0       	ldi	r25, 0x01	; 1
    1edc:	3b df       	rcall	.-394    	; 0x1d54 <setMotor>
    }
    for (uint16_t i=0;i<time*20;i++){
    1ede:	24 e1       	ldi	r18, 0x14	; 20
    1ee0:	82 9e       	mul	r8, r18
    1ee2:	40 01       	movw	r8, r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	8d b7       	in	r24, 0x3d	; 61
    1ee8:	9e b7       	in	r25, 0x3e	; 62
    1eea:	0a 96       	adiw	r24, 0x0a	; 10
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	9e bf       	out	0x3e, r25	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	8d bf       	out	0x3d, r24	; 61
    1ef6:	81 14       	cp	r8, r1
    1ef8:	91 04       	cpc	r9, r1
    1efa:	09 f4       	brne	.+2      	; 0x1efe <forceMotors+0xa0>
    1efc:	6e c0       	rjmp	.+220    	; 0x1fda <forceMotors+0x17c>
    1efe:	a1 2c       	mov	r10, r1
    1f00:	b1 2c       	mov	r11, r1
        for (uint8_t j=0;j<2;j++){
            volatile motor *m = &motors[j];
            uint16_t value = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    1f02:	84 e6       	ldi	r24, 0x64	; 100
    1f04:	58 2e       	mov	r5, r24
            fprintf_P(port, PSTR("motor:"));
    1f06:	9c e4       	ldi	r25, 0x4C	; 76
    1f08:	c9 2e       	mov	r12, r25
    1f0a:	92 e0       	ldi	r25, 0x02	; 2
    1f0c:	d9 2e       	mov	r13, r25
            fprintf(port, "%d", j);
    1f0e:	24 ef       	ldi	r18, 0xF4	; 244
    1f10:	e2 2e       	mov	r14, r18
    1f12:	21 e0       	ldi	r18, 0x01	; 1
    1f14:	f2 2e       	mov	r15, r18
            fprintf_P(port, PSTR(" ADC_value:"));
    1f16:	00 e4       	ldi	r16, 0x40	; 64
    1f18:	12 e0       	ldi	r17, 0x02	; 2
            fprintf(port,"%d\n",value);
    1f1a:	ca ef       	ldi	r28, 0xFA	; 250
    1f1c:	d1 e0       	ldi	r29, 0x01	; 1
    1f1e:	10 c0       	rjmp	.+32     	; 0x1f40 <forceMotors+0xe2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f20:	2f ef       	ldi	r18, 0xFF	; 255
    1f22:	80 e7       	ldi	r24, 0x70	; 112
    1f24:	92 e0       	ldi	r25, 0x02	; 2
    1f26:	21 50       	subi	r18, 0x01	; 1
    1f28:	80 40       	sbci	r24, 0x00	; 0
    1f2a:	90 40       	sbci	r25, 0x00	; 0
    1f2c:	e1 f7       	brne	.-8      	; 0x1f26 <forceMotors+0xc8>
    1f2e:	00 c0       	rjmp	.+0      	; 0x1f30 <forceMotors+0xd2>
    1f30:	00 00       	nop
    fprintf(port, "%ds\n",time);
    for (uint8_t i=0; i< 1; i++){
        volatile motor *m = &motors[i];
        setMotor(m, dir, m->max_pwm);
    }
    for (uint16_t i=0;i<time*20;i++){
    1f32:	2f ef       	ldi	r18, 0xFF	; 255
    1f34:	a2 1a       	sub	r10, r18
    1f36:	b2 0a       	sbc	r11, r18
    1f38:	8a 14       	cp	r8, r10
    1f3a:	9b 04       	cpc	r9, r11
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <forceMotors+0xe2>
    1f3e:	4d c0       	rjmp	.+154    	; 0x1fda <forceMotors+0x17c>
    1f40:	61 2c       	mov	r6, r1
    1f42:	71 2c       	mov	r7, r1
        for (uint8_t j=0;j<2;j++){
            volatile motor *m = &motors[j];
            uint16_t value = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    1f44:	56 9c       	mul	r5, r6
    1f46:	f0 01       	movw	r30, r0
    1f48:	57 9c       	mul	r5, r7
    1f4a:	f0 0d       	add	r31, r0
    1f4c:	11 24       	eor	r1, r1
    1f4e:	e1 5f       	subi	r30, 0xF1	; 241
    1f50:	fe 4f       	sbci	r31, 0xFE	; 254
    1f52:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f54:	44 e0       	ldi	r20, 0x04	; 4
    1f56:	60 e4       	ldi	r22, 0x40	; 64
    1f58:	0e 94 5d 02 	call	0x4ba	; 0x4ba <AVGVoltage>
    1f5c:	48 2e       	mov	r4, r24
    1f5e:	39 2e       	mov	r3, r25
            fprintf_P(port, PSTR("motor:"));
    1f60:	df 92       	push	r13
    1f62:	cf 92       	push	r12
    1f64:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1f68:	8f 93       	push	r24
    1f6a:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1f6e:	8f 93       	push	r24
    1f70:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
            fprintf(port, "%d", j);
    1f74:	7f 92       	push	r7
    1f76:	6f 92       	push	r6
    1f78:	ff 92       	push	r15
    1f7a:	ef 92       	push	r14
    1f7c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1f80:	8f 93       	push	r24
    1f82:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1f86:	8f 93       	push	r24
    1f88:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
            fprintf_P(port, PSTR(" ADC_value:"));
    1f8c:	1f 93       	push	r17
    1f8e:	0f 93       	push	r16
    1f90:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1f94:	8f 93       	push	r24
    1f96:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1f9a:	8f 93       	push	r24
    1f9c:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
            fprintf(port,"%d\n",value);
    1fa0:	3f 92       	push	r3
    1fa2:	4f 92       	push	r4
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1fac:	8f 93       	push	r24
    1fae:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1fb2:	8f 93       	push	r24
    1fb4:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
    for (uint8_t i=0; i< 1; i++){
        volatile motor *m = &motors[i];
        setMotor(m, dir, m->max_pwm);
    }
    for (uint16_t i=0;i<time*20;i++){
        for (uint8_t j=0;j<2;j++){
    1fb8:	8d b7       	in	r24, 0x3d	; 61
    1fba:	9e b7       	in	r25, 0x3e	; 62
    1fbc:	44 96       	adiw	r24, 0x14	; 20
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	9e bf       	out	0x3e, r25	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	8d bf       	out	0x3d, r24	; 61
    1fc8:	91 e0       	ldi	r25, 0x01	; 1
    1fca:	69 16       	cp	r6, r25
    1fcc:	71 04       	cpc	r7, r1
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <forceMotors+0x174>
    1fd0:	a7 cf       	rjmp	.-178    	; 0x1f20 <forceMotors+0xc2>
    1fd2:	66 24       	eor	r6, r6
    1fd4:	63 94       	inc	r6
    1fd6:	71 2c       	mov	r7, r1
    1fd8:	b5 cf       	rjmp	.-150    	; 0x1f44 <forceMotors+0xe6>
            fprintf_P(port, PSTR(" ADC_value:"));
            fprintf(port,"%d\n",value);
        }
        _delay_ms(50);
    }
    fprintf_P(port, PSTR("Shutdown\n"));
    1fda:	86 e3       	ldi	r24, 0x36	; 54
    1fdc:	92 e0       	ldi	r25, 0x02	; 2
    1fde:	9f 93       	push	r25
    1fe0:	8f 93       	push	r24
    1fe2:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    1fe6:	8f 93       	push	r24
    1fe8:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    1fec:	8f 93       	push	r24
    1fee:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
} 
//volatile uint8_t *OCRC_ADDR[] = {&OCR1CL, &OCR4AL }
//volatile uint8_t *OCRB_ADDR[] = {&OCR1BL, &OCR4BL }

void setMotor(volatile motor *m, uint8_t dir, uint8_t pwm){
    m->current_pwm = pwm;
    1ff2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <motors+0x21>
  
   // GTCCR = 0x00;//Counter is started at the main loop Start Counter
}
void disableMotorPWM(volatile motor *m){

    *m->enable_port_addr &= ~(1<<m->enable_pin); //Disable motor => clear enable port
    1ff6:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <motors+0x1e>
    1ffa:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <motors+0x1a>
    1ffe:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <motors+0x1b>
    2002:	20 81       	ld	r18, Z
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	02 c0       	rjmp	.+4      	; 0x200e <forceMotors+0x1b0>
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	3a 95       	dec	r19
    2010:	e2 f7       	brpl	.-8      	; 0x200a <forceMotors+0x1ac>
    2012:	80 95       	com	r24
    2014:	90 95       	com	r25
    2016:	82 23       	and	r24, r18
    2018:	80 83       	st	Z, r24
    *m->fwd_TCCRA_addr = 0x00;//m.fwd_TCCRA_value;
    201a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <motors+0x5>
    201e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <motors+0x6>
    2022:	10 82       	st	Z, r1
    *m->fwd_TCCRB_addr = 0x00;//m.fwd_TCCRB_value;
    2024:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <motors+0x8>
    2028:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <motors+0x9>
    202c:	10 82       	st	Z, r1
    *m->fwd_OCR_addr = 0x00; //Init PWM to zero
    202e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <motors+0xb>
    2032:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <motors+0xc>
    2036:	10 82       	st	Z, r1
    
    //Init reverse PWM settings
    *m->rev_TCCRA_addr = 0x00;//m.rev_TCCRA_value;
    2038:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <motors+0x12>
    203c:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <motors+0x13>
    2040:	10 82       	st	Z, r1
    *m->rev_TCCRB_addr = 0x00; //m.rev_TCCRB_value;
    2042:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <motors+0x15>
    2046:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <motors+0x16>
    204a:	10 82       	st	Z, r1
    *m->rev_OCR_addr = 0x00; //Init PWM to zero
    204c:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <motors+0x18>
    2050:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <motors+0x19>
    2054:	10 82       	st	Z, r1
    m->current_pwm = 0; //set PWM to zero
    2056:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <motors+0x21>
    m->timeout_value = 0; //Reset timeout values
    205a:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <motors+0x4b>
    205e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <motors+0x4c>
    2062:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <motors+0x4d>
    2066:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <motors+0x4e>
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    fprintf_P(port, PSTR("Shutdown\n"));
    for (uint8_t i=0; i< 1; i++){
        volatile motor *m = &motors[i];
        setMotor(m, dir, 0);
    }
}
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	e1 e1       	ldi	r30, 0x11	; 17
    2078:	0c 94 f1 29 	jmp	0x53e2	; 0x53e2 <__epilogue_restores__+0x2>

0000207c <motorControl>:
    for (uint16_t i = 0; i < delay/50; i++){
        _delay_us(47);
    }
}

void motorControl(volatile motor *m, uint8_t dir, uint8_t pwm){
    207c:	0f 93       	push	r16
    207e:	1f 93       	push	r17
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	ec 01       	movw	r28, r24
    2086:	06 2f       	mov	r16, r22
    2088:	14 2f       	mov	r17, r20
    if (pwm > m->max_pwm){
    208a:	8e a5       	ldd	r24, Y+46	; 0x2e
    208c:	84 17       	cp	r24, r20
    208e:	08 f4       	brcc	.+2      	; 0x2092 <motorControl+0x16>
        pwm = m->max_pwm;
    2090:	1e a5       	ldd	r17, Y+46	; 0x2e
    }
    
    //Set motor control
    if (m->current_pwm < pwm){ //Need to accelerate
    2092:	89 a1       	ldd	r24, Y+33	; 0x21
    2094:	81 17       	cp	r24, r17
    2096:	08 f0       	brcs	.+2      	; 0x209a <motorControl+0x1e>
    2098:	69 c0       	rjmp	.+210    	; 0x216c <motorControl+0xf0>
        for(; m->current_pwm < pwm; m->current_pwm++){
    209a:	89 a1       	ldd	r24, Y+33	; 0x21
    209c:	81 17       	cp	r24, r17
    209e:	08 f0       	brcs	.+2      	; 0x20a2 <motorControl+0x26>
    20a0:	5b c0       	rjmp	.+182    	; 0x2158 <motorControl+0xdc>
            *m->rev_TCCRA_addr = m->rev_TCCRA_value;

            *m->fwd_TCCRB_addr = 0x00;
            *m->rev_TCCRB_addr = m->rev_TCCRB_value;
        }        
        *m->enable_port_addr |= 1<<m->enable_pin; 
    20a2:	41 e0       	ldi	r20, 0x01	; 1
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    //Init reverse PWM settings
    *m->rev_TCCRA_addr = 0x00;//m.rev_TCCRA_value;
    *m->rev_TCCRB_addr = 0x00; //m.rev_TCCRB_value;
    *m->rev_OCR_addr = 0x00; //Init PWM to zero
    m->current_pwm = 0; //set PWM to zero
    m->timeout_value = 0; //Reset timeout values
    20a6:	fe 01       	movw	r30, r28
    20a8:	e5 5b       	subi	r30, 0xB5	; 181
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    }
    
    //Set motor control
    if (m->current_pwm < pwm){ //Need to accelerate
        for(; m->current_pwm < pwm; m->current_pwm++){
            setMotor(m, dir, m->current_pwm);
    20ac:	89 a1       	ldd	r24, Y+33	; 0x21
} 
//volatile uint8_t *OCRC_ADDR[] = {&OCR1CL, &OCR4AL }
//volatile uint8_t *OCRB_ADDR[] = {&OCR1BL, &OCR4BL }

void setMotor(volatile motor *m, uint8_t dir, uint8_t pwm){
    m->current_pwm = pwm;
    20ae:	89 a3       	std	Y+33, r24	; 0x21
    if (pwm > 0){
    20b0:	88 23       	and	r24, r24
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <motorControl+0x3a>
    20b4:	80 c0       	rjmp	.+256    	; 0x21b6 <motorControl+0x13a>
        if (dir == FORWARD){ //Forward
    20b6:	01 30       	cpi	r16, 0x01	; 1
    20b8:	09 f4       	brne	.+2      	; 0x20bc <motorControl+0x40>
    20ba:	a4 c0       	rjmp	.+328    	; 0x2204 <motorControl+0x188>
            
            *m->rev_TCCRB_addr = 0x00; //Disable clock Rev
            *m->fwd_TCCRB_addr = m->fwd_TCCRB_value;
        }
        else{ //Backward
            *m->fwd_OCR_addr = 0x00;
    20bc:	ab 85       	ldd	r26, Y+11	; 0x0b
    20be:	bc 85       	ldd	r27, Y+12	; 0x0c
    20c0:	1c 92       	st	X, r1
            *m->rev_OCR_addr = pwm; 
    20c2:	a8 8d       	ldd	r26, Y+24	; 0x18
    20c4:	b9 8d       	ldd	r27, Y+25	; 0x19
    20c6:	8c 93       	st	X, r24
            *m->fwd_port_addr &= ~(1<<m->fwd_pin);
    20c8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ca:	a8 81       	ld	r26, Y
    20cc:	b9 81       	ldd	r27, Y+1	; 0x01
    20ce:	2c 91       	ld	r18, X
    20d0:	ba 01       	movw	r22, r20
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <motorControl+0x5c>
    20d4:	66 0f       	add	r22, r22
    20d6:	77 1f       	adc	r23, r23
    20d8:	8a 95       	dec	r24
    20da:	e2 f7       	brpl	.-8      	; 0x20d4 <motorControl+0x58>
    20dc:	cb 01       	movw	r24, r22
    20de:	80 95       	com	r24
    20e0:	90 95       	com	r25
    20e2:	82 23       	and	r24, r18
    20e4:	8c 93       	st	X, r24
            *m->fwd_TCCRA_addr = 0x00; //Disable FWD
    20e6:	ad 81       	ldd	r26, Y+5	; 0x05
    20e8:	be 81       	ldd	r27, Y+6	; 0x06
    20ea:	1c 92       	st	X, r1
            *m->rev_TCCRA_addr = m->rev_TCCRA_value;
    20ec:	aa 89       	ldd	r26, Y+18	; 0x12
    20ee:	bb 89       	ldd	r27, Y+19	; 0x13
    20f0:	8c 89       	ldd	r24, Y+20	; 0x14
    20f2:	8c 93       	st	X, r24

            *m->fwd_TCCRB_addr = 0x00;
    20f4:	a8 85       	ldd	r26, Y+8	; 0x08
    20f6:	b9 85       	ldd	r27, Y+9	; 0x09
    20f8:	1c 92       	st	X, r1
            *m->rev_TCCRB_addr = m->rev_TCCRB_value;
    20fa:	ad 89       	ldd	r26, Y+21	; 0x15
    20fc:	be 89       	ldd	r27, Y+22	; 0x16
    20fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2100:	8c 93       	st	X, r24
        }        
        *m->enable_port_addr |= 1<<m->enable_pin; 
    2102:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2104:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2106:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2108:	2c 91       	ld	r18, X
    210a:	ba 01       	movw	r22, r20
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <motorControl+0x96>
    210e:	66 0f       	add	r22, r22
    2110:	77 1f       	adc	r23, r23
    2112:	8a 95       	dec	r24
    2114:	e2 f7       	brpl	.-8      	; 0x210e <motorControl+0x92>
    2116:	cb 01       	movw	r24, r22
    2118:	82 2b       	or	r24, r18
    211a:	8c 93       	st	X, r24
    
    //Set motor control
    if (m->current_pwm < pwm){ //Need to accelerate
        for(; m->current_pwm < pwm; m->current_pwm++){
            setMotor(m, dir, m->current_pwm);
            delayLoop_us(m->acceleration_time);
    211c:	29 a5       	ldd	r18, Y+41	; 0x29
    211e:	3a a5       	ldd	r19, Y+42	; 0x2a
        fprintf(port, "%f Max:%f\n",(4700.0/1024.0)*min,(4700.0/1024.0)*max);
    }
}

void delayLoop_us(uint16_t delay){
    for (uint16_t i = 0; i < delay/50; i++){
    2120:	36 95       	lsr	r19
    2122:	27 95       	ror	r18
    2124:	ab e7       	ldi	r26, 0x7B	; 123
    2126:	b4 e1       	ldi	r27, 0x14	; 20
    2128:	0e 94 c5 29 	call	0x538a	; 0x538a <__umulhisi3>
    212c:	96 95       	lsr	r25
    212e:	87 95       	ror	r24
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	59 f0       	breq	.+22     	; 0x214a <motorControl+0xce>
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2138:	7a ef       	ldi	r23, 0xFA	; 250
    213a:	7a 95       	dec	r23
    213c:	f1 f7       	brne	.-4      	; 0x213a <motorControl+0xbe>
    213e:	00 c0       	rjmp	.+0      	; 0x2140 <motorControl+0xc4>
    2140:	2f 5f       	subi	r18, 0xFF	; 255
    2142:	3f 4f       	sbci	r19, 0xFF	; 255
    2144:	28 17       	cp	r18, r24
    2146:	39 07       	cpc	r19, r25
    2148:	b9 f7       	brne	.-18     	; 0x2138 <motorControl+0xbc>
        pwm = m->max_pwm;
    }
    
    //Set motor control
    if (m->current_pwm < pwm){ //Need to accelerate
        for(; m->current_pwm < pwm; m->current_pwm++){
    214a:	89 a1       	ldd	r24, Y+33	; 0x21
    214c:	8f 5f       	subi	r24, 0xFF	; 255
    214e:	89 a3       	std	Y+33, r24	; 0x21
    2150:	89 a1       	ldd	r24, Y+33	; 0x21
    2152:	81 17       	cp	r24, r17
    2154:	08 f4       	brcc	.+2      	; 0x2158 <motorControl+0xdc>
    2156:	aa cf       	rjmp	.-172    	; 0x20ac <motorControl+0x30>
    else if (m->current_pwm > pwm){
        for(; m->current_pwm > pwm; m->current_pwm--){
            setMotor(m, dir, m->current_pwm);
            delayLoop_us(m->deacceleration_time);
        } 
        setMotor(m, dir, m->current_pwm);
    2158:	49 a1       	ldd	r20, Y+33	; 0x21
    215a:	60 2f       	mov	r22, r16
    215c:	ce 01       	movw	r24, r28
    215e:	fa dd       	rcall	.-1036   	; 0x1d54 <setMotor>
    }
    m->current_dir = dir;
    2160:	0a a3       	std	Y+34, r16	; 0x22
}
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	1f 91       	pop	r17
    2168:	0f 91       	pop	r16
    216a:	08 95       	ret
            setMotor(m, dir, m->current_pwm);
            delayLoop_us(m->acceleration_time);
        }
        setMotor(m, dir, m->current_pwm);
    }
    else if (m->current_pwm > pwm){
    216c:	89 a1       	ldd	r24, Y+33	; 0x21
    216e:	18 17       	cp	r17, r24
    2170:	b8 f7       	brcc	.-18     	; 0x2160 <motorControl+0xe4>
        for(; m->current_pwm > pwm; m->current_pwm--){
    2172:	89 a1       	ldd	r24, Y+33	; 0x21
    2174:	18 17       	cp	r17, r24
    2176:	80 f7       	brcc	.-32     	; 0x2158 <motorControl+0xdc>
            setMotor(m, dir, m->current_pwm);
    2178:	49 a1       	ldd	r20, Y+33	; 0x21
    217a:	60 2f       	mov	r22, r16
    217c:	ce 01       	movw	r24, r28
    217e:	ea dd       	rcall	.-1068   	; 0x1d54 <setMotor>
            delayLoop_us(m->deacceleration_time);
    2180:	2b a5       	ldd	r18, Y+43	; 0x2b
    2182:	3c a5       	ldd	r19, Y+44	; 0x2c
        fprintf(port, "%f Max:%f\n",(4700.0/1024.0)*min,(4700.0/1024.0)*max);
    }
}

void delayLoop_us(uint16_t delay){
    for (uint16_t i = 0; i < delay/50; i++){
    2184:	36 95       	lsr	r19
    2186:	27 95       	ror	r18
    2188:	ab e7       	ldi	r26, 0x7B	; 123
    218a:	b4 e1       	ldi	r27, 0x14	; 20
    218c:	0e 94 c5 29 	call	0x538a	; 0x538a <__umulhisi3>
    2190:	96 95       	lsr	r25
    2192:	87 95       	ror	r24
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	59 f0       	breq	.+22     	; 0x21ae <motorControl+0x132>
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	4a ef       	ldi	r20, 0xFA	; 250
    219e:	4a 95       	dec	r20
    21a0:	f1 f7       	brne	.-4      	; 0x219e <motorControl+0x122>
    21a2:	00 c0       	rjmp	.+0      	; 0x21a4 <motorControl+0x128>
    21a4:	2f 5f       	subi	r18, 0xFF	; 255
    21a6:	3f 4f       	sbci	r19, 0xFF	; 255
    21a8:	28 17       	cp	r18, r24
    21aa:	39 07       	cpc	r19, r25
    21ac:	b9 f7       	brne	.-18     	; 0x219c <motorControl+0x120>
            delayLoop_us(m->acceleration_time);
        }
        setMotor(m, dir, m->current_pwm);
    }
    else if (m->current_pwm > pwm){
        for(; m->current_pwm > pwm; m->current_pwm--){
    21ae:	89 a1       	ldd	r24, Y+33	; 0x21
    21b0:	81 50       	subi	r24, 0x01	; 1
    21b2:	89 a3       	std	Y+33, r24	; 0x21
    21b4:	de cf       	rjmp	.-68     	; 0x2172 <motorControl+0xf6>
  
   // GTCCR = 0x00;//Counter is started at the main loop Start Counter
}
void disableMotorPWM(volatile motor *m){

    *m->enable_port_addr &= ~(1<<m->enable_pin); //Disable motor => clear enable port
    21b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21b8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    21ba:	bb 8d       	ldd	r27, Y+27	; 0x1b
    21bc:	2c 91       	ld	r18, X
    21be:	ba 01       	movw	r22, r20
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <motorControl+0x14a>
    21c2:	66 0f       	add	r22, r22
    21c4:	77 1f       	adc	r23, r23
    21c6:	8a 95       	dec	r24
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <motorControl+0x146>
    21ca:	cb 01       	movw	r24, r22
    21cc:	80 95       	com	r24
    21ce:	90 95       	com	r25
    21d0:	82 23       	and	r24, r18
    21d2:	8c 93       	st	X, r24
    *m->fwd_TCCRA_addr = 0x00;//m.fwd_TCCRA_value;
    21d4:	ad 81       	ldd	r26, Y+5	; 0x05
    21d6:	be 81       	ldd	r27, Y+6	; 0x06
    21d8:	1c 92       	st	X, r1
    *m->fwd_TCCRB_addr = 0x00;//m.fwd_TCCRB_value;
    21da:	a8 85       	ldd	r26, Y+8	; 0x08
    21dc:	b9 85       	ldd	r27, Y+9	; 0x09
    21de:	1c 92       	st	X, r1
    *m->fwd_OCR_addr = 0x00; //Init PWM to zero
    21e0:	ab 85       	ldd	r26, Y+11	; 0x0b
    21e2:	bc 85       	ldd	r27, Y+12	; 0x0c
    21e4:	1c 92       	st	X, r1
    
    //Init reverse PWM settings
    *m->rev_TCCRA_addr = 0x00;//m.rev_TCCRA_value;
    21e6:	aa 89       	ldd	r26, Y+18	; 0x12
    21e8:	bb 89       	ldd	r27, Y+19	; 0x13
    21ea:	1c 92       	st	X, r1
    *m->rev_TCCRB_addr = 0x00; //m.rev_TCCRB_value;
    21ec:	ad 89       	ldd	r26, Y+21	; 0x15
    21ee:	be 89       	ldd	r27, Y+22	; 0x16
    21f0:	1c 92       	st	X, r1
    *m->rev_OCR_addr = 0x00; //Init PWM to zero
    21f2:	a8 8d       	ldd	r26, Y+24	; 0x18
    21f4:	b9 8d       	ldd	r27, Y+25	; 0x19
    21f6:	1c 92       	st	X, r1
    m->current_pwm = 0; //set PWM to zero
    21f8:	19 a2       	std	Y+33, r1	; 0x21
    m->timeout_value = 0; //Reset timeout values
    21fa:	10 82       	st	Z, r1
    21fc:	11 82       	std	Z+1, r1	; 0x01
    21fe:	12 82       	std	Z+2, r1	; 0x02
    2200:	13 82       	std	Z+3, r1	; 0x03
    2202:	8c cf       	rjmp	.-232    	; 0x211c <motorControl+0xa0>

void setMotor(volatile motor *m, uint8_t dir, uint8_t pwm){
    m->current_pwm = pwm;
    if (pwm > 0){
        if (dir == FORWARD){ //Forward
            *m->rev_OCR_addr = 0x00; //PWM pulse width
    2204:	a8 8d       	ldd	r26, Y+24	; 0x18
    2206:	b9 8d       	ldd	r27, Y+25	; 0x19
    2208:	1c 92       	st	X, r1
            *m->fwd_OCR_addr = pwm; 
    220a:	ab 85       	ldd	r26, Y+11	; 0x0b
    220c:	bc 85       	ldd	r27, Y+12	; 0x0c
    220e:	8c 93       	st	X, r24
            *m->rev_port_addr &= ~(1<<m->rev_pin);
    2210:	89 89       	ldd	r24, Y+17	; 0x11
    2212:	ad 85       	ldd	r26, Y+13	; 0x0d
    2214:	be 85       	ldd	r27, Y+14	; 0x0e
    2216:	2c 91       	ld	r18, X
    2218:	ba 01       	movw	r22, r20
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <motorControl+0x1a4>
    221c:	66 0f       	add	r22, r22
    221e:	77 1f       	adc	r23, r23
    2220:	8a 95       	dec	r24
    2222:	e2 f7       	brpl	.-8      	; 0x221c <motorControl+0x1a0>
    2224:	cb 01       	movw	r24, r22
    2226:	80 95       	com	r24
    2228:	90 95       	com	r25
    222a:	82 23       	and	r24, r18
    222c:	8c 93       	st	X, r24
            *m->rev_TCCRA_addr = 0x00; //Disable reverse
    222e:	aa 89       	ldd	r26, Y+18	; 0x12
    2230:	bb 89       	ldd	r27, Y+19	; 0x13
    2232:	1c 92       	st	X, r1
            *m->fwd_TCCRA_addr = m->fwd_TCCRA_value; //Activate PWM forward
    2234:	ad 81       	ldd	r26, Y+5	; 0x05
    2236:	be 81       	ldd	r27, Y+6	; 0x06
    2238:	8f 81       	ldd	r24, Y+7	; 0x07
    223a:	8c 93       	st	X, r24
            
            *m->rev_TCCRB_addr = 0x00; //Disable clock Rev
    223c:	ad 89       	ldd	r26, Y+21	; 0x15
    223e:	be 89       	ldd	r27, Y+22	; 0x16
    2240:	1c 92       	st	X, r1
            *m->fwd_TCCRB_addr = m->fwd_TCCRB_value;
    2242:	a8 85       	ldd	r26, Y+8	; 0x08
    2244:	b9 85       	ldd	r27, Y+9	; 0x09
    2246:	8a 85       	ldd	r24, Y+10	; 0x0a
    2248:	8c 93       	st	X, r24
    224a:	5b cf       	rjmp	.-330    	; 0x2102 <motorControl+0x86>

0000224c <getActuatorLength>:
    m->avg_move_current = (m->avg_move_current*9.0 + voltage) / 10.0; //one sample is effecting 1/5    
}


//Returns motor actuator length in millimeters
uint16_t getActuatorLength(volatile motor *m){
    224c:	a0 e0       	ldi	r26, 0x00	; 0
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	ec e2       	ldi	r30, 0x2C	; 44
    2252:	f1 e1       	ldi	r31, 0x11	; 17
    2254:	0c 94 d4 29 	jmp	0x53a8	; 0x53a8 <__prologue_saves__>
    2258:	ec 01       	movw	r28, r24
    uint32_t voltage = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    225a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    225c:	44 e0       	ldi	r20, 0x04	; 4
    225e:	60 e4       	ldi	r22, 0x40	; 64
    2260:	0e 94 5d 02 	call	0x4ba	; 0x4ba <AVGVoltage>
    2264:	6c 01       	movw	r12, r24
    2266:	e1 2c       	mov	r14, r1
    2268:	f1 2c       	mov	r15, r1
    
    //in case of error (out of bounds) stop motor and reset length set
    if (voltage < (m->voltage_low_offset) || voltage > (m->voltage_high_offset + 50)){
    226a:	fe 01       	movw	r30, r28
    226c:	ee 5a       	subi	r30, 0xAE	; 174
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	91 81       	ldd	r25, Z+1	; 0x01
    2274:	a0 e0       	ldi	r26, 0x00	; 0
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	c8 16       	cp	r12, r24
    227a:	d9 06       	cpc	r13, r25
    227c:	ea 06       	cpc	r14, r26
    227e:	fb 06       	cpc	r15, r27
    2280:	08 f4       	brcc	.+2      	; 0x2284 <getActuatorLength+0x38>
    2282:	67 c0       	rjmp	.+206    	; 0x2352 <getActuatorLength+0x106>
    2284:	de 01       	movw	r26, r28
    2286:	ac 5a       	subi	r26, 0xAC	; 172
    2288:	bf 4f       	sbci	r27, 0xFF	; 255
    228a:	8d 91       	ld	r24, X+
    228c:	9c 91       	ld	r25, X
    228e:	c2 96       	adiw	r24, 0x32	; 50
    2290:	a0 e0       	ldi	r26, 0x00	; 0
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	8c 15       	cp	r24, r12
    2296:	9d 05       	cpc	r25, r13
    2298:	ae 05       	cpc	r26, r14
    229a:	bf 05       	cpc	r27, r15
    229c:	08 f4       	brcc	.+2      	; 0x22a0 <getActuatorLength+0x54>
    229e:	59 c0       	rjmp	.+178    	; 0x2352 <getActuatorLength+0x106>
        _delay_ms(500);
        return m->current_length;
    } 

    //uint32_t voltage = GetOverSampledVoltage(m->actuator_adc_channel, 0x40);
    voltage = (voltage - m->voltage_low_offset); //Fix minimum position starting at zero
    22a0:	20 80       	ld	r2, Z
    22a2:	31 80       	ldd	r3, Z+1	; 0x01
    uint16_t length =  m->actuator_min_length + (m->actuator_range / m->voltage_range * voltage); //volts per degree
    22a4:	6b ad       	ldd	r22, Y+59	; 0x3b
    22a6:	7c ad       	ldd	r23, Y+60	; 0x3c
    22a8:	fe 01       	movw	r30, r28
    22aa:	ff 96       	adiw	r30, 0x3f	; 63
    22ac:	40 80       	ld	r4, Z
    22ae:	51 80       	ldd	r5, Z+1	; 0x01
    22b0:	62 80       	ldd	r6, Z+2	; 0x02
    22b2:	73 80       	ldd	r7, Z+3	; 0x03
    22b4:	77 96       	adiw	r30, 0x17	; 23
    22b6:	00 81       	ld	r16, Z
    22b8:	11 81       	ldd	r17, Z+1	; 0x01
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
    22c2:	4b 01       	movw	r8, r22
    22c4:	5c 01       	movw	r10, r24
    22c6:	b8 01       	movw	r22, r16
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
    22d0:	9b 01       	movw	r18, r22
    22d2:	ac 01       	movw	r20, r24
    22d4:	c3 01       	movw	r24, r6
    22d6:	b2 01       	movw	r22, r4
    22d8:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
    22dc:	2b 01       	movw	r4, r22
    22de:	3c 01       	movw	r6, r24
        _delay_ms(500);
        return m->current_length;
    } 

    //uint32_t voltage = GetOverSampledVoltage(m->actuator_adc_channel, 0x40);
    voltage = (voltage - m->voltage_low_offset); //Fix minimum position starting at zero
    22e0:	c7 01       	movw	r24, r14
    22e2:	b6 01       	movw	r22, r12
    22e4:	62 19       	sub	r22, r2
    22e6:	73 09       	sbc	r23, r3
    22e8:	81 09       	sbc	r24, r1
    22ea:	91 09       	sbc	r25, r1
    uint16_t length =  m->actuator_min_length + (m->actuator_range / m->voltage_range * voltage); //volts per degree
    22ec:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
    22f0:	9b 01       	movw	r18, r22
    22f2:	ac 01       	movw	r20, r24
    22f4:	c3 01       	movw	r24, r6
    22f6:	b2 01       	movw	r22, r4
    22f8:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
    22fc:	9b 01       	movw	r18, r22
    22fe:	ac 01       	movw	r20, r24
    2300:	c5 01       	movw	r24, r10
    2302:	b4 01       	movw	r22, r8
    2304:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
    2308:	0e 94 88 27 	call	0x4f10	; 0x4f10 <__fixunssfsi>
    230c:	6b 01       	movw	r12, r22
    230e:	7c 01       	movw	r14, r24
    2310:	cb 01       	movw	r24, r22
    
    //Shutdown if we cross virtual limit
    if (length > m->actuator_max_limit && m->status == RUNNING_FORWARD){
    2312:	fe 01       	movw	r30, r28
    2314:	eb 5b       	subi	r30, 0xBB	; 187
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	20 81       	ld	r18, Z
    231a:	31 81       	ldd	r19, Z+1	; 0x01
    231c:	26 17       	cp	r18, r22
    231e:	37 07       	cpc	r19, r23
    2320:	28 f4       	brcc	.+10     	; 0x232c <getActuatorLength+0xe0>
    2322:	3a 96       	adiw	r30, 0x0a	; 10
    2324:	20 81       	ld	r18, Z
    2326:	21 30       	cpi	r18, 0x01	; 1
    2328:	09 f4       	brne	.+2      	; 0x232c <getActuatorLength+0xe0>
    232a:	51 c0       	rjmp	.+162    	; 0x23ce <getActuatorLength+0x182>
        motorControl(m, m->current_dir, SHUTDOWN); //SHUTDOWN motor
        running_motor = -1;
        m->set_length = length;
       // fprintf_P(port, PSTR("MAXLERR\n"));
    }
    else if(length < m->actuator_min_limit && m->status == RUNNING_BACKWARD){
    232c:	fe 01       	movw	r30, r28
    232e:	ed 5b       	subi	r30, 0xBD	; 189
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	20 81       	ld	r18, Z
    2334:	31 81       	ldd	r19, Z+1	; 0x01
    2336:	82 17       	cp	r24, r18
    2338:	93 07       	cpc	r25, r19
    233a:	20 f4       	brcc	.+8      	; 0x2344 <getActuatorLength+0xf8>
    233c:	3c 96       	adiw	r30, 0x0c	; 12
    233e:	80 81       	ld	r24, Z
    2340:	82 30       	cpi	r24, 0x02	; 2
    2342:	c1 f1       	breq	.+112    	; 0x23b4 <getActuatorLength+0x168>
    2344:	c6 01       	movw	r24, r12
        running_motor = -1;
        m->set_length = length;
       // fprintf_P(port, PSTR("MINLERR\n"));
    }
    return length;
}
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	e2 e1       	ldi	r30, 0x12	; 18
    234c:	0c 94 f0 29 	jmp	0x53e0	; 0x53e0 <__epilogue_restores__>
    2350:	40 c0       	rjmp	.+128    	; 0x23d2 <initMotor>
uint16_t getActuatorLength(volatile motor *m){
    uint32_t voltage = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    
    //in case of error (out of bounds) stop motor and reset length set
    if (voltage < (m->voltage_low_offset) || voltage > (m->voltage_high_offset + 50)){
        m->status = ACTUATOR_ERROR;
    2352:	fe 01       	movw	r30, r28
    2354:	e1 5b       	subi	r30, 0xB1	; 177
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	87 e0       	ldi	r24, 0x07	; 7
    235a:	80 83       	st	Z, r24
        motorControl(m, m->current_dir, SHUTDOWN);
    235c:	6a a1       	ldd	r22, Y+34	; 0x22
    235e:	40 e0       	ldi	r20, 0x00	; 0
    2360:	ce 01       	movw	r24, r28
    2362:	8c de       	rcall	.-744    	; 0x207c <motorControl>
        running_motor = -1;
    2364:	8f ef       	ldi	r24, 0xFF	; 255
    2366:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <running_motor>
        m->set_length = m->current_length;
    236a:	8b a1       	ldd	r24, Y+35	; 0x23
    236c:	9c a1       	ldd	r25, Y+36	; 0x24
    236e:	9e a3       	std	Y+38, r25	; 0x26
    2370:	8d a3       	std	Y+37, r24	; 0x25
        fprintf_P(port, PSTR("AERR\n"));
    2372:	84 e7       	ldi	r24, 0x74	; 116
    2374:	92 e0       	ldi	r25, 0x02	; 2
    2376:	9f 93       	push	r25
    2378:	8f 93       	push	r24
    237a:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    237e:	8f 93       	push	r24
    2380:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    2384:	8f 93       	push	r24
    2386:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    238a:	2f ef       	ldi	r18, 0xFF	; 255
    238c:	89 e6       	ldi	r24, 0x69	; 105
    238e:	98 e1       	ldi	r25, 0x18	; 24
    2390:	21 50       	subi	r18, 0x01	; 1
    2392:	80 40       	sbci	r24, 0x00	; 0
    2394:	90 40       	sbci	r25, 0x00	; 0
    2396:	e1 f7       	brne	.-8      	; 0x2390 <getActuatorLength+0x144>
    2398:	00 c0       	rjmp	.+0      	; 0x239a <getActuatorLength+0x14e>
    239a:	00 00       	nop
        _delay_ms(500);
        return m->current_length;
    239c:	8b a1       	ldd	r24, Y+35	; 0x23
    239e:	9c a1       	ldd	r25, Y+36	; 0x24
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
        running_motor = -1;
        m->set_length = length;
       // fprintf_P(port, PSTR("MINLERR\n"));
    }
    return length;
}
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	e2 e1       	ldi	r30, 0x12	; 18
    23ae:	0c 94 f0 29 	jmp	0x53e0	; 0x53e0 <__epilogue_restores__>
    23b2:	0f c0       	rjmp	.+30     	; 0x23d2 <initMotor>
        running_motor = -1;
        m->set_length = length;
       // fprintf_P(port, PSTR("MAXLERR\n"));
    }
    else if(length < m->actuator_min_limit && m->status == RUNNING_BACKWARD){
        m->status = MIN_LIMIT;
    23b4:	84 e0       	ldi	r24, 0x04	; 4
    23b6:	80 83       	st	Z, r24
        motorControl(m, m->current_dir, SHUTDOWN);  //SHUTDOWN motor
    23b8:	6a a1       	ldd	r22, Y+34	; 0x22
    23ba:	40 e0       	ldi	r20, 0x00	; 0
    23bc:	ce 01       	movw	r24, r28
    23be:	5e de       	rcall	.-836    	; 0x207c <motorControl>
        running_motor = -1;
    23c0:	8f ef       	ldi	r24, 0xFF	; 255
    23c2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <running_motor>
        m->set_length = length;
    23c6:	de a2       	std	Y+38, r13	; 0x26
    23c8:	cd a2       	std	Y+37, r12	; 0x25
    23ca:	c6 01       	movw	r24, r12
    23cc:	ed cf       	rjmp	.-38     	; 0x23a8 <getActuatorLength+0x15c>
    voltage = (voltage - m->voltage_low_offset); //Fix minimum position starting at zero
    uint16_t length =  m->actuator_min_length + (m->actuator_range / m->voltage_range * voltage); //volts per degree
    
    //Shutdown if we cross virtual limit
    if (length > m->actuator_max_limit && m->status == RUNNING_FORWARD){
        m->status = MAX_LIMIT;
    23ce:	85 e0       	ldi	r24, 0x05	; 5
    23d0:	f2 cf       	rjmp	.-28     	; 0x23b6 <getActuatorLength+0x16a>

000023d2 <initMotor>:
    }
    m->current_dir = dir;
}


void initMotor(FILE *debugport){
    23d2:	a8 e0       	ldi	r26, 0x08	; 8
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	ef ee       	ldi	r30, 0xEF	; 239
    23d8:	f1 e1       	ldi	r31, 0x11	; 17
    23da:	0c 94 d4 29 	jmp	0x53a8	; 0x53a8 <__prologue_saves__>
    port = debugport;
    23de:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <port+0x1>
    23e2:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <port>
    23e6:	9f e0       	ldi	r25, 0x0F	; 15
    23e8:	a9 2e       	mov	r10, r25
    23ea:	91 e0       	ldi	r25, 0x01	; 1
    23ec:	b9 2e       	mov	r11, r25
    23ee:	21 2c       	mov	r2, r1
    23f0:	31 2c       	mov	r3, r1

    for(uint8_t i = 0; i<NUM_OF_MOTORS; i++){
        volatile motor *m = &motors[i];
        //Set direction and enable to output pins
        *m->fwd_dir_addr |= 1<<m->fwd_pin;
    23f2:	01 e0       	ldi	r16, 0x01	; 1
    23f4:	10 e0       	ldi	r17, 0x00	; 0
    23f6:	44 e6       	ldi	r20, 0x64	; 100
    23f8:	42 9d       	mul	r20, r2
    23fa:	90 01       	movw	r18, r0
    23fc:	43 9d       	mul	r20, r3
    23fe:	30 0d       	add	r19, r0
    2400:	11 24       	eor	r1, r1
    2402:	c9 01       	movw	r24, r18
    2404:	81 5f       	subi	r24, 0xF1	; 241
    2406:	9e 4f       	sbci	r25, 0xFE	; 254
    2408:	98 87       	std	Y+8, r25	; 0x08
    240a:	8f 83       	std	Y+7, r24	; 0x07
    240c:	dc 01       	movw	r26, r24
    240e:	14 96       	adiw	r26, 0x04	; 4
    2410:	8c 91       	ld	r24, X
    2412:	14 97       	sbiw	r26, 0x04	; 4
    2414:	12 96       	adiw	r26, 0x02	; 2
    2416:	ed 91       	ld	r30, X+
    2418:	fc 91       	ld	r31, X
    241a:	13 97       	sbiw	r26, 0x03	; 3
    241c:	20 81       	ld	r18, Z
    241e:	a8 01       	movw	r20, r16
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <initMotor+0x54>
    2422:	44 0f       	add	r20, r20
    2424:	55 1f       	adc	r21, r21
    2426:	8a 95       	dec	r24
    2428:	e2 f7       	brpl	.-8      	; 0x2422 <initMotor+0x50>
    242a:	ca 01       	movw	r24, r20
    242c:	82 2b       	or	r24, r18
    242e:	80 83       	st	Z, r24
        *m->rev_dir_addr |= 1<<m->rev_pin;
    2430:	51 96       	adiw	r26, 0x11	; 17
    2432:	8c 91       	ld	r24, X
    2434:	51 97       	sbiw	r26, 0x11	; 17
    2436:	1f 96       	adiw	r26, 0x0f	; 15
    2438:	ed 91       	ld	r30, X+
    243a:	fc 91       	ld	r31, X
    243c:	50 97       	sbiw	r26, 0x10	; 16
    243e:	20 81       	ld	r18, Z
    2440:	d8 01       	movw	r26, r16
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <initMotor+0x76>
    2444:	aa 0f       	add	r26, r26
    2446:	bb 1f       	adc	r27, r27
    2448:	8a 95       	dec	r24
    244a:	e2 f7       	brpl	.-8      	; 0x2444 <initMotor+0x72>
    244c:	cd 01       	movw	r24, r26
    244e:	82 2b       	or	r24, r18
    2450:	80 83       	st	Z, r24
        *m->enable_dir_addr |= 1<<m->enable_pin;
    2452:	ef 81       	ldd	r30, Y+7	; 0x07
    2454:	f8 85       	ldd	r31, Y+8	; 0x08
    2456:	86 8d       	ldd	r24, Z+30	; 0x1e
    2458:	04 8c       	ldd	r0, Z+28	; 0x1c
    245a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    245c:	e0 2d       	mov	r30, r0
    245e:	20 81       	ld	r18, Z
    2460:	a8 01       	movw	r20, r16
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <initMotor+0x96>
    2464:	44 0f       	add	r20, r20
    2466:	55 1f       	adc	r21, r21
    2468:	8a 95       	dec	r24
    246a:	e2 f7       	brpl	.-8      	; 0x2464 <initMotor+0x92>
    246c:	ca 01       	movw	r24, r20
    246e:	82 2b       	or	r24, r18
    2470:	80 83       	st	Z, r24
        
        //Set pullups correctly
        *m->fwd_port_addr &= ~(1<<m->fwd_pin);
    2472:	af 81       	ldd	r26, Y+7	; 0x07
    2474:	b8 85       	ldd	r27, Y+8	; 0x08
    2476:	14 96       	adiw	r26, 0x04	; 4
    2478:	8c 91       	ld	r24, X
    247a:	14 97       	sbiw	r26, 0x04	; 4
    247c:	ed 91       	ld	r30, X+
    247e:	fc 91       	ld	r31, X
    2480:	11 97       	sbiw	r26, 0x01	; 1
    2482:	20 81       	ld	r18, Z
    2484:	a8 01       	movw	r20, r16
    2486:	02 c0       	rjmp	.+4      	; 0x248c <initMotor+0xba>
    2488:	44 0f       	add	r20, r20
    248a:	55 1f       	adc	r21, r21
    248c:	8a 95       	dec	r24
    248e:	e2 f7       	brpl	.-8      	; 0x2488 <initMotor+0xb6>
    2490:	ca 01       	movw	r24, r20
    2492:	80 95       	com	r24
    2494:	90 95       	com	r25
    2496:	82 23       	and	r24, r18
    2498:	80 83       	st	Z, r24
        *m->rev_port_addr &= ~(1<<m->rev_pin);
    249a:	51 96       	adiw	r26, 0x11	; 17
    249c:	8c 91       	ld	r24, X
    249e:	51 97       	sbiw	r26, 0x11	; 17
    24a0:	1d 96       	adiw	r26, 0x0d	; 13
    24a2:	ed 91       	ld	r30, X+
    24a4:	fc 91       	ld	r31, X
    24a6:	1e 97       	sbiw	r26, 0x0e	; 14
    24a8:	20 81       	ld	r18, Z
    24aa:	d8 01       	movw	r26, r16
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <initMotor+0xe0>
    24ae:	aa 0f       	add	r26, r26
    24b0:	bb 1f       	adc	r27, r27
    24b2:	8a 95       	dec	r24
    24b4:	e2 f7       	brpl	.-8      	; 0x24ae <initMotor+0xdc>
    24b6:	cd 01       	movw	r24, r26
    24b8:	80 95       	com	r24
    24ba:	90 95       	com	r25
    24bc:	82 23       	and	r24, r18
    24be:	80 83       	st	Z, r24
        *m->enable_port_addr &= ~(1<<m->enable_pin);
    24c0:	ef 81       	ldd	r30, Y+7	; 0x07
    24c2:	f8 85       	ldd	r31, Y+8	; 0x08
    24c4:	86 8d       	ldd	r24, Z+30	; 0x1e
    24c6:	02 8c       	ldd	r0, Z+26	; 0x1a
    24c8:	f3 8d       	ldd	r31, Z+27	; 0x1b
    24ca:	e0 2d       	mov	r30, r0
    24cc:	20 81       	ld	r18, Z
    24ce:	a8 01       	movw	r20, r16
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <initMotor+0x104>
    24d2:	44 0f       	add	r20, r20
    24d4:	55 1f       	adc	r21, r21
    24d6:	8a 95       	dec	r24
    24d8:	e2 f7       	brpl	.-8      	; 0x24d2 <initMotor+0x100>
    24da:	ca 01       	movw	r24, r20
    24dc:	80 95       	com	r24
    24de:	90 95       	com	r25
    24e0:	82 23       	and	r24, r18
    24e2:	80 83       	st	Z, r24
        
        //Init forward PWM settings
        *m->fwd_TCCRA_addr = 0x00;//m.fwd_TCCRA_value;
    24e4:	af 81       	ldd	r26, Y+7	; 0x07
    24e6:	b8 85       	ldd	r27, Y+8	; 0x08
    24e8:	15 96       	adiw	r26, 0x05	; 5
    24ea:	ed 91       	ld	r30, X+
    24ec:	fc 91       	ld	r31, X
    24ee:	16 97       	sbiw	r26, 0x06	; 6
    24f0:	10 82       	st	Z, r1
        *m->fwd_TCCRB_addr = 0x00;//m.fwd_TCCRB_value;
    24f2:	18 96       	adiw	r26, 0x08	; 8
    24f4:	ed 91       	ld	r30, X+
    24f6:	fc 91       	ld	r31, X
    24f8:	19 97       	sbiw	r26, 0x09	; 9
    24fa:	10 82       	st	Z, r1
        *m->fwd_OCR_addr = 0x00; //Init PWM to zero
    24fc:	1b 96       	adiw	r26, 0x0b	; 11
    24fe:	ed 91       	ld	r30, X+
    2500:	fc 91       	ld	r31, X
    2502:	1c 97       	sbiw	r26, 0x0c	; 12
    2504:	10 82       	st	Z, r1
        
        //Init reverse PWM settings
        *m->rev_TCCRA_addr = 0x00;//m.rev_TCCRA_value;
    2506:	52 96       	adiw	r26, 0x12	; 18
    2508:	ed 91       	ld	r30, X+
    250a:	fc 91       	ld	r31, X
    250c:	53 97       	sbiw	r26, 0x13	; 19
    250e:	10 82       	st	Z, r1
        *m->rev_TCCRB_addr = 0x00; //m.rev_TCCRB_value;
    2510:	55 96       	adiw	r26, 0x15	; 21
    2512:	ed 91       	ld	r30, X+
    2514:	fc 91       	ld	r31, X
    2516:	56 97       	sbiw	r26, 0x16	; 22
    2518:	10 82       	st	Z, r1
        *m->rev_OCR_addr = 0x00; //Init PWM to zero
    251a:	58 96       	adiw	r26, 0x18	; 24
    251c:	ed 91       	ld	r30, X+
    251e:	fc 91       	ld	r31, X
    2520:	59 97       	sbiw	r26, 0x19	; 25
    2522:	10 82       	st	Z, r1
    2524:	ef e3       	ldi	r30, 0x3F	; 63
    2526:	fc e9       	ldi	r31, 0x9C	; 156
    2528:	31 97       	sbiw	r30, 0x01	; 1
    252a:	f1 f7       	brne	.-4      	; 0x2528 <initMotor+0x156>
    252c:	00 c0       	rjmp	.+0      	; 0x252e <initMotor+0x15c>
    252e:	00 00       	nop
}


//Returns motor actuator length in millimeters
uint16_t getActuatorLength(volatile motor *m){
    uint32_t voltage = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    2530:	5f 96       	adiw	r26, 0x1f	; 31
    2532:	8c 91       	ld	r24, X
    2534:	44 e0       	ldi	r20, 0x04	; 4
    2536:	60 e4       	ldi	r22, 0x40	; 64
    2538:	0e 94 5d 02 	call	0x4ba	; 0x4ba <AVGVoltage>
    253c:	2c 01       	movw	r4, r24
    253e:	61 2c       	mov	r6, r1
    2540:	71 2c       	mov	r7, r1
    
    //in case of error (out of bounds) stop motor and reset length set
    if (voltage < (m->voltage_low_offset) || voltage > (m->voltage_high_offset + 50)){
    2542:	ef 81       	ldd	r30, Y+7	; 0x07
    2544:	f8 85       	ldd	r31, Y+8	; 0x08
    2546:	ee 5a       	subi	r30, 0xAE	; 174
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	a0 e0       	ldi	r26, 0x00	; 0
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	48 16       	cp	r4, r24
    2554:	59 06       	cpc	r5, r25
    2556:	6a 06       	cpc	r6, r26
    2558:	7b 06       	cpc	r7, r27
    255a:	08 f4       	brcc	.+2      	; 0x255e <initMotor+0x18c>
    255c:	9f c0       	rjmp	.+318    	; 0x269c <initMotor+0x2ca>
    255e:	af 81       	ldd	r26, Y+7	; 0x07
    2560:	b8 85       	ldd	r27, Y+8	; 0x08
    2562:	ac 5a       	subi	r26, 0xAC	; 172
    2564:	bf 4f       	sbci	r27, 0xFF	; 255
    2566:	8d 91       	ld	r24, X+
    2568:	9c 91       	ld	r25, X
    256a:	c2 96       	adiw	r24, 0x32	; 50
    256c:	a0 e0       	ldi	r26, 0x00	; 0
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	84 15       	cp	r24, r4
    2572:	95 05       	cpc	r25, r5
    2574:	a6 05       	cpc	r26, r6
    2576:	b7 05       	cpc	r27, r7
    2578:	08 f4       	brcc	.+2      	; 0x257c <initMotor+0x1aa>
    257a:	90 c0       	rjmp	.+288    	; 0x269c <initMotor+0x2ca>
        _delay_ms(500);
        return m->current_length;
    } 

    //uint32_t voltage = GetOverSampledVoltage(m->actuator_adc_channel, 0x40);
    voltage = (voltage - m->voltage_low_offset); //Fix minimum position starting at zero
    257c:	80 80       	ld	r8, Z
    257e:	91 80       	ldd	r9, Z+1	; 0x01
    uint16_t length =  m->actuator_min_length + (m->actuator_range / m->voltage_range * voltage); //volts per degree
    2580:	ef 81       	ldd	r30, Y+7	; 0x07
    2582:	f8 85       	ldd	r31, Y+8	; 0x08
    2584:	63 ad       	ldd	r22, Z+59	; 0x3b
    2586:	74 ad       	ldd	r23, Z+60	; 0x3c
    2588:	ff 96       	adiw	r30, 0x3f	; 63
    258a:	c0 80       	ld	r12, Z
    258c:	d1 80       	ldd	r13, Z+1	; 0x01
    258e:	e2 80       	ldd	r14, Z+2	; 0x02
    2590:	f3 80       	ldd	r15, Z+3	; 0x03
    2592:	ef 81       	ldd	r30, Y+7	; 0x07
    2594:	f8 85       	ldd	r31, Y+8	; 0x08
    2596:	ea 5a       	subi	r30, 0xAA	; 170
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	20 81       	ld	r18, Z
    259c:	31 81       	ldd	r19, Z+1	; 0x01
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	2d 83       	std	Y+5, r18	; 0x05
    25a4:	3e 83       	std	Y+6, r19	; 0x06
    25a6:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
    25aa:	69 83       	std	Y+1, r22	; 0x01
    25ac:	7a 83       	std	Y+2, r23	; 0x02
    25ae:	8b 83       	std	Y+3, r24	; 0x03
    25b0:	9c 83       	std	Y+4, r25	; 0x04
    25b2:	2d 81       	ldd	r18, Y+5	; 0x05
    25b4:	3e 81       	ldd	r19, Y+6	; 0x06
    25b6:	b9 01       	movw	r22, r18
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
    25c0:	9b 01       	movw	r18, r22
    25c2:	ac 01       	movw	r20, r24
    25c4:	c7 01       	movw	r24, r14
    25c6:	b6 01       	movw	r22, r12
    25c8:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
    25cc:	6b 01       	movw	r12, r22
    25ce:	7c 01       	movw	r14, r24
        _delay_ms(500);
        return m->current_length;
    } 

    //uint32_t voltage = GetOverSampledVoltage(m->actuator_adc_channel, 0x40);
    voltage = (voltage - m->voltage_low_offset); //Fix minimum position starting at zero
    25d0:	c3 01       	movw	r24, r6
    25d2:	b2 01       	movw	r22, r4
    25d4:	68 19       	sub	r22, r8
    25d6:	79 09       	sbc	r23, r9
    25d8:	81 09       	sbc	r24, r1
    25da:	91 09       	sbc	r25, r1
    uint16_t length =  m->actuator_min_length + (m->actuator_range / m->voltage_range * voltage); //volts per degree
    25dc:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
    25e0:	9b 01       	movw	r18, r22
    25e2:	ac 01       	movw	r20, r24
    25e4:	c7 01       	movw	r24, r14
    25e6:	b6 01       	movw	r22, r12
    25e8:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
    25ec:	9b 01       	movw	r18, r22
    25ee:	ac 01       	movw	r20, r24
    25f0:	69 81       	ldd	r22, Y+1	; 0x01
    25f2:	7a 81       	ldd	r23, Y+2	; 0x02
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
    25fc:	0e 94 88 27 	call	0x4f10	; 0x4f10 <__fixunssfsi>
    2600:	6b 01       	movw	r12, r22
    2602:	7c 01       	movw	r14, r24
    2604:	cb 01       	movw	r24, r22
    
    //Shutdown if we cross virtual limit
    if (length > m->actuator_max_limit && m->status == RUNNING_FORWARD){
    2606:	ef 81       	ldd	r30, Y+7	; 0x07
    2608:	f8 85       	ldd	r31, Y+8	; 0x08
    260a:	eb 5b       	subi	r30, 0xBB	; 187
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	20 81       	ld	r18, Z
    2610:	31 81       	ldd	r19, Z+1	; 0x01
    2612:	26 17       	cp	r18, r22
    2614:	37 07       	cpc	r19, r23
    2616:	40 f4       	brcc	.+16     	; 0x2628 <initMotor+0x256>
    2618:	ef 81       	ldd	r30, Y+7	; 0x07
    261a:	f8 85       	ldd	r31, Y+8	; 0x08
    261c:	e1 5b       	subi	r30, 0xB1	; 177
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	20 81       	ld	r18, Z
    2622:	21 30       	cpi	r18, 0x01	; 1
    2624:	09 f4       	brne	.+2      	; 0x2628 <initMotor+0x256>
    2626:	8e c0       	rjmp	.+284    	; 0x2744 <initMotor+0x372>
        motorControl(m, m->current_dir, SHUTDOWN); //SHUTDOWN motor
        running_motor = -1;
        m->set_length = length;
       // fprintf_P(port, PSTR("MAXLERR\n"));
    }
    else if(length < m->actuator_min_limit && m->status == RUNNING_BACKWARD){
    2628:	f4 e6       	ldi	r31, 0x64	; 100
    262a:	f2 9d       	mul	r31, r2
    262c:	a0 01       	movw	r20, r0
    262e:	f3 9d       	mul	r31, r3
    2630:	50 0d       	add	r21, r0
    2632:	11 24       	eor	r1, r1
    2634:	9a 01       	movw	r18, r20
    2636:	21 5f       	subi	r18, 0xF1	; 241
    2638:	3e 4f       	sbci	r19, 0xFE	; 254
    263a:	49 01       	movw	r8, r18
    263c:	f9 01       	movw	r30, r18
    263e:	ed 5b       	subi	r30, 0xBD	; 189
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	20 81       	ld	r18, Z
    2644:	31 81       	ldd	r19, Z+1	; 0x01
    2646:	82 17       	cp	r24, r18
    2648:	93 07       	cpc	r25, r19
    264a:	08 f4       	brcc	.+2      	; 0x264e <initMotor+0x27c>
    264c:	67 c0       	rjmp	.+206    	; 0x271c <initMotor+0x34a>
        *m->rev_OCR_addr = 0x00; //Init PWM to zero
        
        //init Actuator +5 and GND pins
        _delay_ms(10); //wait 10ms so ADC pins settle.

        m->current_length = getActuatorLength(m);
    264e:	24 e6       	ldi	r18, 0x64	; 100
    2650:	22 9d       	mul	r18, r2
    2652:	f0 01       	movw	r30, r0
    2654:	23 9d       	mul	r18, r3
    2656:	f0 0d       	add	r31, r0
    2658:	11 24       	eor	r1, r1
    265a:	e1 5f       	subi	r30, 0xF1	; 241
    265c:	fe 4f       	sbci	r31, 0xFE	; 254
    265e:	d4 a2       	std	Z+36, r13	; 0x24
    2660:	c3 a2       	std	Z+35, r12	; 0x23
        m->set_length = m->current_length;
    2662:	83 a1       	ldd	r24, Z+35	; 0x23
    2664:	94 a1       	ldd	r25, Z+36	; 0x24
    2666:	96 a3       	std	Z+38, r25	; 0x26
    2668:	85 a3       	std	Z+37, r24	; 0x25
    266a:	34 e6       	ldi	r19, 0x64	; 100
    266c:	a3 0e       	add	r10, r19
    266e:	b1 1c       	adc	r11, r1


void initMotor(FILE *debugport){
    port = debugport;

    for(uint8_t i = 0; i<NUM_OF_MOTORS; i++){
    2670:	41 e0       	ldi	r20, 0x01	; 1
    2672:	24 16       	cp	r2, r20
    2674:	31 04       	cpc	r3, r1
    2676:	09 f0       	breq	.+2      	; 0x267a <initMotor+0x2a8>
    2678:	4d c0       	rjmp	.+154    	; 0x2714 <initMotor+0x342>
        m->current_length = getActuatorLength(m);
        m->set_length = m->current_length;
   }

   //Init timeout counter TIMER1
   TCCR1A = 0x00; // WGM11 = 0, WGM10 = 0   => CTC mode
    267a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
   //clock frequency = 16MHz / 1024 = 15625Hz
   TCCR1B = 0x08 + 0x05; //WGM12 = 1, WGM 13 = 0        => CTC mode, Clock divider 1024 = 0x05
    267e:	8d e0       	ldi	r24, 0x0D	; 13
    2680:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   OCR1AH = 0x00; //Zero this when tests are done
    2684:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
   OCR1AL = 0x9C;  // interrupt 100 times per second 15625/156~about 100 
    2688:	8c e9       	ldi	r24, 0x9C	; 156
    268a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   //Set interrupt to TIMER1 COMPA
   TIMSK1 = 0x02; //OCIEA enabled
    268e:	82 e0       	ldi	r24, 0x02	; 2
    2690:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  
   // GTCCR = 0x00;//Counter is started at the main loop Start Counter
}
    2694:	28 96       	adiw	r28, 0x08	; 8
    2696:	e2 e1       	ldi	r30, 0x12	; 18
    2698:	0c 94 f0 29 	jmp	0x53e0	; 0x53e0 <__epilogue_restores__>
uint16_t getActuatorLength(volatile motor *m){
    uint32_t voltage = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    
    //in case of error (out of bounds) stop motor and reset length set
    if (voltage < (m->voltage_low_offset) || voltage > (m->voltage_high_offset + 50)){
        m->status = ACTUATOR_ERROR;
    269c:	f4 e6       	ldi	r31, 0x64	; 100
    269e:	f2 9d       	mul	r31, r2
    26a0:	90 01       	movw	r18, r0
    26a2:	f3 9d       	mul	r31, r3
    26a4:	30 0d       	add	r19, r0
    26a6:	11 24       	eor	r1, r1
    26a8:	a9 01       	movw	r20, r18
    26aa:	41 5f       	subi	r20, 0xF1	; 241
    26ac:	5e 4f       	sbci	r21, 0xFE	; 254
    26ae:	7a 01       	movw	r14, r20
    26b0:	fa 01       	movw	r30, r20
    26b2:	e1 5b       	subi	r30, 0xB1	; 177
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	57 e0       	ldi	r21, 0x07	; 7
    26b8:	50 83       	st	Z, r21
        motorControl(m, m->current_dir, SHUTDOWN);
    26ba:	d7 01       	movw	r26, r14
    26bc:	92 96       	adiw	r26, 0x22	; 34
    26be:	6c 91       	ld	r22, X
    26c0:	40 e0       	ldi	r20, 0x00	; 0
    26c2:	c5 01       	movw	r24, r10
    26c4:	db dc       	rcall	.-1610   	; 0x207c <motorControl>
        running_motor = -1;
    26c6:	bf ef       	ldi	r27, 0xFF	; 255
    26c8:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <running_motor>
        m->set_length = m->current_length;
    26cc:	f7 01       	movw	r30, r14
    26ce:	83 a1       	ldd	r24, Z+35	; 0x23
    26d0:	94 a1       	ldd	r25, Z+36	; 0x24
    26d2:	96 a3       	std	Z+38, r25	; 0x26
    26d4:	85 a3       	std	Z+37, r24	; 0x25
        fprintf_P(port, PSTR("AERR\n"));
    26d6:	a4 e7       	ldi	r26, 0x74	; 116
    26d8:	b2 e0       	ldi	r27, 0x02	; 2
    26da:	bf 93       	push	r27
    26dc:	af 93       	push	r26
    26de:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    26e2:	8f 93       	push	r24
    26e4:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    26e8:	8f 93       	push	r24
    26ea:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
    26ee:	ff ef       	ldi	r31, 0xFF	; 255
    26f0:	29 e6       	ldi	r18, 0x69	; 105
    26f2:	38 e1       	ldi	r19, 0x18	; 24
    26f4:	f1 50       	subi	r31, 0x01	; 1
    26f6:	20 40       	sbci	r18, 0x00	; 0
    26f8:	30 40       	sbci	r19, 0x00	; 0
    26fa:	e1 f7       	brne	.-8      	; 0x26f4 <initMotor+0x322>
    26fc:	00 c0       	rjmp	.+0      	; 0x26fe <initMotor+0x32c>
    26fe:	00 00       	nop
        _delay_ms(500);
        return m->current_length;
    2700:	d7 01       	movw	r26, r14
    2702:	93 96       	adiw	r26, 0x23	; 35
    2704:	cd 90       	ld	r12, X+
    2706:	dc 90       	ld	r13, X
    2708:	94 97       	sbiw	r26, 0x24	; 36
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	9d cf       	rjmp	.-198    	; 0x264e <initMotor+0x27c>
    2714:	22 24       	eor	r2, r2
    2716:	23 94       	inc	r2
    2718:	31 2c       	mov	r3, r1
    271a:	6d ce       	rjmp	.-806    	; 0x23f6 <initMotor+0x24>
        motorControl(m, m->current_dir, SHUTDOWN); //SHUTDOWN motor
        running_motor = -1;
        m->set_length = length;
       // fprintf_P(port, PSTR("MAXLERR\n"));
    }
    else if(length < m->actuator_min_limit && m->status == RUNNING_BACKWARD){
    271c:	3c 96       	adiw	r30, 0x0c	; 12
    271e:	80 81       	ld	r24, Z
    2720:	82 30       	cpi	r24, 0x02	; 2
    2722:	09 f0       	breq	.+2      	; 0x2726 <initMotor+0x354>
    2724:	94 cf       	rjmp	.-216    	; 0x264e <initMotor+0x27c>
        m->status = MIN_LIMIT;
    2726:	84 e0       	ldi	r24, 0x04	; 4
    2728:	80 83       	st	Z, r24
        motorControl(m, m->current_dir, SHUTDOWN);  //SHUTDOWN motor
    272a:	d4 01       	movw	r26, r8
    272c:	92 96       	adiw	r26, 0x22	; 34
    272e:	6c 91       	ld	r22, X
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	c5 01       	movw	r24, r10
    2734:	a3 dc       	rcall	.-1722   	; 0x207c <motorControl>
        running_motor = -1;
    2736:	bf ef       	ldi	r27, 0xFF	; 255
    2738:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <running_motor>
        m->set_length = length;
    273c:	f4 01       	movw	r30, r8
    273e:	d6 a2       	std	Z+38, r13	; 0x26
    2740:	c5 a2       	std	Z+37, r12	; 0x25
    2742:	85 cf       	rjmp	.-246    	; 0x264e <initMotor+0x27c>
    voltage = (voltage - m->voltage_low_offset); //Fix minimum position starting at zero
    uint16_t length =  m->actuator_min_length + (m->actuator_range / m->voltage_range * voltage); //volts per degree
    
    //Shutdown if we cross virtual limit
    if (length > m->actuator_max_limit && m->status == RUNNING_FORWARD){
        m->status = MAX_LIMIT;
    2744:	25 e0       	ldi	r18, 0x05	; 5
    2746:	20 83       	st	Z, r18
        motorControl(m, m->current_dir, SHUTDOWN); //SHUTDOWN motor
    2748:	af 81       	ldd	r26, Y+7	; 0x07
    274a:	b8 85       	ldd	r27, Y+8	; 0x08
    274c:	92 96       	adiw	r26, 0x22	; 34
    274e:	6c 91       	ld	r22, X
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	c5 01       	movw	r24, r10
    2754:	93 dc       	rcall	.-1754   	; 0x207c <motorControl>
        running_motor = -1;
    2756:	bf ef       	ldi	r27, 0xFF	; 255
    2758:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <running_motor>
        m->set_length = length;
    275c:	ef 81       	ldd	r30, Y+7	; 0x07
    275e:	f8 85       	ldd	r31, Y+8	; 0x08
    2760:	d6 a2       	std	Z+38, r13	; 0x26
    2762:	c5 a2       	std	Z+37, r12	; 0x25
    2764:	74 cf       	rjmp	.-280    	; 0x264e <initMotor+0x27c>

00002766 <setLengthLoop>:
        return 1;
    }
}


void setLengthLoop(void){
    2766:	a6 e0       	ldi	r26, 0x06	; 6
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	e9 eb       	ldi	r30, 0xB9	; 185
    276c:	f3 e1       	ldi	r31, 0x13	; 19
    276e:	0c 94 d4 29 	jmp	0x53a8	; 0x53a8 <__prologue_saves__>
    2772:	4f e0       	ldi	r20, 0x0F	; 15
    2774:	a4 2e       	mov	r10, r20
    2776:	41 e0       	ldi	r20, 0x01	; 1
    2778:	b4 2e       	mov	r11, r20
    277a:	21 2c       	mov	r2, r1
    277c:	31 2c       	mov	r3, r1
}


//Returns motor actuator length in millimeters
uint16_t getActuatorLength(volatile motor *m){
    uint32_t voltage = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    277e:	44 e6       	ldi	r20, 0x64	; 100
    2780:	42 9d       	mul	r20, r2
    2782:	90 01       	movw	r18, r0
    2784:	43 9d       	mul	r20, r3
    2786:	30 0d       	add	r19, r0
    2788:	11 24       	eor	r1, r1
    278a:	c9 01       	movw	r24, r18
    278c:	81 5f       	subi	r24, 0xF1	; 241
    278e:	9e 4f       	sbci	r25, 0xFE	; 254
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	8d 83       	std	Y+5, r24	; 0x05
    2794:	dc 01       	movw	r26, r24
    2796:	5f 96       	adiw	r26, 0x1f	; 31
    2798:	8c 91       	ld	r24, X
    279a:	44 e0       	ldi	r20, 0x04	; 4
    279c:	60 e4       	ldi	r22, 0x40	; 64
    279e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <AVGVoltage>
    27a2:	6c 01       	movw	r12, r24
    27a4:	e1 2c       	mov	r14, r1
    27a6:	f1 2c       	mov	r15, r1
    
    //in case of error (out of bounds) stop motor and reset length set
    if (voltage < (m->voltage_low_offset) || voltage > (m->voltage_high_offset + 50)){
    27a8:	ed 81       	ldd	r30, Y+5	; 0x05
    27aa:	fe 81       	ldd	r31, Y+6	; 0x06
    27ac:	ee 5a       	subi	r30, 0xAE	; 174
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	91 81       	ldd	r25, Z+1	; 0x01
    27b4:	a0 e0       	ldi	r26, 0x00	; 0
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	c8 16       	cp	r12, r24
    27ba:	d9 06       	cpc	r13, r25
    27bc:	ea 06       	cpc	r14, r26
    27be:	fb 06       	cpc	r15, r27
    27c0:	08 f4       	brcc	.+2      	; 0x27c4 <setLengthLoop+0x5e>
    27c2:	96 c0       	rjmp	.+300    	; 0x28f0 <setLengthLoop+0x18a>
    27c4:	ad 81       	ldd	r26, Y+5	; 0x05
    27c6:	be 81       	ldd	r27, Y+6	; 0x06
    27c8:	ac 5a       	subi	r26, 0xAC	; 172
    27ca:	bf 4f       	sbci	r27, 0xFF	; 255
    27cc:	8d 91       	ld	r24, X+
    27ce:	9c 91       	ld	r25, X
    27d0:	c2 96       	adiw	r24, 0x32	; 50
    27d2:	a0 e0       	ldi	r26, 0x00	; 0
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	8c 15       	cp	r24, r12
    27d8:	9d 05       	cpc	r25, r13
    27da:	ae 05       	cpc	r26, r14
    27dc:	bf 05       	cpc	r27, r15
    27de:	08 f4       	brcc	.+2      	; 0x27e2 <setLengthLoop+0x7c>
    27e0:	87 c0       	rjmp	.+270    	; 0x28f0 <setLengthLoop+0x18a>
        _delay_ms(500);
        return m->current_length;
    } 

    //uint32_t voltage = GetOverSampledVoltage(m->actuator_adc_channel, 0x40);
    voltage = (voltage - m->voltage_low_offset); //Fix minimum position starting at zero
    27e2:	80 80       	ld	r8, Z
    27e4:	91 80       	ldd	r9, Z+1	; 0x01
    uint16_t length =  m->actuator_min_length + (m->actuator_range / m->voltage_range * voltage); //volts per degree
    27e6:	ed 81       	ldd	r30, Y+5	; 0x05
    27e8:	fe 81       	ldd	r31, Y+6	; 0x06
    27ea:	63 ad       	ldd	r22, Z+59	; 0x3b
    27ec:	74 ad       	ldd	r23, Z+60	; 0x3c
    27ee:	ff 96       	adiw	r30, 0x3f	; 63
    27f0:	40 80       	ld	r4, Z
    27f2:	51 80       	ldd	r5, Z+1	; 0x01
    27f4:	62 80       	ldd	r6, Z+2	; 0x02
    27f6:	73 80       	ldd	r7, Z+3	; 0x03
    27f8:	ed 81       	ldd	r30, Y+5	; 0x05
    27fa:	fe 81       	ldd	r31, Y+6	; 0x06
    27fc:	ea 5a       	subi	r30, 0xAA	; 170
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	00 81       	ld	r16, Z
    2802:	11 81       	ldd	r17, Z+1	; 0x01
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
    280c:	69 83       	std	Y+1, r22	; 0x01
    280e:	7a 83       	std	Y+2, r23	; 0x02
    2810:	8b 83       	std	Y+3, r24	; 0x03
    2812:	9c 83       	std	Y+4, r25	; 0x04
    2814:	b8 01       	movw	r22, r16
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
    281e:	9b 01       	movw	r18, r22
    2820:	ac 01       	movw	r20, r24
    2822:	c3 01       	movw	r24, r6
    2824:	b2 01       	movw	r22, r4
    2826:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
    282a:	2b 01       	movw	r4, r22
    282c:	3c 01       	movw	r6, r24
        _delay_ms(500);
        return m->current_length;
    } 

    //uint32_t voltage = GetOverSampledVoltage(m->actuator_adc_channel, 0x40);
    voltage = (voltage - m->voltage_low_offset); //Fix minimum position starting at zero
    282e:	c7 01       	movw	r24, r14
    2830:	b6 01       	movw	r22, r12
    2832:	68 19       	sub	r22, r8
    2834:	79 09       	sbc	r23, r9
    2836:	81 09       	sbc	r24, r1
    2838:	91 09       	sbc	r25, r1
    uint16_t length =  m->actuator_min_length + (m->actuator_range / m->voltage_range * voltage); //volts per degree
    283a:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
    283e:	9b 01       	movw	r18, r22
    2840:	ac 01       	movw	r20, r24
    2842:	c3 01       	movw	r24, r6
    2844:	b2 01       	movw	r22, r4
    2846:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
    284a:	9b 01       	movw	r18, r22
    284c:	ac 01       	movw	r20, r24
    284e:	69 81       	ldd	r22, Y+1	; 0x01
    2850:	7a 81       	ldd	r23, Y+2	; 0x02
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
    285a:	0e 94 88 27 	call	0x4f10	; 0x4f10 <__fixunssfsi>
    285e:	6b 01       	movw	r12, r22
    2860:	7c 01       	movw	r14, r24
    2862:	cb 01       	movw	r24, r22
    
    //Shutdown if we cross virtual limit
    if (length > m->actuator_max_limit && m->status == RUNNING_FORWARD){
    2864:	ed 81       	ldd	r30, Y+5	; 0x05
    2866:	fe 81       	ldd	r31, Y+6	; 0x06
    2868:	eb 5b       	subi	r30, 0xBB	; 187
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	20 81       	ld	r18, Z
    286e:	31 81       	ldd	r19, Z+1	; 0x01
    2870:	26 17       	cp	r18, r22
    2872:	37 07       	cpc	r19, r23
    2874:	40 f4       	brcc	.+16     	; 0x2886 <setLengthLoop+0x120>
    2876:	ed 81       	ldd	r30, Y+5	; 0x05
    2878:	fe 81       	ldd	r31, Y+6	; 0x06
    287a:	e1 5b       	subi	r30, 0xB1	; 177
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	20 81       	ld	r18, Z
    2880:	21 30       	cpi	r18, 0x01	; 1
    2882:	09 f4       	brne	.+2      	; 0x2886 <setLengthLoop+0x120>
    2884:	e6 c1       	rjmp	.+972    	; 0x2c52 <setLengthLoop+0x4ec>
        motorControl(m, m->current_dir, SHUTDOWN); //SHUTDOWN motor
        running_motor = -1;
        m->set_length = length;
       // fprintf_P(port, PSTR("MAXLERR\n"));
    }
    else if(length < m->actuator_min_limit && m->status == RUNNING_BACKWARD){
    2886:	f4 e6       	ldi	r31, 0x64	; 100
    2888:	f2 9d       	mul	r31, r2
    288a:	80 01       	movw	r16, r0
    288c:	f3 9d       	mul	r31, r3
    288e:	10 0d       	add	r17, r0
    2890:	11 24       	eor	r1, r1
    2892:	01 5f       	subi	r16, 0xF1	; 241
    2894:	1e 4f       	sbci	r17, 0xFE	; 254
    2896:	f8 01       	movw	r30, r16
    2898:	ed 5b       	subi	r30, 0xBD	; 189
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	20 81       	ld	r18, Z
    289e:	31 81       	ldd	r19, Z+1	; 0x01
    28a0:	82 17       	cp	r24, r18
    28a2:	93 07       	cpc	r25, r19
    28a4:	08 f4       	brcc	.+2      	; 0x28a8 <setLengthLoop+0x142>
    28a6:	6e c1       	rjmp	.+732    	; 0x2b84 <setLengthLoop+0x41e>

void setLengthLoop(void){
    //uint8_t status = 0;
    for (uint8_t i = 0; i < NUM_OF_MOTORS; i++){
        volatile motor *m = &motors[i];
        m->current_length = getActuatorLength(m);
    28a8:	24 e6       	ldi	r18, 0x64	; 100
    28aa:	22 9d       	mul	r18, r2
    28ac:	f0 01       	movw	r30, r0
    28ae:	23 9d       	mul	r18, r3
    28b0:	f0 0d       	add	r31, r0
    28b2:	11 24       	eor	r1, r1
    28b4:	e1 5f       	subi	r30, 0xF1	; 241
    28b6:	fe 4f       	sbci	r31, 0xFE	; 254
    28b8:	d4 a2       	std	Z+36, r13	; 0x24
    28ba:	c3 a2       	std	Z+35, r12	; 0x23

        //Check if we have been running too long
        if ((running_motor == i || running_motor == -1) && (m->status != STATUS_OK)){ //IF this motor is running or none of them is running 
    28bc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <running_motor>
    28c0:	08 2e       	mov	r0, r24
    28c2:	00 0c       	add	r0, r0
    28c4:	99 0b       	sbc	r25, r25
    28c6:	28 16       	cp	r2, r24
    28c8:	39 06       	cpc	r3, r25
    28ca:	09 f4       	brne	.+2      	; 0x28ce <setLengthLoop+0x168>
    28cc:	4f c0       	rjmp	.+158    	; 0x296c <setLengthLoop+0x206>
    28ce:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <running_motor>
    28d2:	8f 3f       	cpi	r24, 0xFF	; 255
    28d4:	09 f4       	brne	.+2      	; 0x28d8 <setLengthLoop+0x172>
    28d6:	4a c0       	rjmp	.+148    	; 0x296c <setLengthLoop+0x206>
    28d8:	a4 e6       	ldi	r26, 0x64	; 100
    28da:	aa 0e       	add	r10, r26
    28dc:	b1 1c       	adc	r11, r1
}


void setLengthLoop(void){
    //uint8_t status = 0;
    for (uint8_t i = 0; i < NUM_OF_MOTORS; i++){
    28de:	b1 e0       	ldi	r27, 0x01	; 1
    28e0:	2b 16       	cp	r2, r27
    28e2:	31 04       	cpc	r3, r1
    28e4:	09 f0       	breq	.+2      	; 0x28e8 <setLengthLoop+0x182>
    28e6:	3e c0       	rjmp	.+124    	; 0x2964 <setLengthLoop+0x1fe>
                    systick = 0;
                }
            }
        }
    }
}
    28e8:	26 96       	adiw	r28, 0x06	; 6
    28ea:	e2 e1       	ldi	r30, 0x12	; 18
    28ec:	0c 94 f0 29 	jmp	0x53e0	; 0x53e0 <__epilogue_restores__>
uint16_t getActuatorLength(volatile motor *m){
    uint32_t voltage = AVGVoltage(m->actuator_adc_channel, 0x40, NUMOFSAMPLES);
    
    //in case of error (out of bounds) stop motor and reset length set
    if (voltage < (m->voltage_low_offset) || voltage > (m->voltage_high_offset + 50)){
        m->status = ACTUATOR_ERROR;
    28f0:	b4 e6       	ldi	r27, 0x64	; 100
    28f2:	b2 9d       	mul	r27, r2
    28f4:	80 01       	movw	r16, r0
    28f6:	b3 9d       	mul	r27, r3
    28f8:	10 0d       	add	r17, r0
    28fa:	11 24       	eor	r1, r1
    28fc:	01 5f       	subi	r16, 0xF1	; 241
    28fe:	1e 4f       	sbci	r17, 0xFE	; 254
    2900:	f8 01       	movw	r30, r16
    2902:	e1 5b       	subi	r30, 0xB1	; 177
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	27 e0       	ldi	r18, 0x07	; 7
    2908:	20 83       	st	Z, r18
        motorControl(m, m->current_dir, SHUTDOWN);
    290a:	d8 01       	movw	r26, r16
    290c:	92 96       	adiw	r26, 0x22	; 34
    290e:	6c 91       	ld	r22, X
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	c5 01       	movw	r24, r10
    2914:	b3 db       	rcall	.-2202   	; 0x207c <motorControl>
        running_motor = -1;
    2916:	bf ef       	ldi	r27, 0xFF	; 255
    2918:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <running_motor>
        m->set_length = m->current_length;
    291c:	f8 01       	movw	r30, r16
    291e:	83 a1       	ldd	r24, Z+35	; 0x23
    2920:	94 a1       	ldd	r25, Z+36	; 0x24
    2922:	96 a3       	std	Z+38, r25	; 0x26
    2924:	85 a3       	std	Z+37, r24	; 0x25
        fprintf_P(port, PSTR("AERR\n"));
    2926:	a4 e7       	ldi	r26, 0x74	; 116
    2928:	b2 e0       	ldi	r27, 0x02	; 2
    292a:	bf 93       	push	r27
    292c:	af 93       	push	r26
    292e:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    2932:	8f 93       	push	r24
    2934:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    2938:	8f 93       	push	r24
    293a:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
    293e:	ff ef       	ldi	r31, 0xFF	; 255
    2940:	29 e6       	ldi	r18, 0x69	; 105
    2942:	48 e1       	ldi	r20, 0x18	; 24
    2944:	f1 50       	subi	r31, 0x01	; 1
    2946:	20 40       	sbci	r18, 0x00	; 0
    2948:	40 40       	sbci	r20, 0x00	; 0
    294a:	e1 f7       	brne	.-8      	; 0x2944 <setLengthLoop+0x1de>
    294c:	00 c0       	rjmp	.+0      	; 0x294e <setLengthLoop+0x1e8>
    294e:	00 00       	nop
        _delay_ms(500);
        return m->current_length;
    2950:	d8 01       	movw	r26, r16
    2952:	93 96       	adiw	r26, 0x23	; 35
    2954:	cd 90       	ld	r12, X+
    2956:	dc 90       	ld	r13, X
    2958:	94 97       	sbiw	r26, 0x24	; 36
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	a2 cf       	rjmp	.-188    	; 0x28a8 <setLengthLoop+0x142>
    2964:	22 24       	eor	r2, r2
    2966:	23 94       	inc	r2
    2968:	31 2c       	mov	r3, r1
    296a:	09 cf       	rjmp	.-494    	; 0x277e <setLengthLoop+0x18>
    for (uint8_t i = 0; i < NUM_OF_MOTORS; i++){
        volatile motor *m = &motors[i];
        m->current_length = getActuatorLength(m);

        //Check if we have been running too long
        if ((running_motor == i || running_motor == -1) && (m->status != STATUS_OK)){ //IF this motor is running or none of them is running 
    296c:	44 e6       	ldi	r20, 0x64	; 100
    296e:	42 9d       	mul	r20, r2
    2970:	90 01       	movw	r18, r0
    2972:	43 9d       	mul	r20, r3
    2974:	30 0d       	add	r19, r0
    2976:	11 24       	eor	r1, r1
    2978:	c9 01       	movw	r24, r18
    297a:	81 5f       	subi	r24, 0xF1	; 241
    297c:	9e 4f       	sbci	r25, 0xFE	; 254
    297e:	6c 01       	movw	r12, r24
    2980:	8c 01       	movw	r16, r24
    2982:	01 5b       	subi	r16, 0xB1	; 177
    2984:	1f 4f       	sbci	r17, 0xFF	; 255
    2986:	d8 01       	movw	r26, r16
    2988:	8c 91       	ld	r24, X
    298a:	88 23       	and	r24, r24
    298c:	09 f4       	brne	.+2      	; 0x2990 <setLengthLoop+0x22a>
    298e:	a4 cf       	rjmp	.-184    	; 0x28d8 <setLengthLoop+0x172>
            if (m->timeout_value >= m->timeout_setting){
    2990:	76 01       	movw	r14, r12
    2992:	bb e4       	ldi	r27, 0x4B	; 75
    2994:	eb 0e       	add	r14, r27
    2996:	f1 1c       	adc	r15, r1
    2998:	f7 01       	movw	r30, r14
    299a:	40 81       	ld	r20, Z
    299c:	51 81       	ldd	r21, Z+1	; 0x01
    299e:	62 81       	ldd	r22, Z+2	; 0x02
    29a0:	73 81       	ldd	r23, Z+3	; 0x03
    29a2:	34 97       	sbiw	r30, 0x04	; 4
    29a4:	80 81       	ld	r24, Z
    29a6:	91 81       	ldd	r25, Z+1	; 0x01
    29a8:	a2 81       	ldd	r26, Z+2	; 0x02
    29aa:	b3 81       	ldd	r27, Z+3	; 0x03
    29ac:	48 17       	cp	r20, r24
    29ae:	59 07       	cpc	r21, r25
    29b0:	6a 07       	cpc	r22, r26
    29b2:	7b 07       	cpc	r23, r27
    29b4:	08 f0       	brcs	.+2      	; 0x29b8 <setLengthLoop+0x252>
    29b6:	5e c1       	rjmp	.+700    	; 0x2c74 <setLengthLoop+0x50e>
                fprintf_P(port, PSTR("timeout\n"));
                m->set_length = m->current_length; //REset movement
                running_motor = -1;
            } 
            else{
                if (m->current_length > m->set_length + m->length_hysteresis){
    29b8:	f6 01       	movw	r30, r12
    29ba:	23 a1       	ldd	r18, Z+35	; 0x23
    29bc:	34 a1       	ldd	r19, Z+36	; 0x24
    29be:	85 a1       	ldd	r24, Z+37	; 0x25
    29c0:	96 a1       	ldd	r25, Z+38	; 0x26
    29c2:	45 a5       	ldd	r20, Z+45	; 0x2d
    29c4:	84 0f       	add	r24, r20
    29c6:	91 1d       	adc	r25, r1
    29c8:	82 17       	cp	r24, r18
    29ca:	93 07       	cpc	r25, r19
    29cc:	08 f4       	brcc	.+2      	; 0x29d0 <setLengthLoop+0x26a>
    29ce:	78 c1       	rjmp	.+752    	; 0x2cc0 <setLengthLoop+0x55a>
                    running_motor = i;
                    if (m->timeout_value%100 == 0){
                        measureActuatorCurrent(m);
                    }
                }
                else if (m->current_length < m->set_length - m->length_hysteresis){
    29d0:	23 a1       	ldd	r18, Z+35	; 0x23
    29d2:	34 a1       	ldd	r19, Z+36	; 0x24
    29d4:	85 a1       	ldd	r24, Z+37	; 0x25
    29d6:	96 a1       	ldd	r25, Z+38	; 0x26
    29d8:	45 a5       	ldd	r20, Z+45	; 0x2d
    29da:	84 1b       	sub	r24, r20
    29dc:	91 09       	sbc	r25, r1
    29de:	28 17       	cp	r18, r24
    29e0:	39 07       	cpc	r19, r25
    29e2:	08 f4       	brcc	.+2      	; 0x29e6 <setLengthLoop+0x280>
    29e4:	e3 c0       	rjmp	.+454    	; 0x2bac <setLengthLoop+0x446>
    float aoffset = m->angle_correction(m->set_length);
    return m->angle_reference + aoffset;
}

void measureActuatorCurrent(volatile motor *m){
    uint16_t voltage = AVGVoltage(m->actuator_current_adc_channel, 0x40, 2);
    29e6:	80 a1       	ldd	r24, Z+32	; 0x20
    29e8:	42 e0       	ldi	r20, 0x02	; 2
    29ea:	60 e4       	ldi	r22, 0x40	; 64
    29ec:	0e 94 5d 02 	call	0x4ba	; 0x4ba <AVGVoltage>
    29f0:	8c 01       	movw	r16, r24
    m->avg_move_current = (m->avg_move_current*9.0 + voltage) / 10.0; //one sample is effecting 1/5    
    29f2:	76 01       	movw	r14, r12
    29f4:	ba e5       	ldi	r27, 0x5A	; 90
    29f6:	eb 0e       	add	r14, r27
    29f8:	f1 1c       	adc	r15, r1
    29fa:	f7 01       	movw	r30, r14
    29fc:	60 81       	ld	r22, Z
    29fe:	71 81       	ldd	r23, Z+1	; 0x01
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e1       	ldi	r20, 0x10	; 16
    2a0a:	51 e4       	ldi	r21, 0x41	; 65
    2a0c:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
    2a10:	2b 01       	movw	r4, r22
    2a12:	3c 01       	movw	r6, r24
    2a14:	b8 01       	movw	r22, r16
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
    2a1e:	9b 01       	movw	r18, r22
    2a20:	ac 01       	movw	r20, r24
    2a22:	c3 01       	movw	r24, r6
    2a24:	b2 01       	movw	r22, r4
    2a26:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e2       	ldi	r20, 0x20	; 32
    2a30:	51 e4       	ldi	r21, 0x41	; 65
    2a32:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
    2a36:	d7 01       	movw	r26, r14
    2a38:	6d 93       	st	X+, r22
    2a3a:	7d 93       	st	X+, r23
    2a3c:	8d 93       	st	X+, r24
    2a3e:	9c 93       	st	X, r25
    2a40:	13 97       	sbiw	r26, 0x03	; 3
                        measureActuatorCurrent(m);
                    }
                }
                else{
                    measureActuatorCurrent(m);
                    for(; m->current_pwm > 0; m->current_pwm--){
    2a42:	76 01       	movw	r14, r12
    2a44:	b1 e2       	ldi	r27, 0x21	; 33
    2a46:	eb 0e       	add	r14, r27
    2a48:	f1 1c       	adc	r15, r1
    2a4a:	f6 01       	movw	r30, r12
    2a4c:	81 a1       	ldd	r24, Z+33	; 0x21
    2a4e:	88 23       	and	r24, r24
    2a50:	71 f1       	breq	.+92     	; 0x2aae <setLengthLoop+0x348>
                        setMotor(m, m->current_dir, m->current_pwm);
    2a52:	86 01       	movw	r16, r12
    2a54:	0e 5d       	subi	r16, 0xDE	; 222
    2a56:	1f 4f       	sbci	r17, 0xFF	; 255
                        delayLoop_us(m->deacceleration_time);
    2a58:	bb e2       	ldi	r27, 0x2B	; 43
    2a5a:	cb 0e       	add	r12, r27
    2a5c:	d1 1c       	adc	r13, r1
    2a5e:	c6 01       	movw	r24, r12
    2a60:	67 01       	movw	r12, r14
    2a62:	7c 01       	movw	r14, r24
                    }
                }
                else{
                    measureActuatorCurrent(m);
                    for(; m->current_pwm > 0; m->current_pwm--){
                        setMotor(m, m->current_dir, m->current_pwm);
    2a64:	f6 01       	movw	r30, r12
    2a66:	40 81       	ld	r20, Z
    2a68:	d8 01       	movw	r26, r16
    2a6a:	6c 91       	ld	r22, X
    2a6c:	c5 01       	movw	r24, r10
    2a6e:	72 d9       	rcall	.-3356   	; 0x1d54 <setMotor>
                        delayLoop_us(m->deacceleration_time);
    2a70:	f7 01       	movw	r30, r14
    2a72:	20 81       	ld	r18, Z
    2a74:	31 81       	ldd	r19, Z+1	; 0x01
        fprintf(port, "%f Max:%f\n",(4700.0/1024.0)*min,(4700.0/1024.0)*max);
    }
}

void delayLoop_us(uint16_t delay){
    for (uint16_t i = 0; i < delay/50; i++){
    2a76:	36 95       	lsr	r19
    2a78:	27 95       	ror	r18
    2a7a:	ab e7       	ldi	r26, 0x7B	; 123
    2a7c:	b4 e1       	ldi	r27, 0x14	; 20
    2a7e:	0e 94 c5 29 	call	0x538a	; 0x538a <__umulhisi3>
    2a82:	96 95       	lsr	r25
    2a84:	87 95       	ror	r24
    2a86:	00 97       	sbiw	r24, 0x00	; 0
    2a88:	59 f0       	breq	.+22     	; 0x2aa0 <setLengthLoop+0x33a>
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a8e:	ba ef       	ldi	r27, 0xFA	; 250
    2a90:	ba 95       	dec	r27
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <setLengthLoop+0x32a>
    2a94:	00 c0       	rjmp	.+0      	; 0x2a96 <setLengthLoop+0x330>
    2a96:	2f 5f       	subi	r18, 0xFF	; 255
    2a98:	3f 4f       	sbci	r19, 0xFF	; 255
    2a9a:	28 17       	cp	r18, r24
    2a9c:	39 07       	cpc	r19, r25
    2a9e:	b9 f7       	brne	.-18     	; 0x2a8e <setLengthLoop+0x328>
                        measureActuatorCurrent(m);
                    }
                }
                else{
                    measureActuatorCurrent(m);
                    for(; m->current_pwm > 0; m->current_pwm--){
    2aa0:	d6 01       	movw	r26, r12
    2aa2:	8c 91       	ld	r24, X
    2aa4:	81 50       	subi	r24, 0x01	; 1
    2aa6:	8c 93       	st	X, r24
    2aa8:	8c 91       	ld	r24, X
    2aaa:	81 11       	cpse	r24, r1
    2aac:	db cf       	rjmp	.-74     	; 0x2a64 <setLengthLoop+0x2fe>
                        setMotor(m, m->current_dir, m->current_pwm);
                        delayLoop_us(m->deacceleration_time);
                    }
                    m->timeout_value = 0; //Clear timeout
    2aae:	f4 e6       	ldi	r31, 0x64	; 100
    2ab0:	f2 9d       	mul	r31, r2
    2ab2:	90 01       	movw	r18, r0
    2ab4:	f3 9d       	mul	r31, r3
    2ab6:	30 0d       	add	r19, r0
    2ab8:	11 24       	eor	r1, r1
    2aba:	a9 01       	movw	r20, r18
    2abc:	41 5f       	subi	r20, 0xF1	; 241
    2abe:	5e 4f       	sbci	r21, 0xFE	; 254
    2ac0:	4a 01       	movw	r8, r20
    2ac2:	ba 01       	movw	r22, r20
    2ac4:	65 5b       	subi	r22, 0xB5	; 181
    2ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac8:	db 01       	movw	r26, r22
    2aca:	1d 92       	st	X+, r1
    2acc:	1d 92       	st	X+, r1
    2ace:	1d 92       	st	X+, r1
    2ad0:	1c 92       	st	X, r1
    2ad2:	13 97       	sbiw	r26, 0x03	; 3
                    m->status = STATUS_OK;
    2ad4:	14 96       	adiw	r26, 0x04	; 4
    2ad6:	1c 92       	st	X, r1
  
   // GTCCR = 0x00;//Counter is started at the main loop Start Counter
}
void disableMotorPWM(volatile motor *m){

    *m->enable_port_addr &= ~(1<<m->enable_pin); //Disable motor => clear enable port
    2ad8:	fa 01       	movw	r30, r20
    2ada:	86 8d       	ldd	r24, Z+30	; 0x1e
    2adc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2ade:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2ae0:	2c 91       	ld	r18, X
    2ae2:	41 e0       	ldi	r20, 0x01	; 1
    2ae4:	50 e0       	ldi	r21, 0x00	; 0
    2ae6:	02 c0       	rjmp	.+4      	; 0x2aec <setLengthLoop+0x386>
    2ae8:	44 0f       	add	r20, r20
    2aea:	55 1f       	adc	r21, r21
    2aec:	8a 95       	dec	r24
    2aee:	e2 f7       	brpl	.-8      	; 0x2ae8 <setLengthLoop+0x382>
    2af0:	ca 01       	movw	r24, r20
    2af2:	80 95       	com	r24
    2af4:	90 95       	com	r25
    2af6:	82 23       	and	r24, r18
    2af8:	8c 93       	st	X, r24
    *m->fwd_TCCRA_addr = 0x00;//m.fwd_TCCRA_value;
    2afa:	a5 81       	ldd	r26, Z+5	; 0x05
    2afc:	b6 81       	ldd	r27, Z+6	; 0x06
    2afe:	1c 92       	st	X, r1
    *m->fwd_TCCRB_addr = 0x00;//m.fwd_TCCRB_value;
    2b00:	a0 85       	ldd	r26, Z+8	; 0x08
    2b02:	b1 85       	ldd	r27, Z+9	; 0x09
    2b04:	1c 92       	st	X, r1
    *m->fwd_OCR_addr = 0x00; //Init PWM to zero
    2b06:	a3 85       	ldd	r26, Z+11	; 0x0b
    2b08:	b4 85       	ldd	r27, Z+12	; 0x0c
    2b0a:	1c 92       	st	X, r1
    
    //Init reverse PWM settings
    *m->rev_TCCRA_addr = 0x00;//m.rev_TCCRA_value;
    2b0c:	a2 89       	ldd	r26, Z+18	; 0x12
    2b0e:	b3 89       	ldd	r27, Z+19	; 0x13
    2b10:	1c 92       	st	X, r1
    *m->rev_TCCRB_addr = 0x00; //m.rev_TCCRB_value;
    2b12:	a5 89       	ldd	r26, Z+21	; 0x15
    2b14:	b6 89       	ldd	r27, Z+22	; 0x16
    2b16:	1c 92       	st	X, r1
    *m->rev_OCR_addr = 0x00; //Init PWM to zero
    2b18:	a0 8d       	ldd	r26, Z+24	; 0x18
    2b1a:	b1 8d       	ldd	r27, Z+25	; 0x19
    2b1c:	1c 92       	st	X, r1
    m->current_pwm = 0; //set PWM to zero
    2b1e:	11 a2       	std	Z+33, r1	; 0x21
    m->timeout_value = 0; //Reset timeout values
    2b20:	db 01       	movw	r26, r22
    2b22:	1d 92       	st	X+, r1
    2b24:	1d 92       	st	X+, r1
    2b26:	1d 92       	st	X+, r1
    2b28:	1c 92       	st	X, r1
    2b2a:	13 97       	sbiw	r26, 0x03	; 3
                        delayLoop_us(m->deacceleration_time);
                    }
                    m->timeout_value = 0; //Clear timeout
                    m->status = STATUS_OK;
                    disableMotorPWM(m);
                    calculateMoveSpeed(m, systick);       
    2b2c:	00 91 ac 02 	lds	r16, 0x02AC	; 0x8002ac <__data_end>
    2b30:	10 91 ad 02 	lds	r17, 0x02AD	; 0x8002ad <__data_end+0x1>
        }
    }
}

void calculateMoveSpeed(volatile motor *m, uint16_t tick){
    if (tick > 0 && m->move_length_mm > 0){
    2b34:	01 15       	cp	r16, r1
    2b36:	11 05       	cpc	r17, r1
    2b38:	41 f0       	breq	.+16     	; 0x2b4a <setLengthLoop+0x3e4>
    2b3a:	f4 01       	movw	r30, r8
    2b3c:	ee 59       	subi	r30, 0x9E	; 158
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	80 81       	ld	r24, Z
    2b42:	91 81       	ldd	r25, Z+1	; 0x01
    2b44:	89 2b       	or	r24, r25
    2b46:	09 f0       	breq	.+2      	; 0x2b4a <setLengthLoop+0x3e4>
    2b48:	cd c0       	rjmp	.+410    	; 0x2ce4 <setLengthLoop+0x57e>
        float milliseconds = tick;
        float mlen = m->move_length_mm;
        m->move_speed_mm = mlen / (milliseconds/100);
    }
    else{
        m->move_speed_mm = 0.0;
    2b4a:	24 e6       	ldi	r18, 0x64	; 100
    2b4c:	22 9d       	mul	r18, r2
    2b4e:	f0 01       	movw	r30, r0
    2b50:	23 9d       	mul	r18, r3
    2b52:	f0 0d       	add	r31, r0
    2b54:	11 24       	eor	r1, r1
    2b56:	e3 59       	subi	r30, 0x93	; 147
    2b58:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5a:	10 82       	st	Z, r1
    2b5c:	11 82       	std	Z+1, r1	; 0x01
    2b5e:	12 82       	std	Z+2, r1	; 0x02
    2b60:	13 82       	std	Z+3, r1	; 0x03
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b62:	4f e7       	ldi	r20, 0x7F	; 127
    2b64:	58 e3       	ldi	r21, 0x38	; 56
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	41 50       	subi	r20, 0x01	; 1
    2b6a:	50 40       	sbci	r21, 0x00	; 0
    2b6c:	80 40       	sbci	r24, 0x00	; 0
    2b6e:	e1 f7       	brne	.-8      	; 0x2b68 <setLengthLoop+0x402>
    2b70:	00 c0       	rjmp	.+0      	; 0x2b72 <setLengthLoop+0x40c>
    2b72:	00 00       	nop
                    m->timeout_value = 0; //Clear timeout
                    m->status = STATUS_OK;
                    disableMotorPWM(m);
                    calculateMoveSpeed(m, systick);       
                    _delay_ms(25);  
                    running_motor = -1;    
    2b74:	9f ef       	ldi	r25, 0xFF	; 255
    2b76:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <running_motor>
                    systick = 0;
    2b7a:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <__data_end+0x1>
    2b7e:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <__data_end>
    2b82:	aa ce       	rjmp	.-684    	; 0x28d8 <setLengthLoop+0x172>
        motorControl(m, m->current_dir, SHUTDOWN); //SHUTDOWN motor
        running_motor = -1;
        m->set_length = length;
       // fprintf_P(port, PSTR("MAXLERR\n"));
    }
    else if(length < m->actuator_min_limit && m->status == RUNNING_BACKWARD){
    2b84:	3c 96       	adiw	r30, 0x0c	; 12
    2b86:	80 81       	ld	r24, Z
    2b88:	82 30       	cpi	r24, 0x02	; 2
    2b8a:	09 f0       	breq	.+2      	; 0x2b8e <setLengthLoop+0x428>
    2b8c:	8d ce       	rjmp	.-742    	; 0x28a8 <setLengthLoop+0x142>
        m->status = MIN_LIMIT;
    2b8e:	84 e0       	ldi	r24, 0x04	; 4
    2b90:	80 83       	st	Z, r24
        motorControl(m, m->current_dir, SHUTDOWN);  //SHUTDOWN motor
    2b92:	d8 01       	movw	r26, r16
    2b94:	92 96       	adiw	r26, 0x22	; 34
    2b96:	6c 91       	ld	r22, X
    2b98:	40 e0       	ldi	r20, 0x00	; 0
    2b9a:	c5 01       	movw	r24, r10
    2b9c:	6f da       	rcall	.-2850   	; 0x207c <motorControl>
        running_motor = -1;
    2b9e:	bf ef       	ldi	r27, 0xFF	; 255
    2ba0:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <running_motor>
        m->set_length = length;
    2ba4:	f8 01       	movw	r30, r16
    2ba6:	d6 a2       	std	Z+38, r13	; 0x26
    2ba8:	c5 a2       	std	Z+37, r12	; 0x25
    2baa:	7e ce       	rjmp	.-772    	; 0x28a8 <setLengthLoop+0x142>
                    if (m->timeout_value%100 == 0){
                        measureActuatorCurrent(m);
                    }
                }
                else if (m->current_length < m->set_length - m->length_hysteresis){
                    motorControl(m, FORWARD, m->max_pwm);
    2bac:	46 a5       	ldd	r20, Z+46	; 0x2e
    2bae:	61 e0       	ldi	r22, 0x01	; 1
    2bb0:	c5 01       	movw	r24, r10
    2bb2:	64 da       	rcall	.-2872   	; 0x207c <motorControl>
                    m->timeout_value ++; //update timeout variables
    2bb4:	f7 01       	movw	r30, r14
    2bb6:	80 81       	ld	r24, Z
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	a2 81       	ldd	r26, Z+2	; 0x02
    2bbc:	b3 81       	ldd	r27, Z+3	; 0x03
    2bbe:	01 96       	adiw	r24, 0x01	; 1
    2bc0:	a1 1d       	adc	r26, r1
    2bc2:	b1 1d       	adc	r27, r1
    2bc4:	80 83       	st	Z, r24
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	a2 83       	std	Z+2, r26	; 0x02
    2bca:	b3 83       	std	Z+3, r27	; 0x03
                    m->status = RUNNING_FORWARD;
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	d8 01       	movw	r26, r16
    2bd0:	8c 93       	st	X, r24
                    running_motor = i;
    2bd2:	20 92 0e 01 	sts	0x010E, r2	; 0x80010e <running_motor>
                    if (m->timeout_value%100 == 0){
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	24 e6       	ldi	r18, 0x64	; 100
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e0       	ldi	r20, 0x00	; 0
    2be4:	50 e0       	ldi	r21, 0x00	; 0
    2be6:	0e 94 a3 29 	call	0x5346	; 0x5346 <__udivmodsi4>
    2bea:	67 2b       	or	r22, r23
    2bec:	68 2b       	or	r22, r24
    2bee:	69 2b       	or	r22, r25
    2bf0:	09 f0       	breq	.+2      	; 0x2bf4 <setLengthLoop+0x48e>
    2bf2:	72 ce       	rjmp	.-796    	; 0x28d8 <setLengthLoop+0x172>
    float aoffset = m->angle_correction(m->set_length);
    return m->angle_reference + aoffset;
}

void measureActuatorCurrent(volatile motor *m){
    uint16_t voltage = AVGVoltage(m->actuator_current_adc_channel, 0x40, 2);
    2bf4:	f6 01       	movw	r30, r12
    2bf6:	80 a1       	ldd	r24, Z+32	; 0x20
    2bf8:	42 e0       	ldi	r20, 0x02	; 2
    2bfa:	60 e4       	ldi	r22, 0x40	; 64
    2bfc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <AVGVoltage>
    2c00:	8c 01       	movw	r16, r24
    m->avg_move_current = (m->avg_move_current*9.0 + voltage) / 10.0; //one sample is effecting 1/5    
    2c02:	46 01       	movw	r8, r12
    2c04:	fa e5       	ldi	r31, 0x5A	; 90
    2c06:	8f 0e       	add	r8, r31
    2c08:	91 1c       	adc	r9, r1
    2c0a:	d4 01       	movw	r26, r8
    2c0c:	6d 91       	ld	r22, X+
    2c0e:	7d 91       	ld	r23, X+
    2c10:	8d 91       	ld	r24, X+
    2c12:	9c 91       	ld	r25, X
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 e1       	ldi	r20, 0x10	; 16
    2c1a:	51 e4       	ldi	r21, 0x41	; 65
    2c1c:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3>
    2c20:	6b 01       	movw	r12, r22
    2c22:	7c 01       	movw	r14, r24
    2c24:	b8 01       	movw	r22, r16
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
    2c2e:	9b 01       	movw	r18, r22
    2c30:	ac 01       	movw	r20, r24
    2c32:	c7 01       	movw	r24, r14
    2c34:	b6 01       	movw	r22, r12
    2c36:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__addsf3>
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e2       	ldi	r20, 0x20	; 32
    2c40:	51 e4       	ldi	r21, 0x41	; 65
    2c42:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
    2c46:	f4 01       	movw	r30, r8
    2c48:	60 83       	st	Z, r22
    2c4a:	71 83       	std	Z+1, r23	; 0x01
    2c4c:	82 83       	std	Z+2, r24	; 0x02
    2c4e:	93 83       	std	Z+3, r25	; 0x03
    2c50:	43 ce       	rjmp	.-890    	; 0x28d8 <setLengthLoop+0x172>
    voltage = (voltage - m->voltage_low_offset); //Fix minimum position starting at zero
    uint16_t length =  m->actuator_min_length + (m->actuator_range / m->voltage_range * voltage); //volts per degree
    
    //Shutdown if we cross virtual limit
    if (length > m->actuator_max_limit && m->status == RUNNING_FORWARD){
        m->status = MAX_LIMIT;
    2c52:	25 e0       	ldi	r18, 0x05	; 5
    2c54:	20 83       	st	Z, r18
        motorControl(m, m->current_dir, SHUTDOWN); //SHUTDOWN motor
    2c56:	ad 81       	ldd	r26, Y+5	; 0x05
    2c58:	be 81       	ldd	r27, Y+6	; 0x06
    2c5a:	92 96       	adiw	r26, 0x22	; 34
    2c5c:	6c 91       	ld	r22, X
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	c5 01       	movw	r24, r10
    2c62:	0c da       	rcall	.-3048   	; 0x207c <motorControl>
        running_motor = -1;
    2c64:	bf ef       	ldi	r27, 0xFF	; 255
    2c66:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <running_motor>
        m->set_length = length;
    2c6a:	ed 81       	ldd	r30, Y+5	; 0x05
    2c6c:	fe 81       	ldd	r31, Y+6	; 0x06
    2c6e:	d6 a2       	std	Z+38, r13	; 0x26
    2c70:	c5 a2       	std	Z+37, r12	; 0x25
    2c72:	1a ce       	rjmp	.-972    	; 0x28a8 <setLengthLoop+0x142>
        m->current_length = getActuatorLength(m);

        //Check if we have been running too long
        if ((running_motor == i || running_motor == -1) && (m->status != STATUS_OK)){ //IF this motor is running or none of them is running 
            if (m->timeout_value >= m->timeout_setting){
                motorControl(m, m->current_dir, SHUTDOWN); //Shutdown motor if it has been running too lon.
    2c74:	d6 01       	movw	r26, r12
    2c76:	92 96       	adiw	r26, 0x22	; 34
    2c78:	6c 91       	ld	r22, X
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	c5 01       	movw	r24, r10
    2c7e:	fe d9       	rcall	.-3076   	; 0x207c <motorControl>
                m->status = TIMEOUT_ERROR;
    2c80:	23 e0       	ldi	r18, 0x03	; 3
    2c82:	f8 01       	movw	r30, r16
    2c84:	20 83       	st	Z, r18
                fprintf_P(port, PSTR("timeout\n"));
    2c86:	ab e6       	ldi	r26, 0x6B	; 107
    2c88:	b2 e0       	ldi	r27, 0x02	; 2
    2c8a:	bf 93       	push	r27
    2c8c:	af 93       	push	r26
    2c8e:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    2c92:	8f 93       	push	r24
    2c94:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    2c98:	8f 93       	push	r24
    2c9a:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
                m->set_length = m->current_length; //REset movement
    2c9e:	d6 01       	movw	r26, r12
    2ca0:	93 96       	adiw	r26, 0x23	; 35
    2ca2:	8d 91       	ld	r24, X+
    2ca4:	9c 91       	ld	r25, X
    2ca6:	94 97       	sbiw	r26, 0x24	; 36
    2ca8:	96 96       	adiw	r26, 0x26	; 38
    2caa:	9c 93       	st	X, r25
    2cac:	8e 93       	st	-X, r24
    2cae:	95 97       	sbiw	r26, 0x25	; 37
                running_motor = -1;
    2cb0:	bf ef       	ldi	r27, 0xFF	; 255
    2cb2:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <running_motor>
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	0c ce       	rjmp	.-1000   	; 0x28d8 <setLengthLoop+0x172>
            } 
            else{
                if (m->current_length > m->set_length + m->length_hysteresis){
                    motorControl(m, BACKWARD, m->max_pwm);
    2cc0:	46 a5       	ldd	r20, Z+46	; 0x2e
    2cc2:	60 e0       	ldi	r22, 0x00	; 0
    2cc4:	c5 01       	movw	r24, r10
    2cc6:	da d9       	rcall	.-3148   	; 0x207c <motorControl>
                    m->timeout_value ++; //update timeout variables
    2cc8:	f7 01       	movw	r30, r14
    2cca:	80 81       	ld	r24, Z
    2ccc:	91 81       	ldd	r25, Z+1	; 0x01
    2cce:	a2 81       	ldd	r26, Z+2	; 0x02
    2cd0:	b3 81       	ldd	r27, Z+3	; 0x03
    2cd2:	01 96       	adiw	r24, 0x01	; 1
    2cd4:	a1 1d       	adc	r26, r1
    2cd6:	b1 1d       	adc	r27, r1
    2cd8:	80 83       	st	Z, r24
    2cda:	91 83       	std	Z+1, r25	; 0x01
    2cdc:	a2 83       	std	Z+2, r26	; 0x02
    2cde:	b3 83       	std	Z+3, r27	; 0x03
                    m->status = RUNNING_BACKWARD;
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	75 cf       	rjmp	.-278    	; 0x2bce <setLengthLoop+0x468>
}

void calculateMoveSpeed(volatile motor *m, uint16_t tick){
    if (tick > 0 && m->move_length_mm > 0){
        float milliseconds = tick;
        float mlen = m->move_length_mm;
    2ce4:	60 81       	ld	r22, Z
    2ce6:	71 81       	ldd	r23, Z+1	; 0x01
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
    2cf0:	6b 01       	movw	r12, r22
    2cf2:	7c 01       	movw	r14, r24
    }
}

void calculateMoveSpeed(volatile motor *m, uint16_t tick){
    if (tick > 0 && m->move_length_mm > 0){
        float milliseconds = tick;
    2cf4:	b8 01       	movw	r22, r16
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__floatunsisf>
        float mlen = m->move_length_mm;
        m->move_speed_mm = mlen / (milliseconds/100);
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	48 ec       	ldi	r20, 0xC8	; 200
    2d04:	52 e4       	ldi	r21, 0x42	; 66
    2d06:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
    2d0a:	9b 01       	movw	r18, r22
    2d0c:	ac 01       	movw	r20, r24
    2d0e:	c7 01       	movw	r24, r14
    2d10:	b6 01       	movw	r22, r12
    2d12:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__divsf3>
    2d16:	f4 01       	movw	r30, r8
    2d18:	e2 5a       	subi	r30, 0xA2	; 162
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	60 83       	st	Z, r22
    2d1e:	71 83       	std	Z+1, r23	; 0x01
    2d20:	82 83       	std	Z+2, r24	; 0x02
    2d22:	93 83       	std	Z+3, r25	; 0x03
    2d24:	1e cf       	rjmp	.-452    	; 0x2b62 <setLengthLoop+0x3fc>

00002d26 <read_until_line_end>:

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
    2d26:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	e2 54       	subi	r30, 0x42	; 66
    2d2e:	fd 4f       	sbci	r31, 0xFD	; 253
    2d30:	80 81       	ld	r24, Z
    2d32:	8a 30       	cpi	r24, 0x0A	; 10
    2d34:	a1 f0       	breq	.+40     	; 0x2d5e <read_until_line_end+0x38>
    2d36:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	e2 54       	subi	r30, 0x42	; 66
    2d3e:	fd 4f       	sbci	r31, 0xFD	; 253
    2d40:	80 81       	ld	r24, Z
    2d42:	8d 30       	cpi	r24, 0x0D	; 13
    2d44:	61 f0       	breq	.+24     	; 0x2d5e <read_until_line_end+0x38>
    2d46:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    2d4a:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    2d4e:	98 17       	cp	r25, r24
    2d50:	31 f0       	breq	.+12     	; 0x2d5e <read_until_line_end+0x38>
        ring_read++;
    2d52:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    2d56:	8f 5f       	subi	r24, 0xFF	; 255
    2d58:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>
    2d5c:	e4 cf       	rjmp	.-56     	; 0x2d26 <read_until_line_end>
    2d5e:	08 95       	ret

00002d60 <initSerialParser>:
/*
    Initializes serialport and clears ring buffer
    This function also takes angle and tilt global variable pointer where set angle values are stored 
*/
void initSerialParser(FILE *serialport){
    port = serialport;
    2d60:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <port+0x1>
    2d64:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <port>
    2d68:	ee eb       	ldi	r30, 0xBE	; 190
    2d6a:	f2 e0       	ldi	r31, 0x02	; 2
volatile char buffer[BUFSIZE+1];

FILE *port; //Serialport to host machine

__attribute__((always_inline)) inline static void clearBuffer(volatile char *buffer,uint8_t len){
	for(uint8_t i=0;i<len;i++){	*buffer++ = '\0';}
    2d6c:	10 82       	st	Z, r1
    2d6e:	31 96       	adiw	r30, 0x01	; 1
    2d70:	83 e0       	ldi	r24, 0x03	; 3
    2d72:	ed 3b       	cpi	r30, 0xBD	; 189
    2d74:	f8 07       	cpc	r31, r24
    2d76:	d1 f7       	brne	.-12     	; 0x2d6c <initSerialParser+0xc>
    This function also takes angle and tilt global variable pointer where set angle values are stored 
*/
void initSerialParser(FILE *serialport){
    port = serialport;
    clearBuffer(buffer, BUFSIZE);
}
    2d78:	08 95       	ret

00002d7a <readInt16>:

/*
    Reads 16 bit int from ringbuffer. 
    Function must be used because serial data is stored in to ring buffer
*/
uint16_t readInt16(uint8_t start, uint8_t stop){
    2d7a:	a5 e0       	ldi	r26, 0x05	; 5
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	e3 ec       	ldi	r30, 0xC3	; 195
    2d80:	f6 e1       	ldi	r31, 0x16	; 22
    2d82:	0c 94 e4 29 	jmp	0x53c8	; 0x53c8 <__prologue_saves__+0x20>
    2d86:	e8 2f       	mov	r30, r24
    char buf[5] = {'\0','\0','\0','\0','\0'};
    2d88:	ce 01       	movw	r24, r28
    2d8a:	01 96       	adiw	r24, 0x01	; 1
    2d8c:	25 e0       	ldi	r18, 0x05	; 5
    2d8e:	dc 01       	movw	r26, r24
    2d90:	1d 92       	st	X+, r1
    2d92:	2a 95       	dec	r18
    2d94:	e9 f7       	brne	.-6      	; 0x2d90 <readInt16+0x16>
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    2d96:	41 e0       	ldi	r20, 0x01	; 1
    2d98:	4e 0f       	add	r20, r30
    2d9a:	2e 2f       	mov	r18, r30
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	22 54       	subi	r18, 0x42	; 66
    2da0:	3d 4f       	sbci	r19, 0xFD	; 253
    2da2:	d9 01       	movw	r26, r18
    2da4:	2c 91       	ld	r18, X
    2da6:	29 83       	std	Y+1, r18	; 0x01
        if (start == stop){
    2da8:	46 17       	cp	r20, r22
    2daa:	11 f1       	breq	.+68     	; 0x2df0 <readInt16+0x76>
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    2dac:	22 e0       	ldi	r18, 0x02	; 2
    2dae:	2e 0f       	add	r18, r30
    2db0:	a4 2f       	mov	r26, r20
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	a2 54       	subi	r26, 0x42	; 66
    2db6:	bd 4f       	sbci	r27, 0xFD	; 253
    2db8:	3c 91       	ld	r19, X
    2dba:	3a 83       	std	Y+2, r19	; 0x02
        if (start == stop){
    2dbc:	26 17       	cp	r18, r22
    2dbe:	c1 f0       	breq	.+48     	; 0x2df0 <readInt16+0x76>
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    2dc0:	33 e0       	ldi	r19, 0x03	; 3
    2dc2:	3e 0f       	add	r19, r30
    2dc4:	a2 2f       	mov	r26, r18
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	a2 54       	subi	r26, 0x42	; 66
    2dca:	bd 4f       	sbci	r27, 0xFD	; 253
    2dcc:	2c 91       	ld	r18, X
    2dce:	2b 83       	std	Y+3, r18	; 0x03
        if (start == stop){
    2dd0:	36 17       	cp	r19, r22
    2dd2:	71 f0       	breq	.+28     	; 0x2df0 <readInt16+0x76>
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    2dd4:	ec 5f       	subi	r30, 0xFC	; 252
    2dd6:	a3 2f       	mov	r26, r19
    2dd8:	b0 e0       	ldi	r27, 0x00	; 0
    2dda:	a2 54       	subi	r26, 0x42	; 66
    2ddc:	bd 4f       	sbci	r27, 0xFD	; 253
    2dde:	2c 91       	ld	r18, X
    2de0:	2c 83       	std	Y+4, r18	; 0x04
        if (start == stop){
    2de2:	e6 17       	cp	r30, r22
    2de4:	29 f0       	breq	.+10     	; 0x2df0 <readInt16+0x76>
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	e2 54       	subi	r30, 0x42	; 66
    2dea:	fd 4f       	sbci	r31, 0xFD	; 253
    2dec:	20 81       	ld	r18, Z
    2dee:	2d 83       	std	Y+5, r18	; 0x05
        if (start == stop){
           i = 5;
        }
    }
    return atoi(buf);
    2df0:	0e 94 0e 2a 	call	0x541c	; 0x541c <atoi>
}
    2df4:	25 96       	adiw	r28, 0x05	; 5
    2df6:	e2 e0       	ldi	r30, 0x02	; 2
    2df8:	0c 94 00 2a 	jmp	0x5400	; 0x5400 <__epilogue_restores__+0x20>

00002dfc <readFloat>:

/*
    Reads floating point value from ringbuffer. 
    Function must be used because serial data is stored in to ring buffer
*/
double readFloat(uint8_t start, uint8_t stop){
    2dfc:	aa e0       	ldi	r26, 0x0A	; 10
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	e4 e0       	ldi	r30, 0x04	; 4
    2e02:	f7 e1       	ldi	r31, 0x17	; 23
    2e04:	0c 94 e4 29 	jmp	0x53c8	; 0x53c8 <__prologue_saves__+0x20>
    2e08:	e8 2f       	mov	r30, r24
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    2e0a:	ce 01       	movw	r24, r28
    2e0c:	01 96       	adiw	r24, 0x01	; 1
    2e0e:	2a e0       	ldi	r18, 0x0A	; 10
    2e10:	dc 01       	movw	r26, r24
    2e12:	1d 92       	st	X+, r1
    2e14:	2a 95       	dec	r18
    2e16:	e9 f7       	brne	.-6      	; 0x2e12 <readFloat+0x16>
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    2e18:	41 e0       	ldi	r20, 0x01	; 1
    2e1a:	4e 0f       	add	r20, r30
    2e1c:	2e 2f       	mov	r18, r30
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	22 54       	subi	r18, 0x42	; 66
    2e22:	3d 4f       	sbci	r19, 0xFD	; 253
    2e24:	d9 01       	movw	r26, r18
    2e26:	2c 91       	ld	r18, X
    2e28:	29 83       	std	Y+1, r18	; 0x01
        if (start == stop){
    2e2a:	46 17       	cp	r20, r22
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <readFloat+0x34>
    2e2e:	56 c0       	rjmp	.+172    	; 0x2edc <readFloat+0xe0>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    2e30:	22 e0       	ldi	r18, 0x02	; 2
    2e32:	2e 0f       	add	r18, r30
    2e34:	a4 2f       	mov	r26, r20
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	a2 54       	subi	r26, 0x42	; 66
    2e3a:	bd 4f       	sbci	r27, 0xFD	; 253
    2e3c:	3c 91       	ld	r19, X
    2e3e:	3a 83       	std	Y+2, r19	; 0x02
        if (start == stop){
    2e40:	26 17       	cp	r18, r22
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <readFloat+0x4a>
    2e44:	4b c0       	rjmp	.+150    	; 0x2edc <readFloat+0xe0>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    2e46:	33 e0       	ldi	r19, 0x03	; 3
    2e48:	3e 0f       	add	r19, r30
    2e4a:	a2 2f       	mov	r26, r18
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	a2 54       	subi	r26, 0x42	; 66
    2e50:	bd 4f       	sbci	r27, 0xFD	; 253
    2e52:	2c 91       	ld	r18, X
    2e54:	2b 83       	std	Y+3, r18	; 0x03
        if (start == stop){
    2e56:	36 17       	cp	r19, r22
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <readFloat+0x60>
    2e5a:	40 c0       	rjmp	.+128    	; 0x2edc <readFloat+0xe0>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    2e5c:	24 e0       	ldi	r18, 0x04	; 4
    2e5e:	2e 0f       	add	r18, r30
    2e60:	a3 2f       	mov	r26, r19
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	a2 54       	subi	r26, 0x42	; 66
    2e66:	bd 4f       	sbci	r27, 0xFD	; 253
    2e68:	3c 91       	ld	r19, X
    2e6a:	3c 83       	std	Y+4, r19	; 0x04
        if (start == stop){
    2e6c:	26 17       	cp	r18, r22
    2e6e:	b1 f1       	breq	.+108    	; 0x2edc <readFloat+0xe0>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    2e70:	35 e0       	ldi	r19, 0x05	; 5
    2e72:	3e 0f       	add	r19, r30
    2e74:	a2 2f       	mov	r26, r18
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	a2 54       	subi	r26, 0x42	; 66
    2e7a:	bd 4f       	sbci	r27, 0xFD	; 253
    2e7c:	2c 91       	ld	r18, X
    2e7e:	2d 83       	std	Y+5, r18	; 0x05
        if (start == stop){
    2e80:	36 17       	cp	r19, r22
    2e82:	61 f1       	breq	.+88     	; 0x2edc <readFloat+0xe0>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    2e84:	26 e0       	ldi	r18, 0x06	; 6
    2e86:	2e 0f       	add	r18, r30
    2e88:	a3 2f       	mov	r26, r19
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	a2 54       	subi	r26, 0x42	; 66
    2e8e:	bd 4f       	sbci	r27, 0xFD	; 253
    2e90:	3c 91       	ld	r19, X
    2e92:	3e 83       	std	Y+6, r19	; 0x06
        if (start == stop){
    2e94:	26 17       	cp	r18, r22
    2e96:	11 f1       	breq	.+68     	; 0x2edc <readFloat+0xe0>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    2e98:	37 e0       	ldi	r19, 0x07	; 7
    2e9a:	3e 0f       	add	r19, r30
    2e9c:	a2 2f       	mov	r26, r18
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	a2 54       	subi	r26, 0x42	; 66
    2ea2:	bd 4f       	sbci	r27, 0xFD	; 253
    2ea4:	2c 91       	ld	r18, X
    2ea6:	2f 83       	std	Y+7, r18	; 0x07
        if (start == stop){
    2ea8:	36 17       	cp	r19, r22
    2eaa:	c1 f0       	breq	.+48     	; 0x2edc <readFloat+0xe0>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    2eac:	28 e0       	ldi	r18, 0x08	; 8
    2eae:	2e 0f       	add	r18, r30
    2eb0:	a3 2f       	mov	r26, r19
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	a2 54       	subi	r26, 0x42	; 66
    2eb6:	bd 4f       	sbci	r27, 0xFD	; 253
    2eb8:	3c 91       	ld	r19, X
    2eba:	38 87       	std	Y+8, r19	; 0x08
        if (start == stop){
    2ebc:	26 17       	cp	r18, r22
    2ebe:	71 f0       	breq	.+28     	; 0x2edc <readFloat+0xe0>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    2ec0:	e7 5f       	subi	r30, 0xF7	; 247
    2ec2:	a2 2f       	mov	r26, r18
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	a2 54       	subi	r26, 0x42	; 66
    2ec8:	bd 4f       	sbci	r27, 0xFD	; 253
    2eca:	2c 91       	ld	r18, X
    2ecc:	29 87       	std	Y+9, r18	; 0x09
        if (start == stop){
    2ece:	e6 17       	cp	r30, r22
    2ed0:	29 f0       	breq	.+10     	; 0x2edc <readFloat+0xe0>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	e2 54       	subi	r30, 0x42	; 66
    2ed6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ed8:	20 81       	ld	r18, Z
    2eda:	2a 87       	std	Y+10, r18	; 0x0a
           i = 10;
        }
    }
   // printf(buf);
   // printf("\n");
    return atof(buf);
    2edc:	0e 94 0b 2a 	call	0x5416	; 0x5416 <atof>
}
    2ee0:	2a 96       	adiw	r28, 0x0a	; 10
    2ee2:	e2 e0       	ldi	r30, 0x02	; 2
    2ee4:	0c 94 00 2a 	jmp	0x5400	; 0x5400 <__epilogue_restores__+0x20>

00002ee8 <findParameter>:

//Start and Stop values are pointing to Global ring buffer
uint8_t findParameter(char startchar, char stopchar, char secondstopchar, uint8_t maxlength, uint8_t *start, uint8_t *stop){
    2ee8:	ef 92       	push	r14
    2eea:	ff 92       	push	r15
    2eec:	0f 93       	push	r16
    2eee:	1f 93       	push	r17
    //Find correct start character
    while(buffer[ring_read] != startchar && ring_read != ring_write){ 
    2ef0:	0d c0       	rjmp	.+26     	; 0x2f0c <findParameter+0x24>
    2ef2:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <ring_read>
    2ef6:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <ring_write>
    2efa:	39 17       	cp	r19, r25
    2efc:	79 f0       	breq	.+30     	; 0x2f1c <findParameter+0x34>
        ring_read++;
    2efe:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    2f02:	9f 5f       	subi	r25, 0xFF	; 255
    2f04:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <ring_read>
        maxlength --;
    2f08:	21 50       	subi	r18, 0x01	; 1
        if (maxlength == 0){
    2f0a:	e9 f1       	breq	.+122    	; 0x2f86 <findParameter+0x9e>
}

//Start and Stop values are pointing to Global ring buffer
uint8_t findParameter(char startchar, char stopchar, char secondstopchar, uint8_t maxlength, uint8_t *start, uint8_t *stop){
    //Find correct start character
    while(buffer[ring_read] != startchar && ring_read != ring_write){ 
    2f0c:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	e2 54       	subi	r30, 0x42	; 66
    2f14:	fd 4f       	sbci	r31, 0xFD	; 253
    2f16:	90 81       	ld	r25, Z
    2f18:	98 13       	cpse	r25, r24
    2f1a:	eb cf       	rjmp	.-42     	; 0x2ef2 <findParameter+0xa>
        maxlength --;
        if (maxlength == 0){
            return ERROR_MAX_LENGTH;
        }
    }
    if (ring_read == ring_write){
    2f1c:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    2f20:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    2f24:	98 17       	cp	r25, r24
    2f26:	49 f1       	breq	.+82     	; 0x2f7a <findParameter+0x92>
        return ERROR_CANNOT_FIND;
    }

    ring_read++; ///Next character is what we are looking for
    2f28:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    2f2c:	8f 5f       	subi	r24, 0xFF	; 255
    2f2e:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

    //Find stop character
    *start = ring_read;
    2f32:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    2f36:	f8 01       	movw	r30, r16
    2f38:	80 83       	st	Z, r24
    2f3a:	0d c0       	rjmp	.+26     	; 0x2f56 <findParameter+0x6e>
    while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimiter or end of line
    2f3c:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	e2 54       	subi	r30, 0x42	; 66
    2f44:	fd 4f       	sbci	r31, 0xFD	; 253
    2f46:	80 81       	ld	r24, Z
    2f48:	48 17       	cp	r20, r24
    2f4a:	69 f0       	breq	.+26     	; 0x2f66 <findParameter+0x7e>
        ring_read++; //Step forward
    2f4c:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    2f50:	8f 5f       	subi	r24, 0xFF	; 255
    2f52:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

    ring_read++; ///Next character is what we are looking for

    //Find stop character
    *start = ring_read;
    while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimiter or end of line
    2f56:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	e2 54       	subi	r30, 0x42	; 66
    2f5e:	fd 4f       	sbci	r31, 0xFD	; 253
    2f60:	80 81       	ld	r24, Z
    2f62:	68 13       	cpse	r22, r24
    2f64:	eb cf       	rjmp	.-42     	; 0x2f3c <findParameter+0x54>
        ring_read++; //Step forward
    }
    *stop = ring_read;
    2f66:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    2f6a:	f7 01       	movw	r30, r14
    2f6c:	80 83       	st	Z, r24
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    
    return FIND_SUCCESS;
}
    2f70:	1f 91       	pop	r17
    2f72:	0f 91       	pop	r16
    2f74:	ff 90       	pop	r15
    2f76:	ef 90       	pop	r14
    2f78:	08 95       	ret
        if (maxlength == 0){
            return ERROR_MAX_LENGTH;
        }
    }
    if (ring_read == ring_write){
        return ERROR_CANNOT_FIND;
    2f7a:	82 e0       	ldi	r24, 0x02	; 2
        ring_read++; //Step forward
    }
    *stop = ring_read;
    
    return FIND_SUCCESS;
}
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	ff 90       	pop	r15
    2f82:	ef 90       	pop	r14
    2f84:	08 95       	ret
    //Find correct start character
    while(buffer[ring_read] != startchar && ring_read != ring_write){ 
        ring_read++;
        maxlength --;
        if (maxlength == 0){
            return ERROR_MAX_LENGTH;
    2f86:	83 e0       	ldi	r24, 0x03	; 3
        ring_read++; //Step forward
    }
    *stop = ring_read;
    
    return FIND_SUCCESS;
}
    2f88:	1f 91       	pop	r17
    2f8a:	0f 91       	pop	r16
    2f8c:	ff 90       	pop	r15
    2f8e:	ef 90       	pop	r14
    2f90:	08 95       	ret

00002f92 <printerr>:

void printerr(void){
    fprintf_P(port, PSTR("ERR\n"));
    2f92:	8c e8       	ldi	r24, 0x8C	; 140
    2f94:	92 e0       	ldi	r25, 0x02	; 2
    2f96:	9f 93       	push	r25
    2f98:	8f 93       	push	r24
    2f9a:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    2f9e:	8f 93       	push	r24
    2fa0:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    2fa4:	8f 93       	push	r24
    2fa6:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	08 95       	ret

00002fb4 <parseCommands>:
}

void parseCommands(void){
    2fb4:	a2 e1       	ldi	r26, 0x12	; 18
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	e0 ee       	ldi	r30, 0xE0	; 224
    2fba:	f7 e1       	ldi	r31, 0x17	; 23
    2fbc:	0c 94 d4 29 	jmp	0x53a8	; 0x53a8 <__prologue_saves__>
                printerr();
            }
            read_until_line_end();
        }
        else if (command == 'S'){ //Read both motor status
            fprintf(port,"S:%d:%d\n",getAngleMotorStatus(), getTiltMotorStatus());
    2fc0:	82 ea       	ldi	r24, 0xA2	; 162
    2fc2:	48 2e       	mov	r4, r24
    2fc4:	82 e0       	ldi	r24, 0x02	; 2
    2fc6:	58 2e       	mov	r5, r24
        }
        else if (command == 'B'){ //ADC read voltage, commands A0\n  A1\n ,A2\n ,A3\n ,A4
            char buff[2];
            clearBuffer(buff, 2);
            buff[0] = buffer[ring_read];
            uint8_t channel = atoi(buff);
    2fc8:	9e 01       	movw	r18, r28
    2fca:	2f 5f       	subi	r18, 0xFF	; 255
    2fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fce:	59 01       	movw	r10, r18
    
    return FIND_SUCCESS;
}

void printerr(void){
    fprintf_P(port, PSTR("ERR\n"));
    2fd0:	0c e8       	ldi	r16, 0x8C	; 140
    2fd2:	12 e0       	ldi	r17, 0x02	; 2
                fprintf(port, "B%d:%ld\n", channel, GetOverSampledVoltage(channel, 0x40));
            }
            else if (channel == 8){
                fprintf(port,"B");
                for (uint8_t i=0; i<8; i++){
                    fprintf(port, "%d:%ld:", i, GetOverSampledVoltage(i, 0x40));
    2fd4:	9a e9       	ldi	r25, 0x9A	; 154
    2fd6:	c9 2e       	mov	r12, r25
    2fd8:	92 e0       	ldi	r25, 0x02	; 2
    2fda:	d9 2e       	mov	r13, r25
                fprintf(port, "A%d:%d\n", channel, GetVoltage(channel, 0x40));
            }
            else if (channel == 8){
                fprintf(port,"A");
                for (uint8_t i=0; i<8; i++){
                    fprintf(port, "%d:%d:", i, GetVoltage(i, 0x40));
    2fdc:	2a e8       	ldi	r18, 0x8A	; 138
    2fde:	e2 2e       	mov	r14, r18
    2fe0:	22 e0       	ldi	r18, 0x02	; 2
    2fe2:	f2 2e       	mov	r15, r18
            char buff[2];
            clearBuffer(buff, 2);
            buff[0] = buffer[ring_read];
            uint8_t channel = atoi(buff);
            if (channel < 8){
                fprintf(port, "A%d:%d\n", channel, GetVoltage(channel, 0x40));
    2fe4:	32 e8       	ldi	r19, 0x82	; 130
    2fe6:	23 2e       	mov	r2, r19
    2fe8:	32 e0       	ldi	r19, 0x02	; 2
    2fea:	33 2e       	mov	r3, r19
void printerr(void){
    fprintf_P(port, PSTR("ERR\n"));
}

void parseCommands(void){
    while (ring_read != ring_write){
    2fec:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    2ff0:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    2ff4:	98 17       	cp	r25, r24
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <parseCommands+0x46>
    2ff8:	80 c0       	rjmp	.+256    	; 0x30fa <parseCommands+0x146>
        uint8_t command = buffer[ring_read++];
    2ffa:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	8e 0f       	add	r24, r30
    3002:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	e2 54       	subi	r30, 0x42	; 66
    300a:	fd 4f       	sbci	r31, 0xFD	; 253
    300c:	80 81       	ld	r24, Z
        if (command == 'P'){ //PUT new values command: P1:20:40    last  angle:tilt
    300e:	80 35       	cpi	r24, 0x50	; 80
    3010:	09 f4       	brne	.+2      	; 0x3014 <parseCommands+0x60>
    3012:	95 c0       	rjmp	.+298    	; 0x313e <parseCommands+0x18a>
            else{
                printerr();
            }
            read_until_line_end();
        }
        else if (command == 'G'){ //Get values
    3014:	87 34       	cpi	r24, 0x47	; 71
    3016:	09 f4       	brne	.+2      	; 0x301a <parseCommands+0x66>
    3018:	da c0       	rjmp	.+436    	; 0x31ce <parseCommands+0x21a>
            else{
                printerr();
            }
            read_until_line_end();
        }
        else if (command == 'F'){
    301a:	86 34       	cpi	r24, 0x46	; 70
    301c:	09 f4       	brne	.+2      	; 0x3020 <parseCommands+0x6c>
    301e:	5f c0       	rjmp	.+190    	; 0x30de <parseCommands+0x12a>
            //forceMotors(FORWARD,30);
            read_until_line_end();
        }
        else if (command == 'D'){
    3020:	84 34       	cpi	r24, 0x44	; 68
    3022:	09 f4       	brne	.+2      	; 0x3026 <parseCommands+0x72>
    3024:	83 c0       	rjmp	.+262    	; 0x312c <parseCommands+0x178>
            //forceMotors(BACKWARD,30);
            read_until_line_end();
        }
        else if (command == 'A'){ //ADC read voltage, commands A0\n  A1\n ,A2\n ,A3\n ,A4\n and so on are possible
    3026:	81 34       	cpi	r24, 0x41	; 65
    3028:	09 f4       	brne	.+2      	; 0x302c <parseCommands+0x78>
    302a:	29 c1       	rjmp	.+594    	; 0x327e <parseCommands+0x2ca>
            else{
                printerr();
            }
            read_until_line_end();
        }
        else if (command == 'B'){ //ADC read voltage, commands A0\n  A1\n ,A2\n ,A3\n ,A4
    302c:	82 34       	cpi	r24, 0x42	; 66
    302e:	09 f4       	brne	.+2      	; 0x3032 <parseCommands+0x7e>
    3030:	66 c1       	rjmp	.+716    	; 0x32fe <parseCommands+0x34a>
            else{
                printerr();
            }
            read_until_line_end();
        }
        else if (command == 'S'){ //Read both motor status
    3032:	83 35       	cpi	r24, 0x53	; 83
    3034:	d9 f6       	brne	.-74     	; 0x2fec <parseCommands+0x38>
            fprintf(port,"S:%d:%d\n",getAngleMotorStatus(), getTiltMotorStatus());
    3036:	0e 94 47 09 	call	0x128e	; 0x128e <getTiltMotorStatus>
    303a:	98 2e       	mov	r9, r24
    303c:	0e 94 44 09 	call	0x1288	; 0x1288 <getAngleMotorStatus>
    3040:	1f 92       	push	r1
    3042:	9f 92       	push	r9
    3044:	1f 92       	push	r1
    3046:	8f 93       	push	r24
    3048:	5f 92       	push	r5
    304a:	4f 92       	push	r4
    304c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    3050:	8f 93       	push	r24
    3052:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    3056:	8f 93       	push	r24
    3058:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
    305c:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	e2 54       	subi	r30, 0x42	; 66
    3064:	fd 4f       	sbci	r31, 0xFD	; 253
    3066:	80 81       	ld	r24, Z
    3068:	0f b6       	in	r0, 0x3f	; 63
    306a:	f8 94       	cli
    306c:	de bf       	out	0x3e, r29	; 62
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	cd bf       	out	0x3d, r28	; 61
    3072:	8a 30       	cpi	r24, 0x0A	; 10
    3074:	b1 f4       	brne	.+44     	; 0x30a2 <parseCommands+0xee>
    3076:	ba cf       	rjmp	.-140    	; 0x2fec <parseCommands+0x38>
    3078:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    307c:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    3080:	98 17       	cp	r25, r24
    3082:	09 f4       	brne	.+2      	; 0x3086 <parseCommands+0xd2>
    3084:	b3 cf       	rjmp	.-154    	; 0x2fec <parseCommands+0x38>
        ring_read++;
    3086:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    308a:	8f 5f       	subi	r24, 0xFF	; 255
    308c:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
    3090:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	e2 54       	subi	r30, 0x42	; 66
    3098:	fd 4f       	sbci	r31, 0xFD	; 253
    309a:	80 81       	ld	r24, Z
    309c:	8a 30       	cpi	r24, 0x0A	; 10
    309e:	09 f4       	brne	.+2      	; 0x30a2 <parseCommands+0xee>
    30a0:	a5 cf       	rjmp	.-182    	; 0x2fec <parseCommands+0x38>
    30a2:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	e2 54       	subi	r30, 0x42	; 66
    30aa:	fd 4f       	sbci	r31, 0xFD	; 253
    30ac:	80 81       	ld	r24, Z
    30ae:	8d 30       	cpi	r24, 0x0D	; 13
    30b0:	19 f7       	brne	.-58     	; 0x3078 <parseCommands+0xc4>
    30b2:	9c cf       	rjmp	.-200    	; 0x2fec <parseCommands+0x38>
    30b4:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	e2 54       	subi	r30, 0x42	; 66
    30bc:	fd 4f       	sbci	r31, 0xFD	; 253
    30be:	80 81       	ld	r24, Z
    30c0:	8d 30       	cpi	r24, 0x0D	; 13
    30c2:	09 f4       	brne	.+2      	; 0x30c6 <parseCommands+0x112>
    30c4:	93 cf       	rjmp	.-218    	; 0x2fec <parseCommands+0x38>
    30c6:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    30ca:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    30ce:	98 17       	cp	r25, r24
    30d0:	09 f4       	brne	.+2      	; 0x30d4 <parseCommands+0x120>
    30d2:	8c cf       	rjmp	.-232    	; 0x2fec <parseCommands+0x38>
        ring_read++;
    30d4:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    30d8:	8f 5f       	subi	r24, 0xFF	; 255
    30da:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
    30de:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	e2 54       	subi	r30, 0x42	; 66
    30e6:	fd 4f       	sbci	r31, 0xFD	; 253
    30e8:	80 81       	ld	r24, Z
    30ea:	8a 30       	cpi	r24, 0x0A	; 10
    30ec:	19 f7       	brne	.-58     	; 0x30b4 <parseCommands+0x100>
void printerr(void){
    fprintf_P(port, PSTR("ERR\n"));
}

void parseCommands(void){
    while (ring_read != ring_write){
    30ee:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    30f2:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    30f6:	98 13       	cpse	r25, r24
    30f8:	80 cf       	rjmp	.-256    	; 0x2ffa <parseCommands+0x46>
        else if (command == 'S'){ //Read both motor status
            fprintf(port,"S:%d:%d\n",getAngleMotorStatus(), getTiltMotorStatus());
            read_until_line_end();    
        }
    }
}
    30fa:	62 96       	adiw	r28, 0x12	; 18
    30fc:	e2 e1       	ldi	r30, 0x12	; 18
    30fe:	0c 94 f0 29 	jmp	0x53e0	; 0x53e0 <__epilogue_restores__>

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
    3102:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	e2 54       	subi	r30, 0x42	; 66
    310a:	fd 4f       	sbci	r31, 0xFD	; 253
    310c:	80 81       	ld	r24, Z
    310e:	8d 30       	cpi	r24, 0x0D	; 13
    3110:	09 f4       	brne	.+2      	; 0x3114 <parseCommands+0x160>
    3112:	6c cf       	rjmp	.-296    	; 0x2fec <parseCommands+0x38>
    3114:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    3118:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    311c:	98 17       	cp	r25, r24
    311e:	09 f4       	brne	.+2      	; 0x3122 <parseCommands+0x16e>
    3120:	65 cf       	rjmp	.-310    	; 0x2fec <parseCommands+0x38>
        ring_read++;
    3122:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    3126:	8f 5f       	subi	r24, 0xFF	; 255
    3128:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
    312c:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	e2 54       	subi	r30, 0x42	; 66
    3134:	fd 4f       	sbci	r31, 0xFD	; 253
    3136:	80 81       	ld	r24, Z
    3138:	8a 30       	cpi	r24, 0x0A	; 10
    313a:	19 f7       	brne	.-58     	; 0x3102 <parseCommands+0x14e>
    313c:	57 cf       	rjmp	.-338    	; 0x2fec <parseCommands+0x38>
        uint8_t command = buffer[ring_read++];
        if (command == 'P'){ //PUT new values command: P1:20:40    last  angle:tilt
            uint8_t start = 0;
            uint8_t stop = 0;
                
            if (buffer[ring_read] == '1'){
    313e:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	e2 54       	subi	r30, 0x42	; 66
    3146:	fd 4f       	sbci	r31, 0xFD	; 253
    3148:	80 81       	ld	r24, Z
    314a:	81 33       	cpi	r24, 0x31	; 49
    314c:	09 f4       	brne	.+2      	; 0x3150 <parseCommands+0x19c>
    314e:	19 c1       	rjmp	.+562    	; 0x3382 <parseCommands+0x3ce>
                }
                else{
                    fprintf_P(port, PSTR("MAN\n"));
                }
            }
            else if (buffer[ring_read] == '2'){
    3150:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	e2 54       	subi	r30, 0x42	; 66
    3158:	fd 4f       	sbci	r31, 0xFD	; 253
    315a:	80 81       	ld	r24, Z
    315c:	82 33       	cpi	r24, 0x32	; 50
    315e:	09 f4       	brne	.+2      	; 0x3162 <parseCommands+0x1ae>
    3160:	19 c1       	rjmp	.+562    	; 0x3394 <parseCommands+0x3e0>
                }
                else{
                    fprintf_P(port, PSTR("MAN\n"));
                }
            }
            else if (buffer[ring_read] == '3'){
    3162:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	e2 54       	subi	r30, 0x42	; 66
    316a:	fd 4f       	sbci	r31, 0xFD	; 253
    316c:	80 81       	ld	r24, Z
    316e:	83 33       	cpi	r24, 0x33	; 51
    3170:	09 f4       	brne	.+2      	; 0x3174 <parseCommands+0x1c0>
    3172:	05 c1       	rjmp	.+522    	; 0x337e <parseCommands+0x3ca>
    
    return FIND_SUCCESS;
}

void printerr(void){
    fprintf_P(port, PSTR("ERR\n"));
    3174:	1f 93       	push	r17
    3176:	0f 93       	push	r16
                        uint8_t asuccess = setAngleMotorLength(readInt16(start, stop));
                        succ = findParameter(':', ':', '\n', 20, &start, &stop);
                        if (succ == FIND_SUCCESS){
                            uint8_t tsuccess = setTiltMotorLength(readInt16(start, stop));
                            if (asuccess == 0 && tsuccess == 0){
                                fprintf_P(port, PSTR("OK\n"));
    3178:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    317c:	8f 93       	push	r24
    317e:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    3182:	8f 93       	push	r24
    3184:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	15 c0       	rjmp	.+42     	; 0x31bc <parseCommands+0x208>

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
    3192:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	e2 54       	subi	r30, 0x42	; 66
    319a:	fd 4f       	sbci	r31, 0xFD	; 253
    319c:	80 81       	ld	r24, Z
    319e:	8d 30       	cpi	r24, 0x0D	; 13
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <parseCommands+0x1f0>
    31a2:	24 cf       	rjmp	.-440    	; 0x2fec <parseCommands+0x38>
    31a4:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    31a8:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    31ac:	98 17       	cp	r25, r24
    31ae:	09 f4       	brne	.+2      	; 0x31b2 <parseCommands+0x1fe>
    31b0:	1d cf       	rjmp	.-454    	; 0x2fec <parseCommands+0x38>
        ring_read++;
    31b2:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    31b6:	8f 5f       	subi	r24, 0xFF	; 255
    31b8:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
    31bc:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	e2 54       	subi	r30, 0x42	; 66
    31c4:	fd 4f       	sbci	r31, 0xFD	; 253
    31c6:	80 81       	ld	r24, Z
    31c8:	8a 30       	cpi	r24, 0x0A	; 10
    31ca:	19 f7       	brne	.-58     	; 0x3192 <parseCommands+0x1de>
    31cc:	0f cf       	rjmp	.-482    	; 0x2fec <parseCommands+0x38>
                printerr();
            }
            read_until_line_end();
        }
        else if (command == 'G'){ //Get values
            uint8_t value = buffer[ring_read++]; 
    31ce:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	8e 0f       	add	r24, r30
    31d6:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	e2 54       	subi	r30, 0x42	; 66
    31de:	fd 4f       	sbci	r31, 0xFD	; 253
    31e0:	80 81       	ld	r24, Z
            if (value == '1'){ //Rread generic info
    31e2:	81 33       	cpi	r24, 0x31	; 49
    31e4:	09 f4       	brne	.+2      	; 0x31e8 <parseCommands+0x234>
    31e6:	f7 c0       	rjmp	.+494    	; 0x33d6 <parseCommands+0x422>
                fprintf(port,"G1:%d\n", SW_VERSION);
            }
            else if (value == '2'){ //Read current angle and tilt set_values
    31e8:	82 33       	cpi	r24, 0x32	; 50
    31ea:	09 f4       	brne	.+2      	; 0x31ee <parseCommands+0x23a>
    31ec:	0a c1       	rjmp	.+532    	; 0x3402 <parseCommands+0x44e>
                fprintf(port,"G2:%5.2f:%5.2f\n", getSetAngle(), getSetTilt());
            }
            else if (value == '3'){ //Reads current values from motorctrl -module, actual values
    31ee:	83 33       	cpi	r24, 0x33	; 51
    31f0:	09 f4       	brne	.+2      	; 0x31f4 <parseCommands+0x240>
    31f2:	76 c1       	rjmp	.+748    	; 0x34e0 <parseCommands+0x52c>
                fprintf(port,"G3:%5.2f:%5.2f\n", getAngle(), getTilt());
            }
            else if (value == '4'){ //get motor statuses
    31f4:	84 33       	cpi	r24, 0x34	; 52
    31f6:	09 f4       	brne	.+2      	; 0x31fa <parseCommands+0x246>
    31f8:	d0 c1       	rjmp	.+928    	; 0x359a <parseCommands+0x5e6>
                fprintf(port, "G4:%d:%d\n", getAngleMotorStatus(), getTiltMotorStatus());
            }
            else if (value == '5'){
    31fa:	85 33       	cpi	r24, 0x35	; 53
    31fc:	09 f4       	brne	.+2      	; 0x3200 <parseCommands+0x24c>
    31fe:	e8 c1       	rjmp	.+976    	; 0x35d0 <parseCommands+0x61c>
                fprintf(port, "G5:%d:%d\n", getAngleActuatorCurrentLength(), getTiltActuatorCurrentLength());
            }
            else if (value == '6'){
    3200:	86 33       	cpi	r24, 0x36	; 54
    3202:	09 f4       	brne	.+2      	; 0x3206 <parseCommands+0x252>
    3204:	f2 c1       	rjmp	.+996    	; 0x35ea <parseCommands+0x636>
                fprintf(port, "G6:%d:%d:%d\n",readAutoManualState(), readTiltButtonState(), readTurnButtonState());
            }
            else if (value == '7'){
    3206:	87 33       	cpi	r24, 0x37	; 55
    3208:	09 f4       	brne	.+2      	; 0x320c <parseCommands+0x258>
    320a:	1b c2       	rjmp	.+1078   	; 0x3642 <parseCommands+0x68e>
                fprintf(port, "G7:%5.2f:%5.2f:%5.2f:%5.2f\n",getAngleMotorMinAngle(), getTiltMotorMinAngle(), getAngleMotorMaxAngle(), getTiltMotorMaxAngle());
            }
            else if (value == '8'){
    320c:	88 33       	cpi	r24, 0x38	; 56
    320e:	09 f4       	brne	.+2      	; 0x3212 <parseCommands+0x25e>
    3210:	a1 c3       	rjmp	.+1858   	; 0x3954 <parseCommands+0x9a0>
                fprintf(port, "G8:%d:%d\n",getAngleActuatorSetLength(), getTiltActuatorSetLength());
            }
            else if (value == '9'){
    3212:	89 33       	cpi	r24, 0x39	; 57
    3214:	09 f4       	brne	.+2      	; 0x3218 <parseCommands+0x264>
    3216:	97 c4       	rjmp	.+2350   	; 0x3b46 <parseCommands+0xb92>
                fprintf(port, "G9:%5.2f:%5.2f\n", getAngleMotorAVGcurrent(), getTiltMotorAVGcurrent());
            }
            else if (value == 'A'){
    3218:	81 34       	cpi	r24, 0x41	; 65
    321a:	09 f4       	brne	.+2      	; 0x321e <parseCommands+0x26a>
    321c:	a9 c1       	rjmp	.+850    	; 0x3570 <parseCommands+0x5bc>
                fprintf(port, "GA:%5.2f:%5.2f\n", getAngleMotorMoveSpeed(), getTiltMotorMoveSpeed());
            }
            else if (value == 'B'){
    321e:	82 34       	cpi	r24, 0x42	; 66
    3220:	09 f4       	brne	.+2      	; 0x3224 <parseCommands+0x270>
    3222:	00 c2       	rjmp	.+1024   	; 0x3624 <parseCommands+0x670>
    
    return FIND_SUCCESS;
}

void printerr(void){
    fprintf_P(port, PSTR("ERR\n"));
    3224:	1f 93       	push	r17
    3226:	0f 93       	push	r16
    3228:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    322c:	8f 93       	push	r24
    322e:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    3232:	8f 93       	push	r24
    3234:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	15 c0       	rjmp	.+42     	; 0x326c <parseCommands+0x2b8>

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
    3242:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	e2 54       	subi	r30, 0x42	; 66
    324a:	fd 4f       	sbci	r31, 0xFD	; 253
    324c:	80 81       	ld	r24, Z
    324e:	8d 30       	cpi	r24, 0x0D	; 13
    3250:	09 f4       	brne	.+2      	; 0x3254 <parseCommands+0x2a0>
    3252:	cc ce       	rjmp	.-616    	; 0x2fec <parseCommands+0x38>
    3254:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    3258:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    325c:	98 17       	cp	r25, r24
    325e:	09 f4       	brne	.+2      	; 0x3262 <parseCommands+0x2ae>
    3260:	c5 ce       	rjmp	.-630    	; 0x2fec <parseCommands+0x38>
        ring_read++;
    3262:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    3266:	8f 5f       	subi	r24, 0xFF	; 255
    3268:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
    326c:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	e2 54       	subi	r30, 0x42	; 66
    3274:	fd 4f       	sbci	r31, 0xFD	; 253
    3276:	80 81       	ld	r24, Z
    3278:	8a 30       	cpi	r24, 0x0A	; 10
    327a:	19 f7       	brne	.-58     	; 0x3242 <parseCommands+0x28e>
    327c:	b7 ce       	rjmp	.-658    	; 0x2fec <parseCommands+0x38>
volatile char buffer[BUFSIZE+1];

FILE *port; //Serialport to host machine

__attribute__((always_inline)) inline static void clearBuffer(volatile char *buffer,uint8_t len){
	for(uint8_t i=0;i<len;i++){	*buffer++ = '\0';}
    327e:	19 82       	std	Y+1, r1	; 0x01
    3280:	1a 82       	std	Y+2, r1	; 0x02
        }
        else if (command == 'A'){ //ADC read voltage, commands A0\n  A1\n ,A2\n ,A3\n ,A4\n and so on are possible
            //ring_read++;
            char buff[2];
            clearBuffer(buff, 2);
            buff[0] = buffer[ring_read];
    3282:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3286:	f0 e0       	ldi	r31, 0x00	; 0
    3288:	e2 54       	subi	r30, 0x42	; 66
    328a:	fd 4f       	sbci	r31, 0xFD	; 253
    328c:	80 81       	ld	r24, Z
    328e:	89 83       	std	Y+1, r24	; 0x01
            uint8_t channel = atoi(buff);
    3290:	c5 01       	movw	r24, r10
    3292:	0e 94 0e 2a 	call	0x541c	; 0x541c <atoi>
    3296:	4c 01       	movw	r8, r24
            if (channel < 8){
    3298:	88 30       	cpi	r24, 0x08	; 8
    329a:	08 f4       	brcc	.+2      	; 0x329e <parseCommands+0x2ea>
    329c:	84 c0       	rjmp	.+264    	; 0x33a6 <parseCommands+0x3f2>
                fprintf(port, "A%d:%d\n", channel, GetVoltage(channel, 0x40));
            }
            else if (channel == 8){
    329e:	88 30       	cpi	r24, 0x08	; 8
    32a0:	09 f4       	brne	.+2      	; 0x32a4 <parseCommands+0x2f0>
    32a2:	ed c0       	rjmp	.+474    	; 0x347e <parseCommands+0x4ca>
    
    return FIND_SUCCESS;
}

void printerr(void){
    fprintf_P(port, PSTR("ERR\n"));
    32a4:	1f 93       	push	r17
    32a6:	0f 93       	push	r16
    32a8:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    32ac:	8f 93       	push	r24
    32ae:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    32b2:	8f 93       	push	r24
    32b4:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	15 c0       	rjmp	.+42     	; 0x32ec <parseCommands+0x338>

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
    32c2:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	e2 54       	subi	r30, 0x42	; 66
    32ca:	fd 4f       	sbci	r31, 0xFD	; 253
    32cc:	80 81       	ld	r24, Z
    32ce:	8d 30       	cpi	r24, 0x0D	; 13
    32d0:	09 f4       	brne	.+2      	; 0x32d4 <parseCommands+0x320>
    32d2:	8c ce       	rjmp	.-744    	; 0x2fec <parseCommands+0x38>
    32d4:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    32d8:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    32dc:	98 17       	cp	r25, r24
    32de:	09 f4       	brne	.+2      	; 0x32e2 <parseCommands+0x32e>
    32e0:	85 ce       	rjmp	.-758    	; 0x2fec <parseCommands+0x38>
        ring_read++;
    32e2:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    32e6:	8f 5f       	subi	r24, 0xFF	; 255
    32e8:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
    32ec:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	e2 54       	subi	r30, 0x42	; 66
    32f4:	fd 4f       	sbci	r31, 0xFD	; 253
    32f6:	80 81       	ld	r24, Z
    32f8:	8a 30       	cpi	r24, 0x0A	; 10
    32fa:	19 f7       	brne	.-58     	; 0x32c2 <parseCommands+0x30e>
    32fc:	77 ce       	rjmp	.-786    	; 0x2fec <parseCommands+0x38>
volatile char buffer[BUFSIZE+1];

FILE *port; //Serialport to host machine

__attribute__((always_inline)) inline static void clearBuffer(volatile char *buffer,uint8_t len){
	for(uint8_t i=0;i<len;i++){	*buffer++ = '\0';}
    32fe:	19 82       	std	Y+1, r1	; 0x01
    3300:	1a 82       	std	Y+2, r1	; 0x02
            read_until_line_end();
        }
        else if (command == 'B'){ //ADC read voltage, commands A0\n  A1\n ,A2\n ,A3\n ,A4
            char buff[2];
            clearBuffer(buff, 2);
            buff[0] = buffer[ring_read];
    3302:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	e2 54       	subi	r30, 0x42	; 66
    330a:	fd 4f       	sbci	r31, 0xFD	; 253
    330c:	80 81       	ld	r24, Z
    330e:	89 83       	std	Y+1, r24	; 0x01
            uint8_t channel = atoi(buff);
    3310:	c5 01       	movw	r24, r10
    3312:	0e 94 0e 2a 	call	0x541c	; 0x541c <atoi>
    3316:	4c 01       	movw	r8, r24
            if (channel < 8){
    3318:	88 30       	cpi	r24, 0x08	; 8
    331a:	08 f4       	brcc	.+2      	; 0x331e <parseCommands+0x36a>
    331c:	94 c0       	rjmp	.+296    	; 0x3446 <parseCommands+0x492>
                fprintf(port, "B%d:%ld\n", channel, GetOverSampledVoltage(channel, 0x40));
            }
            else if (channel == 8){
    331e:	88 30       	cpi	r24, 0x08	; 8
    3320:	09 f4       	brne	.+2      	; 0x3324 <parseCommands+0x370>
    3322:	f3 c0       	rjmp	.+486    	; 0x350a <parseCommands+0x556>
    
    return FIND_SUCCESS;
}

void printerr(void){
    fprintf_P(port, PSTR("ERR\n"));
    3324:	1f 93       	push	r17
    3326:	0f 93       	push	r16
    3328:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    332c:	8f 93       	push	r24
    332e:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    3332:	8f 93       	push	r24
    3334:	0e 94 8a 2b 	call	0x5714	; 0x5714 <fprintf_P>
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	0f 90       	pop	r0
    3340:	15 c0       	rjmp	.+42     	; 0x336c <parseCommands+0x3b8>

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
    3342:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	e2 54       	subi	r30, 0x42	; 66
    334a:	fd 4f       	sbci	r31, 0xFD	; 253
    334c:	80 81       	ld	r24, Z
    334e:	8d 30       	cpi	r24, 0x0D	; 13
    3350:	09 f4       	brne	.+2      	; 0x3354 <parseCommands+0x3a0>
    3352:	4c ce       	rjmp	.-872    	; 0x2fec <parseCommands+0x38>
    3354:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    3358:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    335c:	98 17       	cp	r25, r24
    335e:	09 f4       	brne	.+2      	; 0x3362 <parseCommands+0x3ae>
    3360:	45 ce       	rjmp	.-886    	; 0x2fec <parseCommands+0x38>
        ring_read++;
    3362:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    3366:	8f 5f       	subi	r24, 0xFF	; 255
    3368:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

/*
    Reads ring buffer until it finds linefeed, carrier return or ring buffer is empty.
*/
void read_until_line_end(void){
    while(buffer[ring_read] != '\n' &&  buffer[ring_read] != '\r'  && ring_read != ring_write){
    336c:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	e2 54       	subi	r30, 0x42	; 66
    3374:	fd 4f       	sbci	r31, 0xFD	; 253
    3376:	80 81       	ld	r24, Z
    3378:	8a 30       	cpi	r24, 0x0A	; 10
    337a:	19 f7       	brne	.-58     	; 0x3342 <parseCommands+0x38e>
    337c:	37 ce       	rjmp	.-914    	; 0x2fec <parseCommands+0x38>
                else{
                    fprintf_P(port, PSTR("MAN\n"));
                }
            }
            else if (buffer[ring_read] == '3'){
                if (readAutoManualState() == AUTO){ 
    337e:	45 d4       	rcall	.+2186   	; 0x3c0a <readAutoManualState>
    3380:	1d cf       	rjmp	.-454    	; 0x31bc <parseCommands+0x208>
        if (command == 'P'){ //PUT new values command: P1:20:40    last  angle:tilt
            uint8_t start = 0;
            uint8_t stop = 0;
                
            if (buffer[ring_read] == '1'){
                if (readAutoManualState() == AUTO){    
    3382:	43 d4       	rcall	.+2182   	; 0x3c0a <readAutoManualState>
    3384:	81 30       	cpi	r24, 0x01	; 1
    3386:	09 f4       	brne	.+2      	; 0x338a <parseCommands+0x3d6>
    3388:	9b c1       	rjmp	.+822    	; 0x36c0 <parseCommands+0x70c>
                    else{
                        printerr();
                    }
                }
                else{
                    fprintf_P(port, PSTR("MAN\n"));
    338a:	83 e8       	ldi	r24, 0x83	; 131
    338c:	92 e0       	ldi	r25, 0x02	; 2
                        uint8_t asuccess = setAngleMotorLength(readInt16(start, stop));
                        succ = findParameter(':', ':', '\n', 20, &start, &stop);
                        if (succ == FIND_SUCCESS){
                            uint8_t tsuccess = setTiltMotorLength(readInt16(start, stop));
                            if (asuccess == 0 && tsuccess == 0){
                                fprintf_P(port, PSTR("OK\n"));
    338e:	9f 93       	push	r25
    3390:	8f 93       	push	r24
    3392:	f2 ce       	rjmp	.-540    	; 0x3178 <parseCommands+0x1c4>
                else{
                    fprintf_P(port, PSTR("MAN\n"));
                }
            }
            else if (buffer[ring_read] == '2'){
                if (readAutoManualState() == AUTO){    
    3394:	3a d4       	rcall	.+2164   	; 0x3c0a <readAutoManualState>
    3396:	81 30       	cpi	r24, 0x01	; 1
    3398:	09 f4       	brne	.+2      	; 0x339c <parseCommands+0x3e8>
    339a:	e9 c2       	rjmp	.+1490   	; 0x396e <parseCommands+0x9ba>
                            }
                        }
                    }
                }
                else{
                    fprintf_P(port, PSTR("MAN\n"));
    339c:	8a e7       	ldi	r24, 0x7A	; 122
    339e:	92 e0       	ldi	r25, 0x02	; 2
    33a0:	9f 93       	push	r25
    33a2:	8f 93       	push	r24
    33a4:	e9 ce       	rjmp	.-558    	; 0x3178 <parseCommands+0x1c4>
            char buff[2];
            clearBuffer(buff, 2);
            buff[0] = buffer[ring_read];
            uint8_t channel = atoi(buff);
            if (channel < 8){
                fprintf(port, "A%d:%d\n", channel, GetVoltage(channel, 0x40));
    33a6:	60 e4       	ldi	r22, 0x40	; 64
    33a8:	0e 94 1a 02 	call	0x434	; 0x434 <GetVoltage>
    33ac:	9f 93       	push	r25
    33ae:	8f 93       	push	r24
    33b0:	99 24       	eor	r9, r9
    33b2:	9f 92       	push	r9
    33b4:	8f 92       	push	r8
    33b6:	3f 92       	push	r3
    33b8:	2f 92       	push	r2
    33ba:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    33be:	8f 93       	push	r24
    33c0:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    33c4:	8f 93       	push	r24
    33c6:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	8b cf       	rjmp	.-234    	; 0x32ec <parseCommands+0x338>
            read_until_line_end();
        }
        else if (command == 'G'){ //Get values
            uint8_t value = buffer[ring_read++]; 
            if (value == '1'){ //Rread generic info
                fprintf(port,"G1:%d\n", SW_VERSION);
    33d6:	1f 92       	push	r1
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	8f 93       	push	r24
    33dc:	87 ef       	ldi	r24, 0xF7	; 247
    33de:	91 e0       	ldi	r25, 0x01	; 1
    33e0:	9f 93       	push	r25
    33e2:	8f 93       	push	r24
    33e4:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    33e8:	8f 93       	push	r24
    33ea:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    33ee:	8f 93       	push	r24
    33f0:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	0f 90       	pop	r0
    33fc:	0f 90       	pop	r0
    33fe:	0f 90       	pop	r0
    3400:	35 cf       	rjmp	.-406    	; 0x326c <parseCommands+0x2b8>
            }
            else if (value == '2'){ //Read current angle and tilt set_values
                fprintf(port,"G2:%5.2f:%5.2f\n", getSetAngle(), getSetTilt());
    3402:	0e 94 54 05 	call	0xaa8	; 0xaa8 <getSetTilt>
    3406:	96 2e       	mov	r9, r22
    3408:	87 2e       	mov	r8, r23
    340a:	78 2e       	mov	r7, r24
    340c:	69 2e       	mov	r6, r25
    340e:	0e 94 40 05 	call	0xa80	; 0xa80 <getSetAngle>
    3412:	6f 92       	push	r6
    3414:	7f 92       	push	r7
    3416:	8f 92       	push	r8
    3418:	9f 92       	push	r9
    341a:	9f 93       	push	r25
    341c:	8f 93       	push	r24
    341e:	7f 93       	push	r23
    3420:	6f 93       	push	r22
    3422:	8e ef       	ldi	r24, 0xFE	; 254
    3424:	91 e0       	ldi	r25, 0x01	; 1
    3426:	9f 93       	push	r25
    3428:	8f 93       	push	r24
            }
            else if (value == '9'){
                fprintf(port, "G9:%5.2f:%5.2f\n", getAngleMotorAVGcurrent(), getTiltMotorAVGcurrent());
            }
            else if (value == 'A'){
                fprintf(port, "GA:%5.2f:%5.2f\n", getAngleMotorMoveSpeed(), getTiltMotorMoveSpeed());
    342a:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    342e:	8f 93       	push	r24
    3430:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    3434:	8f 93       	push	r24
    3436:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	f8 94       	cli
    343e:	de bf       	out	0x3e, r29	; 62
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	cd bf       	out	0x3d, r28	; 61
    3444:	13 cf       	rjmp	.-474    	; 0x326c <parseCommands+0x2b8>
            char buff[2];
            clearBuffer(buff, 2);
            buff[0] = buffer[ring_read];
            uint8_t channel = atoi(buff);
            if (channel < 8){
                fprintf(port, "B%d:%ld\n", channel, GetOverSampledVoltage(channel, 0x40));
    3446:	60 e4       	ldi	r22, 0x40	; 64
    3448:	0e 94 29 02 	call	0x452	; 0x452 <GetOverSampledVoltage>
    344c:	9f 93       	push	r25
    344e:	8f 93       	push	r24
    3450:	7f 93       	push	r23
    3452:	6f 93       	push	r22
    3454:	99 24       	eor	r9, r9
    3456:	9f 92       	push	r9
    3458:	8f 92       	push	r8
    345a:	a1 e9       	ldi	r26, 0x91	; 145
    345c:	b2 e0       	ldi	r27, 0x02	; 2
    345e:	bf 93       	push	r27
    3460:	af 93       	push	r26
    3462:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    3466:	8f 93       	push	r24
    3468:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    346c:	8f 93       	push	r24
    346e:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
    3472:	0f b6       	in	r0, 0x3f	; 63
    3474:	f8 94       	cli
    3476:	de bf       	out	0x3e, r29	; 62
    3478:	0f be       	out	0x3f, r0	; 63
    347a:	cd bf       	out	0x3d, r28	; 61
    347c:	77 cf       	rjmp	.-274    	; 0x336c <parseCommands+0x3b8>
            uint8_t channel = atoi(buff);
            if (channel < 8){
                fprintf(port, "A%d:%d\n", channel, GetVoltage(channel, 0x40));
            }
            else if (channel == 8){
                fprintf(port,"A");
    347e:	60 91 b0 02 	lds	r22, 0x02B0	; 0x8002b0 <port>
    3482:	70 91 b1 02 	lds	r23, 0x02B1	; 0x8002b1 <port+0x1>
    3486:	81 e4       	ldi	r24, 0x41	; 65
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    348e:	81 2c       	mov	r8, r1
    3490:	91 2c       	mov	r9, r1
                for (uint8_t i=0; i<8; i++){
                    fprintf(port, "%d:%d:", i, GetVoltage(i, 0x40));
    3492:	60 e4       	ldi	r22, 0x40	; 64
    3494:	88 2d       	mov	r24, r8
    3496:	0e 94 1a 02 	call	0x434	; 0x434 <GetVoltage>
    349a:	9f 93       	push	r25
    349c:	8f 93       	push	r24
    349e:	9f 92       	push	r9
    34a0:	8f 92       	push	r8
    34a2:	ff 92       	push	r15
    34a4:	ef 92       	push	r14
    34a6:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    34aa:	8f 93       	push	r24
    34ac:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    34b0:	8f 93       	push	r24
    34b2:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
    34b6:	9f ef       	ldi	r25, 0xFF	; 255
    34b8:	89 1a       	sub	r8, r25
    34ba:	99 0a       	sbc	r9, r25
            if (channel < 8){
                fprintf(port, "A%d:%d\n", channel, GetVoltage(channel, 0x40));
            }
            else if (channel == 8){
                fprintf(port,"A");
                for (uint8_t i=0; i<8; i++){
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	de bf       	out	0x3e, r29	; 62
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	cd bf       	out	0x3d, r28	; 61
    34c6:	b8 e0       	ldi	r27, 0x08	; 8
    34c8:	8b 16       	cp	r8, r27
    34ca:	91 04       	cpc	r9, r1
    34cc:	11 f7       	brne	.-60     	; 0x3492 <parseCommands+0x4de>
                    fprintf(port, "%d:%d:", i, GetVoltage(i, 0x40));
                }
                fprintf(port,"\n");
    34ce:	60 91 b0 02 	lds	r22, 0x02B0	; 0x8002b0 <port>
    34d2:	70 91 b1 02 	lds	r23, 0x02B1	; 0x8002b1 <port+0x1>
    34d6:	8a e0       	ldi	r24, 0x0A	; 10
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    34de:	06 cf       	rjmp	.-500    	; 0x32ec <parseCommands+0x338>
            }
            else if (value == '2'){ //Read current angle and tilt set_values
                fprintf(port,"G2:%5.2f:%5.2f\n", getSetAngle(), getSetTilt());
            }
            else if (value == '3'){ //Reads current values from motorctrl -module, actual values
                fprintf(port,"G3:%5.2f:%5.2f\n", getAngle(), getTilt());
    34e0:	0e 94 2c 05 	call	0xa58	; 0xa58 <getTilt>
    34e4:	96 2e       	mov	r9, r22
    34e6:	87 2e       	mov	r8, r23
    34e8:	78 2e       	mov	r7, r24
    34ea:	69 2e       	mov	r6, r25
    34ec:	0e 94 18 05 	call	0xa30	; 0xa30 <getAngle>
    34f0:	6f 92       	push	r6
    34f2:	7f 92       	push	r7
    34f4:	8f 92       	push	r8
    34f6:	9f 92       	push	r9
    34f8:	9f 93       	push	r25
    34fa:	8f 93       	push	r24
    34fc:	7f 93       	push	r23
    34fe:	6f 93       	push	r22
    3500:	8e e0       	ldi	r24, 0x0E	; 14
    3502:	92 e0       	ldi	r25, 0x02	; 2
    3504:	9f 93       	push	r25
    3506:	8f 93       	push	r24
    3508:	90 cf       	rjmp	.-224    	; 0x342a <parseCommands+0x476>
            uint8_t channel = atoi(buff);
            if (channel < 8){
                fprintf(port, "B%d:%ld\n", channel, GetOverSampledVoltage(channel, 0x40));
            }
            else if (channel == 8){
                fprintf(port,"B");
    350a:	60 91 b0 02 	lds	r22, 0x02B0	; 0x8002b0 <port>
    350e:	70 91 b1 02 	lds	r23, 0x02B1	; 0x8002b1 <port+0x1>
    3512:	82 e4       	ldi	r24, 0x42	; 66
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    351a:	81 2c       	mov	r8, r1
    351c:	91 2c       	mov	r9, r1
                for (uint8_t i=0; i<8; i++){
                    fprintf(port, "%d:%ld:", i, GetOverSampledVoltage(i, 0x40));
    351e:	60 e4       	ldi	r22, 0x40	; 64
    3520:	88 2d       	mov	r24, r8
    3522:	0e 94 29 02 	call	0x452	; 0x452 <GetOverSampledVoltage>
    3526:	9f 93       	push	r25
    3528:	8f 93       	push	r24
    352a:	7f 93       	push	r23
    352c:	6f 93       	push	r22
    352e:	9f 92       	push	r9
    3530:	8f 92       	push	r8
    3532:	df 92       	push	r13
    3534:	cf 92       	push	r12
    3536:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    353a:	8f 93       	push	r24
    353c:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    3540:	8f 93       	push	r24
    3542:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
    3546:	3f ef       	ldi	r19, 0xFF	; 255
    3548:	83 1a       	sub	r8, r19
    354a:	93 0a       	sbc	r9, r19
            if (channel < 8){
                fprintf(port, "B%d:%ld\n", channel, GetOverSampledVoltage(channel, 0x40));
            }
            else if (channel == 8){
                fprintf(port,"B");
                for (uint8_t i=0; i<8; i++){
    354c:	0f b6       	in	r0, 0x3f	; 63
    354e:	f8 94       	cli
    3550:	de bf       	out	0x3e, r29	; 62
    3552:	0f be       	out	0x3f, r0	; 63
    3554:	cd bf       	out	0x3d, r28	; 61
    3556:	98 e0       	ldi	r25, 0x08	; 8
    3558:	89 16       	cp	r8, r25
    355a:	91 04       	cpc	r9, r1
    355c:	01 f7       	brne	.-64     	; 0x351e <parseCommands+0x56a>
                    fprintf(port, "%d:%ld:", i, GetOverSampledVoltage(i, 0x40));
                }
                fprintf(port,"\n");
    355e:	60 91 b0 02 	lds	r22, 0x02B0	; 0x8002b0 <port>
    3562:	70 91 b1 02 	lds	r23, 0x02B1	; 0x8002b1 <port+0x1>
    3566:	8a e0       	ldi	r24, 0x0A	; 10
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    356e:	fe ce       	rjmp	.-516    	; 0x336c <parseCommands+0x3b8>
            }
            else if (value == '9'){
                fprintf(port, "G9:%5.2f:%5.2f\n", getAngleMotorAVGcurrent(), getTiltMotorAVGcurrent());
            }
            else if (value == 'A'){
                fprintf(port, "GA:%5.2f:%5.2f\n", getAngleMotorMoveSpeed(), getTiltMotorMoveSpeed());
    3570:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <getTiltMotorMoveSpeed>
    3574:	96 2e       	mov	r9, r22
    3576:	87 2e       	mov	r8, r23
    3578:	78 2e       	mov	r7, r24
    357a:	69 2e       	mov	r6, r25
    357c:	0e 94 65 09 	call	0x12ca	; 0x12ca <getAngleMotorMoveSpeed>
    3580:	6f 92       	push	r6
    3582:	7f 92       	push	r7
    3584:	8f 92       	push	r8
    3586:	9f 92       	push	r9
    3588:	9f 93       	push	r25
    358a:	8f 93       	push	r24
    358c:	7f 93       	push	r23
    358e:	6f 93       	push	r22
    3590:	a8 e6       	ldi	r26, 0x68	; 104
    3592:	b2 e0       	ldi	r27, 0x02	; 2
    3594:	bf 93       	push	r27
    3596:	af 93       	push	r26
    3598:	48 cf       	rjmp	.-368    	; 0x342a <parseCommands+0x476>
            }
            else if (value == '3'){ //Reads current values from motorctrl -module, actual values
                fprintf(port,"G3:%5.2f:%5.2f\n", getAngle(), getTilt());
            }
            else if (value == '4'){ //get motor statuses
                fprintf(port, "G4:%d:%d\n", getAngleMotorStatus(), getTiltMotorStatus());
    359a:	0e 94 47 09 	call	0x128e	; 0x128e <getTiltMotorStatus>
    359e:	98 2e       	mov	r9, r24
    35a0:	0e 94 44 09 	call	0x1288	; 0x1288 <getAngleMotorStatus>
    35a4:	1f 92       	push	r1
    35a6:	9f 92       	push	r9
    35a8:	1f 92       	push	r1
    35aa:	8f 93       	push	r24
    35ac:	8e e1       	ldi	r24, 0x1E	; 30
    35ae:	92 e0       	ldi	r25, 0x02	; 2
            }
            else if (value == '7'){
                fprintf(port, "G7:%5.2f:%5.2f:%5.2f:%5.2f\n",getAngleMotorMinAngle(), getTiltMotorMinAngle(), getAngleMotorMaxAngle(), getTiltMotorMaxAngle());
            }
            else if (value == '8'){
                fprintf(port, "G8:%d:%d\n",getAngleActuatorSetLength(), getTiltActuatorSetLength());
    35b0:	9f 93       	push	r25
    35b2:	8f 93       	push	r24
    35b4:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    35b8:	8f 93       	push	r24
    35ba:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    35be:	8f 93       	push	r24
    35c0:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
    35c4:	0f b6       	in	r0, 0x3f	; 63
    35c6:	f8 94       	cli
    35c8:	de bf       	out	0x3e, r29	; 62
    35ca:	0f be       	out	0x3f, r0	; 63
    35cc:	cd bf       	out	0x3d, r28	; 61
    35ce:	4e ce       	rjmp	.-868    	; 0x326c <parseCommands+0x2b8>
            }
            else if (value == '4'){ //get motor statuses
                fprintf(port, "G4:%d:%d\n", getAngleMotorStatus(), getTiltMotorStatus());
            }
            else if (value == '5'){
                fprintf(port, "G5:%d:%d\n", getAngleActuatorCurrentLength(), getTiltActuatorCurrentLength());
    35d0:	0e 94 04 05 	call	0xa08	; 0xa08 <getTiltActuatorCurrentLength>
    35d4:	98 2e       	mov	r9, r24
    35d6:	89 2e       	mov	r8, r25
    35d8:	0e 94 09 05 	call	0xa12	; 0xa12 <getAngleActuatorCurrentLength>
    35dc:	8f 92       	push	r8
    35de:	9f 92       	push	r9
    35e0:	9f 93       	push	r25
    35e2:	8f 93       	push	r24
    35e4:	88 e2       	ldi	r24, 0x28	; 40
    35e6:	92 e0       	ldi	r25, 0x02	; 2
    35e8:	e3 cf       	rjmp	.-58     	; 0x35b0 <parseCommands+0x5fc>
            }
            else if (value == '6'){
                fprintf(port, "G6:%d:%d:%d\n",readAutoManualState(), readTiltButtonState(), readTurnButtonState());
    35ea:	20 d3       	rcall	.+1600   	; 0x3c2c <readTurnButtonState>
    35ec:	88 2e       	mov	r8, r24
    35ee:	12 d3       	rcall	.+1572   	; 0x3c14 <readTiltButtonState>
    35f0:	98 2e       	mov	r9, r24
    35f2:	0b d3       	rcall	.+1558   	; 0x3c0a <readAutoManualState>
    35f4:	1f 92       	push	r1
    35f6:	8f 92       	push	r8
    35f8:	1f 92       	push	r1
    35fa:	9f 92       	push	r9
    35fc:	1f 92       	push	r1
    35fe:	8f 93       	push	r24
    3600:	87 ed       	ldi	r24, 0xD7	; 215
    3602:	91 e0       	ldi	r25, 0x01	; 1
    3604:	9f 93       	push	r25
    3606:	8f 93       	push	r24
    3608:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    360c:	8f 93       	push	r24
    360e:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    3612:	8f 93       	push	r24
    3614:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
    3618:	0f b6       	in	r0, 0x3f	; 63
    361a:	f8 94       	cli
    361c:	de bf       	out	0x3e, r29	; 62
    361e:	0f be       	out	0x3f, r0	; 63
    3620:	cd bf       	out	0x3d, r28	; 61
    3622:	24 ce       	rjmp	.-952    	; 0x326c <parseCommands+0x2b8>
            }
            else if (value == 'A'){
                fprintf(port, "GA:%5.2f:%5.2f\n", getAngleMotorMoveSpeed(), getTiltMotorMoveSpeed());
            }
            else if (value == 'B'){
                fprintf(port, "GB:%d:%d\n", getAngleMoveLength(), getTiltMoveLength());
    3624:	0e 94 6e 09 	call	0x12dc	; 0x12dc <getTiltMoveLength>
    3628:	98 2e       	mov	r9, r24
    362a:	89 2e       	mov	r8, r25
    362c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <getAngleMoveLength>
    3630:	8f 92       	push	r8
    3632:	9f 92       	push	r9
    3634:	9f 93       	push	r25
    3636:	8f 93       	push	r24
    3638:	a8 e7       	ldi	r26, 0x78	; 120
    363a:	b2 e0       	ldi	r27, 0x02	; 2
    363c:	bf 93       	push	r27
    363e:	af 93       	push	r26
    3640:	b9 cf       	rjmp	.-142    	; 0x35b4 <parseCommands+0x600>
            }
            else if (value == '6'){
                fprintf(port, "G6:%d:%d:%d\n",readAutoManualState(), readTiltButtonState(), readTurnButtonState());
            }
            else if (value == '7'){
                fprintf(port, "G7:%5.2f:%5.2f:%5.2f:%5.2f\n",getAngleMotorMinAngle(), getTiltMotorMinAngle(), getAngleMotorMaxAngle(), getTiltMotorMaxAngle());
    3642:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <getTiltMotorMaxAngle>
    3646:	6b 87       	std	Y+11, r22	; 0x0b
    3648:	7c 87       	std	Y+12, r23	; 0x0c
    364a:	9a 8b       	std	Y+18, r25	; 0x12
    364c:	89 8b       	std	Y+17, r24	; 0x11
    364e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <getAngleMotorMaxAngle>
    3652:	ab 01       	movw	r20, r22
    3654:	8d 87       	std	Y+13, r24	; 0x0d
    3656:	9e 87       	std	Y+14, r25	; 0x0e
    3658:	6f 87       	std	Y+15, r22	; 0x0f
    365a:	58 8b       	std	Y+16, r21	; 0x10
    365c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <getTiltMotorMinAngle>
    3660:	96 2e       	mov	r9, r22
    3662:	87 2e       	mov	r8, r23
    3664:	78 2e       	mov	r7, r24
    3666:	69 2e       	mov	r6, r25
    3668:	0e 94 db 04 	call	0x9b6	; 0x9b6 <getAngleMotorMinAngle>
    366c:	2a 89       	ldd	r18, Y+18	; 0x12
    366e:	2f 93       	push	r18
    3670:	39 89       	ldd	r19, Y+17	; 0x11
    3672:	3f 93       	push	r19
    3674:	3c 85       	ldd	r19, Y+12	; 0x0c
    3676:	3f 93       	push	r19
    3678:	2b 85       	ldd	r18, Y+11	; 0x0b
    367a:	2f 93       	push	r18
    367c:	3e 85       	ldd	r19, Y+14	; 0x0e
    367e:	3f 93       	push	r19
    3680:	2d 85       	ldd	r18, Y+13	; 0x0d
    3682:	2f 93       	push	r18
    3684:	58 89       	ldd	r21, Y+16	; 0x10
    3686:	5f 93       	push	r21
    3688:	4f 85       	ldd	r20, Y+15	; 0x0f
    368a:	4f 93       	push	r20
    368c:	6f 92       	push	r6
    368e:	7f 92       	push	r7
    3690:	8f 92       	push	r8
    3692:	9f 92       	push	r9
    3694:	9f 93       	push	r25
    3696:	8f 93       	push	r24
    3698:	7f 93       	push	r23
    369a:	6f 93       	push	r22
    369c:	82 e3       	ldi	r24, 0x32	; 50
    369e:	92 e0       	ldi	r25, 0x02	; 2
    36a0:	9f 93       	push	r25
    36a2:	8f 93       	push	r24
    36a4:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <port+0x1>
    36a8:	8f 93       	push	r24
    36aa:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <port>
    36ae:	8f 93       	push	r24
    36b0:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
    36b4:	0f b6       	in	r0, 0x3f	; 63
    36b6:	f8 94       	cli
    36b8:	de bf       	out	0x3e, r29	; 62
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	cd bf       	out	0x3d, r28	; 61
    36be:	d6 cd       	rjmp	.-1108   	; 0x326c <parseCommands+0x2b8>
    36c0:	94 e1       	ldi	r25, 0x14	; 20
    36c2:	0e c0       	rjmp	.+28     	; 0x36e0 <parseCommands+0x72c>
}

//Start and Stop values are pointing to Global ring buffer
uint8_t findParameter(char startchar, char stopchar, char secondstopchar, uint8_t maxlength, uint8_t *start, uint8_t *stop){
    //Find correct start character
    while(buffer[ring_read] != startchar && ring_read != ring_write){ 
    36c4:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <ring_read>
    36c8:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    36cc:	28 17       	cp	r18, r24
    36ce:	81 f0       	breq	.+32     	; 0x36f0 <parseCommands+0x73c>
        ring_read++;
    36d0:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    36d4:	8f 5f       	subi	r24, 0xFF	; 255
    36d6:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>
    36da:	91 50       	subi	r25, 0x01	; 1
        maxlength --;
        if (maxlength == 0){
    36dc:	09 f4       	brne	.+2      	; 0x36e0 <parseCommands+0x72c>
    36de:	4a cd       	rjmp	.-1388   	; 0x3174 <parseCommands+0x1c0>
}

//Start and Stop values are pointing to Global ring buffer
uint8_t findParameter(char startchar, char stopchar, char secondstopchar, uint8_t maxlength, uint8_t *start, uint8_t *stop){
    //Find correct start character
    while(buffer[ring_read] != startchar && ring_read != ring_write){ 
    36e0:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	e2 54       	subi	r30, 0x42	; 66
    36e8:	fd 4f       	sbci	r31, 0xFD	; 253
    36ea:	80 81       	ld	r24, Z
    36ec:	8a 33       	cpi	r24, 0x3A	; 58
    36ee:	51 f7       	brne	.-44     	; 0x36c4 <parseCommands+0x710>
        maxlength --;
        if (maxlength == 0){
            return ERROR_MAX_LENGTH;
        }
    }
    if (ring_read == ring_write){
    36f0:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    36f4:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    36f8:	98 17       	cp	r25, r24
    36fa:	09 f4       	brne	.+2      	; 0x36fe <parseCommands+0x74a>
    36fc:	3b cd       	rjmp	.-1418   	; 0x3174 <parseCommands+0x1c0>
        return ERROR_CANNOT_FIND;
    }

    ring_read++; ///Next character is what we are looking for
    36fe:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    3702:	8f 5f       	subi	r24, 0xFF	; 255
    3704:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

    //Find stop character
    *start = ring_read;
    3708:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    370c:	0d c0       	rjmp	.+26     	; 0x3728 <parseCommands+0x774>
    while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimiter or end of line
    370e:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3712:	f0 e0       	ldi	r31, 0x00	; 0
    3714:	e2 54       	subi	r30, 0x42	; 66
    3716:	fd 4f       	sbci	r31, 0xFD	; 253
    3718:	80 81       	ld	r24, Z
    371a:	8a 30       	cpi	r24, 0x0A	; 10
    371c:	69 f0       	breq	.+26     	; 0x3738 <parseCommands+0x784>
        ring_read++; //Step forward
    371e:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    3722:	8f 5f       	subi	r24, 0xFF	; 255
    3724:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

    ring_read++; ///Next character is what we are looking for

    //Find stop character
    *start = ring_read;
    while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimiter or end of line
    3728:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	e2 54       	subi	r30, 0x42	; 66
    3730:	fd 4f       	sbci	r31, 0xFD	; 253
    3732:	80 81       	ld	r24, Z
    3734:	8a 33       	cpi	r24, 0x3A	; 58
    3736:	59 f7       	brne	.-42     	; 0x370e <parseCommands+0x75a>
        ring_read++; //Step forward
    }
    *stop = ring_read;
    3738:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
/*
    Reads floating point value from ringbuffer. 
    Function must be used because serial data is stored in to ring buffer
*/
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    373c:	2a e0       	ldi	r18, 0x0A	; 10
    373e:	d5 01       	movw	r26, r10
    3740:	1d 92       	st	X+, r1
    3742:	2a 95       	dec	r18
    3744:	e9 f7       	brne	.-6      	; 0x3740 <parseCommands+0x78c>
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    3746:	e1 e0       	ldi	r30, 0x01	; 1
    3748:	e9 0f       	add	r30, r25
    374a:	a9 2f       	mov	r26, r25
    374c:	b0 e0       	ldi	r27, 0x00	; 0
    374e:	a2 54       	subi	r26, 0x42	; 66
    3750:	bd 4f       	sbci	r27, 0xFD	; 253
    3752:	2c 91       	ld	r18, X
    3754:	29 83       	std	Y+1, r18	; 0x01
        if (start == stop){
    3756:	8e 17       	cp	r24, r30
    3758:	09 f4       	brne	.+2      	; 0x375c <parseCommands+0x7a8>
    375a:	4e c0       	rjmp	.+156    	; 0x37f8 <parseCommands+0x844>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    375c:	a2 e0       	ldi	r26, 0x02	; 2
    375e:	a9 0f       	add	r26, r25
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	e2 54       	subi	r30, 0x42	; 66
    3764:	fd 4f       	sbci	r31, 0xFD	; 253
    3766:	20 81       	ld	r18, Z
    3768:	2a 83       	std	Y+2, r18	; 0x02
        if (start == stop){
    376a:	8a 17       	cp	r24, r26
    376c:	09 f4       	brne	.+2      	; 0x3770 <parseCommands+0x7bc>
    376e:	44 c0       	rjmp	.+136    	; 0x37f8 <parseCommands+0x844>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    3770:	e3 e0       	ldi	r30, 0x03	; 3
    3772:	e9 0f       	add	r30, r25
    3774:	b0 e0       	ldi	r27, 0x00	; 0
    3776:	a2 54       	subi	r26, 0x42	; 66
    3778:	bd 4f       	sbci	r27, 0xFD	; 253
    377a:	2c 91       	ld	r18, X
    377c:	2b 83       	std	Y+3, r18	; 0x03
        if (start == stop){
    377e:	8e 17       	cp	r24, r30
    3780:	d9 f1       	breq	.+118    	; 0x37f8 <parseCommands+0x844>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    3782:	a4 e0       	ldi	r26, 0x04	; 4
    3784:	a9 0f       	add	r26, r25
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	e2 54       	subi	r30, 0x42	; 66
    378a:	fd 4f       	sbci	r31, 0xFD	; 253
    378c:	20 81       	ld	r18, Z
    378e:	2c 83       	std	Y+4, r18	; 0x04
        if (start == stop){
    3790:	8a 17       	cp	r24, r26
    3792:	91 f1       	breq	.+100    	; 0x37f8 <parseCommands+0x844>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    3794:	e5 e0       	ldi	r30, 0x05	; 5
    3796:	e9 0f       	add	r30, r25
    3798:	b0 e0       	ldi	r27, 0x00	; 0
    379a:	a2 54       	subi	r26, 0x42	; 66
    379c:	bd 4f       	sbci	r27, 0xFD	; 253
    379e:	2c 91       	ld	r18, X
    37a0:	2d 83       	std	Y+5, r18	; 0x05
        if (start == stop){
    37a2:	8e 17       	cp	r24, r30
    37a4:	49 f1       	breq	.+82     	; 0x37f8 <parseCommands+0x844>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    37a6:	a6 e0       	ldi	r26, 0x06	; 6
    37a8:	a9 0f       	add	r26, r25
    37aa:	f0 e0       	ldi	r31, 0x00	; 0
    37ac:	e2 54       	subi	r30, 0x42	; 66
    37ae:	fd 4f       	sbci	r31, 0xFD	; 253
    37b0:	20 81       	ld	r18, Z
    37b2:	2e 83       	std	Y+6, r18	; 0x06
        if (start == stop){
    37b4:	8a 17       	cp	r24, r26
    37b6:	01 f1       	breq	.+64     	; 0x37f8 <parseCommands+0x844>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    37b8:	e7 e0       	ldi	r30, 0x07	; 7
    37ba:	e9 0f       	add	r30, r25
    37bc:	b0 e0       	ldi	r27, 0x00	; 0
    37be:	a2 54       	subi	r26, 0x42	; 66
    37c0:	bd 4f       	sbci	r27, 0xFD	; 253
    37c2:	2c 91       	ld	r18, X
    37c4:	2f 83       	std	Y+7, r18	; 0x07
        if (start == stop){
    37c6:	8e 17       	cp	r24, r30
    37c8:	b9 f0       	breq	.+46     	; 0x37f8 <parseCommands+0x844>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    37ca:	a8 e0       	ldi	r26, 0x08	; 8
    37cc:	a9 0f       	add	r26, r25
    37ce:	f0 e0       	ldi	r31, 0x00	; 0
    37d0:	e2 54       	subi	r30, 0x42	; 66
    37d2:	fd 4f       	sbci	r31, 0xFD	; 253
    37d4:	20 81       	ld	r18, Z
    37d6:	28 87       	std	Y+8, r18	; 0x08
        if (start == stop){
    37d8:	8a 17       	cp	r24, r26
    37da:	71 f0       	breq	.+28     	; 0x37f8 <parseCommands+0x844>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    37dc:	e9 e0       	ldi	r30, 0x09	; 9
    37de:	e9 0f       	add	r30, r25
    37e0:	b0 e0       	ldi	r27, 0x00	; 0
    37e2:	a2 54       	subi	r26, 0x42	; 66
    37e4:	bd 4f       	sbci	r27, 0xFD	; 253
    37e6:	9c 91       	ld	r25, X
    37e8:	99 87       	std	Y+9, r25	; 0x09
        if (start == stop){
    37ea:	8e 17       	cp	r24, r30
    37ec:	29 f0       	breq	.+10     	; 0x37f8 <parseCommands+0x844>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	e2 54       	subi	r30, 0x42	; 66
    37f2:	fd 4f       	sbci	r31, 0xFD	; 253
    37f4:	80 81       	ld	r24, Z
    37f6:	8a 87       	std	Y+10, r24	; 0x0a
           i = 10;
        }
    }
   // printf(buf);
   // printf("\n");
    return atof(buf);
    37f8:	c5 01       	movw	r24, r10
    37fa:	0e 94 0b 2a 	call	0x5416	; 0x5416 <atof>
                
            if (buffer[ring_read] == '1'){
                if (readAutoManualState() == AUTO){    
                    uint8_t succ = findParameter(':', ':', '\n', 20, &start, &stop);
                    if (succ == FIND_SUCCESS){
                        uint8_t asuccess = setAngle(readFloat(start, stop));
    37fe:	0e 94 68 05 	call	0xad0	; 0xad0 <setAngle>
    3802:	98 2e       	mov	r9, r24
    3804:	24 e1       	ldi	r18, 0x14	; 20
    3806:	0e c0       	rjmp	.+28     	; 0x3824 <parseCommands+0x870>
}

//Start and Stop values are pointing to Global ring buffer
uint8_t findParameter(char startchar, char stopchar, char secondstopchar, uint8_t maxlength, uint8_t *start, uint8_t *stop){
    //Find correct start character
    while(buffer[ring_read] != startchar && ring_read != ring_write){ 
    3808:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    380c:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    3810:	98 17       	cp	r25, r24
    3812:	81 f0       	breq	.+32     	; 0x3834 <parseCommands+0x880>
        ring_read++;
    3814:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    3818:	8f 5f       	subi	r24, 0xFF	; 255
    381a:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>
    381e:	21 50       	subi	r18, 0x01	; 1
        maxlength --;
        if (maxlength == 0){
    3820:	09 f4       	brne	.+2      	; 0x3824 <parseCommands+0x870>
    3822:	a8 cc       	rjmp	.-1712   	; 0x3174 <parseCommands+0x1c0>
}

//Start and Stop values are pointing to Global ring buffer
uint8_t findParameter(char startchar, char stopchar, char secondstopchar, uint8_t maxlength, uint8_t *start, uint8_t *stop){
    //Find correct start character
    while(buffer[ring_read] != startchar && ring_read != ring_write){ 
    3824:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3828:	f0 e0       	ldi	r31, 0x00	; 0
    382a:	e2 54       	subi	r30, 0x42	; 66
    382c:	fd 4f       	sbci	r31, 0xFD	; 253
    382e:	80 81       	ld	r24, Z
    3830:	8a 33       	cpi	r24, 0x3A	; 58
    3832:	51 f7       	brne	.-44     	; 0x3808 <parseCommands+0x854>
        maxlength --;
        if (maxlength == 0){
            return ERROR_MAX_LENGTH;
        }
    }
    if (ring_read == ring_write){
    3834:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    3838:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    383c:	98 17       	cp	r25, r24
    383e:	09 f4       	brne	.+2      	; 0x3842 <parseCommands+0x88e>
    3840:	99 cc       	rjmp	.-1742   	; 0x3174 <parseCommands+0x1c0>
        return ERROR_CANNOT_FIND;
    }

    ring_read++; ///Next character is what we are looking for
    3842:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    3846:	8f 5f       	subi	r24, 0xFF	; 255
    3848:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

    //Find stop character
    *start = ring_read;
    384c:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    3850:	0d c0       	rjmp	.+26     	; 0x386c <parseCommands+0x8b8>
    while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimiter or end of line
    3852:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3856:	f0 e0       	ldi	r31, 0x00	; 0
    3858:	e2 54       	subi	r30, 0x42	; 66
    385a:	fd 4f       	sbci	r31, 0xFD	; 253
    385c:	90 81       	ld	r25, Z
    385e:	9a 30       	cpi	r25, 0x0A	; 10
    3860:	69 f0       	breq	.+26     	; 0x387c <parseCommands+0x8c8>
        ring_read++; //Step forward
    3862:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    3866:	9f 5f       	subi	r25, 0xFF	; 255
    3868:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <ring_read>

    ring_read++; ///Next character is what we are looking for

    //Find stop character
    *start = ring_read;
    while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimiter or end of line
    386c:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3870:	f0 e0       	ldi	r31, 0x00	; 0
    3872:	e2 54       	subi	r30, 0x42	; 66
    3874:	fd 4f       	sbci	r31, 0xFD	; 253
    3876:	90 81       	ld	r25, Z
    3878:	9a 33       	cpi	r25, 0x3A	; 58
    387a:	59 f7       	brne	.-42     	; 0x3852 <parseCommands+0x89e>
        ring_read++; //Step forward
    }
    *stop = ring_read;
    387c:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
/*
    Reads floating point value from ringbuffer. 
    Function must be used because serial data is stored in to ring buffer
*/
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    3880:	2a e0       	ldi	r18, 0x0A	; 10
    3882:	f5 01       	movw	r30, r10
    3884:	11 92       	st	Z+, r1
    3886:	2a 95       	dec	r18
    3888:	e9 f7       	brne	.-6      	; 0x3884 <parseCommands+0x8d0>
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    388a:	e1 e0       	ldi	r30, 0x01	; 1
    388c:	e8 0f       	add	r30, r24
    388e:	a8 2f       	mov	r26, r24
    3890:	b0 e0       	ldi	r27, 0x00	; 0
    3892:	a2 54       	subi	r26, 0x42	; 66
    3894:	bd 4f       	sbci	r27, 0xFD	; 253
    3896:	2c 91       	ld	r18, X
    3898:	29 83       	std	Y+1, r18	; 0x01
        if (start == stop){
    389a:	9e 17       	cp	r25, r30
    389c:	09 f4       	brne	.+2      	; 0x38a0 <parseCommands+0x8ec>
    389e:	4e c0       	rjmp	.+156    	; 0x393c <parseCommands+0x988>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    38a0:	a2 e0       	ldi	r26, 0x02	; 2
    38a2:	a8 0f       	add	r26, r24
    38a4:	f0 e0       	ldi	r31, 0x00	; 0
    38a6:	e2 54       	subi	r30, 0x42	; 66
    38a8:	fd 4f       	sbci	r31, 0xFD	; 253
    38aa:	20 81       	ld	r18, Z
    38ac:	2a 83       	std	Y+2, r18	; 0x02
        if (start == stop){
    38ae:	9a 17       	cp	r25, r26
    38b0:	09 f4       	brne	.+2      	; 0x38b4 <parseCommands+0x900>
    38b2:	44 c0       	rjmp	.+136    	; 0x393c <parseCommands+0x988>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    38b4:	e3 e0       	ldi	r30, 0x03	; 3
    38b6:	e8 0f       	add	r30, r24
    38b8:	b0 e0       	ldi	r27, 0x00	; 0
    38ba:	a2 54       	subi	r26, 0x42	; 66
    38bc:	bd 4f       	sbci	r27, 0xFD	; 253
    38be:	2c 91       	ld	r18, X
    38c0:	2b 83       	std	Y+3, r18	; 0x03
        if (start == stop){
    38c2:	9e 17       	cp	r25, r30
    38c4:	d9 f1       	breq	.+118    	; 0x393c <parseCommands+0x988>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    38c6:	a4 e0       	ldi	r26, 0x04	; 4
    38c8:	a8 0f       	add	r26, r24
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	e2 54       	subi	r30, 0x42	; 66
    38ce:	fd 4f       	sbci	r31, 0xFD	; 253
    38d0:	20 81       	ld	r18, Z
    38d2:	2c 83       	std	Y+4, r18	; 0x04
        if (start == stop){
    38d4:	9a 17       	cp	r25, r26
    38d6:	91 f1       	breq	.+100    	; 0x393c <parseCommands+0x988>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    38d8:	e5 e0       	ldi	r30, 0x05	; 5
    38da:	e8 0f       	add	r30, r24
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	a2 54       	subi	r26, 0x42	; 66
    38e0:	bd 4f       	sbci	r27, 0xFD	; 253
    38e2:	2c 91       	ld	r18, X
    38e4:	2d 83       	std	Y+5, r18	; 0x05
        if (start == stop){
    38e6:	9e 17       	cp	r25, r30
    38e8:	49 f1       	breq	.+82     	; 0x393c <parseCommands+0x988>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    38ea:	a6 e0       	ldi	r26, 0x06	; 6
    38ec:	a8 0f       	add	r26, r24
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	e2 54       	subi	r30, 0x42	; 66
    38f2:	fd 4f       	sbci	r31, 0xFD	; 253
    38f4:	20 81       	ld	r18, Z
    38f6:	2e 83       	std	Y+6, r18	; 0x06
        if (start == stop){
    38f8:	9a 17       	cp	r25, r26
    38fa:	01 f1       	breq	.+64     	; 0x393c <parseCommands+0x988>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    38fc:	e7 e0       	ldi	r30, 0x07	; 7
    38fe:	e8 0f       	add	r30, r24
    3900:	b0 e0       	ldi	r27, 0x00	; 0
    3902:	a2 54       	subi	r26, 0x42	; 66
    3904:	bd 4f       	sbci	r27, 0xFD	; 253
    3906:	2c 91       	ld	r18, X
    3908:	2f 83       	std	Y+7, r18	; 0x07
        if (start == stop){
    390a:	9e 17       	cp	r25, r30
    390c:	b9 f0       	breq	.+46     	; 0x393c <parseCommands+0x988>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    390e:	a8 e0       	ldi	r26, 0x08	; 8
    3910:	a8 0f       	add	r26, r24
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	e2 54       	subi	r30, 0x42	; 66
    3916:	fd 4f       	sbci	r31, 0xFD	; 253
    3918:	20 81       	ld	r18, Z
    391a:	28 87       	std	Y+8, r18	; 0x08
        if (start == stop){
    391c:	9a 17       	cp	r25, r26
    391e:	71 f0       	breq	.+28     	; 0x393c <parseCommands+0x988>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    3920:	e9 e0       	ldi	r30, 0x09	; 9
    3922:	e8 0f       	add	r30, r24
    3924:	b0 e0       	ldi	r27, 0x00	; 0
    3926:	a2 54       	subi	r26, 0x42	; 66
    3928:	bd 4f       	sbci	r27, 0xFD	; 253
    392a:	8c 91       	ld	r24, X
    392c:	89 87       	std	Y+9, r24	; 0x09
        if (start == stop){
    392e:	9e 17       	cp	r25, r30
    3930:	29 f0       	breq	.+10     	; 0x393c <parseCommands+0x988>
double readFloat(uint8_t start, uint8_t stop){
    char buf[10] = {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<10; i++){
        buf[i] = buffer[start++];
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	e2 54       	subi	r30, 0x42	; 66
    3936:	fd 4f       	sbci	r31, 0xFD	; 253
    3938:	80 81       	ld	r24, Z
    393a:	8a 87       	std	Y+10, r24	; 0x0a
           i = 10;
        }
    }
   // printf(buf);
   // printf("\n");
    return atof(buf);
    393c:	c5 01       	movw	r24, r10
    393e:	0e 94 0b 2a 	call	0x5416	; 0x5416 <atof>
                    uint8_t succ = findParameter(':', ':', '\n', 20, &start, &stop);
                    if (succ == FIND_SUCCESS){
                        uint8_t asuccess = setAngle(readFloat(start, stop));
                        succ = findParameter(':', ':', '\n', 20, &start, &stop);
                        if (succ == FIND_SUCCESS){
                            uint8_t tsuccess = setTilt(readFloat(start, stop));
    3942:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <setTilt>
                            if (asuccess == 0 && tsuccess == 0){
    3946:	91 10       	cpse	r9, r1
    3948:	15 cc       	rjmp	.-2006   	; 0x3174 <parseCommands+0x1c0>
    394a:	81 11       	cpse	r24, r1
    394c:	13 cc       	rjmp	.-2010   	; 0x3174 <parseCommands+0x1c0>
                                fprintf_P(port, PSTR("OK\n"));
    394e:	88 e8       	ldi	r24, 0x88	; 136
    3950:	92 e0       	ldi	r25, 0x02	; 2
    3952:	1d cd       	rjmp	.-1478   	; 0x338e <parseCommands+0x3da>
            }
            else if (value == '7'){
                fprintf(port, "G7:%5.2f:%5.2f:%5.2f:%5.2f\n",getAngleMotorMinAngle(), getTiltMotorMinAngle(), getAngleMotorMaxAngle(), getTiltMotorMaxAngle());
            }
            else if (value == '8'){
                fprintf(port, "G8:%d:%d\n",getAngleActuatorSetLength(), getTiltActuatorSetLength());
    3954:	0e 94 0e 05 	call	0xa1c	; 0xa1c <getTiltActuatorSetLength>
    3958:	98 2e       	mov	r9, r24
    395a:	89 2e       	mov	r8, r25
    395c:	0e 94 13 05 	call	0xa26	; 0xa26 <getAngleActuatorSetLength>
    3960:	8f 92       	push	r8
    3962:	9f 92       	push	r9
    3964:	9f 93       	push	r25
    3966:	8f 93       	push	r24
    3968:	8e e4       	ldi	r24, 0x4E	; 78
    396a:	92 e0       	ldi	r25, 0x02	; 2
    396c:	21 ce       	rjmp	.-958    	; 0x35b0 <parseCommands+0x5fc>
    396e:	94 e1       	ldi	r25, 0x14	; 20
    3970:	0e c0       	rjmp	.+28     	; 0x398e <parseCommands+0x9da>
}

//Start and Stop values are pointing to Global ring buffer
uint8_t findParameter(char startchar, char stopchar, char secondstopchar, uint8_t maxlength, uint8_t *start, uint8_t *stop){
    //Find correct start character
    while(buffer[ring_read] != startchar && ring_read != ring_write){ 
    3972:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <ring_read>
    3976:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    397a:	28 17       	cp	r18, r24
    397c:	81 f0       	breq	.+32     	; 0x399e <parseCommands+0x9ea>
        ring_read++;
    397e:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    3982:	8f 5f       	subi	r24, 0xFF	; 255
    3984:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>
    3988:	91 50       	subi	r25, 0x01	; 1
        maxlength --;
        if (maxlength == 0){
    398a:	09 f4       	brne	.+2      	; 0x398e <parseCommands+0x9da>
    398c:	17 cc       	rjmp	.-2002   	; 0x31bc <parseCommands+0x208>
}

//Start and Stop values are pointing to Global ring buffer
uint8_t findParameter(char startchar, char stopchar, char secondstopchar, uint8_t maxlength, uint8_t *start, uint8_t *stop){
    //Find correct start character
    while(buffer[ring_read] != startchar && ring_read != ring_write){ 
    398e:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	e2 54       	subi	r30, 0x42	; 66
    3996:	fd 4f       	sbci	r31, 0xFD	; 253
    3998:	80 81       	ld	r24, Z
    399a:	8a 33       	cpi	r24, 0x3A	; 58
    399c:	51 f7       	brne	.-44     	; 0x3972 <parseCommands+0x9be>
        maxlength --;
        if (maxlength == 0){
            return ERROR_MAX_LENGTH;
        }
    }
    if (ring_read == ring_write){
    399e:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    39a2:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    39a6:	98 17       	cp	r25, r24
    39a8:	09 f4       	brne	.+2      	; 0x39ac <parseCommands+0x9f8>
    39aa:	08 cc       	rjmp	.-2032   	; 0x31bc <parseCommands+0x208>
        return ERROR_CANNOT_FIND;
    }

    ring_read++; ///Next character is what we are looking for
    39ac:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    39b0:	8f 5f       	subi	r24, 0xFF	; 255
    39b2:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

    //Find stop character
    *start = ring_read;
    39b6:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    39ba:	0d c0       	rjmp	.+26     	; 0x39d6 <parseCommands+0xa22>
    while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimiter or end of line
    39bc:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	e2 54       	subi	r30, 0x42	; 66
    39c4:	fd 4f       	sbci	r31, 0xFD	; 253
    39c6:	80 81       	ld	r24, Z
    39c8:	8a 30       	cpi	r24, 0x0A	; 10
    39ca:	69 f0       	breq	.+26     	; 0x39e6 <parseCommands+0xa32>
        ring_read++; //Step forward
    39cc:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    39d0:	8f 5f       	subi	r24, 0xFF	; 255
    39d2:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

    ring_read++; ///Next character is what we are looking for

    //Find stop character
    *start = ring_read;
    while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimiter or end of line
    39d6:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    39da:	f0 e0       	ldi	r31, 0x00	; 0
    39dc:	e2 54       	subi	r30, 0x42	; 66
    39de:	fd 4f       	sbci	r31, 0xFD	; 253
    39e0:	80 81       	ld	r24, Z
    39e2:	8a 33       	cpi	r24, 0x3A	; 58
    39e4:	59 f7       	brne	.-42     	; 0x39bc <parseCommands+0xa08>
        ring_read++; //Step forward
    }
    *stop = ring_read;
    39e6:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
/*
    Reads 16 bit int from ringbuffer. 
    Function must be used because serial data is stored in to ring buffer
*/
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    39ea:	25 e0       	ldi	r18, 0x05	; 5
    39ec:	d5 01       	movw	r26, r10
    39ee:	1d 92       	st	X+, r1
    39f0:	2a 95       	dec	r18
    39f2:	e9 f7       	brne	.-6      	; 0x39ee <parseCommands+0xa3a>
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    39f4:	a1 e0       	ldi	r26, 0x01	; 1
    39f6:	a9 0f       	add	r26, r25
    39f8:	e9 2f       	mov	r30, r25
    39fa:	f0 e0       	ldi	r31, 0x00	; 0
    39fc:	e2 54       	subi	r30, 0x42	; 66
    39fe:	fd 4f       	sbci	r31, 0xFD	; 253
    3a00:	20 81       	ld	r18, Z
    3a02:	29 83       	std	Y+1, r18	; 0x01
        if (start == stop){
    3a04:	8a 17       	cp	r24, r26
    3a06:	01 f1       	breq	.+64     	; 0x3a48 <parseCommands+0xa94>
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    3a08:	e2 e0       	ldi	r30, 0x02	; 2
    3a0a:	e9 0f       	add	r30, r25
    3a0c:	b0 e0       	ldi	r27, 0x00	; 0
    3a0e:	a2 54       	subi	r26, 0x42	; 66
    3a10:	bd 4f       	sbci	r27, 0xFD	; 253
    3a12:	2c 91       	ld	r18, X
    3a14:	2a 83       	std	Y+2, r18	; 0x02
        if (start == stop){
    3a16:	8e 17       	cp	r24, r30
    3a18:	b9 f0       	breq	.+46     	; 0x3a48 <parseCommands+0xa94>
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    3a1a:	a3 e0       	ldi	r26, 0x03	; 3
    3a1c:	a9 0f       	add	r26, r25
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	e2 54       	subi	r30, 0x42	; 66
    3a22:	fd 4f       	sbci	r31, 0xFD	; 253
    3a24:	20 81       	ld	r18, Z
    3a26:	2b 83       	std	Y+3, r18	; 0x03
        if (start == stop){
    3a28:	8a 17       	cp	r24, r26
    3a2a:	71 f0       	breq	.+28     	; 0x3a48 <parseCommands+0xa94>
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    3a2c:	e4 e0       	ldi	r30, 0x04	; 4
    3a2e:	e9 0f       	add	r30, r25
    3a30:	b0 e0       	ldi	r27, 0x00	; 0
    3a32:	a2 54       	subi	r26, 0x42	; 66
    3a34:	bd 4f       	sbci	r27, 0xFD	; 253
    3a36:	9c 91       	ld	r25, X
    3a38:	9c 83       	std	Y+4, r25	; 0x04
        if (start == stop){
    3a3a:	8e 17       	cp	r24, r30
    3a3c:	29 f0       	breq	.+10     	; 0x3a48 <parseCommands+0xa94>
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	e2 54       	subi	r30, 0x42	; 66
    3a42:	fd 4f       	sbci	r31, 0xFD	; 253
    3a44:	80 81       	ld	r24, Z
    3a46:	8d 83       	std	Y+5, r24	; 0x05
        if (start == stop){
           i = 5;
        }
    }
    return atoi(buf);
    3a48:	c5 01       	movw	r24, r10
    3a4a:	0e 94 0e 2a 	call	0x541c	; 0x541c <atoi>
            }
            else if (buffer[ring_read] == '2'){
                if (readAutoManualState() == AUTO){    
                    uint8_t succ = findParameter(':', ':', '\n', 20, &start, &stop);
                    if (succ == FIND_SUCCESS){
                        uint8_t asuccess = setAngleMotorLength(readInt16(start, stop));
    3a4e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <setAngleMotorLength>
    3a52:	98 2e       	mov	r9, r24
    3a54:	24 e1       	ldi	r18, 0x14	; 20
    3a56:	0e c0       	rjmp	.+28     	; 0x3a74 <parseCommands+0xac0>
}

//Start and Stop values are pointing to Global ring buffer
uint8_t findParameter(char startchar, char stopchar, char secondstopchar, uint8_t maxlength, uint8_t *start, uint8_t *stop){
    //Find correct start character
    while(buffer[ring_read] != startchar && ring_read != ring_write){ 
    3a58:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    3a5c:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    3a60:	98 17       	cp	r25, r24
    3a62:	81 f0       	breq	.+32     	; 0x3a84 <parseCommands+0xad0>
        ring_read++;
    3a64:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    3a68:	8f 5f       	subi	r24, 0xFF	; 255
    3a6a:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>
    3a6e:	21 50       	subi	r18, 0x01	; 1
        maxlength --;
        if (maxlength == 0){
    3a70:	09 f4       	brne	.+2      	; 0x3a74 <parseCommands+0xac0>
    3a72:	a4 cb       	rjmp	.-2232   	; 0x31bc <parseCommands+0x208>
}

//Start and Stop values are pointing to Global ring buffer
uint8_t findParameter(char startchar, char stopchar, char secondstopchar, uint8_t maxlength, uint8_t *start, uint8_t *stop){
    //Find correct start character
    while(buffer[ring_read] != startchar && ring_read != ring_write){ 
    3a74:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3a78:	f0 e0       	ldi	r31, 0x00	; 0
    3a7a:	e2 54       	subi	r30, 0x42	; 66
    3a7c:	fd 4f       	sbci	r31, 0xFD	; 253
    3a7e:	80 81       	ld	r24, Z
    3a80:	8a 33       	cpi	r24, 0x3A	; 58
    3a82:	51 f7       	brne	.-44     	; 0x3a58 <parseCommands+0xaa4>
        maxlength --;
        if (maxlength == 0){
            return ERROR_MAX_LENGTH;
        }
    }
    if (ring_read == ring_write){
    3a84:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    3a88:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <ring_write>
    3a8c:	98 17       	cp	r25, r24
    3a8e:	09 f4       	brne	.+2      	; 0x3a92 <parseCommands+0xade>
    3a90:	95 cb       	rjmp	.-2262   	; 0x31bc <parseCommands+0x208>
        return ERROR_CANNOT_FIND;
    }

    ring_read++; ///Next character is what we are looking for
    3a92:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    3a96:	8f 5f       	subi	r24, 0xFF	; 255
    3a98:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

    //Find stop character
    *start = ring_read;
    3a9c:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <ring_read>
    3aa0:	0d c0       	rjmp	.+26     	; 0x3abc <parseCommands+0xb08>
    while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimiter or end of line
    3aa2:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	e2 54       	subi	r30, 0x42	; 66
    3aaa:	fd 4f       	sbci	r31, 0xFD	; 253
    3aac:	80 81       	ld	r24, Z
    3aae:	8a 30       	cpi	r24, 0x0A	; 10
    3ab0:	69 f0       	breq	.+26     	; 0x3acc <parseCommands+0xb18>
        ring_read++; //Step forward
    3ab2:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
    3ab6:	8f 5f       	subi	r24, 0xFF	; 255
    3ab8:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <ring_read>

    ring_read++; ///Next character is what we are looking for

    //Find stop character
    *start = ring_read;
    while(buffer[ring_read] != stopchar && buffer[ring_read] != secondstopchar){ //Find next delimiter or end of line
    3abc:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ring_read>
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	e2 54       	subi	r30, 0x42	; 66
    3ac4:	fd 4f       	sbci	r31, 0xFD	; 253
    3ac6:	80 81       	ld	r24, Z
    3ac8:	8a 33       	cpi	r24, 0x3A	; 58
    3aca:	59 f7       	brne	.-42     	; 0x3aa2 <parseCommands+0xaee>
        ring_read++; //Step forward
    }
    *stop = ring_read;
    3acc:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <ring_read>
/*
    Reads 16 bit int from ringbuffer. 
    Function must be used because serial data is stored in to ring buffer
*/
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    3ad0:	25 e0       	ldi	r18, 0x05	; 5
    3ad2:	f5 01       	movw	r30, r10
    3ad4:	11 92       	st	Z+, r1
    3ad6:	2a 95       	dec	r18
    3ad8:	e9 f7       	brne	.-6      	; 0x3ad4 <parseCommands+0xb20>
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    3ada:	a1 e0       	ldi	r26, 0x01	; 1
    3adc:	a9 0f       	add	r26, r25
    3ade:	e9 2f       	mov	r30, r25
    3ae0:	f0 e0       	ldi	r31, 0x00	; 0
    3ae2:	e2 54       	subi	r30, 0x42	; 66
    3ae4:	fd 4f       	sbci	r31, 0xFD	; 253
    3ae6:	20 81       	ld	r18, Z
    3ae8:	29 83       	std	Y+1, r18	; 0x01
        if (start == stop){
    3aea:	8a 17       	cp	r24, r26
    3aec:	01 f1       	breq	.+64     	; 0x3b2e <parseCommands+0xb7a>
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    3aee:	e2 e0       	ldi	r30, 0x02	; 2
    3af0:	e9 0f       	add	r30, r25
    3af2:	b0 e0       	ldi	r27, 0x00	; 0
    3af4:	a2 54       	subi	r26, 0x42	; 66
    3af6:	bd 4f       	sbci	r27, 0xFD	; 253
    3af8:	2c 91       	ld	r18, X
    3afa:	2a 83       	std	Y+2, r18	; 0x02
        if (start == stop){
    3afc:	8e 17       	cp	r24, r30
    3afe:	b9 f0       	breq	.+46     	; 0x3b2e <parseCommands+0xb7a>
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    3b00:	a3 e0       	ldi	r26, 0x03	; 3
    3b02:	a9 0f       	add	r26, r25
    3b04:	f0 e0       	ldi	r31, 0x00	; 0
    3b06:	e2 54       	subi	r30, 0x42	; 66
    3b08:	fd 4f       	sbci	r31, 0xFD	; 253
    3b0a:	20 81       	ld	r18, Z
    3b0c:	2b 83       	std	Y+3, r18	; 0x03
        if (start == stop){
    3b0e:	8a 17       	cp	r24, r26
    3b10:	71 f0       	breq	.+28     	; 0x3b2e <parseCommands+0xb7a>
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    3b12:	e4 e0       	ldi	r30, 0x04	; 4
    3b14:	e9 0f       	add	r30, r25
    3b16:	b0 e0       	ldi	r27, 0x00	; 0
    3b18:	a2 54       	subi	r26, 0x42	; 66
    3b1a:	bd 4f       	sbci	r27, 0xFD	; 253
    3b1c:	9c 91       	ld	r25, X
    3b1e:	9c 83       	std	Y+4, r25	; 0x04
        if (start == stop){
    3b20:	8e 17       	cp	r24, r30
    3b22:	29 f0       	breq	.+10     	; 0x3b2e <parseCommands+0xb7a>
uint16_t readInt16(uint8_t start, uint8_t stop){
    char buf[5] = {'\0','\0','\0','\0','\0'};
    
    //clearBuffer(buf,5);
    for (uint8_t i=0; i<5; i++){
        buf[i] = buffer[start++];
    3b24:	f0 e0       	ldi	r31, 0x00	; 0
    3b26:	e2 54       	subi	r30, 0x42	; 66
    3b28:	fd 4f       	sbci	r31, 0xFD	; 253
    3b2a:	80 81       	ld	r24, Z
    3b2c:	8d 83       	std	Y+5, r24	; 0x05
        if (start == stop){
           i = 5;
        }
    }
    return atoi(buf);
    3b2e:	c5 01       	movw	r24, r10
    3b30:	0e 94 0e 2a 	call	0x541c	; 0x541c <atoi>
                    uint8_t succ = findParameter(':', ':', '\n', 20, &start, &stop);
                    if (succ == FIND_SUCCESS){
                        uint8_t asuccess = setAngleMotorLength(readInt16(start, stop));
                        succ = findParameter(':', ':', '\n', 20, &start, &stop);
                        if (succ == FIND_SUCCESS){
                            uint8_t tsuccess = setTiltMotorLength(readInt16(start, stop));
    3b34:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <setTiltMotorLength>
                            if (asuccess == 0 && tsuccess == 0){
    3b38:	91 10       	cpse	r9, r1
    3b3a:	1c cb       	rjmp	.-2504   	; 0x3174 <parseCommands+0x1c0>
    3b3c:	81 11       	cpse	r24, r1
    3b3e:	1a cb       	rjmp	.-2508   	; 0x3174 <parseCommands+0x1c0>
                                fprintf_P(port, PSTR("OK\n"));
    3b40:	8f e7       	ldi	r24, 0x7F	; 127
    3b42:	92 e0       	ldi	r25, 0x02	; 2
    3b44:	24 cc       	rjmp	.-1976   	; 0x338e <parseCommands+0x3da>
            }
            else if (value == '8'){
                fprintf(port, "G8:%d:%d\n",getAngleActuatorSetLength(), getTiltActuatorSetLength());
            }
            else if (value == '9'){
                fprintf(port, "G9:%5.2f:%5.2f\n", getAngleMotorAVGcurrent(), getTiltMotorAVGcurrent());
    3b46:	0e 94 4a 09 	call	0x1294	; 0x1294 <getTiltMotorAVGcurrent>
    3b4a:	96 2e       	mov	r9, r22
    3b4c:	87 2e       	mov	r8, r23
    3b4e:	78 2e       	mov	r7, r24
    3b50:	69 2e       	mov	r6, r25
    3b52:	0e 94 53 09 	call	0x12a6	; 0x12a6 <getAngleMotorAVGcurrent>
    3b56:	6f 92       	push	r6
    3b58:	7f 92       	push	r7
    3b5a:	8f 92       	push	r8
    3b5c:	9f 92       	push	r9
    3b5e:	9f 93       	push	r25
    3b60:	8f 93       	push	r24
    3b62:	7f 93       	push	r23
    3b64:	6f 93       	push	r22
    3b66:	a8 e5       	ldi	r26, 0x58	; 88
    3b68:	b2 e0       	ldi	r27, 0x02	; 2
    3b6a:	14 cd       	rjmp	.-1496   	; 0x3594 <parseCommands+0x5e0>

00003b6c <__vector_18>:
__attribute__((always_inline)) inline static void clearBuffer(volatile char *buffer,uint8_t len){
	for(uint8_t i=0;i<len;i++){	*buffer++ = '\0';}
}

ISR(USART_RX_vect) //Serial port to Host machine
{
    3b6c:	1f 92       	push	r1
    3b6e:	0f 92       	push	r0
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	0f 92       	push	r0
    3b74:	11 24       	eor	r1, r1
    3b76:	2f 93       	push	r18
    3b78:	3f 93       	push	r19
    3b7a:	4f 93       	push	r20
    3b7c:	5f 93       	push	r21
    3b7e:	6f 93       	push	r22
    3b80:	7f 93       	push	r23
    3b82:	8f 93       	push	r24
    3b84:	9f 93       	push	r25
    3b86:	af 93       	push	r26
    3b88:	bf 93       	push	r27
    3b8a:	ef 93       	push	r30
    3b8c:	ff 93       	push	r31
    3b8e:	cf 93       	push	r28
    3b90:	df 93       	push	r29
    3b92:	1f 92       	push	r1
    3b94:	cd b7       	in	r28, 0x3d	; 61
    3b96:	de b7       	in	r29, 0x3e	; 62
#include <avr/io.h>	

#define USART_FREQ 16000000UL

__attribute__((always_inline)) inline static uint8_t USART_Receive0(void) {
	while ( !(UCSR0A & (1<<RXC0)) );
    3b98:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3b9c:	87 ff       	sbrs	r24, 7
    3b9e:	fc cf       	rjmp	.-8      	; 0x3b98 <__vector_18+0x2c>
	return UDR0;
    3ba0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	volatile char temp = USART_Receive0();
    3ba4:	89 83       	std	Y+1, r24	; 0x01
	buffer[ring_write++] = temp;
    3ba6:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <ring_write>
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	8e 0f       	add	r24, r30
    3bae:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <ring_write>
    3bb2:	f0 e0       	ldi	r31, 0x00	; 0
    3bb4:	89 81       	ldd	r24, Y+1	; 0x01
    3bb6:	e2 54       	subi	r30, 0x42	; 66
    3bb8:	fd 4f       	sbci	r31, 0xFD	; 253
    3bba:	80 83       	st	Z, r24
	if (temp == '\n' || temp == '\r'){
    3bbc:	89 81       	ldd	r24, Y+1	; 0x01
    3bbe:	8a 30       	cpi	r24, 0x0A	; 10
    3bc0:	b9 f0       	breq	.+46     	; 0x3bf0 <__vector_18+0x84>
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
    3bc4:	8d 30       	cpi	r24, 0x0D	; 13
    3bc6:	a1 f0       	breq	.+40     	; 0x3bf0 <__vector_18+0x84>
        parseCommands();
	}
}
    3bc8:	0f 90       	pop	r0
    3bca:	df 91       	pop	r29
    3bcc:	cf 91       	pop	r28
    3bce:	ff 91       	pop	r31
    3bd0:	ef 91       	pop	r30
    3bd2:	bf 91       	pop	r27
    3bd4:	af 91       	pop	r26
    3bd6:	9f 91       	pop	r25
    3bd8:	8f 91       	pop	r24
    3bda:	7f 91       	pop	r23
    3bdc:	6f 91       	pop	r22
    3bde:	5f 91       	pop	r21
    3be0:	4f 91       	pop	r20
    3be2:	3f 91       	pop	r19
    3be4:	2f 91       	pop	r18
    3be6:	0f 90       	pop	r0
    3be8:	0f be       	out	0x3f, r0	; 63
    3bea:	0f 90       	pop	r0
    3bec:	1f 90       	pop	r1
    3bee:	18 95       	reti
ISR(USART_RX_vect) //Serial port to Host machine
{
	volatile char temp = USART_Receive0();
	buffer[ring_write++] = temp;
	if (temp == '\n' || temp == '\r'){
        parseCommands();
    3bf0:	e1 d9       	rcall	.-3134   	; 0x2fb4 <parseCommands>
    3bf2:	ea cf       	rjmp	.-44     	; 0x3bc8 <__vector_18+0x5c>

00003bf4 <initButtons>:
#define TURN_RIGHT_PORT PORTD
#define TURN_RIGHT_INPUT PIND
#define TURN_RIGHT_PIN 4

void initButtons(void){
    AUTO_MANUAL_SWITCH_DIR &= ~(1<<AUTO_MANUAL_SWITCH_PIN); //Input
    3bf4:	52 98       	cbi	0x0a, 2	; 10
    AUTO_MANUAL_SWITCH_PORT &= ~(1<<AUTO_MANUAL_SWITCH_PIN); //Pulldown
    3bf6:	5a 98       	cbi	0x0b, 2	; 11
    
    TILT_UP_DIR &= ~(1<<TILT_UP_PIN); //Input
    3bf8:	22 98       	cbi	0x04, 2	; 4
    TILT_UP_PORT &= ~(1<<TILT_UP_PIN); //Pulldown
    3bfa:	2a 98       	cbi	0x05, 2	; 5
    
    TILT_DOWN_DIR &= ~(1<<TILT_DOWN_PIN); //Input
    3bfc:	21 98       	cbi	0x04, 1	; 4
    TILT_DOWN_PORT &= ~(1<<TILT_DOWN_PIN); //Pulldown
    3bfe:	29 98       	cbi	0x05, 1	; 5
    
    TURN_LEFT_DIR &= ~(1<<TURN_LEFT_PIN); //Input
    3c00:	20 98       	cbi	0x04, 0	; 4
    TURN_LEFT_PORT &= ~(1<<TURN_LEFT_PIN); //Pulldown
    3c02:	28 98       	cbi	0x05, 0	; 5
    
    TURN_RIGHT_DIR &= ~(1<<TURN_RIGHT_PIN); //Input
    3c04:	54 98       	cbi	0x0a, 4	; 10
    TURN_RIGHT_PORT &= ~(1<<TURN_RIGHT_PIN); //Pulldown   
    3c06:	5c 98       	cbi	0x0b, 4	; 11
    3c08:	08 95       	ret

00003c0a <readAutoManualState>:
}

uint8_t readAutoManualState(void){
    if (AUTO_MANUAL_SWITCH_INPUT & (1<<AUTO_MANUAL_SWITCH_PIN)){
    3c0a:	89 b1       	in	r24, 0x09	; 9
        return 1;
    }
    else{
        return 0;
    }
}
    3c0c:	82 fb       	bst	r24, 2
    3c0e:	88 27       	eor	r24, r24
    3c10:	80 f9       	bld	r24, 0
    3c12:	08 95       	ret

00003c14 <readTiltButtonState>:

uint8_t readTiltButtonState(void){
    if (TILT_UP_INPUT & (1<<TILT_UP_PIN)){
    3c14:	1a 99       	sbic	0x03, 2	; 3
    3c16:	08 c0       	rjmp	.+16     	; 0x3c28 <readTiltButtonState+0x14>
        return 1;
    }
    else if (TILT_DOWN_INPUT & (1<<TILT_DOWN_PIN)){
    3c18:	93 b1       	in	r25, 0x03	; 3
    3c1a:	89 2f       	mov	r24, r25
    3c1c:	82 70       	andi	r24, 0x02	; 2
    3c1e:	91 ff       	sbrs	r25, 1
    3c20:	02 c0       	rjmp	.+4      	; 0x3c26 <readTiltButtonState+0x12>
        return 2;
    3c22:	82 e0       	ldi	r24, 0x02	; 2
    }
    else{
        return 0;
    }
}
    3c24:	08 95       	ret
    3c26:	08 95       	ret
    }
}

uint8_t readTiltButtonState(void){
    if (TILT_UP_INPUT & (1<<TILT_UP_PIN)){
        return 1;
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	08 95       	ret

00003c2c <readTurnButtonState>:
    3c2c:	18 99       	sbic	0x03, 0	; 3
    3c2e:	08 c0       	rjmp	.+16     	; 0x3c40 <readTurnButtonState+0x14>
    3c30:	99 b1       	in	r25, 0x09	; 9
    3c32:	89 2f       	mov	r24, r25
    3c34:	80 71       	andi	r24, 0x10	; 16
    3c36:	94 ff       	sbrs	r25, 4
    3c38:	02 c0       	rjmp	.+4      	; 0x3c3e <readTurnButtonState+0x12>
    3c3a:	82 e0       	ldi	r24, 0x02	; 2
    3c3c:	08 95       	ret
    3c3e:	08 95       	ret
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	08 95       	ret

00003c44 <main>:
}
int main (int argc, char *argv[])
{
    3c44:	a0 e0       	ldi	r26, 0x00	; 0
    3c46:	b0 e0       	ldi	r27, 0x00	; 0
    3c48:	e8 e2       	ldi	r30, 0x28	; 40
    3c4a:	fe e1       	ldi	r31, 0x1E	; 30
    3c4c:	0c 94 de 29 	jmp	0x53bc	; 0x53bc <__prologue_saves__+0x14>
    3c50:	2f ef       	ldi	r18, 0xFF	; 255
    3c52:	39 e6       	ldi	r19, 0x69	; 105
    3c54:	88 e1       	ldi	r24, 0x18	; 24
    3c56:	21 50       	subi	r18, 0x01	; 1
    3c58:	30 40       	sbci	r19, 0x00	; 0
    3c5a:	80 40       	sbci	r24, 0x00	; 0
    3c5c:	e1 f7       	brne	.-8      	; 0x3c56 <main+0x12>
    3c5e:	00 c0       	rjmp	.+0      	; 0x3c60 <main+0x1c>
    3c60:	00 00       	nop
    _delay_ms(500);
	USART_Init(&port, 115200);
    3c62:	40 e0       	ldi	r20, 0x00	; 0
    3c64:	52 ec       	ldi	r21, 0xC2	; 194
    3c66:	61 e0       	ldi	r22, 0x01	; 1
    3c68:	70 e0       	ldi	r23, 0x00	; 0
    3c6a:	80 eb       	ldi	r24, 0xB0	; 176
    3c6c:	92 e0       	ldi	r25, 0x02	; 2
    3c6e:	0e 94 98 01 	call	0x330	; 0x330 <USART_Init>
	USART0_Flush();
    3c72:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <USART0_Flush>
#define DISABLE_LED LED_PORT &= ~(1<<LED_PIN_NUM);
#define ENABLE_LED LED_PORT |= (1<<LED_PIN_NUM);
#define TOGGLE_LED LED_PORT ^= (1<<LED_PIN_NUM);

void initLED(void){
    LED_DDR |= (1<<LED_PIN_NUM); 
    3c76:	25 9a       	sbi	0x04, 5	; 4
{
    _delay_ms(500);
	USART_Init(&port, 115200);
	USART0_Flush();
    initLED();
    initADC();
    3c78:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <initADC>
    initMotor(&port);
    3c7c:	80 eb       	ldi	r24, 0xB0	; 176
    3c7e:	92 e0       	ldi	r25, 0x02	; 2
    3c80:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <initMotor>
	initSerialParser(&port);
    3c84:	80 eb       	ldi	r24, 0xB0	; 176
    3c86:	92 e0       	ldi	r25, 0x02	; 2
    3c88:	6b d8       	rcall	.-3882   	; 0x2d60 <initSerialParser>
    initButtons();    
    3c8a:	b4 df       	rcall	.-152    	; 0x3bf4 <initButtons>
    //    uint16_t len = 
    //    fprintf(&port, "Len:%d, angle:%f\n",tiltDegToLength(i),i);
    //}
    //while(1){}
    
    GTCCR = 0x00;
    3c8c:	13 bc       	out	0x23, r1	; 35
    sei();
    3c8e:	78 94       	sei

    uint8_t current_mode = readAutoManualState();
    3c90:	bc df       	rcall	.-136    	; 0x3c0a <readAutoManualState>
    3c92:	c8 2f       	mov	r28, r24
    fprintf(&port, "G6:%d:%d:%d\n",readAutoManualState(), readTiltButtonState(), readTurnButtonState());
    3c94:	cb df       	rcall	.-106    	; 0x3c2c <readTurnButtonState>
    3c96:	18 2f       	mov	r17, r24
    3c98:	bd df       	rcall	.-134    	; 0x3c14 <readTiltButtonState>
    3c9a:	d8 2f       	mov	r29, r24
    3c9c:	b6 df       	rcall	.-148    	; 0x3c0a <readAutoManualState>
    3c9e:	1f 92       	push	r1
    3ca0:	1f 93       	push	r17
    3ca2:	1f 92       	push	r1
    3ca4:	df 93       	push	r29
    3ca6:	1f 92       	push	r1
    3ca8:	8f 93       	push	r24
    3caa:	87 ed       	ldi	r24, 0xD7	; 215
    3cac:	91 e0       	ldi	r25, 0x01	; 1
    3cae:	9f 93       	push	r25
    3cb0:	8f 93       	push	r24
    3cb2:	80 eb       	ldi	r24, 0xB0	; 176
    3cb4:	92 e0       	ldi	r25, 0x02	; 2
    3cb6:	9f 93       	push	r25
    3cb8:	8f 93       	push	r24
    3cba:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
    3cbe:	2d b7       	in	r18, 0x3d	; 61
    3cc0:	3e b7       	in	r19, 0x3e	; 62
    3cc2:	26 5f       	subi	r18, 0xF6	; 246
    3cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc6:	0f b6       	in	r0, 0x3f	; 63
    3cc8:	f8 94       	cli
    3cca:	3e bf       	out	0x3e, r19	; 62
    3ccc:	0f be       	out	0x3f, r0	; 63
    3cce:	2d bf       	out	0x3d, r18	; 61
                    break;
                }
            }
        }
        else{
             TOGGLE_LED
    3cd0:	d0 e2       	ldi	r29, 0x20	; 32
                    break;
                }
            }
            switch(readTurnButtonState()){
                case 1:{
                    fprintf(&port, "G6:%d:%d:%d\n",readAutoManualState(), readTiltButtonState(), readTurnButtonState());
    3cd2:	87 ed       	ldi	r24, 0xD7	; 215
    3cd4:	e8 2e       	mov	r14, r24
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	f8 2e       	mov	r15, r24
    3cda:	00 eb       	ldi	r16, 0xB0	; 176
    3cdc:	12 e0       	ldi	r17, 0x02	; 2
    3cde:	06 c0       	rjmp	.+12     	; 0x3cec <main+0xa8>
                    break;
                }
            }
        }
        else{
             TOGGLE_LED
    3ce0:	95 b1       	in	r25, 0x05	; 5
    3ce2:	9d 27       	eor	r25, r29
    3ce4:	95 b9       	out	0x05, r25	; 5
        }

        if (current_mode != readAutoManualState()){
    3ce6:	91 df       	rcall	.-222    	; 0x3c0a <readAutoManualState>
    3ce8:	8c 13       	cpse	r24, r28
    3cea:	60 c0       	rjmp	.+192    	; 0x3dac <main+0x168>
    sei();

    uint8_t current_mode = readAutoManualState();
    fprintf(&port, "G6:%d:%d:%d\n",readAutoManualState(), readTiltButtonState(), readTurnButtonState());
    while(1){
        setLengthLoop();
    3cec:	0e 94 b3 13 	call	0x2766	; 0x2766 <setLengthLoop>
        
        if (readAutoManualState() == MANUAL){ 
    3cf0:	8c df       	rcall	.-232    	; 0x3c0a <readAutoManualState>
    3cf2:	81 11       	cpse	r24, r1
    3cf4:	f5 cf       	rjmp	.-22     	; 0x3ce0 <main+0x9c>
            switch(readTiltButtonState()){
    3cf6:	8e df       	rcall	.-228    	; 0x3c14 <readTiltButtonState>
    3cf8:	81 30       	cpi	r24, 0x01	; 1
    3cfa:	09 f4       	brne	.+2      	; 0x3cfe <main+0xba>
    3cfc:	7a c0       	rjmp	.+244    	; 0x3df2 <main+0x1ae>
    3cfe:	82 30       	cpi	r24, 0x02	; 2
    3d00:	29 f5       	brne	.+74     	; 0x3d4c <main+0x108>
                    setAngleMotorLength(getAngleActuatorSetLength()+5);
                    while(readTiltButtonState() != 0){setLengthLoop();} //Wait until button is released
                    break;
                }
                case 2:{
                    fprintf(&port, "G6:%d:%d:%d\n",readAutoManualState(), readTiltButtonState(), readTurnButtonState());
    3d02:	94 df       	rcall	.-216    	; 0x3c2c <readTurnButtonState>
    3d04:	c8 2e       	mov	r12, r24
    3d06:	86 df       	rcall	.-244    	; 0x3c14 <readTiltButtonState>
    3d08:	d8 2e       	mov	r13, r24
    3d0a:	7f df       	rcall	.-258    	; 0x3c0a <readAutoManualState>
    3d0c:	1f 92       	push	r1
    3d0e:	cf 92       	push	r12
    3d10:	1f 92       	push	r1
    3d12:	df 92       	push	r13
    3d14:	1f 92       	push	r1
    3d16:	8f 93       	push	r24
    3d18:	ff 92       	push	r15
    3d1a:	ef 92       	push	r14
    3d1c:	1f 93       	push	r17
    3d1e:	0f 93       	push	r16
    3d20:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
                    setAngleMotorLength(getAngleActuatorSetLength()-5);
    3d24:	0e 94 13 05 	call	0xa26	; 0xa26 <getAngleActuatorSetLength>
    3d28:	05 97       	sbiw	r24, 0x05	; 5
    3d2a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <setAngleMotorLength>
                    while(readTiltButtonState() != 0){setLengthLoop();} //Wait until button is released
    3d2e:	2d b7       	in	r18, 0x3d	; 61
    3d30:	3e b7       	in	r19, 0x3e	; 62
    3d32:	26 5f       	subi	r18, 0xF6	; 246
    3d34:	3f 4f       	sbci	r19, 0xFF	; 255
    3d36:	0f b6       	in	r0, 0x3f	; 63
    3d38:	f8 94       	cli
    3d3a:	3e bf       	out	0x3e, r19	; 62
    3d3c:	0f be       	out	0x3f, r0	; 63
    3d3e:	2d bf       	out	0x3d, r18	; 61
    3d40:	02 c0       	rjmp	.+4      	; 0x3d46 <main+0x102>
    3d42:	0e 94 b3 13 	call	0x2766	; 0x2766 <setLengthLoop>
    3d46:	66 df       	rcall	.-308    	; 0x3c14 <readTiltButtonState>
    3d48:	81 11       	cpse	r24, r1
    3d4a:	fb cf       	rjmp	.-10     	; 0x3d42 <main+0xfe>
                    break;
                }
            }
            switch(readTurnButtonState()){
    3d4c:	6f df       	rcall	.-290    	; 0x3c2c <readTurnButtonState>
    3d4e:	81 30       	cpi	r24, 0x01	; 1
    3d50:	09 f4       	brne	.+2      	; 0x3d54 <main+0x110>
    3d52:	77 c0       	rjmp	.+238    	; 0x3e42 <main+0x1fe>
    3d54:	82 30       	cpi	r24, 0x02	; 2
    3d56:	09 f0       	breq	.+2      	; 0x3d5a <main+0x116>
    3d58:	c6 cf       	rjmp	.-116    	; 0x3ce6 <main+0xa2>
                    setTiltMotorLength(getTiltActuatorSetLength()+5);
                    while(readTurnButtonState() != 0){setLengthLoop();} //Wait until button is released
                    break;
                }
                case 2:{
                    fprintf(&port, "G6:%d:%d:%d\n",readAutoManualState(), readTiltButtonState(), readTurnButtonState());
    3d5a:	68 df       	rcall	.-304    	; 0x3c2c <readTurnButtonState>
    3d5c:	c8 2e       	mov	r12, r24
    3d5e:	5a df       	rcall	.-332    	; 0x3c14 <readTiltButtonState>
    3d60:	d8 2e       	mov	r13, r24
    3d62:	53 df       	rcall	.-346    	; 0x3c0a <readAutoManualState>
    3d64:	1f 92       	push	r1
    3d66:	cf 92       	push	r12
    3d68:	1f 92       	push	r1
    3d6a:	df 92       	push	r13
    3d6c:	1f 92       	push	r1
    3d6e:	8f 93       	push	r24
    3d70:	ff 92       	push	r15
    3d72:	ef 92       	push	r14
    3d74:	1f 93       	push	r17
    3d76:	0f 93       	push	r16
    3d78:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
                    setTiltMotorLength(getTiltActuatorSetLength()-5);
    3d7c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <getTiltActuatorSetLength>
    3d80:	05 97       	sbiw	r24, 0x05	; 5
    3d82:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <setTiltMotorLength>
                    while(readTurnButtonState() != 0){setLengthLoop();} //Wait until button is released
    3d86:	2d b7       	in	r18, 0x3d	; 61
    3d88:	3e b7       	in	r19, 0x3e	; 62
    3d8a:	26 5f       	subi	r18, 0xF6	; 246
    3d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8e:	0f b6       	in	r0, 0x3f	; 63
    3d90:	f8 94       	cli
    3d92:	3e bf       	out	0x3e, r19	; 62
    3d94:	0f be       	out	0x3f, r0	; 63
    3d96:	2d bf       	out	0x3d, r18	; 61
    3d98:	02 c0       	rjmp	.+4      	; 0x3d9e <main+0x15a>
    3d9a:	0e 94 b3 13 	call	0x2766	; 0x2766 <setLengthLoop>
    3d9e:	46 df       	rcall	.-372    	; 0x3c2c <readTurnButtonState>
    3da0:	81 11       	cpse	r24, r1
    3da2:	fb cf       	rjmp	.-10     	; 0x3d9a <main+0x156>
        }
        else{
             TOGGLE_LED
        }

        if (current_mode != readAutoManualState()){
    3da4:	32 df       	rcall	.-412    	; 0x3c0a <readAutoManualState>
    3da6:	8c 17       	cp	r24, r28
    3da8:	09 f4       	brne	.+2      	; 0x3dac <main+0x168>
    3daa:	a0 cf       	rjmp	.-192    	; 0x3cec <main+0xa8>
            fprintf(&port, "G6:%d:%d:%d\n",readAutoManualState(), readTiltButtonState(), readTurnButtonState());
    3dac:	3f df       	rcall	.-386    	; 0x3c2c <readTurnButtonState>
    3dae:	d8 2e       	mov	r13, r24
    3db0:	31 df       	rcall	.-414    	; 0x3c14 <readTiltButtonState>
    3db2:	c8 2f       	mov	r28, r24
    3db4:	2a df       	rcall	.-428    	; 0x3c0a <readAutoManualState>
    3db6:	1f 92       	push	r1
    3db8:	df 92       	push	r13
    3dba:	1f 92       	push	r1
    3dbc:	cf 93       	push	r28
    3dbe:	1f 92       	push	r1
    3dc0:	8f 93       	push	r24
    3dc2:	ff 92       	push	r15
    3dc4:	ef 92       	push	r14
    3dc6:	1f 93       	push	r17
    3dc8:	0f 93       	push	r16
    3dca:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
            if (readAutoManualState() == 1){
    3dce:	1d df       	rcall	.-454    	; 0x3c0a <readAutoManualState>
               // fprintf(&port, "Automatic mode turned ON\n");
                current_mode = 1;
    3dd0:	c1 e0       	ldi	r28, 0x01	; 1
             TOGGLE_LED
        }

        if (current_mode != readAutoManualState()){
            fprintf(&port, "G6:%d:%d:%d\n",readAutoManualState(), readTiltButtonState(), readTurnButtonState());
            if (readAutoManualState() == 1){
    3dd2:	2d b7       	in	r18, 0x3d	; 61
    3dd4:	3e b7       	in	r19, 0x3e	; 62
    3dd6:	26 5f       	subi	r18, 0xF6	; 246
    3dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dda:	0f b6       	in	r0, 0x3f	; 63
    3ddc:	f8 94       	cli
    3dde:	3e bf       	out	0x3e, r19	; 62
    3de0:	0f be       	out	0x3f, r0	; 63
    3de2:	2d bf       	out	0x3d, r18	; 61
    3de4:	81 30       	cpi	r24, 0x01	; 1
    3de6:	09 f4       	brne	.+2      	; 0x3dea <main+0x1a6>
    3de8:	81 cf       	rjmp	.-254    	; 0x3cec <main+0xa8>
                current_mode = 1;
            }
            else{
               // fprintf(&port, "Manual mode Activated\n");
                current_mode = 0;
                shutdownMotors();
    3dea:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <shutdownMotors>
               // fprintf(&port, "Automatic mode turned ON\n");
                current_mode = 1;
            }
            else{
               // fprintf(&port, "Manual mode Activated\n");
                current_mode = 0;
    3dee:	c0 e0       	ldi	r28, 0x00	; 0
    3df0:	7d cf       	rjmp	.-262    	; 0x3cec <main+0xa8>
        setLengthLoop();
        
        if (readAutoManualState() == MANUAL){ 
            switch(readTiltButtonState()){
                case 1:{
                    fprintf(&port, "G6:%d:%d:%d\n",readAutoManualState(), readTiltButtonState(), readTurnButtonState());
    3df2:	1c df       	rcall	.-456    	; 0x3c2c <readTurnButtonState>
    3df4:	c8 2e       	mov	r12, r24
    3df6:	0e df       	rcall	.-484    	; 0x3c14 <readTiltButtonState>
    3df8:	d8 2e       	mov	r13, r24
    3dfa:	07 df       	rcall	.-498    	; 0x3c0a <readAutoManualState>
    3dfc:	1f 92       	push	r1
    3dfe:	cf 92       	push	r12
    3e00:	1f 92       	push	r1
    3e02:	df 92       	push	r13
    3e04:	1f 92       	push	r1
    3e06:	8f 93       	push	r24
    3e08:	ff 92       	push	r15
    3e0a:	ef 92       	push	r14
    3e0c:	1f 93       	push	r17
    3e0e:	0f 93       	push	r16
    3e10:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
                    setAngleMotorLength(getAngleActuatorSetLength()+5);
    3e14:	0e 94 13 05 	call	0xa26	; 0xa26 <getAngleActuatorSetLength>
    3e18:	05 96       	adiw	r24, 0x05	; 5
    3e1a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <setAngleMotorLength>
                    while(readTiltButtonState() != 0){setLengthLoop();} //Wait until button is released
    3e1e:	8d b7       	in	r24, 0x3d	; 61
    3e20:	9e b7       	in	r25, 0x3e	; 62
    3e22:	0a 96       	adiw	r24, 0x0a	; 10
    3e24:	0f b6       	in	r0, 0x3f	; 63
    3e26:	f8 94       	cli
    3e28:	9e bf       	out	0x3e, r25	; 62
    3e2a:	0f be       	out	0x3f, r0	; 63
    3e2c:	8d bf       	out	0x3d, r24	; 61
    3e2e:	02 c0       	rjmp	.+4      	; 0x3e34 <main+0x1f0>
    3e30:	0e 94 b3 13 	call	0x2766	; 0x2766 <setLengthLoop>
    3e34:	ef de       	rcall	.-546    	; 0x3c14 <readTiltButtonState>
    3e36:	81 11       	cpse	r24, r1
    3e38:	fb cf       	rjmp	.-10     	; 0x3e30 <main+0x1ec>
                    setAngleMotorLength(getAngleActuatorSetLength()-5);
                    while(readTiltButtonState() != 0){setLengthLoop();} //Wait until button is released
                    break;
                }
            }
            switch(readTurnButtonState()){
    3e3a:	f8 de       	rcall	.-528    	; 0x3c2c <readTurnButtonState>
    3e3c:	81 30       	cpi	r24, 0x01	; 1
    3e3e:	09 f0       	breq	.+2      	; 0x3e42 <main+0x1fe>
    3e40:	89 cf       	rjmp	.-238    	; 0x3d54 <main+0x110>
                case 1:{
                    fprintf(&port, "G6:%d:%d:%d\n",readAutoManualState(), readTiltButtonState(), readTurnButtonState());
    3e42:	f4 de       	rcall	.-536    	; 0x3c2c <readTurnButtonState>
    3e44:	c8 2e       	mov	r12, r24
    3e46:	e6 de       	rcall	.-564    	; 0x3c14 <readTiltButtonState>
    3e48:	d8 2e       	mov	r13, r24
    3e4a:	df de       	rcall	.-578    	; 0x3c0a <readAutoManualState>
    3e4c:	1f 92       	push	r1
    3e4e:	cf 92       	push	r12
    3e50:	1f 92       	push	r1
    3e52:	df 92       	push	r13
    3e54:	1f 92       	push	r1
    3e56:	8f 93       	push	r24
    3e58:	ff 92       	push	r15
    3e5a:	ef 92       	push	r14
    3e5c:	1f 93       	push	r17
    3e5e:	0f 93       	push	r16
    3e60:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <fprintf>
                    setTiltMotorLength(getTiltActuatorSetLength()+5);
    3e64:	0e 94 0e 05 	call	0xa1c	; 0xa1c <getTiltActuatorSetLength>
    3e68:	05 96       	adiw	r24, 0x05	; 5
    3e6a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <setTiltMotorLength>
                    while(readTurnButtonState() != 0){setLengthLoop();} //Wait until button is released
    3e6e:	8d b7       	in	r24, 0x3d	; 61
    3e70:	9e b7       	in	r25, 0x3e	; 62
    3e72:	0a 96       	adiw	r24, 0x0a	; 10
    3e74:	0f b6       	in	r0, 0x3f	; 63
    3e76:	f8 94       	cli
    3e78:	9e bf       	out	0x3e, r25	; 62
    3e7a:	0f be       	out	0x3f, r0	; 63
    3e7c:	8d bf       	out	0x3d, r24	; 61
    3e7e:	02 c0       	rjmp	.+4      	; 0x3e84 <main+0x240>
    3e80:	0e 94 b3 13 	call	0x2766	; 0x2766 <setLengthLoop>
    3e84:	d3 de       	rcall	.-602    	; 0x3c2c <readTurnButtonState>
    3e86:	81 11       	cpse	r24, r1
    3e88:	fb cf       	rjmp	.-10     	; 0x3e80 <main+0x23c>
    3e8a:	2d cf       	rjmp	.-422    	; 0x3ce6 <main+0xa2>

00003e8c <vfprintf>:
    3e8c:	a3 e1       	ldi	r26, 0x13	; 19
    3e8e:	b0 e0       	ldi	r27, 0x00	; 0
    3e90:	ec e4       	ldi	r30, 0x4C	; 76
    3e92:	ff e1       	ldi	r31, 0x1F	; 31
    3e94:	0c 94 d4 29 	jmp	0x53a8	; 0x53a8 <__prologue_saves__>
    3e98:	6c 01       	movw	r12, r24
    3e9a:	4b 01       	movw	r8, r22
    3e9c:	2a 01       	movw	r4, r20
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	17 82       	std	Z+7, r1	; 0x07
    3ea2:	16 82       	std	Z+6, r1	; 0x06
    3ea4:	83 81       	ldd	r24, Z+3	; 0x03
    3ea6:	81 ff       	sbrs	r24, 1
    3ea8:	43 c3       	rjmp	.+1670   	; 0x4530 <vfprintf+0x6a4>
    3eaa:	ae 01       	movw	r20, r28
    3eac:	4f 5f       	subi	r20, 0xFF	; 255
    3eae:	5f 4f       	sbci	r21, 0xFF	; 255
    3eb0:	3a 01       	movw	r6, r20
    3eb2:	f6 01       	movw	r30, r12
    3eb4:	93 81       	ldd	r25, Z+3	; 0x03
    3eb6:	f4 01       	movw	r30, r8
    3eb8:	93 fd       	sbrc	r25, 3
    3eba:	85 91       	lpm	r24, Z+
    3ebc:	93 ff       	sbrs	r25, 3
    3ebe:	81 91       	ld	r24, Z+
    3ec0:	4f 01       	movw	r8, r30
    3ec2:	88 23       	and	r24, r24
    3ec4:	09 f4       	brne	.+2      	; 0x3ec8 <vfprintf+0x3c>
    3ec6:	30 c3       	rjmp	.+1632   	; 0x4528 <vfprintf+0x69c>
    3ec8:	85 32       	cpi	r24, 0x25	; 37
    3eca:	39 f4       	brne	.+14     	; 0x3eda <vfprintf+0x4e>
    3ecc:	93 fd       	sbrc	r25, 3
    3ece:	85 91       	lpm	r24, Z+
    3ed0:	93 ff       	sbrs	r25, 3
    3ed2:	81 91       	ld	r24, Z+
    3ed4:	4f 01       	movw	r8, r30
    3ed6:	85 32       	cpi	r24, 0x25	; 37
    3ed8:	39 f4       	brne	.+14     	; 0x3ee8 <vfprintf+0x5c>
    3eda:	b6 01       	movw	r22, r12
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    3ee2:	52 01       	movw	r10, r4
    3ee4:	25 01       	movw	r4, r10
    3ee6:	e5 cf       	rjmp	.-54     	; 0x3eb2 <vfprintf+0x26>
    3ee8:	10 e0       	ldi	r17, 0x00	; 0
    3eea:	f1 2c       	mov	r15, r1
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	20 32       	cpi	r18, 0x20	; 32
    3ef0:	a0 f4       	brcc	.+40     	; 0x3f1a <vfprintf+0x8e>
    3ef2:	8b 32       	cpi	r24, 0x2B	; 43
    3ef4:	69 f0       	breq	.+26     	; 0x3f10 <vfprintf+0x84>
    3ef6:	30 f4       	brcc	.+12     	; 0x3f04 <vfprintf+0x78>
    3ef8:	80 32       	cpi	r24, 0x20	; 32
    3efa:	59 f0       	breq	.+22     	; 0x3f12 <vfprintf+0x86>
    3efc:	83 32       	cpi	r24, 0x23	; 35
    3efe:	69 f4       	brne	.+26     	; 0x3f1a <vfprintf+0x8e>
    3f00:	20 61       	ori	r18, 0x10	; 16
    3f02:	2c c0       	rjmp	.+88     	; 0x3f5c <vfprintf+0xd0>
    3f04:	8d 32       	cpi	r24, 0x2D	; 45
    3f06:	39 f0       	breq	.+14     	; 0x3f16 <vfprintf+0x8a>
    3f08:	80 33       	cpi	r24, 0x30	; 48
    3f0a:	39 f4       	brne	.+14     	; 0x3f1a <vfprintf+0x8e>
    3f0c:	21 60       	ori	r18, 0x01	; 1
    3f0e:	26 c0       	rjmp	.+76     	; 0x3f5c <vfprintf+0xd0>
    3f10:	22 60       	ori	r18, 0x02	; 2
    3f12:	24 60       	ori	r18, 0x04	; 4
    3f14:	23 c0       	rjmp	.+70     	; 0x3f5c <vfprintf+0xd0>
    3f16:	28 60       	ori	r18, 0x08	; 8
    3f18:	21 c0       	rjmp	.+66     	; 0x3f5c <vfprintf+0xd0>
    3f1a:	27 fd       	sbrc	r18, 7
    3f1c:	27 c0       	rjmp	.+78     	; 0x3f6c <vfprintf+0xe0>
    3f1e:	30 ed       	ldi	r19, 0xD0	; 208
    3f20:	38 0f       	add	r19, r24
    3f22:	3a 30       	cpi	r19, 0x0A	; 10
    3f24:	78 f4       	brcc	.+30     	; 0x3f44 <vfprintf+0xb8>
    3f26:	26 ff       	sbrs	r18, 6
    3f28:	06 c0       	rjmp	.+12     	; 0x3f36 <vfprintf+0xaa>
    3f2a:	fa e0       	ldi	r31, 0x0A	; 10
    3f2c:	1f 9f       	mul	r17, r31
    3f2e:	30 0d       	add	r19, r0
    3f30:	11 24       	eor	r1, r1
    3f32:	13 2f       	mov	r17, r19
    3f34:	13 c0       	rjmp	.+38     	; 0x3f5c <vfprintf+0xd0>
    3f36:	4a e0       	ldi	r20, 0x0A	; 10
    3f38:	f4 9e       	mul	r15, r20
    3f3a:	30 0d       	add	r19, r0
    3f3c:	11 24       	eor	r1, r1
    3f3e:	f3 2e       	mov	r15, r19
    3f40:	20 62       	ori	r18, 0x20	; 32
    3f42:	0c c0       	rjmp	.+24     	; 0x3f5c <vfprintf+0xd0>
    3f44:	8e 32       	cpi	r24, 0x2E	; 46
    3f46:	21 f4       	brne	.+8      	; 0x3f50 <vfprintf+0xc4>
    3f48:	26 fd       	sbrc	r18, 6
    3f4a:	ee c2       	rjmp	.+1500   	; 0x4528 <vfprintf+0x69c>
    3f4c:	20 64       	ori	r18, 0x40	; 64
    3f4e:	06 c0       	rjmp	.+12     	; 0x3f5c <vfprintf+0xd0>
    3f50:	8c 36       	cpi	r24, 0x6C	; 108
    3f52:	11 f4       	brne	.+4      	; 0x3f58 <vfprintf+0xcc>
    3f54:	20 68       	ori	r18, 0x80	; 128
    3f56:	02 c0       	rjmp	.+4      	; 0x3f5c <vfprintf+0xd0>
    3f58:	88 36       	cpi	r24, 0x68	; 104
    3f5a:	41 f4       	brne	.+16     	; 0x3f6c <vfprintf+0xe0>
    3f5c:	f4 01       	movw	r30, r8
    3f5e:	93 fd       	sbrc	r25, 3
    3f60:	85 91       	lpm	r24, Z+
    3f62:	93 ff       	sbrs	r25, 3
    3f64:	81 91       	ld	r24, Z+
    3f66:	4f 01       	movw	r8, r30
    3f68:	81 11       	cpse	r24, r1
    3f6a:	c1 cf       	rjmp	.-126    	; 0x3eee <vfprintf+0x62>
    3f6c:	9b eb       	ldi	r25, 0xBB	; 187
    3f6e:	98 0f       	add	r25, r24
    3f70:	93 30       	cpi	r25, 0x03	; 3
    3f72:	18 f4       	brcc	.+6      	; 0x3f7a <vfprintf+0xee>
    3f74:	20 61       	ori	r18, 0x10	; 16
    3f76:	80 5e       	subi	r24, 0xE0	; 224
    3f78:	06 c0       	rjmp	.+12     	; 0x3f86 <vfprintf+0xfa>
    3f7a:	9b e9       	ldi	r25, 0x9B	; 155
    3f7c:	98 0f       	add	r25, r24
    3f7e:	93 30       	cpi	r25, 0x03	; 3
    3f80:	08 f0       	brcs	.+2      	; 0x3f84 <vfprintf+0xf8>
    3f82:	71 c1       	rjmp	.+738    	; 0x4266 <vfprintf+0x3da>
    3f84:	2f 7e       	andi	r18, 0xEF	; 239
    3f86:	26 ff       	sbrs	r18, 6
    3f88:	16 e0       	ldi	r17, 0x06	; 6
    3f8a:	2f 73       	andi	r18, 0x3F	; 63
    3f8c:	32 2e       	mov	r3, r18
    3f8e:	85 36       	cpi	r24, 0x65	; 101
    3f90:	19 f4       	brne	.+6      	; 0x3f98 <vfprintf+0x10c>
    3f92:	20 64       	ori	r18, 0x40	; 64
    3f94:	32 2e       	mov	r3, r18
    3f96:	08 c0       	rjmp	.+16     	; 0x3fa8 <vfprintf+0x11c>
    3f98:	86 36       	cpi	r24, 0x66	; 102
    3f9a:	21 f4       	brne	.+8      	; 0x3fa4 <vfprintf+0x118>
    3f9c:	f2 2f       	mov	r31, r18
    3f9e:	f0 68       	ori	r31, 0x80	; 128
    3fa0:	3f 2e       	mov	r3, r31
    3fa2:	02 c0       	rjmp	.+4      	; 0x3fa8 <vfprintf+0x11c>
    3fa4:	11 11       	cpse	r17, r1
    3fa6:	11 50       	subi	r17, 0x01	; 1
    3fa8:	37 fe       	sbrs	r3, 7
    3faa:	07 c0       	rjmp	.+14     	; 0x3fba <vfprintf+0x12e>
    3fac:	1c 33       	cpi	r17, 0x3C	; 60
    3fae:	50 f4       	brcc	.+20     	; 0x3fc4 <vfprintf+0x138>
    3fb0:	ee 24       	eor	r14, r14
    3fb2:	e3 94       	inc	r14
    3fb4:	e1 0e       	add	r14, r17
    3fb6:	27 e0       	ldi	r18, 0x07	; 7
    3fb8:	0b c0       	rjmp	.+22     	; 0x3fd0 <vfprintf+0x144>
    3fba:	18 30       	cpi	r17, 0x08	; 8
    3fbc:	38 f0       	brcs	.+14     	; 0x3fcc <vfprintf+0x140>
    3fbe:	27 e0       	ldi	r18, 0x07	; 7
    3fc0:	17 e0       	ldi	r17, 0x07	; 7
    3fc2:	05 c0       	rjmp	.+10     	; 0x3fce <vfprintf+0x142>
    3fc4:	27 e0       	ldi	r18, 0x07	; 7
    3fc6:	4c e3       	ldi	r20, 0x3C	; 60
    3fc8:	e4 2e       	mov	r14, r20
    3fca:	02 c0       	rjmp	.+4      	; 0x3fd0 <vfprintf+0x144>
    3fcc:	21 2f       	mov	r18, r17
    3fce:	e1 2c       	mov	r14, r1
    3fd0:	52 01       	movw	r10, r4
    3fd2:	44 e0       	ldi	r20, 0x04	; 4
    3fd4:	a4 0e       	add	r10, r20
    3fd6:	b1 1c       	adc	r11, r1
    3fd8:	f2 01       	movw	r30, r4
    3fda:	60 81       	ld	r22, Z
    3fdc:	71 81       	ldd	r23, Z+1	; 0x01
    3fde:	82 81       	ldd	r24, Z+2	; 0x02
    3fe0:	93 81       	ldd	r25, Z+3	; 0x03
    3fe2:	0e 2d       	mov	r16, r14
    3fe4:	a3 01       	movw	r20, r6
    3fe6:	0e 94 2b 2a 	call	0x5456	; 0x5456 <__ftoa_engine>
    3fea:	2c 01       	movw	r4, r24
    3fec:	09 81       	ldd	r16, Y+1	; 0x01
    3fee:	00 ff       	sbrs	r16, 0
    3ff0:	02 c0       	rjmp	.+4      	; 0x3ff6 <vfprintf+0x16a>
    3ff2:	03 ff       	sbrs	r16, 3
    3ff4:	07 c0       	rjmp	.+14     	; 0x4004 <vfprintf+0x178>
    3ff6:	31 fc       	sbrc	r3, 1
    3ff8:	08 c0       	rjmp	.+16     	; 0x400a <vfprintf+0x17e>
    3ffa:	32 fe       	sbrs	r3, 2
    3ffc:	09 c0       	rjmp	.+18     	; 0x4010 <vfprintf+0x184>
    3ffe:	30 e2       	ldi	r19, 0x20	; 32
    4000:	23 2e       	mov	r2, r19
    4002:	07 c0       	rjmp	.+14     	; 0x4012 <vfprintf+0x186>
    4004:	2d e2       	ldi	r18, 0x2D	; 45
    4006:	22 2e       	mov	r2, r18
    4008:	04 c0       	rjmp	.+8      	; 0x4012 <vfprintf+0x186>
    400a:	9b e2       	ldi	r25, 0x2B	; 43
    400c:	29 2e       	mov	r2, r25
    400e:	01 c0       	rjmp	.+2      	; 0x4012 <vfprintf+0x186>
    4010:	21 2c       	mov	r2, r1
    4012:	80 2f       	mov	r24, r16
    4014:	8c 70       	andi	r24, 0x0C	; 12
    4016:	19 f0       	breq	.+6      	; 0x401e <vfprintf+0x192>
    4018:	21 10       	cpse	r2, r1
    401a:	68 c2       	rjmp	.+1232   	; 0x44ec <vfprintf+0x660>
    401c:	a8 c2       	rjmp	.+1360   	; 0x456e <vfprintf+0x6e2>
    401e:	37 fe       	sbrs	r3, 7
    4020:	0f c0       	rjmp	.+30     	; 0x4040 <vfprintf+0x1b4>
    4022:	e4 0c       	add	r14, r4
    4024:	04 ff       	sbrs	r16, 4
    4026:	04 c0       	rjmp	.+8      	; 0x4030 <vfprintf+0x1a4>
    4028:	8a 81       	ldd	r24, Y+2	; 0x02
    402a:	81 33       	cpi	r24, 0x31	; 49
    402c:	09 f4       	brne	.+2      	; 0x4030 <vfprintf+0x1a4>
    402e:	ea 94       	dec	r14
    4030:	1e 14       	cp	r1, r14
    4032:	74 f5       	brge	.+92     	; 0x4090 <vfprintf+0x204>
    4034:	f8 e0       	ldi	r31, 0x08	; 8
    4036:	fe 15       	cp	r31, r14
    4038:	78 f5       	brcc	.+94     	; 0x4098 <vfprintf+0x20c>
    403a:	88 e0       	ldi	r24, 0x08	; 8
    403c:	e8 2e       	mov	r14, r24
    403e:	2c c0       	rjmp	.+88     	; 0x4098 <vfprintf+0x20c>
    4040:	36 fc       	sbrc	r3, 6
    4042:	2a c0       	rjmp	.+84     	; 0x4098 <vfprintf+0x20c>
    4044:	81 2f       	mov	r24, r17
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	84 15       	cp	r24, r4
    404a:	95 05       	cpc	r25, r5
    404c:	9c f0       	brlt	.+38     	; 0x4074 <vfprintf+0x1e8>
    404e:	2c ef       	ldi	r18, 0xFC	; 252
    4050:	42 16       	cp	r4, r18
    4052:	2f ef       	ldi	r18, 0xFF	; 255
    4054:	52 06       	cpc	r5, r18
    4056:	74 f0       	brlt	.+28     	; 0x4074 <vfprintf+0x1e8>
    4058:	43 2d       	mov	r20, r3
    405a:	40 68       	ori	r20, 0x80	; 128
    405c:	34 2e       	mov	r3, r20
    405e:	0a c0       	rjmp	.+20     	; 0x4074 <vfprintf+0x1e8>
    4060:	e2 e0       	ldi	r30, 0x02	; 2
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	ec 0f       	add	r30, r28
    4066:	fd 1f       	adc	r31, r29
    4068:	e1 0f       	add	r30, r17
    406a:	f1 1d       	adc	r31, r1
    406c:	80 81       	ld	r24, Z
    406e:	80 33       	cpi	r24, 0x30	; 48
    4070:	19 f4       	brne	.+6      	; 0x4078 <vfprintf+0x1ec>
    4072:	11 50       	subi	r17, 0x01	; 1
    4074:	11 11       	cpse	r17, r1
    4076:	f4 cf       	rjmp	.-24     	; 0x4060 <vfprintf+0x1d4>
    4078:	37 fe       	sbrs	r3, 7
    407a:	0e c0       	rjmp	.+28     	; 0x4098 <vfprintf+0x20c>
    407c:	ee 24       	eor	r14, r14
    407e:	e3 94       	inc	r14
    4080:	e1 0e       	add	r14, r17
    4082:	81 2f       	mov	r24, r17
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	48 16       	cp	r4, r24
    4088:	59 06       	cpc	r5, r25
    408a:	2c f4       	brge	.+10     	; 0x4096 <vfprintf+0x20a>
    408c:	14 19       	sub	r17, r4
    408e:	04 c0       	rjmp	.+8      	; 0x4098 <vfprintf+0x20c>
    4090:	ee 24       	eor	r14, r14
    4092:	e3 94       	inc	r14
    4094:	01 c0       	rjmp	.+2      	; 0x4098 <vfprintf+0x20c>
    4096:	10 e0       	ldi	r17, 0x00	; 0
    4098:	37 fe       	sbrs	r3, 7
    409a:	06 c0       	rjmp	.+12     	; 0x40a8 <vfprintf+0x21c>
    409c:	14 14       	cp	r1, r4
    409e:	15 04       	cpc	r1, r5
    40a0:	34 f4       	brge	.+12     	; 0x40ae <vfprintf+0x222>
    40a2:	c2 01       	movw	r24, r4
    40a4:	01 96       	adiw	r24, 0x01	; 1
    40a6:	05 c0       	rjmp	.+10     	; 0x40b2 <vfprintf+0x226>
    40a8:	85 e0       	ldi	r24, 0x05	; 5
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	02 c0       	rjmp	.+4      	; 0x40b2 <vfprintf+0x226>
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	21 10       	cpse	r2, r1
    40b4:	01 96       	adiw	r24, 0x01	; 1
    40b6:	11 23       	and	r17, r17
    40b8:	31 f0       	breq	.+12     	; 0x40c6 <vfprintf+0x23a>
    40ba:	21 2f       	mov	r18, r17
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	2f 5f       	subi	r18, 0xFF	; 255
    40c0:	3f 4f       	sbci	r19, 0xFF	; 255
    40c2:	82 0f       	add	r24, r18
    40c4:	93 1f       	adc	r25, r19
    40c6:	2f 2d       	mov	r18, r15
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	82 17       	cp	r24, r18
    40cc:	93 07       	cpc	r25, r19
    40ce:	14 f4       	brge	.+4      	; 0x40d4 <vfprintf+0x248>
    40d0:	f8 1a       	sub	r15, r24
    40d2:	01 c0       	rjmp	.+2      	; 0x40d6 <vfprintf+0x24a>
    40d4:	f1 2c       	mov	r15, r1
    40d6:	83 2d       	mov	r24, r3
    40d8:	89 70       	andi	r24, 0x09	; 9
    40da:	49 f4       	brne	.+18     	; 0x40ee <vfprintf+0x262>
    40dc:	ff 20       	and	r15, r15
    40de:	39 f0       	breq	.+14     	; 0x40ee <vfprintf+0x262>
    40e0:	b6 01       	movw	r22, r12
    40e2:	80 e2       	ldi	r24, 0x20	; 32
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    40ea:	fa 94       	dec	r15
    40ec:	f7 cf       	rjmp	.-18     	; 0x40dc <vfprintf+0x250>
    40ee:	22 20       	and	r2, r2
    40f0:	29 f0       	breq	.+10     	; 0x40fc <vfprintf+0x270>
    40f2:	b6 01       	movw	r22, r12
    40f4:	82 2d       	mov	r24, r2
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    40fc:	33 fc       	sbrc	r3, 3
    40fe:	09 c0       	rjmp	.+18     	; 0x4112 <vfprintf+0x286>
    4100:	ff 20       	and	r15, r15
    4102:	39 f0       	breq	.+14     	; 0x4112 <vfprintf+0x286>
    4104:	b6 01       	movw	r22, r12
    4106:	80 e3       	ldi	r24, 0x30	; 48
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    410e:	fa 94       	dec	r15
    4110:	f7 cf       	rjmp	.-18     	; 0x4100 <vfprintf+0x274>
    4112:	37 fe       	sbrs	r3, 7
    4114:	5a c0       	rjmp	.+180    	; 0x41ca <vfprintf+0x33e>
    4116:	94 2d       	mov	r25, r4
    4118:	85 2d       	mov	r24, r5
    411a:	57 fe       	sbrs	r5, 7
    411c:	02 c0       	rjmp	.+4      	; 0x4122 <vfprintf+0x296>
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	80 e0       	ldi	r24, 0x00	; 0
    4122:	29 2e       	mov	r2, r25
    4124:	38 2e       	mov	r3, r24
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	a2 01       	movw	r20, r4
    412c:	4e 19       	sub	r20, r14
    412e:	51 09       	sbc	r21, r1
    4130:	5d 87       	std	Y+13, r21	; 0x0d
    4132:	4c 87       	std	Y+12, r20	; 0x0c
    4134:	a2 01       	movw	r20, r4
    4136:	42 19       	sub	r20, r2
    4138:	53 09       	sbc	r21, r3
    413a:	5f 87       	std	Y+15, r21	; 0x0f
    413c:	4e 87       	std	Y+14, r20	; 0x0e
    413e:	61 2f       	mov	r22, r17
    4140:	70 e0       	ldi	r23, 0x00	; 0
    4142:	44 27       	eor	r20, r20
    4144:	55 27       	eor	r21, r21
    4146:	46 1b       	sub	r20, r22
    4148:	57 0b       	sbc	r21, r23
    414a:	59 8b       	std	Y+17, r21	; 0x11
    414c:	48 8b       	std	Y+16, r20	; 0x10
    414e:	5f ef       	ldi	r21, 0xFF	; 255
    4150:	25 16       	cp	r2, r21
    4152:	35 06       	cpc	r3, r21
    4154:	49 f4       	brne	.+18     	; 0x4168 <vfprintf+0x2dc>
    4156:	b6 01       	movw	r22, r12
    4158:	8e e2       	ldi	r24, 0x2E	; 46
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	2a 8b       	std	Y+18, r18	; 0x12
    415e:	3b 8b       	std	Y+19, r19	; 0x13
    4160:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    4164:	3b 89       	ldd	r19, Y+19	; 0x13
    4166:	2a 89       	ldd	r18, Y+18	; 0x12
    4168:	42 14       	cp	r4, r2
    416a:	53 04       	cpc	r5, r3
    416c:	6c f0       	brlt	.+26     	; 0x4188 <vfprintf+0x2fc>
    416e:	4c 85       	ldd	r20, Y+12	; 0x0c
    4170:	5d 85       	ldd	r21, Y+13	; 0x0d
    4172:	42 15       	cp	r20, r2
    4174:	53 05       	cpc	r21, r3
    4176:	44 f4       	brge	.+16     	; 0x4188 <vfprintf+0x2fc>
    4178:	ee 85       	ldd	r30, Y+14	; 0x0e
    417a:	ff 85       	ldd	r31, Y+15	; 0x0f
    417c:	e2 0f       	add	r30, r18
    417e:	f3 1f       	adc	r31, r19
    4180:	e6 0d       	add	r30, r6
    4182:	f7 1d       	adc	r31, r7
    4184:	81 81       	ldd	r24, Z+1	; 0x01
    4186:	01 c0       	rjmp	.+2      	; 0x418a <vfprintf+0x2fe>
    4188:	80 e3       	ldi	r24, 0x30	; 48
    418a:	51 e0       	ldi	r21, 0x01	; 1
    418c:	25 1a       	sub	r2, r21
    418e:	31 08       	sbc	r3, r1
    4190:	2f 5f       	subi	r18, 0xFF	; 255
    4192:	3f 4f       	sbci	r19, 0xFF	; 255
    4194:	48 89       	ldd	r20, Y+16	; 0x10
    4196:	59 89       	ldd	r21, Y+17	; 0x11
    4198:	24 16       	cp	r2, r20
    419a:	35 06       	cpc	r3, r21
    419c:	4c f0       	brlt	.+18     	; 0x41b0 <vfprintf+0x324>
    419e:	b6 01       	movw	r22, r12
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	2a 8b       	std	Y+18, r18	; 0x12
    41a4:	3b 8b       	std	Y+19, r19	; 0x13
    41a6:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    41aa:	2a 89       	ldd	r18, Y+18	; 0x12
    41ac:	3b 89       	ldd	r19, Y+19	; 0x13
    41ae:	cf cf       	rjmp	.-98     	; 0x414e <vfprintf+0x2c2>
    41b0:	24 14       	cp	r2, r4
    41b2:	35 04       	cpc	r3, r5
    41b4:	39 f4       	brne	.+14     	; 0x41c4 <vfprintf+0x338>
    41b6:	9a 81       	ldd	r25, Y+2	; 0x02
    41b8:	96 33       	cpi	r25, 0x36	; 54
    41ba:	18 f4       	brcc	.+6      	; 0x41c2 <vfprintf+0x336>
    41bc:	95 33       	cpi	r25, 0x35	; 53
    41be:	11 f4       	brne	.+4      	; 0x41c4 <vfprintf+0x338>
    41c0:	04 ff       	sbrs	r16, 4
    41c2:	81 e3       	ldi	r24, 0x31	; 49
    41c4:	b6 01       	movw	r22, r12
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	4b c0       	rjmp	.+150    	; 0x4260 <vfprintf+0x3d4>
    41ca:	8a 81       	ldd	r24, Y+2	; 0x02
    41cc:	81 33       	cpi	r24, 0x31	; 49
    41ce:	09 f0       	breq	.+2      	; 0x41d2 <vfprintf+0x346>
    41d0:	0f 7e       	andi	r16, 0xEF	; 239
    41d2:	b6 01       	movw	r22, r12
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    41da:	11 11       	cpse	r17, r1
    41dc:	05 c0       	rjmp	.+10     	; 0x41e8 <vfprintf+0x35c>
    41de:	34 fc       	sbrc	r3, 4
    41e0:	18 c0       	rjmp	.+48     	; 0x4212 <vfprintf+0x386>
    41e2:	85 e6       	ldi	r24, 0x65	; 101
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	17 c0       	rjmp	.+46     	; 0x4216 <vfprintf+0x38a>
    41e8:	b6 01       	movw	r22, r12
    41ea:	8e e2       	ldi	r24, 0x2E	; 46
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    41f2:	82 e0       	ldi	r24, 0x02	; 2
    41f4:	ee 24       	eor	r14, r14
    41f6:	e3 94       	inc	r14
    41f8:	e8 0e       	add	r14, r24
    41fa:	f3 01       	movw	r30, r6
    41fc:	e8 0f       	add	r30, r24
    41fe:	f1 1d       	adc	r31, r1
    4200:	80 81       	ld	r24, Z
    4202:	b6 01       	movw	r22, r12
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    420a:	11 50       	subi	r17, 0x01	; 1
    420c:	8e 2d       	mov	r24, r14
    420e:	91 f7       	brne	.-28     	; 0x41f4 <vfprintf+0x368>
    4210:	e6 cf       	rjmp	.-52     	; 0x41de <vfprintf+0x352>
    4212:	85 e4       	ldi	r24, 0x45	; 69
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	b6 01       	movw	r22, r12
    4218:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    421c:	57 fc       	sbrc	r5, 7
    421e:	05 c0       	rjmp	.+10     	; 0x422a <vfprintf+0x39e>
    4220:	41 14       	cp	r4, r1
    4222:	51 04       	cpc	r5, r1
    4224:	39 f4       	brne	.+14     	; 0x4234 <vfprintf+0x3a8>
    4226:	04 ff       	sbrs	r16, 4
    4228:	05 c0       	rjmp	.+10     	; 0x4234 <vfprintf+0x3a8>
    422a:	51 94       	neg	r5
    422c:	41 94       	neg	r4
    422e:	51 08       	sbc	r5, r1
    4230:	8d e2       	ldi	r24, 0x2D	; 45
    4232:	01 c0       	rjmp	.+2      	; 0x4236 <vfprintf+0x3aa>
    4234:	8b e2       	ldi	r24, 0x2B	; 43
    4236:	b6 01       	movw	r22, r12
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    423e:	80 e3       	ldi	r24, 0x30	; 48
    4240:	9a e0       	ldi	r25, 0x0A	; 10
    4242:	49 16       	cp	r4, r25
    4244:	51 04       	cpc	r5, r1
    4246:	2c f0       	brlt	.+10     	; 0x4252 <vfprintf+0x3c6>
    4248:	8f 5f       	subi	r24, 0xFF	; 255
    424a:	5a e0       	ldi	r21, 0x0A	; 10
    424c:	45 1a       	sub	r4, r21
    424e:	51 08       	sbc	r5, r1
    4250:	f7 cf       	rjmp	.-18     	; 0x4240 <vfprintf+0x3b4>
    4252:	b6 01       	movw	r22, r12
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    425a:	b6 01       	movw	r22, r12
    425c:	c2 01       	movw	r24, r4
    425e:	c0 96       	adiw	r24, 0x30	; 48
    4260:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    4264:	57 c1       	rjmp	.+686    	; 0x4514 <vfprintf+0x688>
    4266:	83 36       	cpi	r24, 0x63	; 99
    4268:	31 f0       	breq	.+12     	; 0x4276 <vfprintf+0x3ea>
    426a:	83 37       	cpi	r24, 0x73	; 115
    426c:	79 f0       	breq	.+30     	; 0x428c <vfprintf+0x400>
    426e:	83 35       	cpi	r24, 0x53	; 83
    4270:	09 f0       	breq	.+2      	; 0x4274 <vfprintf+0x3e8>
    4272:	58 c0       	rjmp	.+176    	; 0x4324 <vfprintf+0x498>
    4274:	21 c0       	rjmp	.+66     	; 0x42b8 <vfprintf+0x42c>
    4276:	52 01       	movw	r10, r4
    4278:	e2 e0       	ldi	r30, 0x02	; 2
    427a:	ae 0e       	add	r10, r30
    427c:	b1 1c       	adc	r11, r1
    427e:	f2 01       	movw	r30, r4
    4280:	80 81       	ld	r24, Z
    4282:	89 83       	std	Y+1, r24	; 0x01
    4284:	01 e0       	ldi	r16, 0x01	; 1
    4286:	10 e0       	ldi	r17, 0x00	; 0
    4288:	23 01       	movw	r4, r6
    428a:	14 c0       	rjmp	.+40     	; 0x42b4 <vfprintf+0x428>
    428c:	52 01       	movw	r10, r4
    428e:	f2 e0       	ldi	r31, 0x02	; 2
    4290:	af 0e       	add	r10, r31
    4292:	b1 1c       	adc	r11, r1
    4294:	f2 01       	movw	r30, r4
    4296:	40 80       	ld	r4, Z
    4298:	51 80       	ldd	r5, Z+1	; 0x01
    429a:	26 ff       	sbrs	r18, 6
    429c:	03 c0       	rjmp	.+6      	; 0x42a4 <vfprintf+0x418>
    429e:	61 2f       	mov	r22, r17
    42a0:	70 e0       	ldi	r23, 0x00	; 0
    42a2:	02 c0       	rjmp	.+4      	; 0x42a8 <vfprintf+0x41c>
    42a4:	6f ef       	ldi	r22, 0xFF	; 255
    42a6:	7f ef       	ldi	r23, 0xFF	; 255
    42a8:	c2 01       	movw	r24, r4
    42aa:	2a 8b       	std	Y+18, r18	; 0x12
    42ac:	0e 94 29 2b 	call	0x5652	; 0x5652 <strnlen>
    42b0:	8c 01       	movw	r16, r24
    42b2:	2a 89       	ldd	r18, Y+18	; 0x12
    42b4:	2f 77       	andi	r18, 0x7F	; 127
    42b6:	15 c0       	rjmp	.+42     	; 0x42e2 <vfprintf+0x456>
    42b8:	52 01       	movw	r10, r4
    42ba:	f2 e0       	ldi	r31, 0x02	; 2
    42bc:	af 0e       	add	r10, r31
    42be:	b1 1c       	adc	r11, r1
    42c0:	f2 01       	movw	r30, r4
    42c2:	40 80       	ld	r4, Z
    42c4:	51 80       	ldd	r5, Z+1	; 0x01
    42c6:	26 ff       	sbrs	r18, 6
    42c8:	03 c0       	rjmp	.+6      	; 0x42d0 <vfprintf+0x444>
    42ca:	61 2f       	mov	r22, r17
    42cc:	70 e0       	ldi	r23, 0x00	; 0
    42ce:	02 c0       	rjmp	.+4      	; 0x42d4 <vfprintf+0x448>
    42d0:	6f ef       	ldi	r22, 0xFF	; 255
    42d2:	7f ef       	ldi	r23, 0xFF	; 255
    42d4:	c2 01       	movw	r24, r4
    42d6:	2a 8b       	std	Y+18, r18	; 0x12
    42d8:	0e 94 1e 2b 	call	0x563c	; 0x563c <strnlen_P>
    42dc:	8c 01       	movw	r16, r24
    42de:	2a 89       	ldd	r18, Y+18	; 0x12
    42e0:	20 68       	ori	r18, 0x80	; 128
    42e2:	32 2e       	mov	r3, r18
    42e4:	23 fd       	sbrc	r18, 3
    42e6:	1a c0       	rjmp	.+52     	; 0x431c <vfprintf+0x490>
    42e8:	8f 2d       	mov	r24, r15
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	08 17       	cp	r16, r24
    42ee:	19 07       	cpc	r17, r25
    42f0:	a8 f4       	brcc	.+42     	; 0x431c <vfprintf+0x490>
    42f2:	b6 01       	movw	r22, r12
    42f4:	80 e2       	ldi	r24, 0x20	; 32
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    42fc:	fa 94       	dec	r15
    42fe:	f4 cf       	rjmp	.-24     	; 0x42e8 <vfprintf+0x45c>
    4300:	f2 01       	movw	r30, r4
    4302:	37 fc       	sbrc	r3, 7
    4304:	85 91       	lpm	r24, Z+
    4306:	37 fe       	sbrs	r3, 7
    4308:	81 91       	ld	r24, Z+
    430a:	2f 01       	movw	r4, r30
    430c:	b6 01       	movw	r22, r12
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    4314:	f1 10       	cpse	r15, r1
    4316:	fa 94       	dec	r15
    4318:	01 50       	subi	r16, 0x01	; 1
    431a:	11 09       	sbc	r17, r1
    431c:	01 15       	cp	r16, r1
    431e:	11 05       	cpc	r17, r1
    4320:	79 f7       	brne	.-34     	; 0x4300 <vfprintf+0x474>
    4322:	f8 c0       	rjmp	.+496    	; 0x4514 <vfprintf+0x688>
    4324:	84 36       	cpi	r24, 0x64	; 100
    4326:	11 f0       	breq	.+4      	; 0x432c <vfprintf+0x4a0>
    4328:	89 36       	cpi	r24, 0x69	; 105
    432a:	59 f5       	brne	.+86     	; 0x4382 <vfprintf+0x4f6>
    432c:	52 01       	movw	r10, r4
    432e:	27 ff       	sbrs	r18, 7
    4330:	09 c0       	rjmp	.+18     	; 0x4344 <vfprintf+0x4b8>
    4332:	f4 e0       	ldi	r31, 0x04	; 4
    4334:	af 0e       	add	r10, r31
    4336:	b1 1c       	adc	r11, r1
    4338:	f2 01       	movw	r30, r4
    433a:	60 81       	ld	r22, Z
    433c:	71 81       	ldd	r23, Z+1	; 0x01
    433e:	82 81       	ldd	r24, Z+2	; 0x02
    4340:	93 81       	ldd	r25, Z+3	; 0x03
    4342:	0a c0       	rjmp	.+20     	; 0x4358 <vfprintf+0x4cc>
    4344:	f2 e0       	ldi	r31, 0x02	; 2
    4346:	af 0e       	add	r10, r31
    4348:	b1 1c       	adc	r11, r1
    434a:	f2 01       	movw	r30, r4
    434c:	60 81       	ld	r22, Z
    434e:	71 81       	ldd	r23, Z+1	; 0x01
    4350:	07 2e       	mov	r0, r23
    4352:	00 0c       	add	r0, r0
    4354:	88 0b       	sbc	r24, r24
    4356:	99 0b       	sbc	r25, r25
    4358:	2f 76       	andi	r18, 0x6F	; 111
    435a:	32 2e       	mov	r3, r18
    435c:	97 ff       	sbrs	r25, 7
    435e:	09 c0       	rjmp	.+18     	; 0x4372 <vfprintf+0x4e6>
    4360:	90 95       	com	r25
    4362:	80 95       	com	r24
    4364:	70 95       	com	r23
    4366:	61 95       	neg	r22
    4368:	7f 4f       	sbci	r23, 0xFF	; 255
    436a:	8f 4f       	sbci	r24, 0xFF	; 255
    436c:	9f 4f       	sbci	r25, 0xFF	; 255
    436e:	20 68       	ori	r18, 0x80	; 128
    4370:	32 2e       	mov	r3, r18
    4372:	2a e0       	ldi	r18, 0x0A	; 10
    4374:	30 e0       	ldi	r19, 0x00	; 0
    4376:	a3 01       	movw	r20, r6
    4378:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <__ultoa_invert>
    437c:	e8 2e       	mov	r14, r24
    437e:	e6 18       	sub	r14, r6
    4380:	3f c0       	rjmp	.+126    	; 0x4400 <vfprintf+0x574>
    4382:	02 2f       	mov	r16, r18
    4384:	85 37       	cpi	r24, 0x75	; 117
    4386:	21 f4       	brne	.+8      	; 0x4390 <vfprintf+0x504>
    4388:	0f 7e       	andi	r16, 0xEF	; 239
    438a:	2a e0       	ldi	r18, 0x0A	; 10
    438c:	30 e0       	ldi	r19, 0x00	; 0
    438e:	1d c0       	rjmp	.+58     	; 0x43ca <vfprintf+0x53e>
    4390:	09 7f       	andi	r16, 0xF9	; 249
    4392:	8f 36       	cpi	r24, 0x6F	; 111
    4394:	91 f0       	breq	.+36     	; 0x43ba <vfprintf+0x52e>
    4396:	18 f4       	brcc	.+6      	; 0x439e <vfprintf+0x512>
    4398:	88 35       	cpi	r24, 0x58	; 88
    439a:	59 f0       	breq	.+22     	; 0x43b2 <vfprintf+0x526>
    439c:	c5 c0       	rjmp	.+394    	; 0x4528 <vfprintf+0x69c>
    439e:	80 37       	cpi	r24, 0x70	; 112
    43a0:	19 f0       	breq	.+6      	; 0x43a8 <vfprintf+0x51c>
    43a2:	88 37       	cpi	r24, 0x78	; 120
    43a4:	11 f0       	breq	.+4      	; 0x43aa <vfprintf+0x51e>
    43a6:	c0 c0       	rjmp	.+384    	; 0x4528 <vfprintf+0x69c>
    43a8:	00 61       	ori	r16, 0x10	; 16
    43aa:	04 ff       	sbrs	r16, 4
    43ac:	09 c0       	rjmp	.+18     	; 0x43c0 <vfprintf+0x534>
    43ae:	04 60       	ori	r16, 0x04	; 4
    43b0:	07 c0       	rjmp	.+14     	; 0x43c0 <vfprintf+0x534>
    43b2:	24 ff       	sbrs	r18, 4
    43b4:	08 c0       	rjmp	.+16     	; 0x43c6 <vfprintf+0x53a>
    43b6:	06 60       	ori	r16, 0x06	; 6
    43b8:	06 c0       	rjmp	.+12     	; 0x43c6 <vfprintf+0x53a>
    43ba:	28 e0       	ldi	r18, 0x08	; 8
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	05 c0       	rjmp	.+10     	; 0x43ca <vfprintf+0x53e>
    43c0:	20 e1       	ldi	r18, 0x10	; 16
    43c2:	30 e0       	ldi	r19, 0x00	; 0
    43c4:	02 c0       	rjmp	.+4      	; 0x43ca <vfprintf+0x53e>
    43c6:	20 e1       	ldi	r18, 0x10	; 16
    43c8:	32 e0       	ldi	r19, 0x02	; 2
    43ca:	52 01       	movw	r10, r4
    43cc:	07 ff       	sbrs	r16, 7
    43ce:	09 c0       	rjmp	.+18     	; 0x43e2 <vfprintf+0x556>
    43d0:	f4 e0       	ldi	r31, 0x04	; 4
    43d2:	af 0e       	add	r10, r31
    43d4:	b1 1c       	adc	r11, r1
    43d6:	f2 01       	movw	r30, r4
    43d8:	60 81       	ld	r22, Z
    43da:	71 81       	ldd	r23, Z+1	; 0x01
    43dc:	82 81       	ldd	r24, Z+2	; 0x02
    43de:	93 81       	ldd	r25, Z+3	; 0x03
    43e0:	08 c0       	rjmp	.+16     	; 0x43f2 <vfprintf+0x566>
    43e2:	f2 e0       	ldi	r31, 0x02	; 2
    43e4:	af 0e       	add	r10, r31
    43e6:	b1 1c       	adc	r11, r1
    43e8:	f2 01       	movw	r30, r4
    43ea:	60 81       	ld	r22, Z
    43ec:	71 81       	ldd	r23, Z+1	; 0x01
    43ee:	80 e0       	ldi	r24, 0x00	; 0
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	a3 01       	movw	r20, r6
    43f4:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <__ultoa_invert>
    43f8:	e8 2e       	mov	r14, r24
    43fa:	e6 18       	sub	r14, r6
    43fc:	0f 77       	andi	r16, 0x7F	; 127
    43fe:	30 2e       	mov	r3, r16
    4400:	36 fe       	sbrs	r3, 6
    4402:	0b c0       	rjmp	.+22     	; 0x441a <vfprintf+0x58e>
    4404:	33 2d       	mov	r19, r3
    4406:	3e 7f       	andi	r19, 0xFE	; 254
    4408:	e1 16       	cp	r14, r17
    440a:	50 f4       	brcc	.+20     	; 0x4420 <vfprintf+0x594>
    440c:	34 fe       	sbrs	r3, 4
    440e:	0a c0       	rjmp	.+20     	; 0x4424 <vfprintf+0x598>
    4410:	32 fc       	sbrc	r3, 2
    4412:	08 c0       	rjmp	.+16     	; 0x4424 <vfprintf+0x598>
    4414:	33 2d       	mov	r19, r3
    4416:	3e 7e       	andi	r19, 0xEE	; 238
    4418:	05 c0       	rjmp	.+10     	; 0x4424 <vfprintf+0x598>
    441a:	0e 2d       	mov	r16, r14
    441c:	33 2d       	mov	r19, r3
    441e:	03 c0       	rjmp	.+6      	; 0x4426 <vfprintf+0x59a>
    4420:	0e 2d       	mov	r16, r14
    4422:	01 c0       	rjmp	.+2      	; 0x4426 <vfprintf+0x59a>
    4424:	01 2f       	mov	r16, r17
    4426:	34 ff       	sbrs	r19, 4
    4428:	0c c0       	rjmp	.+24     	; 0x4442 <vfprintf+0x5b6>
    442a:	fe 01       	movw	r30, r28
    442c:	ee 0d       	add	r30, r14
    442e:	f1 1d       	adc	r31, r1
    4430:	80 81       	ld	r24, Z
    4432:	80 33       	cpi	r24, 0x30	; 48
    4434:	11 f4       	brne	.+4      	; 0x443a <vfprintf+0x5ae>
    4436:	39 7e       	andi	r19, 0xE9	; 233
    4438:	08 c0       	rjmp	.+16     	; 0x444a <vfprintf+0x5be>
    443a:	32 ff       	sbrs	r19, 2
    443c:	05 c0       	rjmp	.+10     	; 0x4448 <vfprintf+0x5bc>
    443e:	0e 5f       	subi	r16, 0xFE	; 254
    4440:	04 c0       	rjmp	.+8      	; 0x444a <vfprintf+0x5be>
    4442:	83 2f       	mov	r24, r19
    4444:	86 78       	andi	r24, 0x86	; 134
    4446:	09 f0       	breq	.+2      	; 0x444a <vfprintf+0x5be>
    4448:	0f 5f       	subi	r16, 0xFF	; 255
    444a:	33 fd       	sbrc	r19, 3
    444c:	13 c0       	rjmp	.+38     	; 0x4474 <vfprintf+0x5e8>
    444e:	30 ff       	sbrs	r19, 0
    4450:	06 c0       	rjmp	.+12     	; 0x445e <vfprintf+0x5d2>
    4452:	1e 2d       	mov	r17, r14
    4454:	0f 15       	cp	r16, r15
    4456:	18 f4       	brcc	.+6      	; 0x445e <vfprintf+0x5d2>
    4458:	1f 0d       	add	r17, r15
    445a:	10 1b       	sub	r17, r16
    445c:	0f 2d       	mov	r16, r15
    445e:	0f 15       	cp	r16, r15
    4460:	68 f4       	brcc	.+26     	; 0x447c <vfprintf+0x5f0>
    4462:	b6 01       	movw	r22, r12
    4464:	80 e2       	ldi	r24, 0x20	; 32
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	3b 8b       	std	Y+19, r19	; 0x13
    446a:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    446e:	0f 5f       	subi	r16, 0xFF	; 255
    4470:	3b 89       	ldd	r19, Y+19	; 0x13
    4472:	f5 cf       	rjmp	.-22     	; 0x445e <vfprintf+0x5d2>
    4474:	0f 15       	cp	r16, r15
    4476:	10 f4       	brcc	.+4      	; 0x447c <vfprintf+0x5f0>
    4478:	f0 1a       	sub	r15, r16
    447a:	01 c0       	rjmp	.+2      	; 0x447e <vfprintf+0x5f2>
    447c:	f1 2c       	mov	r15, r1
    447e:	34 ff       	sbrs	r19, 4
    4480:	12 c0       	rjmp	.+36     	; 0x44a6 <vfprintf+0x61a>
    4482:	b6 01       	movw	r22, r12
    4484:	80 e3       	ldi	r24, 0x30	; 48
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	3b 8b       	std	Y+19, r19	; 0x13
    448a:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    448e:	3b 89       	ldd	r19, Y+19	; 0x13
    4490:	32 ff       	sbrs	r19, 2
    4492:	17 c0       	rjmp	.+46     	; 0x44c2 <vfprintf+0x636>
    4494:	31 fd       	sbrc	r19, 1
    4496:	03 c0       	rjmp	.+6      	; 0x449e <vfprintf+0x612>
    4498:	88 e7       	ldi	r24, 0x78	; 120
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	02 c0       	rjmp	.+4      	; 0x44a2 <vfprintf+0x616>
    449e:	88 e5       	ldi	r24, 0x58	; 88
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	b6 01       	movw	r22, r12
    44a4:	0c c0       	rjmp	.+24     	; 0x44be <vfprintf+0x632>
    44a6:	83 2f       	mov	r24, r19
    44a8:	86 78       	andi	r24, 0x86	; 134
    44aa:	59 f0       	breq	.+22     	; 0x44c2 <vfprintf+0x636>
    44ac:	31 ff       	sbrs	r19, 1
    44ae:	02 c0       	rjmp	.+4      	; 0x44b4 <vfprintf+0x628>
    44b0:	8b e2       	ldi	r24, 0x2B	; 43
    44b2:	01 c0       	rjmp	.+2      	; 0x44b6 <vfprintf+0x62a>
    44b4:	80 e2       	ldi	r24, 0x20	; 32
    44b6:	37 fd       	sbrc	r19, 7
    44b8:	8d e2       	ldi	r24, 0x2D	; 45
    44ba:	b6 01       	movw	r22, r12
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    44c2:	e1 16       	cp	r14, r17
    44c4:	38 f4       	brcc	.+14     	; 0x44d4 <vfprintf+0x648>
    44c6:	b6 01       	movw	r22, r12
    44c8:	80 e3       	ldi	r24, 0x30	; 48
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    44d0:	11 50       	subi	r17, 0x01	; 1
    44d2:	f7 cf       	rjmp	.-18     	; 0x44c2 <vfprintf+0x636>
    44d4:	ea 94       	dec	r14
    44d6:	f3 01       	movw	r30, r6
    44d8:	ee 0d       	add	r30, r14
    44da:	f1 1d       	adc	r31, r1
    44dc:	80 81       	ld	r24, Z
    44de:	b6 01       	movw	r22, r12
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    44e6:	e1 10       	cpse	r14, r1
    44e8:	f5 cf       	rjmp	.-22     	; 0x44d4 <vfprintf+0x648>
    44ea:	14 c0       	rjmp	.+40     	; 0x4514 <vfprintf+0x688>
    44ec:	f4 e0       	ldi	r31, 0x04	; 4
    44ee:	ff 15       	cp	r31, r15
    44f0:	58 f5       	brcc	.+86     	; 0x4548 <vfprintf+0x6bc>
    44f2:	84 e0       	ldi	r24, 0x04	; 4
    44f4:	f8 1a       	sub	r15, r24
    44f6:	33 fe       	sbrs	r3, 3
    44f8:	1e c0       	rjmp	.+60     	; 0x4536 <vfprintf+0x6aa>
    44fa:	21 10       	cpse	r2, r1
    44fc:	26 c0       	rjmp	.+76     	; 0x454a <vfprintf+0x6be>
    44fe:	03 ff       	sbrs	r16, 3
    4500:	2a c0       	rjmp	.+84     	; 0x4556 <vfprintf+0x6ca>
    4502:	04 eb       	ldi	r16, 0xB4	; 180
    4504:	10 e0       	ldi	r17, 0x00	; 0
    4506:	f3 2d       	mov	r31, r3
    4508:	f0 71       	andi	r31, 0x10	; 16
    450a:	3f 2e       	mov	r3, r31
    450c:	f8 01       	movw	r30, r16
    450e:	84 91       	lpm	r24, Z
    4510:	81 11       	cpse	r24, r1
    4512:	24 c0       	rjmp	.+72     	; 0x455c <vfprintf+0x6d0>
    4514:	ff 20       	and	r15, r15
    4516:	09 f4       	brne	.+2      	; 0x451a <vfprintf+0x68e>
    4518:	e5 cc       	rjmp	.-1590   	; 0x3ee4 <vfprintf+0x58>
    451a:	b6 01       	movw	r22, r12
    451c:	80 e2       	ldi	r24, 0x20	; 32
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    4524:	fa 94       	dec	r15
    4526:	f6 cf       	rjmp	.-20     	; 0x4514 <vfprintf+0x688>
    4528:	f6 01       	movw	r30, r12
    452a:	86 81       	ldd	r24, Z+6	; 0x06
    452c:	97 81       	ldd	r25, Z+7	; 0x07
    452e:	26 c0       	rjmp	.+76     	; 0x457c <vfprintf+0x6f0>
    4530:	8f ef       	ldi	r24, 0xFF	; 255
    4532:	9f ef       	ldi	r25, 0xFF	; 255
    4534:	23 c0       	rjmp	.+70     	; 0x457c <vfprintf+0x6f0>
    4536:	b6 01       	movw	r22, r12
    4538:	80 e2       	ldi	r24, 0x20	; 32
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    4540:	fa 94       	dec	r15
    4542:	f1 10       	cpse	r15, r1
    4544:	f8 cf       	rjmp	.-16     	; 0x4536 <vfprintf+0x6aa>
    4546:	d9 cf       	rjmp	.-78     	; 0x44fa <vfprintf+0x66e>
    4548:	f1 2c       	mov	r15, r1
    454a:	b6 01       	movw	r22, r12
    454c:	82 2d       	mov	r24, r2
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    4554:	d4 cf       	rjmp	.-88     	; 0x44fe <vfprintf+0x672>
    4556:	08 eb       	ldi	r16, 0xB8	; 184
    4558:	10 e0       	ldi	r17, 0x00	; 0
    455a:	d5 cf       	rjmp	.-86     	; 0x4506 <vfprintf+0x67a>
    455c:	31 10       	cpse	r3, r1
    455e:	80 52       	subi	r24, 0x20	; 32
    4560:	b6 01       	movw	r22, r12
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	0e 94 a3 2b 	call	0x5746	; 0x5746 <fputc>
    4568:	0f 5f       	subi	r16, 0xFF	; 255
    456a:	1f 4f       	sbci	r17, 0xFF	; 255
    456c:	cf cf       	rjmp	.-98     	; 0x450c <vfprintf+0x680>
    456e:	23 e0       	ldi	r18, 0x03	; 3
    4570:	2f 15       	cp	r18, r15
    4572:	10 f4       	brcc	.+4      	; 0x4578 <vfprintf+0x6ec>
    4574:	83 e0       	ldi	r24, 0x03	; 3
    4576:	be cf       	rjmp	.-132    	; 0x44f4 <vfprintf+0x668>
    4578:	f1 2c       	mov	r15, r1
    457a:	c1 cf       	rjmp	.-126    	; 0x44fe <vfprintf+0x672>
    457c:	63 96       	adiw	r28, 0x13	; 19
    457e:	e2 e1       	ldi	r30, 0x12	; 18
    4580:	2f c7       	rjmp	.+3678   	; 0x53e0 <__epilogue_restores__>

00004582 <putval>:
    4582:	20 fd       	sbrc	r18, 0
    4584:	09 c0       	rjmp	.+18     	; 0x4598 <putval+0x16>
    4586:	fc 01       	movw	r30, r24
    4588:	23 fd       	sbrc	r18, 3
    458a:	05 c0       	rjmp	.+10     	; 0x4596 <putval+0x14>
    458c:	22 ff       	sbrs	r18, 2
    458e:	02 c0       	rjmp	.+4      	; 0x4594 <putval+0x12>
    4590:	73 83       	std	Z+3, r23	; 0x03
    4592:	62 83       	std	Z+2, r22	; 0x02
    4594:	51 83       	std	Z+1, r21	; 0x01
    4596:	40 83       	st	Z, r20
    4598:	08 95       	ret

0000459a <mulacc>:
    459a:	44 fd       	sbrc	r20, 4
    459c:	10 c0       	rjmp	.+32     	; 0x45be <mulacc+0x24>
    459e:	46 fd       	sbrc	r20, 6
    45a0:	10 c0       	rjmp	.+32     	; 0x45c2 <mulacc+0x28>
    45a2:	db 01       	movw	r26, r22
    45a4:	fc 01       	movw	r30, r24
    45a6:	aa 0f       	add	r26, r26
    45a8:	bb 1f       	adc	r27, r27
    45aa:	ee 1f       	adc	r30, r30
    45ac:	ff 1f       	adc	r31, r31
    45ae:	10 94       	com	r1
    45b0:	d1 f7       	brne	.-12     	; 0x45a6 <mulacc+0xc>
    45b2:	6a 0f       	add	r22, r26
    45b4:	7b 1f       	adc	r23, r27
    45b6:	8e 1f       	adc	r24, r30
    45b8:	9f 1f       	adc	r25, r31
    45ba:	31 e0       	ldi	r19, 0x01	; 1
    45bc:	03 c0       	rjmp	.+6      	; 0x45c4 <mulacc+0x2a>
    45be:	33 e0       	ldi	r19, 0x03	; 3
    45c0:	01 c0       	rjmp	.+2      	; 0x45c4 <mulacc+0x2a>
    45c2:	34 e0       	ldi	r19, 0x04	; 4
    45c4:	66 0f       	add	r22, r22
    45c6:	77 1f       	adc	r23, r23
    45c8:	88 1f       	adc	r24, r24
    45ca:	99 1f       	adc	r25, r25
    45cc:	31 50       	subi	r19, 0x01	; 1
    45ce:	d1 f7       	brne	.-12     	; 0x45c4 <mulacc+0x2a>
    45d0:	62 0f       	add	r22, r18
    45d2:	71 1d       	adc	r23, r1
    45d4:	81 1d       	adc	r24, r1
    45d6:	91 1d       	adc	r25, r1
    45d8:	08 95       	ret

000045da <skip_spaces>:
    45da:	0f 93       	push	r16
    45dc:	1f 93       	push	r17
    45de:	cf 93       	push	r28
    45e0:	df 93       	push	r29
    45e2:	8c 01       	movw	r16, r24
    45e4:	c8 01       	movw	r24, r16
    45e6:	0e 94 3c 2b 	call	0x5678	; 0x5678 <fgetc>
    45ea:	ec 01       	movw	r28, r24
    45ec:	97 fd       	sbrc	r25, 7
    45ee:	08 c0       	rjmp	.+16     	; 0x4600 <skip_spaces+0x26>
    45f0:	0e 94 03 2b 	call	0x5606	; 0x5606 <isspace>
    45f4:	89 2b       	or	r24, r25
    45f6:	b1 f7       	brne	.-20     	; 0x45e4 <skip_spaces+0xa>
    45f8:	b8 01       	movw	r22, r16
    45fa:	ce 01       	movw	r24, r28
    45fc:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <ungetc>
    4600:	ce 01       	movw	r24, r28
    4602:	df 91       	pop	r29
    4604:	cf 91       	pop	r28
    4606:	1f 91       	pop	r17
    4608:	0f 91       	pop	r16
    460a:	08 95       	ret

0000460c <conv_int>:
    460c:	a0 e0       	ldi	r26, 0x00	; 0
    460e:	b0 e0       	ldi	r27, 0x00	; 0
    4610:	eb e0       	ldi	r30, 0x0B	; 11
    4612:	f3 e2       	ldi	r31, 0x23	; 35
    4614:	cf c6       	rjmp	.+3486   	; 0x53b4 <__prologue_saves__+0xc>
    4616:	7c 01       	movw	r14, r24
    4618:	8b 01       	movw	r16, r22
    461a:	6a 01       	movw	r12, r20
    461c:	d2 2f       	mov	r29, r18
    461e:	0e 94 3c 2b 	call	0x5678	; 0x5678 <fgetc>
    4622:	9c 01       	movw	r18, r24
    4624:	33 27       	eor	r19, r19
    4626:	2b 32       	cpi	r18, 0x2B	; 43
    4628:	31 05       	cpc	r19, r1
    462a:	21 f0       	breq	.+8      	; 0x4634 <conv_int+0x28>
    462c:	2d 32       	cpi	r18, 0x2D	; 45
    462e:	31 05       	cpc	r19, r1
    4630:	59 f4       	brne	.+22     	; 0x4648 <conv_int+0x3c>
    4632:	d0 68       	ori	r29, 0x80	; 128
    4634:	01 50       	subi	r16, 0x01	; 1
    4636:	11 09       	sbc	r17, r1
    4638:	11 f4       	brne	.+4      	; 0x463e <conv_int+0x32>
    463a:	80 e0       	ldi	r24, 0x00	; 0
    463c:	65 c0       	rjmp	.+202    	; 0x4708 <conv_int+0xfc>
    463e:	c7 01       	movw	r24, r14
    4640:	0e 94 3c 2b 	call	0x5678	; 0x5678 <fgetc>
    4644:	97 fd       	sbrc	r25, 7
    4646:	f9 cf       	rjmp	.-14     	; 0x463a <conv_int+0x2e>
    4648:	cd 2f       	mov	r28, r29
    464a:	cd 7f       	andi	r28, 0xFD	; 253
    464c:	2d 2f       	mov	r18, r29
    464e:	20 73       	andi	r18, 0x30	; 48
    4650:	01 f5       	brne	.+64     	; 0x4692 <conv_int+0x86>
    4652:	80 33       	cpi	r24, 0x30	; 48
    4654:	f1 f4       	brne	.+60     	; 0x4692 <conv_int+0x86>
    4656:	58 01       	movw	r10, r16
    4658:	81 e0       	ldi	r24, 0x01	; 1
    465a:	a8 1a       	sub	r10, r24
    465c:	b1 08       	sbc	r11, r1
    465e:	09 f4       	brne	.+2      	; 0x4662 <conv_int+0x56>
    4660:	40 c0       	rjmp	.+128    	; 0x46e2 <conv_int+0xd6>
    4662:	c7 01       	movw	r24, r14
    4664:	0e 94 3c 2b 	call	0x5678	; 0x5678 <fgetc>
    4668:	97 fd       	sbrc	r25, 7
    466a:	3b c0       	rjmp	.+118    	; 0x46e2 <conv_int+0xd6>
    466c:	28 2f       	mov	r18, r24
    466e:	2f 7d       	andi	r18, 0xDF	; 223
    4670:	28 35       	cpi	r18, 0x58	; 88
    4672:	49 f4       	brne	.+18     	; 0x4686 <conv_int+0x7a>
    4674:	c2 64       	ori	r28, 0x42	; 66
    4676:	02 50       	subi	r16, 0x02	; 2
    4678:	11 09       	sbc	r17, r1
    467a:	99 f1       	breq	.+102    	; 0x46e2 <conv_int+0xd6>
    467c:	c7 01       	movw	r24, r14
    467e:	fc d7       	rcall	.+4088   	; 0x5678 <fgetc>
    4680:	97 ff       	sbrs	r25, 7
    4682:	07 c0       	rjmp	.+14     	; 0x4692 <conv_int+0x86>
    4684:	2e c0       	rjmp	.+92     	; 0x46e2 <conv_int+0xd6>
    4686:	d6 ff       	sbrs	r29, 6
    4688:	02 c0       	rjmp	.+4      	; 0x468e <conv_int+0x82>
    468a:	c2 60       	ori	r28, 0x02	; 2
    468c:	01 c0       	rjmp	.+2      	; 0x4690 <conv_int+0x84>
    468e:	c2 61       	ori	r28, 0x12	; 18
    4690:	85 01       	movw	r16, r10
    4692:	81 2c       	mov	r8, r1
    4694:	91 2c       	mov	r9, r1
    4696:	54 01       	movw	r10, r8
    4698:	20 ed       	ldi	r18, 0xD0	; 208
    469a:	28 0f       	add	r18, r24
    469c:	28 30       	cpi	r18, 0x08	; 8
    469e:	80 f0       	brcs	.+32     	; 0x46c0 <conv_int+0xb4>
    46a0:	c4 ff       	sbrs	r28, 4
    46a2:	04 c0       	rjmp	.+8      	; 0x46ac <conv_int+0xa0>
    46a4:	b7 01       	movw	r22, r14
    46a6:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <ungetc>
    46aa:	18 c0       	rjmp	.+48     	; 0x46dc <conv_int+0xd0>
    46ac:	2a 30       	cpi	r18, 0x0A	; 10
    46ae:	40 f0       	brcs	.+16     	; 0x46c0 <conv_int+0xb4>
    46b0:	c6 ff       	sbrs	r28, 6
    46b2:	f8 cf       	rjmp	.-16     	; 0x46a4 <conv_int+0x98>
    46b4:	2f 7d       	andi	r18, 0xDF	; 223
    46b6:	3f ee       	ldi	r19, 0xEF	; 239
    46b8:	32 0f       	add	r19, r18
    46ba:	36 30       	cpi	r19, 0x06	; 6
    46bc:	98 f7       	brcc	.-26     	; 0x46a4 <conv_int+0x98>
    46be:	27 50       	subi	r18, 0x07	; 7
    46c0:	4c 2f       	mov	r20, r28
    46c2:	c5 01       	movw	r24, r10
    46c4:	b4 01       	movw	r22, r8
    46c6:	69 df       	rcall	.-302    	; 0x459a <mulacc>
    46c8:	4b 01       	movw	r8, r22
    46ca:	5c 01       	movw	r10, r24
    46cc:	c2 60       	ori	r28, 0x02	; 2
    46ce:	01 50       	subi	r16, 0x01	; 1
    46d0:	11 09       	sbc	r17, r1
    46d2:	51 f0       	breq	.+20     	; 0x46e8 <conv_int+0xdc>
    46d4:	c7 01       	movw	r24, r14
    46d6:	d0 d7       	rcall	.+4000   	; 0x5678 <fgetc>
    46d8:	97 ff       	sbrs	r25, 7
    46da:	de cf       	rjmp	.-68     	; 0x4698 <conv_int+0x8c>
    46dc:	c1 fd       	sbrc	r28, 1
    46de:	04 c0       	rjmp	.+8      	; 0x46e8 <conv_int+0xdc>
    46e0:	ac cf       	rjmp	.-168    	; 0x463a <conv_int+0x2e>
    46e2:	81 2c       	mov	r8, r1
    46e4:	91 2c       	mov	r9, r1
    46e6:	54 01       	movw	r10, r8
    46e8:	c7 ff       	sbrs	r28, 7
    46ea:	08 c0       	rjmp	.+16     	; 0x46fc <conv_int+0xf0>
    46ec:	b0 94       	com	r11
    46ee:	a0 94       	com	r10
    46f0:	90 94       	com	r9
    46f2:	80 94       	com	r8
    46f4:	81 1c       	adc	r8, r1
    46f6:	91 1c       	adc	r9, r1
    46f8:	a1 1c       	adc	r10, r1
    46fa:	b1 1c       	adc	r11, r1
    46fc:	2c 2f       	mov	r18, r28
    46fe:	b5 01       	movw	r22, r10
    4700:	a4 01       	movw	r20, r8
    4702:	c6 01       	movw	r24, r12
    4704:	3e df       	rcall	.-388    	; 0x4582 <putval>
    4706:	81 e0       	ldi	r24, 0x01	; 1
    4708:	cd b7       	in	r28, 0x3d	; 61
    470a:	de b7       	in	r29, 0x3e	; 62
    470c:	ec e0       	ldi	r30, 0x0C	; 12
    470e:	6e c6       	rjmp	.+3292   	; 0x53ec <__epilogue_restores__+0xc>

00004710 <conv_brk>:
    4710:	a0 e2       	ldi	r26, 0x20	; 32
    4712:	b0 e0       	ldi	r27, 0x00	; 0
    4714:	ed e8       	ldi	r30, 0x8D	; 141
    4716:	f3 e2       	ldi	r31, 0x23	; 35
    4718:	49 c6       	rjmp	.+3218   	; 0x53ac <__prologue_saves__+0x4>
    471a:	4c 01       	movw	r8, r24
    471c:	5b 01       	movw	r10, r22
    471e:	7a 01       	movw	r14, r20
    4720:	8e 01       	movw	r16, r28
    4722:	0f 5f       	subi	r16, 0xFF	; 255
    4724:	1f 4f       	sbci	r17, 0xFF	; 255
    4726:	68 01       	movw	r12, r16
    4728:	80 e2       	ldi	r24, 0x20	; 32
    472a:	f8 01       	movw	r30, r16
    472c:	11 92       	st	Z+, r1
    472e:	8a 95       	dec	r24
    4730:	e9 f7       	brne	.-6      	; 0x472c <conv_brk+0x1c>
    4732:	f4 01       	movw	r30, r8
    4734:	63 80       	ldd	r6, Z+3	; 0x03
    4736:	40 e0       	ldi	r20, 0x00	; 0
    4738:	50 e0       	ldi	r21, 0x00	; 0
    473a:	71 2c       	mov	r7, r1
    473c:	41 2c       	mov	r4, r1
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	a1 e0       	ldi	r26, 0x01	; 1
    4742:	b0 e0       	ldi	r27, 0x00	; 0
    4744:	f9 01       	movw	r30, r18
    4746:	63 fc       	sbrc	r6, 3
    4748:	55 90       	lpm	r5, Z+
    474a:	63 fe       	sbrs	r6, 3
    474c:	51 90       	ld	r5, Z+
    474e:	8f 01       	movw	r16, r30
    4750:	95 2d       	mov	r25, r5
    4752:	9f 01       	movw	r18, r30
    4754:	51 10       	cpse	r5, r1
    4756:	03 c0       	rjmp	.+6      	; 0x475e <conv_brk+0x4e>
    4758:	80 e0       	ldi	r24, 0x00	; 0
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	7e c0       	rjmp	.+252    	; 0x485a <conv_brk+0x14a>
    475e:	fe e5       	ldi	r31, 0x5E	; 94
    4760:	5f 12       	cpse	r5, r31
    4762:	03 c0       	rjmp	.+6      	; 0x476a <conv_brk+0x5a>
    4764:	41 15       	cp	r20, r1
    4766:	51 05       	cpc	r21, r1
    4768:	61 f1       	breq	.+88     	; 0x47c2 <conv_brk+0xb2>
    476a:	68 2f       	mov	r22, r24
    476c:	70 e0       	ldi	r23, 0x00	; 0
    476e:	64 17       	cp	r22, r20
    4770:	75 07       	cpc	r23, r21
    4772:	4c f4       	brge	.+18     	; 0x4786 <conv_brk+0x76>
    4774:	6d e5       	ldi	r22, 0x5D	; 93
    4776:	56 16       	cp	r5, r22
    4778:	69 f1       	breq	.+90     	; 0x47d4 <conv_brk+0xc4>
    477a:	ed e2       	ldi	r30, 0x2D	; 45
    477c:	5e 12       	cpse	r5, r30
    477e:	03 c0       	rjmp	.+6      	; 0x4786 <conv_brk+0x76>
    4780:	44 20       	and	r4, r4
    4782:	09 f1       	breq	.+66     	; 0x47c6 <conv_brk+0xb6>
    4784:	03 c0       	rjmp	.+6      	; 0x478c <conv_brk+0x7c>
    4786:	41 10       	cpse	r4, r1
    4788:	01 c0       	rjmp	.+2      	; 0x478c <conv_brk+0x7c>
    478a:	75 2c       	mov	r7, r5
    478c:	69 2f       	mov	r22, r25
    478e:	66 95       	lsr	r22
    4790:	66 95       	lsr	r22
    4792:	66 95       	lsr	r22
    4794:	f6 01       	movw	r30, r12
    4796:	e6 0f       	add	r30, r22
    4798:	f1 1d       	adc	r31, r1
    479a:	69 2f       	mov	r22, r25
    479c:	67 70       	andi	r22, 0x07	; 7
    479e:	8d 01       	movw	r16, r26
    47a0:	02 c0       	rjmp	.+4      	; 0x47a6 <conv_brk+0x96>
    47a2:	00 0f       	add	r16, r16
    47a4:	11 1f       	adc	r17, r17
    47a6:	6a 95       	dec	r22
    47a8:	e2 f7       	brpl	.-8      	; 0x47a2 <conv_brk+0x92>
    47aa:	b8 01       	movw	r22, r16
    47ac:	70 81       	ld	r23, Z
    47ae:	67 2b       	or	r22, r23
    47b0:	60 83       	st	Z, r22
    47b2:	97 15       	cp	r25, r7
    47b4:	59 f0       	breq	.+22     	; 0x47cc <conv_brk+0xbc>
    47b6:	97 15       	cp	r25, r7
    47b8:	10 f4       	brcc	.+4      	; 0x47be <conv_brk+0xae>
    47ba:	9f 5f       	subi	r25, 0xFF	; 255
    47bc:	e7 cf       	rjmp	.-50     	; 0x478c <conv_brk+0x7c>
    47be:	91 50       	subi	r25, 0x01	; 1
    47c0:	e5 cf       	rjmp	.-54     	; 0x478c <conv_brk+0x7c>
    47c2:	81 e0       	ldi	r24, 0x01	; 1
    47c4:	04 c0       	rjmp	.+8      	; 0x47ce <conv_brk+0xbe>
    47c6:	44 24       	eor	r4, r4
    47c8:	43 94       	inc	r4
    47ca:	01 c0       	rjmp	.+2      	; 0x47ce <conv_brk+0xbe>
    47cc:	41 2c       	mov	r4, r1
    47ce:	4f 5f       	subi	r20, 0xFF	; 255
    47d0:	5f 4f       	sbci	r21, 0xFF	; 255
    47d2:	b8 cf       	rjmp	.-144    	; 0x4744 <conv_brk+0x34>
    47d4:	44 20       	and	r4, r4
    47d6:	19 f0       	breq	.+6      	; 0x47de <conv_brk+0xce>
    47d8:	9e 81       	ldd	r25, Y+6	; 0x06
    47da:	90 62       	ori	r25, 0x20	; 32
    47dc:	9e 83       	std	Y+6, r25	; 0x06
    47de:	81 11       	cpse	r24, r1
    47e0:	03 c0       	rjmp	.+6      	; 0x47e8 <conv_brk+0xd8>
    47e2:	77 24       	eor	r7, r7
    47e4:	73 94       	inc	r7
    47e6:	18 c0       	rjmp	.+48     	; 0x4818 <conv_brk+0x108>
    47e8:	f6 01       	movw	r30, r12
    47ea:	9e 01       	movw	r18, r28
    47ec:	2f 5d       	subi	r18, 0xDF	; 223
    47ee:	3f 4f       	sbci	r19, 0xFF	; 255
    47f0:	80 81       	ld	r24, Z
    47f2:	80 95       	com	r24
    47f4:	81 93       	st	Z+, r24
    47f6:	e2 17       	cp	r30, r18
    47f8:	f3 07       	cpc	r31, r19
    47fa:	d1 f7       	brne	.-12     	; 0x47f0 <conv_brk+0xe0>
    47fc:	f2 cf       	rjmp	.-28     	; 0x47e2 <conv_brk+0xd2>
    47fe:	e1 14       	cp	r14, r1
    4800:	f1 04       	cpc	r15, r1
    4802:	29 f0       	breq	.+10     	; 0x480e <conv_brk+0xfe>
    4804:	f7 01       	movw	r30, r14
    4806:	80 83       	st	Z, r24
    4808:	c7 01       	movw	r24, r14
    480a:	01 96       	adiw	r24, 0x01	; 1
    480c:	7c 01       	movw	r14, r24
    480e:	91 e0       	ldi	r25, 0x01	; 1
    4810:	a9 1a       	sub	r10, r25
    4812:	b1 08       	sbc	r11, r1
    4814:	71 2c       	mov	r7, r1
    4816:	d9 f0       	breq	.+54     	; 0x484e <conv_brk+0x13e>
    4818:	c4 01       	movw	r24, r8
    481a:	2e d7       	rcall	.+3676   	; 0x5678 <fgetc>
    481c:	97 fd       	sbrc	r25, 7
    481e:	15 c0       	rjmp	.+42     	; 0x484a <conv_brk+0x13a>
    4820:	28 2f       	mov	r18, r24
    4822:	26 95       	lsr	r18
    4824:	26 95       	lsr	r18
    4826:	26 95       	lsr	r18
    4828:	f6 01       	movw	r30, r12
    482a:	e2 0f       	add	r30, r18
    482c:	f1 1d       	adc	r31, r1
    482e:	20 81       	ld	r18, Z
    4830:	30 e0       	ldi	r19, 0x00	; 0
    4832:	ac 01       	movw	r20, r24
    4834:	47 70       	andi	r20, 0x07	; 7
    4836:	55 27       	eor	r21, r21
    4838:	02 c0       	rjmp	.+4      	; 0x483e <conv_brk+0x12e>
    483a:	35 95       	asr	r19
    483c:	27 95       	ror	r18
    483e:	4a 95       	dec	r20
    4840:	e2 f7       	brpl	.-8      	; 0x483a <conv_brk+0x12a>
    4842:	20 fd       	sbrc	r18, 0
    4844:	dc cf       	rjmp	.-72     	; 0x47fe <conv_brk+0xee>
    4846:	b4 01       	movw	r22, r8
    4848:	b6 d7       	rcall	.+3948   	; 0x57b6 <ungetc>
    484a:	71 10       	cpse	r7, r1
    484c:	85 cf       	rjmp	.-246    	; 0x4758 <conv_brk+0x48>
    484e:	e1 14       	cp	r14, r1
    4850:	f1 04       	cpc	r15, r1
    4852:	11 f0       	breq	.+4      	; 0x4858 <conv_brk+0x148>
    4854:	f7 01       	movw	r30, r14
    4856:	10 82       	st	Z, r1
    4858:	c8 01       	movw	r24, r16
    485a:	a0 96       	adiw	r28, 0x20	; 32
    485c:	e0 e1       	ldi	r30, 0x10	; 16
    485e:	c2 c5       	rjmp	.+2948   	; 0x53e4 <__epilogue_restores__+0x4>

00004860 <conv_flt>:
    4860:	a6 e0       	ldi	r26, 0x06	; 6
    4862:	b0 e0       	ldi	r27, 0x00	; 0
    4864:	e5 e3       	ldi	r30, 0x35	; 53
    4866:	f4 e2       	ldi	r31, 0x24	; 36
    4868:	9f c5       	rjmp	.+2878   	; 0x53a8 <__prologue_saves__>
    486a:	5c 01       	movw	r10, r24
    486c:	7b 01       	movw	r14, r22
    486e:	1a 01       	movw	r2, r20
    4870:	03 d7       	rcall	.+3590   	; 0x5678 <fgetc>
    4872:	9e 83       	std	Y+6, r25	; 0x06
    4874:	8d 83       	std	Y+5, r24	; 0x05
    4876:	99 27       	eor	r25, r25
    4878:	8b 32       	cpi	r24, 0x2B	; 43
    487a:	91 05       	cpc	r25, r1
    487c:	21 f0       	breq	.+8      	; 0x4886 <conv_flt+0x26>
    487e:	8d 97       	sbiw	r24, 0x2d	; 45
    4880:	81 f4       	brne	.+32     	; 0x48a2 <conv_flt+0x42>
    4882:	10 e8       	ldi	r17, 0x80	; 128
    4884:	01 c0       	rjmp	.+2      	; 0x4888 <conv_flt+0x28>
    4886:	10 e0       	ldi	r17, 0x00	; 0
    4888:	21 e0       	ldi	r18, 0x01	; 1
    488a:	e2 1a       	sub	r14, r18
    488c:	f1 08       	sbc	r15, r1
    488e:	11 f4       	brne	.+4      	; 0x4894 <conv_flt+0x34>
    4890:	80 e0       	ldi	r24, 0x00	; 0
    4892:	1e c1       	rjmp	.+572    	; 0x4ad0 <conv_flt+0x270>
    4894:	c5 01       	movw	r24, r10
    4896:	f0 d6       	rcall	.+3552   	; 0x5678 <fgetc>
    4898:	9e 83       	std	Y+6, r25	; 0x06
    489a:	8d 83       	std	Y+5, r24	; 0x05
    489c:	97 ff       	sbrs	r25, 7
    489e:	02 c0       	rjmp	.+4      	; 0x48a4 <conv_flt+0x44>
    48a0:	f7 cf       	rjmp	.-18     	; 0x4890 <conv_flt+0x30>
    48a2:	10 e0       	ldi	r17, 0x00	; 0
    48a4:	8d 81       	ldd	r24, Y+5	; 0x05
    48a6:	9e 81       	ldd	r25, Y+6	; 0x06
    48a8:	b6 d6       	rcall	.+3436   	; 0x5616 <tolower>
    48aa:	89 36       	cpi	r24, 0x69	; 105
    48ac:	91 05       	cpc	r25, r1
    48ae:	49 f0       	breq	.+18     	; 0x48c2 <conv_flt+0x62>
    48b0:	8e 36       	cpi	r24, 0x6E	; 110
    48b2:	91 05       	cpc	r25, r1
    48b4:	09 f0       	breq	.+2      	; 0x48b8 <conv_flt+0x58>
    48b6:	38 c0       	rjmp	.+112    	; 0x4928 <conv_flt+0xc8>
    48b8:	63 ea       	ldi	r22, 0xA3	; 163
    48ba:	86 2e       	mov	r8, r22
    48bc:	62 e0       	ldi	r22, 0x02	; 2
    48be:	96 2e       	mov	r9, r22
    48c0:	04 c0       	rjmp	.+8      	; 0x48ca <conv_flt+0x6a>
    48c2:	76 ea       	ldi	r23, 0xA6	; 166
    48c4:	87 2e       	mov	r8, r23
    48c6:	72 e0       	ldi	r23, 0x02	; 2
    48c8:	97 2e       	mov	r9, r23
    48ca:	ef ef       	ldi	r30, 0xFF	; 255
    48cc:	8e 1a       	sub	r8, r30
    48ce:	9e 0a       	sbc	r9, r30
    48d0:	f4 01       	movw	r30, r8
    48d2:	31 97       	sbiw	r30, 0x01	; 1
    48d4:	04 91       	lpm	r16, Z
    48d6:	00 23       	and	r16, r16
    48d8:	b1 f0       	breq	.+44     	; 0x4906 <conv_flt+0xa6>
    48da:	81 e0       	ldi	r24, 0x01	; 1
    48dc:	e8 1a       	sub	r14, r24
    48de:	f1 08       	sbc	r15, r1
    48e0:	59 f0       	breq	.+22     	; 0x48f8 <conv_flt+0x98>
    48e2:	c5 01       	movw	r24, r10
    48e4:	c9 d6       	rcall	.+3474   	; 0x5678 <fgetc>
    48e6:	6c 01       	movw	r12, r24
    48e8:	97 fd       	sbrc	r25, 7
    48ea:	06 c0       	rjmp	.+12     	; 0x48f8 <conv_flt+0x98>
    48ec:	94 d6       	rcall	.+3368   	; 0x5616 <tolower>
    48ee:	08 17       	cp	r16, r24
    48f0:	61 f3       	breq	.-40     	; 0x48ca <conv_flt+0x6a>
    48f2:	b5 01       	movw	r22, r10
    48f4:	c6 01       	movw	r24, r12
    48f6:	5f d7       	rcall	.+3774   	; 0x57b6 <ungetc>
    48f8:	99 ea       	ldi	r25, 0xA9	; 169
    48fa:	89 16       	cp	r8, r25
    48fc:	92 e0       	ldi	r25, 0x02	; 2
    48fe:	99 06       	cpc	r9, r25
    4900:	09 f0       	breq	.+2      	; 0x4904 <conv_flt+0xa4>
    4902:	c6 cf       	rjmp	.-116    	; 0x4890 <conv_flt+0x30>
    4904:	05 c0       	rjmp	.+10     	; 0x4910 <conv_flt+0xb0>
    4906:	f6 ea       	ldi	r31, 0xA6	; 166
    4908:	8f 16       	cp	r8, r31
    490a:	f2 e0       	ldi	r31, 0x02	; 2
    490c:	9f 06       	cpc	r9, r31
    490e:	29 f0       	breq	.+10     	; 0x491a <conv_flt+0xba>
    4910:	80 e0       	ldi	r24, 0x00	; 0
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	a0 e8       	ldi	r26, 0x80	; 128
    4916:	bf e7       	ldi	r27, 0x7F	; 127
    4918:	04 c0       	rjmp	.+8      	; 0x4922 <conv_flt+0xc2>
    491a:	80 e0       	ldi	r24, 0x00	; 0
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	a0 ec       	ldi	r26, 0xC0	; 192
    4920:	bf e7       	ldi	r27, 0x7F	; 127
    4922:	bc 01       	movw	r22, r24
    4924:	cd 01       	movw	r24, r26
    4926:	c4 c0       	rjmp	.+392    	; 0x4ab0 <conv_flt+0x250>
    4928:	41 2c       	mov	r4, r1
    492a:	51 2c       	mov	r5, r1
    492c:	32 01       	movw	r6, r4
    492e:	c1 2c       	mov	r12, r1
    4930:	d1 2c       	mov	r13, r1
    4932:	2d 81       	ldd	r18, Y+5	; 0x05
    4934:	20 53       	subi	r18, 0x30	; 48
    4936:	2a 30       	cpi	r18, 0x0A	; 10
    4938:	10 f5       	brcc	.+68     	; 0x497e <conv_flt+0x11e>
    493a:	01 2f       	mov	r16, r17
    493c:	02 60       	ori	r16, 0x02	; 2
    493e:	81 2f       	mov	r24, r17
    4940:	88 70       	andi	r24, 0x08	; 8
    4942:	12 ff       	sbrs	r17, 2
    4944:	06 c0       	rjmp	.+12     	; 0x4952 <conv_flt+0xf2>
    4946:	81 11       	cpse	r24, r1
    4948:	20 c0       	rjmp	.+64     	; 0x498a <conv_flt+0x12a>
    494a:	2f ef       	ldi	r18, 0xFF	; 255
    494c:	c2 1a       	sub	r12, r18
    494e:	d2 0a       	sbc	r13, r18
    4950:	1c c0       	rjmp	.+56     	; 0x498a <conv_flt+0x12a>
    4952:	88 23       	and	r24, r24
    4954:	19 f0       	breq	.+6      	; 0x495c <conv_flt+0xfc>
    4956:	81 e0       	ldi	r24, 0x01	; 1
    4958:	c8 1a       	sub	r12, r24
    495a:	d1 08       	sbc	r13, r1
    495c:	40 e2       	ldi	r20, 0x20	; 32
    495e:	c3 01       	movw	r24, r6
    4960:	b2 01       	movw	r22, r4
    4962:	1b de       	rcall	.-970    	; 0x459a <mulacc>
    4964:	2b 01       	movw	r4, r22
    4966:	3c 01       	movw	r6, r24
    4968:	98 e9       	ldi	r25, 0x98	; 152
    496a:	49 16       	cp	r4, r25
    496c:	99 e9       	ldi	r25, 0x99	; 153
    496e:	59 06       	cpc	r5, r25
    4970:	69 06       	cpc	r6, r25
    4972:	99 e1       	ldi	r25, 0x19	; 25
    4974:	79 06       	cpc	r7, r25
    4976:	48 f0       	brcs	.+18     	; 0x498a <conv_flt+0x12a>
    4978:	01 2f       	mov	r16, r17
    497a:	06 60       	ori	r16, 0x06	; 6
    497c:	06 c0       	rjmp	.+12     	; 0x498a <conv_flt+0x12a>
    497e:	2e 3f       	cpi	r18, 0xFE	; 254
    4980:	89 f4       	brne	.+34     	; 0x49a4 <conv_flt+0x144>
    4982:	13 fd       	sbrc	r17, 3
    4984:	0f c0       	rjmp	.+30     	; 0x49a4 <conv_flt+0x144>
    4986:	01 2f       	mov	r16, r17
    4988:	08 60       	ori	r16, 0x08	; 8
    498a:	e1 e0       	ldi	r30, 0x01	; 1
    498c:	ee 1a       	sub	r14, r30
    498e:	f1 08       	sbc	r15, r1
    4990:	41 f0       	breq	.+16     	; 0x49a2 <conv_flt+0x142>
    4992:	c5 01       	movw	r24, r10
    4994:	71 d6       	rcall	.+3298   	; 0x5678 <fgetc>
    4996:	9e 83       	std	Y+6, r25	; 0x06
    4998:	8d 83       	std	Y+5, r24	; 0x05
    499a:	10 2f       	mov	r17, r16
    499c:	97 ff       	sbrs	r25, 7
    499e:	c9 cf       	rjmp	.-110    	; 0x4932 <conv_flt+0xd2>
    49a0:	01 c0       	rjmp	.+2      	; 0x49a4 <conv_flt+0x144>
    49a2:	10 2f       	mov	r17, r16
    49a4:	11 ff       	sbrs	r17, 1
    49a6:	74 cf       	rjmp	.-280    	; 0x4890 <conv_flt+0x30>
    49a8:	8d 81       	ldd	r24, Y+5	; 0x05
    49aa:	8f 7d       	andi	r24, 0xDF	; 223
    49ac:	85 34       	cpi	r24, 0x45	; 69
    49ae:	09 f0       	breq	.+2      	; 0x49b2 <conv_flt+0x152>
    49b0:	4a c0       	rjmp	.+148    	; 0x4a46 <conv_flt+0x1e6>
    49b2:	47 01       	movw	r8, r14
    49b4:	f1 e0       	ldi	r31, 0x01	; 1
    49b6:	8f 1a       	sub	r8, r31
    49b8:	91 08       	sbc	r9, r1
    49ba:	09 f4       	brne	.+2      	; 0x49be <conv_flt+0x15e>
    49bc:	69 cf       	rjmp	.-302    	; 0x4890 <conv_flt+0x30>
    49be:	c5 01       	movw	r24, r10
    49c0:	5b d6       	rcall	.+3254   	; 0x5678 <fgetc>
    49c2:	9e 83       	std	Y+6, r25	; 0x06
    49c4:	8d 83       	std	Y+5, r24	; 0x05
    49c6:	97 fd       	sbrc	r25, 7
    49c8:	63 cf       	rjmp	.-314    	; 0x4890 <conv_flt+0x30>
    49ca:	99 27       	eor	r25, r25
    49cc:	8b 32       	cpi	r24, 0x2B	; 43
    49ce:	91 05       	cpc	r25, r1
    49d0:	19 f0       	breq	.+6      	; 0x49d8 <conv_flt+0x178>
    49d2:	8d 97       	sbiw	r24, 0x2d	; 45
    49d4:	59 f4       	brne	.+22     	; 0x49ec <conv_flt+0x18c>
    49d6:	10 61       	ori	r17, 0x10	; 16
    49d8:	47 01       	movw	r8, r14
    49da:	22 e0       	ldi	r18, 0x02	; 2
    49dc:	82 1a       	sub	r8, r18
    49de:	91 08       	sbc	r9, r1
    49e0:	09 f4       	brne	.+2      	; 0x49e4 <conv_flt+0x184>
    49e2:	56 cf       	rjmp	.-340    	; 0x4890 <conv_flt+0x30>
    49e4:	c5 01       	movw	r24, r10
    49e6:	48 d6       	rcall	.+3216   	; 0x5678 <fgetc>
    49e8:	9e 83       	std	Y+6, r25	; 0x06
    49ea:	8d 83       	std	Y+5, r24	; 0x05
    49ec:	8d 81       	ldd	r24, Y+5	; 0x05
    49ee:	9e 81       	ldd	r25, Y+6	; 0x06
    49f0:	c0 97       	sbiw	r24, 0x30	; 48
    49f2:	0a 97       	sbiw	r24, 0x0a	; 10
    49f4:	08 f0       	brcs	.+2      	; 0x49f8 <conv_flt+0x198>
    49f6:	4c cf       	rjmp	.-360    	; 0x4890 <conv_flt+0x30>
    49f8:	74 01       	movw	r14, r8
    49fa:	81 2c       	mov	r8, r1
    49fc:	91 2c       	mov	r9, r1
    49fe:	b4 01       	movw	r22, r8
    4a00:	99 0c       	add	r9, r9
    4a02:	88 0b       	sbc	r24, r24
    4a04:	99 0b       	sbc	r25, r25
    4a06:	2d 81       	ldd	r18, Y+5	; 0x05
    4a08:	20 53       	subi	r18, 0x30	; 48
    4a0a:	40 e2       	ldi	r20, 0x20	; 32
    4a0c:	c6 dd       	rcall	.-1140   	; 0x459a <mulacc>
    4a0e:	ab 01       	movw	r20, r22
    4a10:	bc 01       	movw	r22, r24
    4a12:	4a 01       	movw	r8, r20
    4a14:	81 e0       	ldi	r24, 0x01	; 1
    4a16:	e8 1a       	sub	r14, r24
    4a18:	f1 08       	sbc	r15, r1
    4a1a:	69 f0       	breq	.+26     	; 0x4a36 <conv_flt+0x1d6>
    4a1c:	c5 01       	movw	r24, r10
    4a1e:	49 83       	std	Y+1, r20	; 0x01
    4a20:	5a 83       	std	Y+2, r21	; 0x02
    4a22:	6b 83       	std	Y+3, r22	; 0x03
    4a24:	7c 83       	std	Y+4, r23	; 0x04
    4a26:	28 d6       	rcall	.+3152   	; 0x5678 <fgetc>
    4a28:	9e 83       	std	Y+6, r25	; 0x06
    4a2a:	8d 83       	std	Y+5, r24	; 0x05
    4a2c:	c0 97       	sbiw	r24, 0x30	; 48
    4a2e:	49 81       	ldd	r20, Y+1	; 0x01
    4a30:	5a 81       	ldd	r21, Y+2	; 0x02
    4a32:	0a 97       	sbiw	r24, 0x0a	; 10
    4a34:	20 f3       	brcs	.-56     	; 0x49fe <conv_flt+0x19e>
    4a36:	14 ff       	sbrs	r17, 4
    4a38:	04 c0       	rjmp	.+8      	; 0x4a42 <conv_flt+0x1e2>
    4a3a:	88 24       	eor	r8, r8
    4a3c:	99 24       	eor	r9, r9
    4a3e:	84 1a       	sub	r8, r20
    4a40:	95 0a       	sbc	r9, r21
    4a42:	c8 0c       	add	r12, r8
    4a44:	d9 1c       	adc	r13, r9
    4a46:	ef 28       	or	r14, r15
    4a48:	39 f0       	breq	.+14     	; 0x4a58 <conv_flt+0x1f8>
    4a4a:	ed 81       	ldd	r30, Y+5	; 0x05
    4a4c:	fe 81       	ldd	r31, Y+6	; 0x06
    4a4e:	f7 fd       	sbrc	r31, 7
    4a50:	03 c0       	rjmp	.+6      	; 0x4a58 <conv_flt+0x1f8>
    4a52:	b5 01       	movw	r22, r10
    4a54:	cf 01       	movw	r24, r30
    4a56:	af d6       	rcall	.+3422   	; 0x57b6 <ungetc>
    4a58:	c3 01       	movw	r24, r6
    4a5a:	b2 01       	movw	r22, r4
    4a5c:	85 d2       	rcall	.+1290   	; 0x4f68 <__floatunsisf>
    4a5e:	d7 fe       	sbrs	r13, 7
    4a60:	08 c0       	rjmp	.+16     	; 0x4a72 <conv_flt+0x212>
    4a62:	d1 94       	neg	r13
    4a64:	c1 94       	neg	r12
    4a66:	d1 08       	sbc	r13, r1
    4a68:	52 ec       	ldi	r21, 0xC2	; 194
    4a6a:	85 2e       	mov	r8, r21
    4a6c:	52 e0       	ldi	r21, 0x02	; 2
    4a6e:	95 2e       	mov	r9, r21
    4a70:	04 c0       	rjmp	.+8      	; 0x4a7a <conv_flt+0x21a>
    4a72:	4a ed       	ldi	r20, 0xDA	; 218
    4a74:	84 2e       	mov	r8, r20
    4a76:	42 e0       	ldi	r20, 0x02	; 2
    4a78:	94 2e       	mov	r9, r20
    4a7a:	54 01       	movw	r10, r8
    4a7c:	f8 e1       	ldi	r31, 0x18	; 24
    4a7e:	af 1a       	sub	r10, r31
    4a80:	b1 08       	sbc	r11, r1
    4a82:	30 e2       	ldi	r19, 0x20	; 32
    4a84:	e3 2e       	mov	r14, r19
    4a86:	f1 2c       	mov	r15, r1
    4a88:	ce 14       	cp	r12, r14
    4a8a:	df 04       	cpc	r13, r15
    4a8c:	48 f0       	brcs	.+18     	; 0x4aa0 <conv_flt+0x240>
    4a8e:	f4 01       	movw	r30, r8
    4a90:	25 91       	lpm	r18, Z+
    4a92:	35 91       	lpm	r19, Z+
    4a94:	45 91       	lpm	r20, Z+
    4a96:	54 91       	lpm	r21, Z
    4a98:	82 d3       	rcall	.+1796   	; 0x519e <__mulsf3>
    4a9a:	ce 18       	sub	r12, r14
    4a9c:	df 08       	sbc	r13, r15
    4a9e:	f4 cf       	rjmp	.-24     	; 0x4a88 <conv_flt+0x228>
    4aa0:	24 e0       	ldi	r18, 0x04	; 4
    4aa2:	82 1a       	sub	r8, r18
    4aa4:	91 08       	sbc	r9, r1
    4aa6:	f6 94       	lsr	r15
    4aa8:	e7 94       	ror	r14
    4aaa:	8a 14       	cp	r8, r10
    4aac:	9b 04       	cpc	r9, r11
    4aae:	61 f7       	brne	.-40     	; 0x4a88 <conv_flt+0x228>
    4ab0:	17 ff       	sbrs	r17, 7
    4ab2:	05 c0       	rjmp	.+10     	; 0x4abe <conv_flt+0x25e>
    4ab4:	dc 01       	movw	r26, r24
    4ab6:	cb 01       	movw	r24, r22
    4ab8:	b0 58       	subi	r27, 0x80	; 128
    4aba:	bc 01       	movw	r22, r24
    4abc:	cd 01       	movw	r24, r26
    4abe:	21 14       	cp	r2, r1
    4ac0:	31 04       	cpc	r3, r1
    4ac2:	29 f0       	breq	.+10     	; 0x4ace <conv_flt+0x26e>
    4ac4:	f1 01       	movw	r30, r2
    4ac6:	60 83       	st	Z, r22
    4ac8:	71 83       	std	Z+1, r23	; 0x01
    4aca:	82 83       	std	Z+2, r24	; 0x02
    4acc:	93 83       	std	Z+3, r25	; 0x03
    4ace:	81 e0       	ldi	r24, 0x01	; 1
    4ad0:	26 96       	adiw	r28, 0x06	; 6
    4ad2:	e2 e1       	ldi	r30, 0x12	; 18
    4ad4:	85 c4       	rjmp	.+2314   	; 0x53e0 <__epilogue_restores__>

00004ad6 <vfscanf>:
    4ad6:	a1 e0       	ldi	r26, 0x01	; 1
    4ad8:	b0 e0       	ldi	r27, 0x00	; 0
    4ada:	e0 e7       	ldi	r30, 0x70	; 112
    4adc:	f5 e2       	ldi	r31, 0x25	; 37
    4ade:	66 c4       	rjmp	.+2252   	; 0x53ac <__prologue_saves__+0x4>
    4ae0:	6c 01       	movw	r12, r24
    4ae2:	2b 01       	movw	r4, r22
    4ae4:	4a 01       	movw	r8, r20
    4ae6:	fc 01       	movw	r30, r24
    4ae8:	17 82       	std	Z+7, r1	; 0x07
    4aea:	16 82       	std	Z+6, r1	; 0x06
    4aec:	a1 2c       	mov	r10, r1
    4aee:	f6 01       	movw	r30, r12
    4af0:	f3 80       	ldd	r15, Z+3	; 0x03
    4af2:	f2 01       	movw	r30, r4
    4af4:	f3 fc       	sbrc	r15, 3
    4af6:	85 91       	lpm	r24, Z+
    4af8:	f3 fe       	sbrs	r15, 3
    4afa:	81 91       	ld	r24, Z+
    4afc:	48 2f       	mov	r20, r24
    4afe:	2f 01       	movw	r4, r30
    4b00:	88 23       	and	r24, r24
    4b02:	09 f4       	brne	.+2      	; 0x4b06 <vfscanf+0x30>
    4b04:	01 c1       	rjmp	.+514    	; 0x4d08 <vfscanf+0x232>
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	49 83       	std	Y+1, r20	; 0x01
    4b0a:	7d d5       	rcall	.+2810   	; 0x5606 <isspace>
    4b0c:	49 81       	ldd	r20, Y+1	; 0x01
    4b0e:	89 2b       	or	r24, r25
    4b10:	19 f0       	breq	.+6      	; 0x4b18 <vfscanf+0x42>
    4b12:	c6 01       	movw	r24, r12
    4b14:	62 dd       	rcall	.-1340   	; 0x45da <skip_spaces>
    4b16:	eb cf       	rjmp	.-42     	; 0x4aee <vfscanf+0x18>
    4b18:	45 32       	cpi	r20, 0x25	; 37
    4b1a:	41 f4       	brne	.+16     	; 0x4b2c <vfscanf+0x56>
    4b1c:	f2 01       	movw	r30, r4
    4b1e:	f3 fc       	sbrc	r15, 3
    4b20:	45 91       	lpm	r20, Z+
    4b22:	f3 fe       	sbrs	r15, 3
    4b24:	41 91       	ld	r20, Z+
    4b26:	2f 01       	movw	r4, r30
    4b28:	45 32       	cpi	r20, 0x25	; 37
    4b2a:	59 f4       	brne	.+22     	; 0x4b42 <vfscanf+0x6c>
    4b2c:	c6 01       	movw	r24, r12
    4b2e:	49 83       	std	Y+1, r20	; 0x01
    4b30:	a3 d5       	rcall	.+2886   	; 0x5678 <fgetc>
    4b32:	49 81       	ldd	r20, Y+1	; 0x01
    4b34:	97 fd       	sbrc	r25, 7
    4b36:	e6 c0       	rjmp	.+460    	; 0x4d04 <vfscanf+0x22e>
    4b38:	48 17       	cp	r20, r24
    4b3a:	c9 f2       	breq	.-78     	; 0x4aee <vfscanf+0x18>
    4b3c:	b6 01       	movw	r22, r12
    4b3e:	3b d6       	rcall	.+3190   	; 0x57b6 <ungetc>
    4b40:	e3 c0       	rjmp	.+454    	; 0x4d08 <vfscanf+0x232>
    4b42:	4a 32       	cpi	r20, 0x2A	; 42
    4b44:	39 f4       	brne	.+14     	; 0x4b54 <vfscanf+0x7e>
    4b46:	f3 fc       	sbrc	r15, 3
    4b48:	45 91       	lpm	r20, Z+
    4b4a:	f3 fe       	sbrs	r15, 3
    4b4c:	41 91       	ld	r20, Z+
    4b4e:	2f 01       	movw	r4, r30
    4b50:	51 e0       	ldi	r21, 0x01	; 1
    4b52:	01 c0       	rjmp	.+2      	; 0x4b56 <vfscanf+0x80>
    4b54:	50 e0       	ldi	r21, 0x00	; 0
    4b56:	32 01       	movw	r6, r4
    4b58:	00 e0       	ldi	r16, 0x00	; 0
    4b5a:	10 e0       	ldi	r17, 0x00	; 0
    4b5c:	20 ed       	ldi	r18, 0xD0	; 208
    4b5e:	24 0f       	add	r18, r20
    4b60:	2a 30       	cpi	r18, 0x0A	; 10
    4b62:	80 f4       	brcc	.+32     	; 0x4b84 <vfscanf+0xae>
    4b64:	52 60       	ori	r21, 0x02	; 2
    4b66:	b8 01       	movw	r22, r16
    4b68:	80 e0       	ldi	r24, 0x00	; 0
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	40 e2       	ldi	r20, 0x20	; 32
    4b6e:	59 83       	std	Y+1, r21	; 0x01
    4b70:	14 dd       	rcall	.-1496   	; 0x459a <mulacc>
    4b72:	8b 01       	movw	r16, r22
    4b74:	f3 01       	movw	r30, r6
    4b76:	f3 fc       	sbrc	r15, 3
    4b78:	45 91       	lpm	r20, Z+
    4b7a:	f3 fe       	sbrs	r15, 3
    4b7c:	41 91       	ld	r20, Z+
    4b7e:	3f 01       	movw	r6, r30
    4b80:	59 81       	ldd	r21, Y+1	; 0x01
    4b82:	ec cf       	rjmp	.-40     	; 0x4b5c <vfscanf+0x86>
    4b84:	b5 2e       	mov	r11, r21
    4b86:	34 2f       	mov	r19, r20
    4b88:	23 01       	movw	r4, r6
    4b8a:	51 ff       	sbrs	r21, 1
    4b8c:	04 c0       	rjmp	.+8      	; 0x4b96 <vfscanf+0xc0>
    4b8e:	01 15       	cp	r16, r1
    4b90:	11 05       	cpc	r17, r1
    4b92:	19 f4       	brne	.+6      	; 0x4b9a <vfscanf+0xc4>
    4b94:	b9 c0       	rjmp	.+370    	; 0x4d08 <vfscanf+0x232>
    4b96:	0f ef       	ldi	r16, 0xFF	; 255
    4b98:	1f ef       	ldi	r17, 0xFF	; 255
    4b9a:	48 36       	cpi	r20, 0x68	; 104
    4b9c:	19 f0       	breq	.+6      	; 0x4ba4 <vfscanf+0xce>
    4b9e:	4c 36       	cpi	r20, 0x6C	; 108
    4ba0:	59 f0       	breq	.+22     	; 0x4bb8 <vfscanf+0xe2>
    4ba2:	13 c0       	rjmp	.+38     	; 0x4bca <vfscanf+0xf4>
    4ba4:	f3 01       	movw	r30, r6
    4ba6:	f3 fc       	sbrc	r15, 3
    4ba8:	35 91       	lpm	r19, Z+
    4baa:	f3 fe       	sbrs	r15, 3
    4bac:	31 91       	ld	r19, Z+
    4bae:	2f 01       	movw	r4, r30
    4bb0:	38 36       	cpi	r19, 0x68	; 104
    4bb2:	59 f4       	brne	.+22     	; 0x4bca <vfscanf+0xf4>
    4bb4:	58 60       	ori	r21, 0x08	; 8
    4bb6:	b5 2e       	mov	r11, r21
    4bb8:	fb 2d       	mov	r31, r11
    4bba:	f4 60       	ori	r31, 0x04	; 4
    4bbc:	bf 2e       	mov	r11, r31
    4bbe:	f2 01       	movw	r30, r4
    4bc0:	f3 fc       	sbrc	r15, 3
    4bc2:	35 91       	lpm	r19, Z+
    4bc4:	f3 fe       	sbrs	r15, 3
    4bc6:	31 91       	ld	r19, Z+
    4bc8:	2f 01       	movw	r4, r30
    4bca:	33 23       	and	r19, r19
    4bcc:	09 f4       	brne	.+2      	; 0x4bd0 <vfscanf+0xfa>
    4bce:	9c c0       	rjmp	.+312    	; 0x4d08 <vfscanf+0x232>
    4bd0:	63 2f       	mov	r22, r19
    4bd2:	70 e0       	ldi	r23, 0x00	; 0
    4bd4:	81 e9       	ldi	r24, 0x91	; 145
    4bd6:	92 e0       	ldi	r25, 0x02	; 2
    4bd8:	39 83       	std	Y+1, r19	; 0x01
    4bda:	25 d5       	rcall	.+2634   	; 0x5626 <strchr_P>
    4bdc:	39 81       	ldd	r19, Y+1	; 0x01
    4bde:	89 2b       	or	r24, r25
    4be0:	09 f4       	brne	.+2      	; 0x4be4 <vfscanf+0x10e>
    4be2:	92 c0       	rjmp	.+292    	; 0x4d08 <vfscanf+0x232>
    4be4:	b0 fc       	sbrc	r11, 0
    4be6:	07 c0       	rjmp	.+14     	; 0x4bf6 <vfscanf+0x120>
    4be8:	f4 01       	movw	r30, r8
    4bea:	e0 80       	ld	r14, Z
    4bec:	f1 80       	ldd	r15, Z+1	; 0x01
    4bee:	c4 01       	movw	r24, r8
    4bf0:	02 96       	adiw	r24, 0x02	; 2
    4bf2:	4c 01       	movw	r8, r24
    4bf4:	02 c0       	rjmp	.+4      	; 0x4bfa <vfscanf+0x124>
    4bf6:	e1 2c       	mov	r14, r1
    4bf8:	f1 2c       	mov	r15, r1
    4bfa:	3e 36       	cpi	r19, 0x6E	; 110
    4bfc:	49 f4       	brne	.+18     	; 0x4c10 <vfscanf+0x13a>
    4bfe:	f6 01       	movw	r30, r12
    4c00:	46 81       	ldd	r20, Z+6	; 0x06
    4c02:	57 81       	ldd	r21, Z+7	; 0x07
    4c04:	60 e0       	ldi	r22, 0x00	; 0
    4c06:	70 e0       	ldi	r23, 0x00	; 0
    4c08:	2b 2d       	mov	r18, r11
    4c0a:	c7 01       	movw	r24, r14
    4c0c:	ba dc       	rcall	.-1676   	; 0x4582 <putval>
    4c0e:	6f cf       	rjmp	.-290    	; 0x4aee <vfscanf+0x18>
    4c10:	33 36       	cpi	r19, 0x63	; 99
    4c12:	a1 f4       	brne	.+40     	; 0x4c3c <vfscanf+0x166>
    4c14:	b1 fc       	sbrc	r11, 1
    4c16:	02 c0       	rjmp	.+4      	; 0x4c1c <vfscanf+0x146>
    4c18:	01 e0       	ldi	r16, 0x01	; 1
    4c1a:	10 e0       	ldi	r17, 0x00	; 0
    4c1c:	c6 01       	movw	r24, r12
    4c1e:	2c d5       	rcall	.+2648   	; 0x5678 <fgetc>
    4c20:	97 fd       	sbrc	r25, 7
    4c22:	70 c0       	rjmp	.+224    	; 0x4d04 <vfscanf+0x22e>
    4c24:	e1 14       	cp	r14, r1
    4c26:	f1 04       	cpc	r15, r1
    4c28:	29 f0       	breq	.+10     	; 0x4c34 <vfscanf+0x15e>
    4c2a:	f7 01       	movw	r30, r14
    4c2c:	80 83       	st	Z, r24
    4c2e:	c7 01       	movw	r24, r14
    4c30:	01 96       	adiw	r24, 0x01	; 1
    4c32:	7c 01       	movw	r14, r24
    4c34:	01 50       	subi	r16, 0x01	; 1
    4c36:	11 09       	sbc	r17, r1
    4c38:	89 f7       	brne	.-30     	; 0x4c1c <vfscanf+0x146>
    4c3a:	60 c0       	rjmp	.+192    	; 0x4cfc <vfscanf+0x226>
    4c3c:	3b 35       	cpi	r19, 0x5B	; 91
    4c3e:	51 f4       	brne	.+20     	; 0x4c54 <vfscanf+0x17e>
    4c40:	92 01       	movw	r18, r4
    4c42:	a7 01       	movw	r20, r14
    4c44:	b8 01       	movw	r22, r16
    4c46:	c6 01       	movw	r24, r12
    4c48:	63 dd       	rcall	.-1338   	; 0x4710 <conv_brk>
    4c4a:	2c 01       	movw	r4, r24
    4c4c:	89 2b       	or	r24, r25
    4c4e:	09 f0       	breq	.+2      	; 0x4c52 <vfscanf+0x17c>
    4c50:	55 c0       	rjmp	.+170    	; 0x4cfc <vfscanf+0x226>
    4c52:	4f c0       	rjmp	.+158    	; 0x4cf2 <vfscanf+0x21c>
    4c54:	c6 01       	movw	r24, r12
    4c56:	39 83       	std	Y+1, r19	; 0x01
    4c58:	c0 dc       	rcall	.-1664   	; 0x45da <skip_spaces>
    4c5a:	39 81       	ldd	r19, Y+1	; 0x01
    4c5c:	97 fd       	sbrc	r25, 7
    4c5e:	52 c0       	rjmp	.+164    	; 0x4d04 <vfscanf+0x22e>
    4c60:	3f 36       	cpi	r19, 0x6F	; 111
    4c62:	c1 f1       	breq	.+112    	; 0x4cd4 <vfscanf+0x1fe>
    4c64:	40 f4       	brcc	.+16     	; 0x4c76 <vfscanf+0x1a0>
    4c66:	34 36       	cpi	r19, 0x64	; 100
    4c68:	89 f1       	breq	.+98     	; 0x4ccc <vfscanf+0x1f6>
    4c6a:	39 36       	cpi	r19, 0x69	; 105
    4c6c:	b1 f1       	breq	.+108    	; 0x4cda <vfscanf+0x204>
    4c6e:	38 35       	cpi	r19, 0x58	; 88
    4c70:	09 f0       	breq	.+2      	; 0x4c74 <vfscanf+0x19e>
    4c72:	39 c0       	rjmp	.+114    	; 0x4ce6 <vfscanf+0x210>
    4c74:	27 c0       	rjmp	.+78     	; 0x4cc4 <vfscanf+0x1ee>
    4c76:	33 37       	cpi	r19, 0x73	; 115
    4c78:	a1 f0       	breq	.+40     	; 0x4ca2 <vfscanf+0x1cc>
    4c7a:	18 f4       	brcc	.+6      	; 0x4c82 <vfscanf+0x1ac>
    4c7c:	30 37       	cpi	r19, 0x70	; 112
    4c7e:	11 f1       	breq	.+68     	; 0x4cc4 <vfscanf+0x1ee>
    4c80:	32 c0       	rjmp	.+100    	; 0x4ce6 <vfscanf+0x210>
    4c82:	35 37       	cpi	r19, 0x75	; 117
    4c84:	19 f1       	breq	.+70     	; 0x4ccc <vfscanf+0x1f6>
    4c86:	38 37       	cpi	r19, 0x78	; 120
    4c88:	e9 f0       	breq	.+58     	; 0x4cc4 <vfscanf+0x1ee>
    4c8a:	2d c0       	rjmp	.+90     	; 0x4ce6 <vfscanf+0x210>
    4c8c:	e1 14       	cp	r14, r1
    4c8e:	f1 04       	cpc	r15, r1
    4c90:	29 f0       	breq	.+10     	; 0x4c9c <vfscanf+0x1c6>
    4c92:	f7 01       	movw	r30, r14
    4c94:	60 82       	st	Z, r6
    4c96:	c7 01       	movw	r24, r14
    4c98:	01 96       	adiw	r24, 0x01	; 1
    4c9a:	7c 01       	movw	r14, r24
    4c9c:	01 50       	subi	r16, 0x01	; 1
    4c9e:	11 09       	sbc	r17, r1
    4ca0:	59 f0       	breq	.+22     	; 0x4cb8 <vfscanf+0x1e2>
    4ca2:	c6 01       	movw	r24, r12
    4ca4:	e9 d4       	rcall	.+2514   	; 0x5678 <fgetc>
    4ca6:	3c 01       	movw	r6, r24
    4ca8:	97 fd       	sbrc	r25, 7
    4caa:	06 c0       	rjmp	.+12     	; 0x4cb8 <vfscanf+0x1e2>
    4cac:	ac d4       	rcall	.+2392   	; 0x5606 <isspace>
    4cae:	89 2b       	or	r24, r25
    4cb0:	69 f3       	breq	.-38     	; 0x4c8c <vfscanf+0x1b6>
    4cb2:	b6 01       	movw	r22, r12
    4cb4:	c3 01       	movw	r24, r6
    4cb6:	7f d5       	rcall	.+2814   	; 0x57b6 <ungetc>
    4cb8:	e1 14       	cp	r14, r1
    4cba:	f1 04       	cpc	r15, r1
    4cbc:	f9 f0       	breq	.+62     	; 0x4cfc <vfscanf+0x226>
    4cbe:	f7 01       	movw	r30, r14
    4cc0:	10 82       	st	Z, r1
    4cc2:	1c c0       	rjmp	.+56     	; 0x4cfc <vfscanf+0x226>
    4cc4:	fb 2d       	mov	r31, r11
    4cc6:	f0 64       	ori	r31, 0x40	; 64
    4cc8:	bf 2e       	mov	r11, r31
    4cca:	07 c0       	rjmp	.+14     	; 0x4cda <vfscanf+0x204>
    4ccc:	8b 2d       	mov	r24, r11
    4cce:	80 62       	ori	r24, 0x20	; 32
    4cd0:	b8 2e       	mov	r11, r24
    4cd2:	03 c0       	rjmp	.+6      	; 0x4cda <vfscanf+0x204>
    4cd4:	9b 2d       	mov	r25, r11
    4cd6:	90 61       	ori	r25, 0x10	; 16
    4cd8:	b9 2e       	mov	r11, r25
    4cda:	2b 2d       	mov	r18, r11
    4cdc:	a7 01       	movw	r20, r14
    4cde:	b8 01       	movw	r22, r16
    4ce0:	c6 01       	movw	r24, r12
    4ce2:	94 dc       	rcall	.-1752   	; 0x460c <conv_int>
    4ce4:	04 c0       	rjmp	.+8      	; 0x4cee <vfscanf+0x218>
    4ce6:	a7 01       	movw	r20, r14
    4ce8:	b8 01       	movw	r22, r16
    4cea:	c6 01       	movw	r24, r12
    4cec:	b9 dd       	rcall	.-1166   	; 0x4860 <conv_flt>
    4cee:	81 11       	cpse	r24, r1
    4cf0:	05 c0       	rjmp	.+10     	; 0x4cfc <vfscanf+0x226>
    4cf2:	f6 01       	movw	r30, r12
    4cf4:	83 81       	ldd	r24, Z+3	; 0x03
    4cf6:	80 73       	andi	r24, 0x30	; 48
    4cf8:	29 f4       	brne	.+10     	; 0x4d04 <vfscanf+0x22e>
    4cfa:	06 c0       	rjmp	.+12     	; 0x4d08 <vfscanf+0x232>
    4cfc:	b0 fc       	sbrc	r11, 0
    4cfe:	f7 ce       	rjmp	.-530    	; 0x4aee <vfscanf+0x18>
    4d00:	a3 94       	inc	r10
    4d02:	f5 ce       	rjmp	.-534    	; 0x4aee <vfscanf+0x18>
    4d04:	aa 20       	and	r10, r10
    4d06:	19 f0       	breq	.+6      	; 0x4d0e <vfscanf+0x238>
    4d08:	8a 2d       	mov	r24, r10
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	02 c0       	rjmp	.+4      	; 0x4d12 <vfscanf+0x23c>
    4d0e:	8f ef       	ldi	r24, 0xFF	; 255
    4d10:	9f ef       	ldi	r25, 0xFF	; 255
    4d12:	21 96       	adiw	r28, 0x01	; 1
    4d14:	e0 e1       	ldi	r30, 0x10	; 16
    4d16:	66 c3       	rjmp	.+1740   	; 0x53e4 <__epilogue_restores__+0x4>

00004d18 <__subsf3>:
    4d18:	50 58       	subi	r21, 0x80	; 128

00004d1a <__addsf3>:
    4d1a:	bb 27       	eor	r27, r27
    4d1c:	aa 27       	eor	r26, r26
    4d1e:	0e d0       	rcall	.+28     	; 0x4d3c <__addsf3x>
    4d20:	e8 c1       	rjmp	.+976    	; 0x50f2 <__fp_round>
    4d22:	b1 d1       	rcall	.+866    	; 0x5086 <__fp_pscA>
    4d24:	30 f0       	brcs	.+12     	; 0x4d32 <__addsf3+0x18>
    4d26:	b6 d1       	rcall	.+876    	; 0x5094 <__fp_pscB>
    4d28:	20 f0       	brcs	.+8      	; 0x4d32 <__addsf3+0x18>
    4d2a:	31 f4       	brne	.+12     	; 0x4d38 <__addsf3+0x1e>
    4d2c:	9f 3f       	cpi	r25, 0xFF	; 255
    4d2e:	11 f4       	brne	.+4      	; 0x4d34 <__addsf3+0x1a>
    4d30:	1e f4       	brtc	.+6      	; 0x4d38 <__addsf3+0x1e>
    4d32:	81 c1       	rjmp	.+770    	; 0x5036 <__fp_nan>
    4d34:	0e f4       	brtc	.+2      	; 0x4d38 <__addsf3+0x1e>
    4d36:	e0 95       	com	r30
    4d38:	e7 fb       	bst	r30, 7
    4d3a:	77 c1       	rjmp	.+750    	; 0x502a <__fp_inf>

00004d3c <__addsf3x>:
    4d3c:	e9 2f       	mov	r30, r25
    4d3e:	fb d1       	rcall	.+1014   	; 0x5136 <__fp_split3>
    4d40:	80 f3       	brcs	.-32     	; 0x4d22 <__addsf3+0x8>
    4d42:	ba 17       	cp	r27, r26
    4d44:	62 07       	cpc	r22, r18
    4d46:	73 07       	cpc	r23, r19
    4d48:	84 07       	cpc	r24, r20
    4d4a:	95 07       	cpc	r25, r21
    4d4c:	18 f0       	brcs	.+6      	; 0x4d54 <__addsf3x+0x18>
    4d4e:	71 f4       	brne	.+28     	; 0x4d6c <__addsf3x+0x30>
    4d50:	9e f5       	brtc	.+102    	; 0x4db8 <__addsf3x+0x7c>
    4d52:	13 c2       	rjmp	.+1062   	; 0x517a <__fp_zero>
    4d54:	0e f4       	brtc	.+2      	; 0x4d58 <__addsf3x+0x1c>
    4d56:	e0 95       	com	r30
    4d58:	0b 2e       	mov	r0, r27
    4d5a:	ba 2f       	mov	r27, r26
    4d5c:	a0 2d       	mov	r26, r0
    4d5e:	0b 01       	movw	r0, r22
    4d60:	b9 01       	movw	r22, r18
    4d62:	90 01       	movw	r18, r0
    4d64:	0c 01       	movw	r0, r24
    4d66:	ca 01       	movw	r24, r20
    4d68:	a0 01       	movw	r20, r0
    4d6a:	11 24       	eor	r1, r1
    4d6c:	ff 27       	eor	r31, r31
    4d6e:	59 1b       	sub	r21, r25
    4d70:	99 f0       	breq	.+38     	; 0x4d98 <__addsf3x+0x5c>
    4d72:	59 3f       	cpi	r21, 0xF9	; 249
    4d74:	50 f4       	brcc	.+20     	; 0x4d8a <__addsf3x+0x4e>
    4d76:	50 3e       	cpi	r21, 0xE0	; 224
    4d78:	68 f1       	brcs	.+90     	; 0x4dd4 <__addsf3x+0x98>
    4d7a:	1a 16       	cp	r1, r26
    4d7c:	f0 40       	sbci	r31, 0x00	; 0
    4d7e:	a2 2f       	mov	r26, r18
    4d80:	23 2f       	mov	r18, r19
    4d82:	34 2f       	mov	r19, r20
    4d84:	44 27       	eor	r20, r20
    4d86:	58 5f       	subi	r21, 0xF8	; 248
    4d88:	f3 cf       	rjmp	.-26     	; 0x4d70 <__addsf3x+0x34>
    4d8a:	46 95       	lsr	r20
    4d8c:	37 95       	ror	r19
    4d8e:	27 95       	ror	r18
    4d90:	a7 95       	ror	r26
    4d92:	f0 40       	sbci	r31, 0x00	; 0
    4d94:	53 95       	inc	r21
    4d96:	c9 f7       	brne	.-14     	; 0x4d8a <__addsf3x+0x4e>
    4d98:	7e f4       	brtc	.+30     	; 0x4db8 <__addsf3x+0x7c>
    4d9a:	1f 16       	cp	r1, r31
    4d9c:	ba 0b       	sbc	r27, r26
    4d9e:	62 0b       	sbc	r22, r18
    4da0:	73 0b       	sbc	r23, r19
    4da2:	84 0b       	sbc	r24, r20
    4da4:	ba f0       	brmi	.+46     	; 0x4dd4 <__addsf3x+0x98>
    4da6:	91 50       	subi	r25, 0x01	; 1
    4da8:	a1 f0       	breq	.+40     	; 0x4dd2 <__addsf3x+0x96>
    4daa:	ff 0f       	add	r31, r31
    4dac:	bb 1f       	adc	r27, r27
    4dae:	66 1f       	adc	r22, r22
    4db0:	77 1f       	adc	r23, r23
    4db2:	88 1f       	adc	r24, r24
    4db4:	c2 f7       	brpl	.-16     	; 0x4da6 <__addsf3x+0x6a>
    4db6:	0e c0       	rjmp	.+28     	; 0x4dd4 <__addsf3x+0x98>
    4db8:	ba 0f       	add	r27, r26
    4dba:	62 1f       	adc	r22, r18
    4dbc:	73 1f       	adc	r23, r19
    4dbe:	84 1f       	adc	r24, r20
    4dc0:	48 f4       	brcc	.+18     	; 0x4dd4 <__addsf3x+0x98>
    4dc2:	87 95       	ror	r24
    4dc4:	77 95       	ror	r23
    4dc6:	67 95       	ror	r22
    4dc8:	b7 95       	ror	r27
    4dca:	f7 95       	ror	r31
    4dcc:	9e 3f       	cpi	r25, 0xFE	; 254
    4dce:	08 f0       	brcs	.+2      	; 0x4dd2 <__addsf3x+0x96>
    4dd0:	b3 cf       	rjmp	.-154    	; 0x4d38 <__addsf3+0x1e>
    4dd2:	93 95       	inc	r25
    4dd4:	88 0f       	add	r24, r24
    4dd6:	08 f0       	brcs	.+2      	; 0x4dda <__addsf3x+0x9e>
    4dd8:	99 27       	eor	r25, r25
    4dda:	ee 0f       	add	r30, r30
    4ddc:	97 95       	ror	r25
    4dde:	87 95       	ror	r24
    4de0:	08 95       	ret

00004de2 <atan>:
    4de2:	df 93       	push	r29
    4de4:	dd 27       	eor	r29, r29
    4de6:	b9 2f       	mov	r27, r25
    4de8:	bf 77       	andi	r27, 0x7F	; 127
    4dea:	40 e8       	ldi	r20, 0x80	; 128
    4dec:	5f e3       	ldi	r21, 0x3F	; 63
    4dee:	16 16       	cp	r1, r22
    4df0:	17 06       	cpc	r1, r23
    4df2:	48 07       	cpc	r20, r24
    4df4:	5b 07       	cpc	r21, r27
    4df6:	10 f4       	brcc	.+4      	; 0x4dfc <atan+0x1a>
    4df8:	d9 2f       	mov	r29, r25
    4dfa:	ca d1       	rcall	.+916    	; 0x5190 <inverse>
    4dfc:	9f 93       	push	r25
    4dfe:	8f 93       	push	r24
    4e00:	7f 93       	push	r23
    4e02:	6f 93       	push	r22
    4e04:	77 d2       	rcall	.+1262   	; 0x52f4 <square>
    4e06:	e8 e6       	ldi	r30, 0x68	; 104
    4e08:	f0 e0       	ldi	r31, 0x00	; 0
    4e0a:	18 d1       	rcall	.+560    	; 0x503c <__fp_powser>
    4e0c:	72 d1       	rcall	.+740    	; 0x50f2 <__fp_round>
    4e0e:	2f 91       	pop	r18
    4e10:	3f 91       	pop	r19
    4e12:	4f 91       	pop	r20
    4e14:	5f 91       	pop	r21
    4e16:	cf d1       	rcall	.+926    	; 0x51b6 <__mulsf3x>
    4e18:	dd 23       	and	r29, r29
    4e1a:	49 f0       	breq	.+18     	; 0x4e2e <atan+0x4c>
    4e1c:	90 58       	subi	r25, 0x80	; 128
    4e1e:	a2 ea       	ldi	r26, 0xA2	; 162
    4e20:	2a ed       	ldi	r18, 0xDA	; 218
    4e22:	3f e0       	ldi	r19, 0x0F	; 15
    4e24:	49 ec       	ldi	r20, 0xC9	; 201
    4e26:	5f e3       	ldi	r21, 0x3F	; 63
    4e28:	d0 78       	andi	r29, 0x80	; 128
    4e2a:	5d 27       	eor	r21, r29
    4e2c:	87 df       	rcall	.-242    	; 0x4d3c <__addsf3x>
    4e2e:	df 91       	pop	r29
    4e30:	60 c1       	rjmp	.+704    	; 0x50f2 <__fp_round>

00004e32 <__cmpsf2>:
    4e32:	d7 d0       	rcall	.+430    	; 0x4fe2 <__fp_cmp>
    4e34:	08 f4       	brcc	.+2      	; 0x4e38 <__cmpsf2+0x6>
    4e36:	81 e0       	ldi	r24, 0x01	; 1
    4e38:	08 95       	ret

00004e3a <cos>:
    4e3a:	34 d1       	rcall	.+616    	; 0x50a4 <__fp_rempio2>
    4e3c:	e3 95       	inc	r30
    4e3e:	6a c1       	rjmp	.+724    	; 0x5114 <__fp_sinus>

00004e40 <__divsf3>:
    4e40:	0c d0       	rcall	.+24     	; 0x4e5a <__divsf3x>
    4e42:	57 c1       	rjmp	.+686    	; 0x50f2 <__fp_round>
    4e44:	27 d1       	rcall	.+590    	; 0x5094 <__fp_pscB>
    4e46:	40 f0       	brcs	.+16     	; 0x4e58 <__divsf3+0x18>
    4e48:	1e d1       	rcall	.+572    	; 0x5086 <__fp_pscA>
    4e4a:	30 f0       	brcs	.+12     	; 0x4e58 <__divsf3+0x18>
    4e4c:	21 f4       	brne	.+8      	; 0x4e56 <__divsf3+0x16>
    4e4e:	5f 3f       	cpi	r21, 0xFF	; 255
    4e50:	19 f0       	breq	.+6      	; 0x4e58 <__divsf3+0x18>
    4e52:	eb c0       	rjmp	.+470    	; 0x502a <__fp_inf>
    4e54:	51 11       	cpse	r21, r1
    4e56:	92 c1       	rjmp	.+804    	; 0x517c <__fp_szero>
    4e58:	ee c0       	rjmp	.+476    	; 0x5036 <__fp_nan>

00004e5a <__divsf3x>:
    4e5a:	6d d1       	rcall	.+730    	; 0x5136 <__fp_split3>
    4e5c:	98 f3       	brcs	.-26     	; 0x4e44 <__divsf3+0x4>

00004e5e <__divsf3_pse>:
    4e5e:	99 23       	and	r25, r25
    4e60:	c9 f3       	breq	.-14     	; 0x4e54 <__divsf3+0x14>
    4e62:	55 23       	and	r21, r21
    4e64:	b1 f3       	breq	.-20     	; 0x4e52 <__divsf3+0x12>
    4e66:	95 1b       	sub	r25, r21
    4e68:	55 0b       	sbc	r21, r21
    4e6a:	bb 27       	eor	r27, r27
    4e6c:	aa 27       	eor	r26, r26
    4e6e:	62 17       	cp	r22, r18
    4e70:	73 07       	cpc	r23, r19
    4e72:	84 07       	cpc	r24, r20
    4e74:	38 f0       	brcs	.+14     	; 0x4e84 <__divsf3_pse+0x26>
    4e76:	9f 5f       	subi	r25, 0xFF	; 255
    4e78:	5f 4f       	sbci	r21, 0xFF	; 255
    4e7a:	22 0f       	add	r18, r18
    4e7c:	33 1f       	adc	r19, r19
    4e7e:	44 1f       	adc	r20, r20
    4e80:	aa 1f       	adc	r26, r26
    4e82:	a9 f3       	breq	.-22     	; 0x4e6e <__divsf3_pse+0x10>
    4e84:	33 d0       	rcall	.+102    	; 0x4eec <__divsf3_pse+0x8e>
    4e86:	0e 2e       	mov	r0, r30
    4e88:	3a f0       	brmi	.+14     	; 0x4e98 <__divsf3_pse+0x3a>
    4e8a:	e0 e8       	ldi	r30, 0x80	; 128
    4e8c:	30 d0       	rcall	.+96     	; 0x4eee <__divsf3_pse+0x90>
    4e8e:	91 50       	subi	r25, 0x01	; 1
    4e90:	50 40       	sbci	r21, 0x00	; 0
    4e92:	e6 95       	lsr	r30
    4e94:	00 1c       	adc	r0, r0
    4e96:	ca f7       	brpl	.-14     	; 0x4e8a <__divsf3_pse+0x2c>
    4e98:	29 d0       	rcall	.+82     	; 0x4eec <__divsf3_pse+0x8e>
    4e9a:	fe 2f       	mov	r31, r30
    4e9c:	27 d0       	rcall	.+78     	; 0x4eec <__divsf3_pse+0x8e>
    4e9e:	66 0f       	add	r22, r22
    4ea0:	77 1f       	adc	r23, r23
    4ea2:	88 1f       	adc	r24, r24
    4ea4:	bb 1f       	adc	r27, r27
    4ea6:	26 17       	cp	r18, r22
    4ea8:	37 07       	cpc	r19, r23
    4eaa:	48 07       	cpc	r20, r24
    4eac:	ab 07       	cpc	r26, r27
    4eae:	b0 e8       	ldi	r27, 0x80	; 128
    4eb0:	09 f0       	breq	.+2      	; 0x4eb4 <__divsf3_pse+0x56>
    4eb2:	bb 0b       	sbc	r27, r27
    4eb4:	80 2d       	mov	r24, r0
    4eb6:	bf 01       	movw	r22, r30
    4eb8:	ff 27       	eor	r31, r31
    4eba:	93 58       	subi	r25, 0x83	; 131
    4ebc:	5f 4f       	sbci	r21, 0xFF	; 255
    4ebe:	2a f0       	brmi	.+10     	; 0x4eca <__divsf3_pse+0x6c>
    4ec0:	9e 3f       	cpi	r25, 0xFE	; 254
    4ec2:	51 05       	cpc	r21, r1
    4ec4:	68 f0       	brcs	.+26     	; 0x4ee0 <__divsf3_pse+0x82>
    4ec6:	b1 c0       	rjmp	.+354    	; 0x502a <__fp_inf>
    4ec8:	59 c1       	rjmp	.+690    	; 0x517c <__fp_szero>
    4eca:	5f 3f       	cpi	r21, 0xFF	; 255
    4ecc:	ec f3       	brlt	.-6      	; 0x4ec8 <__divsf3_pse+0x6a>
    4ece:	98 3e       	cpi	r25, 0xE8	; 232
    4ed0:	dc f3       	brlt	.-10     	; 0x4ec8 <__divsf3_pse+0x6a>
    4ed2:	86 95       	lsr	r24
    4ed4:	77 95       	ror	r23
    4ed6:	67 95       	ror	r22
    4ed8:	b7 95       	ror	r27
    4eda:	f7 95       	ror	r31
    4edc:	9f 5f       	subi	r25, 0xFF	; 255
    4ede:	c9 f7       	brne	.-14     	; 0x4ed2 <__divsf3_pse+0x74>
    4ee0:	88 0f       	add	r24, r24
    4ee2:	91 1d       	adc	r25, r1
    4ee4:	96 95       	lsr	r25
    4ee6:	87 95       	ror	r24
    4ee8:	97 f9       	bld	r25, 7
    4eea:	08 95       	ret
    4eec:	e1 e0       	ldi	r30, 0x01	; 1
    4eee:	66 0f       	add	r22, r22
    4ef0:	77 1f       	adc	r23, r23
    4ef2:	88 1f       	adc	r24, r24
    4ef4:	bb 1f       	adc	r27, r27
    4ef6:	62 17       	cp	r22, r18
    4ef8:	73 07       	cpc	r23, r19
    4efa:	84 07       	cpc	r24, r20
    4efc:	ba 07       	cpc	r27, r26
    4efe:	20 f0       	brcs	.+8      	; 0x4f08 <__divsf3_pse+0xaa>
    4f00:	62 1b       	sub	r22, r18
    4f02:	73 0b       	sbc	r23, r19
    4f04:	84 0b       	sbc	r24, r20
    4f06:	ba 0b       	sbc	r27, r26
    4f08:	ee 1f       	adc	r30, r30
    4f0a:	88 f7       	brcc	.-30     	; 0x4eee <__divsf3_pse+0x90>
    4f0c:	e0 95       	com	r30
    4f0e:	08 95       	ret

00004f10 <__fixunssfsi>:
    4f10:	1a d1       	rcall	.+564    	; 0x5146 <__fp_splitA>
    4f12:	88 f0       	brcs	.+34     	; 0x4f36 <__fixunssfsi+0x26>
    4f14:	9f 57       	subi	r25, 0x7F	; 127
    4f16:	90 f0       	brcs	.+36     	; 0x4f3c <__fixunssfsi+0x2c>
    4f18:	b9 2f       	mov	r27, r25
    4f1a:	99 27       	eor	r25, r25
    4f1c:	b7 51       	subi	r27, 0x17	; 23
    4f1e:	a0 f0       	brcs	.+40     	; 0x4f48 <__fixunssfsi+0x38>
    4f20:	d1 f0       	breq	.+52     	; 0x4f56 <__fixunssfsi+0x46>
    4f22:	66 0f       	add	r22, r22
    4f24:	77 1f       	adc	r23, r23
    4f26:	88 1f       	adc	r24, r24
    4f28:	99 1f       	adc	r25, r25
    4f2a:	1a f0       	brmi	.+6      	; 0x4f32 <__fixunssfsi+0x22>
    4f2c:	ba 95       	dec	r27
    4f2e:	c9 f7       	brne	.-14     	; 0x4f22 <__fixunssfsi+0x12>
    4f30:	12 c0       	rjmp	.+36     	; 0x4f56 <__fixunssfsi+0x46>
    4f32:	b1 30       	cpi	r27, 0x01	; 1
    4f34:	81 f0       	breq	.+32     	; 0x4f56 <__fixunssfsi+0x46>
    4f36:	21 d1       	rcall	.+578    	; 0x517a <__fp_zero>
    4f38:	b1 e0       	ldi	r27, 0x01	; 1
    4f3a:	08 95       	ret
    4f3c:	1e c1       	rjmp	.+572    	; 0x517a <__fp_zero>
    4f3e:	67 2f       	mov	r22, r23
    4f40:	78 2f       	mov	r23, r24
    4f42:	88 27       	eor	r24, r24
    4f44:	b8 5f       	subi	r27, 0xF8	; 248
    4f46:	39 f0       	breq	.+14     	; 0x4f56 <__fixunssfsi+0x46>
    4f48:	b9 3f       	cpi	r27, 0xF9	; 249
    4f4a:	cc f3       	brlt	.-14     	; 0x4f3e <__fixunssfsi+0x2e>
    4f4c:	86 95       	lsr	r24
    4f4e:	77 95       	ror	r23
    4f50:	67 95       	ror	r22
    4f52:	b3 95       	inc	r27
    4f54:	d9 f7       	brne	.-10     	; 0x4f4c <__fixunssfsi+0x3c>
    4f56:	3e f4       	brtc	.+14     	; 0x4f66 <__fixunssfsi+0x56>
    4f58:	90 95       	com	r25
    4f5a:	80 95       	com	r24
    4f5c:	70 95       	com	r23
    4f5e:	61 95       	neg	r22
    4f60:	7f 4f       	sbci	r23, 0xFF	; 255
    4f62:	8f 4f       	sbci	r24, 0xFF	; 255
    4f64:	9f 4f       	sbci	r25, 0xFF	; 255
    4f66:	08 95       	ret

00004f68 <__floatunsisf>:
    4f68:	e8 94       	clt
    4f6a:	09 c0       	rjmp	.+18     	; 0x4f7e <__floatsisf+0x12>

00004f6c <__floatsisf>:
    4f6c:	97 fb       	bst	r25, 7
    4f6e:	3e f4       	brtc	.+14     	; 0x4f7e <__floatsisf+0x12>
    4f70:	90 95       	com	r25
    4f72:	80 95       	com	r24
    4f74:	70 95       	com	r23
    4f76:	61 95       	neg	r22
    4f78:	7f 4f       	sbci	r23, 0xFF	; 255
    4f7a:	8f 4f       	sbci	r24, 0xFF	; 255
    4f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f7e:	99 23       	and	r25, r25
    4f80:	a9 f0       	breq	.+42     	; 0x4fac <__floatsisf+0x40>
    4f82:	f9 2f       	mov	r31, r25
    4f84:	96 e9       	ldi	r25, 0x96	; 150
    4f86:	bb 27       	eor	r27, r27
    4f88:	93 95       	inc	r25
    4f8a:	f6 95       	lsr	r31
    4f8c:	87 95       	ror	r24
    4f8e:	77 95       	ror	r23
    4f90:	67 95       	ror	r22
    4f92:	b7 95       	ror	r27
    4f94:	f1 11       	cpse	r31, r1
    4f96:	f8 cf       	rjmp	.-16     	; 0x4f88 <__floatsisf+0x1c>
    4f98:	fa f4       	brpl	.+62     	; 0x4fd8 <__floatsisf+0x6c>
    4f9a:	bb 0f       	add	r27, r27
    4f9c:	11 f4       	brne	.+4      	; 0x4fa2 <__floatsisf+0x36>
    4f9e:	60 ff       	sbrs	r22, 0
    4fa0:	1b c0       	rjmp	.+54     	; 0x4fd8 <__floatsisf+0x6c>
    4fa2:	6f 5f       	subi	r22, 0xFF	; 255
    4fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    4fa6:	8f 4f       	sbci	r24, 0xFF	; 255
    4fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    4faa:	16 c0       	rjmp	.+44     	; 0x4fd8 <__floatsisf+0x6c>
    4fac:	88 23       	and	r24, r24
    4fae:	11 f0       	breq	.+4      	; 0x4fb4 <__floatsisf+0x48>
    4fb0:	96 e9       	ldi	r25, 0x96	; 150
    4fb2:	11 c0       	rjmp	.+34     	; 0x4fd6 <__floatsisf+0x6a>
    4fb4:	77 23       	and	r23, r23
    4fb6:	21 f0       	breq	.+8      	; 0x4fc0 <__floatsisf+0x54>
    4fb8:	9e e8       	ldi	r25, 0x8E	; 142
    4fba:	87 2f       	mov	r24, r23
    4fbc:	76 2f       	mov	r23, r22
    4fbe:	05 c0       	rjmp	.+10     	; 0x4fca <__floatsisf+0x5e>
    4fc0:	66 23       	and	r22, r22
    4fc2:	71 f0       	breq	.+28     	; 0x4fe0 <__floatsisf+0x74>
    4fc4:	96 e8       	ldi	r25, 0x86	; 134
    4fc6:	86 2f       	mov	r24, r22
    4fc8:	70 e0       	ldi	r23, 0x00	; 0
    4fca:	60 e0       	ldi	r22, 0x00	; 0
    4fcc:	2a f0       	brmi	.+10     	; 0x4fd8 <__floatsisf+0x6c>
    4fce:	9a 95       	dec	r25
    4fd0:	66 0f       	add	r22, r22
    4fd2:	77 1f       	adc	r23, r23
    4fd4:	88 1f       	adc	r24, r24
    4fd6:	da f7       	brpl	.-10     	; 0x4fce <__floatsisf+0x62>
    4fd8:	88 0f       	add	r24, r24
    4fda:	96 95       	lsr	r25
    4fdc:	87 95       	ror	r24
    4fde:	97 f9       	bld	r25, 7
    4fe0:	08 95       	ret

00004fe2 <__fp_cmp>:
    4fe2:	99 0f       	add	r25, r25
    4fe4:	00 08       	sbc	r0, r0
    4fe6:	55 0f       	add	r21, r21
    4fe8:	aa 0b       	sbc	r26, r26
    4fea:	e0 e8       	ldi	r30, 0x80	; 128
    4fec:	fe ef       	ldi	r31, 0xFE	; 254
    4fee:	16 16       	cp	r1, r22
    4ff0:	17 06       	cpc	r1, r23
    4ff2:	e8 07       	cpc	r30, r24
    4ff4:	f9 07       	cpc	r31, r25
    4ff6:	c0 f0       	brcs	.+48     	; 0x5028 <__fp_cmp+0x46>
    4ff8:	12 16       	cp	r1, r18
    4ffa:	13 06       	cpc	r1, r19
    4ffc:	e4 07       	cpc	r30, r20
    4ffe:	f5 07       	cpc	r31, r21
    5000:	98 f0       	brcs	.+38     	; 0x5028 <__fp_cmp+0x46>
    5002:	62 1b       	sub	r22, r18
    5004:	73 0b       	sbc	r23, r19
    5006:	84 0b       	sbc	r24, r20
    5008:	95 0b       	sbc	r25, r21
    500a:	39 f4       	brne	.+14     	; 0x501a <__fp_cmp+0x38>
    500c:	0a 26       	eor	r0, r26
    500e:	61 f0       	breq	.+24     	; 0x5028 <__fp_cmp+0x46>
    5010:	23 2b       	or	r18, r19
    5012:	24 2b       	or	r18, r20
    5014:	25 2b       	or	r18, r21
    5016:	21 f4       	brne	.+8      	; 0x5020 <__fp_cmp+0x3e>
    5018:	08 95       	ret
    501a:	0a 26       	eor	r0, r26
    501c:	09 f4       	brne	.+2      	; 0x5020 <__fp_cmp+0x3e>
    501e:	a1 40       	sbci	r26, 0x01	; 1
    5020:	a6 95       	lsr	r26
    5022:	8f ef       	ldi	r24, 0xFF	; 255
    5024:	81 1d       	adc	r24, r1
    5026:	81 1d       	adc	r24, r1
    5028:	08 95       	ret

0000502a <__fp_inf>:
    502a:	97 f9       	bld	r25, 7
    502c:	9f 67       	ori	r25, 0x7F	; 127
    502e:	80 e8       	ldi	r24, 0x80	; 128
    5030:	70 e0       	ldi	r23, 0x00	; 0
    5032:	60 e0       	ldi	r22, 0x00	; 0
    5034:	08 95       	ret

00005036 <__fp_nan>:
    5036:	9f ef       	ldi	r25, 0xFF	; 255
    5038:	80 ec       	ldi	r24, 0xC0	; 192
    503a:	08 95       	ret

0000503c <__fp_powser>:
    503c:	df 93       	push	r29
    503e:	cf 93       	push	r28
    5040:	1f 93       	push	r17
    5042:	0f 93       	push	r16
    5044:	ff 92       	push	r15
    5046:	ef 92       	push	r14
    5048:	df 92       	push	r13
    504a:	7b 01       	movw	r14, r22
    504c:	8c 01       	movw	r16, r24
    504e:	68 94       	set
    5050:	05 c0       	rjmp	.+10     	; 0x505c <__fp_powser+0x20>
    5052:	da 2e       	mov	r13, r26
    5054:	ef 01       	movw	r28, r30
    5056:	af d0       	rcall	.+350    	; 0x51b6 <__mulsf3x>
    5058:	fe 01       	movw	r30, r28
    505a:	e8 94       	clt
    505c:	a5 91       	lpm	r26, Z+
    505e:	25 91       	lpm	r18, Z+
    5060:	35 91       	lpm	r19, Z+
    5062:	45 91       	lpm	r20, Z+
    5064:	55 91       	lpm	r21, Z+
    5066:	ae f3       	brts	.-22     	; 0x5052 <__fp_powser+0x16>
    5068:	ef 01       	movw	r28, r30
    506a:	68 de       	rcall	.-816    	; 0x4d3c <__addsf3x>
    506c:	fe 01       	movw	r30, r28
    506e:	97 01       	movw	r18, r14
    5070:	a8 01       	movw	r20, r16
    5072:	da 94       	dec	r13
    5074:	79 f7       	brne	.-34     	; 0x5054 <__fp_powser+0x18>
    5076:	df 90       	pop	r13
    5078:	ef 90       	pop	r14
    507a:	ff 90       	pop	r15
    507c:	0f 91       	pop	r16
    507e:	1f 91       	pop	r17
    5080:	cf 91       	pop	r28
    5082:	df 91       	pop	r29
    5084:	08 95       	ret

00005086 <__fp_pscA>:
    5086:	00 24       	eor	r0, r0
    5088:	0a 94       	dec	r0
    508a:	16 16       	cp	r1, r22
    508c:	17 06       	cpc	r1, r23
    508e:	18 06       	cpc	r1, r24
    5090:	09 06       	cpc	r0, r25
    5092:	08 95       	ret

00005094 <__fp_pscB>:
    5094:	00 24       	eor	r0, r0
    5096:	0a 94       	dec	r0
    5098:	12 16       	cp	r1, r18
    509a:	13 06       	cpc	r1, r19
    509c:	14 06       	cpc	r1, r20
    509e:	05 06       	cpc	r0, r21
    50a0:	08 95       	ret
    50a2:	c9 cf       	rjmp	.-110    	; 0x5036 <__fp_nan>

000050a4 <__fp_rempio2>:
    50a4:	50 d0       	rcall	.+160    	; 0x5146 <__fp_splitA>
    50a6:	e8 f3       	brcs	.-6      	; 0x50a2 <__fp_pscB+0xe>
    50a8:	e8 94       	clt
    50aa:	e0 e0       	ldi	r30, 0x00	; 0
    50ac:	bb 27       	eor	r27, r27
    50ae:	9f 57       	subi	r25, 0x7F	; 127
    50b0:	f0 f0       	brcs	.+60     	; 0x50ee <__fp_rempio2+0x4a>
    50b2:	2a ed       	ldi	r18, 0xDA	; 218
    50b4:	3f e0       	ldi	r19, 0x0F	; 15
    50b6:	49 ec       	ldi	r20, 0xC9	; 201
    50b8:	06 c0       	rjmp	.+12     	; 0x50c6 <__fp_rempio2+0x22>
    50ba:	ee 0f       	add	r30, r30
    50bc:	bb 0f       	add	r27, r27
    50be:	66 1f       	adc	r22, r22
    50c0:	77 1f       	adc	r23, r23
    50c2:	88 1f       	adc	r24, r24
    50c4:	28 f0       	brcs	.+10     	; 0x50d0 <__fp_rempio2+0x2c>
    50c6:	b2 3a       	cpi	r27, 0xA2	; 162
    50c8:	62 07       	cpc	r22, r18
    50ca:	73 07       	cpc	r23, r19
    50cc:	84 07       	cpc	r24, r20
    50ce:	28 f0       	brcs	.+10     	; 0x50da <__fp_rempio2+0x36>
    50d0:	b2 5a       	subi	r27, 0xA2	; 162
    50d2:	62 0b       	sbc	r22, r18
    50d4:	73 0b       	sbc	r23, r19
    50d6:	84 0b       	sbc	r24, r20
    50d8:	e3 95       	inc	r30
    50da:	9a 95       	dec	r25
    50dc:	72 f7       	brpl	.-36     	; 0x50ba <__fp_rempio2+0x16>
    50de:	80 38       	cpi	r24, 0x80	; 128
    50e0:	30 f4       	brcc	.+12     	; 0x50ee <__fp_rempio2+0x4a>
    50e2:	9a 95       	dec	r25
    50e4:	bb 0f       	add	r27, r27
    50e6:	66 1f       	adc	r22, r22
    50e8:	77 1f       	adc	r23, r23
    50ea:	88 1f       	adc	r24, r24
    50ec:	d2 f7       	brpl	.-12     	; 0x50e2 <__fp_rempio2+0x3e>
    50ee:	90 48       	sbci	r25, 0x80	; 128
    50f0:	06 c1       	rjmp	.+524    	; 0x52fe <__fp_mpack_finite>

000050f2 <__fp_round>:
    50f2:	09 2e       	mov	r0, r25
    50f4:	03 94       	inc	r0
    50f6:	00 0c       	add	r0, r0
    50f8:	11 f4       	brne	.+4      	; 0x50fe <__fp_round+0xc>
    50fa:	88 23       	and	r24, r24
    50fc:	52 f0       	brmi	.+20     	; 0x5112 <__fp_round+0x20>
    50fe:	bb 0f       	add	r27, r27
    5100:	40 f4       	brcc	.+16     	; 0x5112 <__fp_round+0x20>
    5102:	bf 2b       	or	r27, r31
    5104:	11 f4       	brne	.+4      	; 0x510a <__fp_round+0x18>
    5106:	60 ff       	sbrs	r22, 0
    5108:	04 c0       	rjmp	.+8      	; 0x5112 <__fp_round+0x20>
    510a:	6f 5f       	subi	r22, 0xFF	; 255
    510c:	7f 4f       	sbci	r23, 0xFF	; 255
    510e:	8f 4f       	sbci	r24, 0xFF	; 255
    5110:	9f 4f       	sbci	r25, 0xFF	; 255
    5112:	08 95       	ret

00005114 <__fp_sinus>:
    5114:	ef 93       	push	r30
    5116:	e0 ff       	sbrs	r30, 0
    5118:	06 c0       	rjmp	.+12     	; 0x5126 <__fp_sinus+0x12>
    511a:	a2 ea       	ldi	r26, 0xA2	; 162
    511c:	2a ed       	ldi	r18, 0xDA	; 218
    511e:	3f e0       	ldi	r19, 0x0F	; 15
    5120:	49 ec       	ldi	r20, 0xC9	; 201
    5122:	5f eb       	ldi	r21, 0xBF	; 191
    5124:	0b de       	rcall	.-1002   	; 0x4d3c <__addsf3x>
    5126:	e5 df       	rcall	.-54     	; 0x50f2 <__fp_round>
    5128:	0f 90       	pop	r0
    512a:	03 94       	inc	r0
    512c:	01 fc       	sbrc	r0, 1
    512e:	90 58       	subi	r25, 0x80	; 128
    5130:	e5 e9       	ldi	r30, 0x95	; 149
    5132:	f0 e0       	ldi	r31, 0x00	; 0
    5134:	f7 c0       	rjmp	.+494    	; 0x5324 <__fp_powsodd>

00005136 <__fp_split3>:
    5136:	57 fd       	sbrc	r21, 7
    5138:	90 58       	subi	r25, 0x80	; 128
    513a:	44 0f       	add	r20, r20
    513c:	55 1f       	adc	r21, r21
    513e:	59 f0       	breq	.+22     	; 0x5156 <__fp_splitA+0x10>
    5140:	5f 3f       	cpi	r21, 0xFF	; 255
    5142:	71 f0       	breq	.+28     	; 0x5160 <__fp_splitA+0x1a>
    5144:	47 95       	ror	r20

00005146 <__fp_splitA>:
    5146:	88 0f       	add	r24, r24
    5148:	97 fb       	bst	r25, 7
    514a:	99 1f       	adc	r25, r25
    514c:	61 f0       	breq	.+24     	; 0x5166 <__fp_splitA+0x20>
    514e:	9f 3f       	cpi	r25, 0xFF	; 255
    5150:	79 f0       	breq	.+30     	; 0x5170 <__fp_splitA+0x2a>
    5152:	87 95       	ror	r24
    5154:	08 95       	ret
    5156:	12 16       	cp	r1, r18
    5158:	13 06       	cpc	r1, r19
    515a:	14 06       	cpc	r1, r20
    515c:	55 1f       	adc	r21, r21
    515e:	f2 cf       	rjmp	.-28     	; 0x5144 <__fp_split3+0xe>
    5160:	46 95       	lsr	r20
    5162:	f1 df       	rcall	.-30     	; 0x5146 <__fp_splitA>
    5164:	08 c0       	rjmp	.+16     	; 0x5176 <__fp_splitA+0x30>
    5166:	16 16       	cp	r1, r22
    5168:	17 06       	cpc	r1, r23
    516a:	18 06       	cpc	r1, r24
    516c:	99 1f       	adc	r25, r25
    516e:	f1 cf       	rjmp	.-30     	; 0x5152 <__fp_splitA+0xc>
    5170:	86 95       	lsr	r24
    5172:	71 05       	cpc	r23, r1
    5174:	61 05       	cpc	r22, r1
    5176:	08 94       	sec
    5178:	08 95       	ret

0000517a <__fp_zero>:
    517a:	e8 94       	clt

0000517c <__fp_szero>:
    517c:	bb 27       	eor	r27, r27
    517e:	66 27       	eor	r22, r22
    5180:	77 27       	eor	r23, r23
    5182:	cb 01       	movw	r24, r22
    5184:	97 f9       	bld	r25, 7
    5186:	08 95       	ret

00005188 <__gesf2>:
    5188:	2c df       	rcall	.-424    	; 0x4fe2 <__fp_cmp>
    518a:	08 f4       	brcc	.+2      	; 0x518e <__gesf2+0x6>
    518c:	8f ef       	ldi	r24, 0xFF	; 255
    518e:	08 95       	ret

00005190 <inverse>:
    5190:	9b 01       	movw	r18, r22
    5192:	ac 01       	movw	r20, r24
    5194:	60 e0       	ldi	r22, 0x00	; 0
    5196:	70 e0       	ldi	r23, 0x00	; 0
    5198:	80 e8       	ldi	r24, 0x80	; 128
    519a:	9f e3       	ldi	r25, 0x3F	; 63
    519c:	51 ce       	rjmp	.-862    	; 0x4e40 <__divsf3>

0000519e <__mulsf3>:
    519e:	0b d0       	rcall	.+22     	; 0x51b6 <__mulsf3x>
    51a0:	a8 cf       	rjmp	.-176    	; 0x50f2 <__fp_round>
    51a2:	71 df       	rcall	.-286    	; 0x5086 <__fp_pscA>
    51a4:	28 f0       	brcs	.+10     	; 0x51b0 <__mulsf3+0x12>
    51a6:	76 df       	rcall	.-276    	; 0x5094 <__fp_pscB>
    51a8:	18 f0       	brcs	.+6      	; 0x51b0 <__mulsf3+0x12>
    51aa:	95 23       	and	r25, r21
    51ac:	09 f0       	breq	.+2      	; 0x51b0 <__mulsf3+0x12>
    51ae:	3d cf       	rjmp	.-390    	; 0x502a <__fp_inf>
    51b0:	42 cf       	rjmp	.-380    	; 0x5036 <__fp_nan>
    51b2:	11 24       	eor	r1, r1
    51b4:	e3 cf       	rjmp	.-58     	; 0x517c <__fp_szero>

000051b6 <__mulsf3x>:
    51b6:	bf df       	rcall	.-130    	; 0x5136 <__fp_split3>
    51b8:	a0 f3       	brcs	.-24     	; 0x51a2 <__mulsf3+0x4>

000051ba <__mulsf3_pse>:
    51ba:	95 9f       	mul	r25, r21
    51bc:	d1 f3       	breq	.-12     	; 0x51b2 <__mulsf3+0x14>
    51be:	95 0f       	add	r25, r21
    51c0:	50 e0       	ldi	r21, 0x00	; 0
    51c2:	55 1f       	adc	r21, r21
    51c4:	62 9f       	mul	r22, r18
    51c6:	f0 01       	movw	r30, r0
    51c8:	72 9f       	mul	r23, r18
    51ca:	bb 27       	eor	r27, r27
    51cc:	f0 0d       	add	r31, r0
    51ce:	b1 1d       	adc	r27, r1
    51d0:	63 9f       	mul	r22, r19
    51d2:	aa 27       	eor	r26, r26
    51d4:	f0 0d       	add	r31, r0
    51d6:	b1 1d       	adc	r27, r1
    51d8:	aa 1f       	adc	r26, r26
    51da:	64 9f       	mul	r22, r20
    51dc:	66 27       	eor	r22, r22
    51de:	b0 0d       	add	r27, r0
    51e0:	a1 1d       	adc	r26, r1
    51e2:	66 1f       	adc	r22, r22
    51e4:	82 9f       	mul	r24, r18
    51e6:	22 27       	eor	r18, r18
    51e8:	b0 0d       	add	r27, r0
    51ea:	a1 1d       	adc	r26, r1
    51ec:	62 1f       	adc	r22, r18
    51ee:	73 9f       	mul	r23, r19
    51f0:	b0 0d       	add	r27, r0
    51f2:	a1 1d       	adc	r26, r1
    51f4:	62 1f       	adc	r22, r18
    51f6:	83 9f       	mul	r24, r19
    51f8:	a0 0d       	add	r26, r0
    51fa:	61 1d       	adc	r22, r1
    51fc:	22 1f       	adc	r18, r18
    51fe:	74 9f       	mul	r23, r20
    5200:	33 27       	eor	r19, r19
    5202:	a0 0d       	add	r26, r0
    5204:	61 1d       	adc	r22, r1
    5206:	23 1f       	adc	r18, r19
    5208:	84 9f       	mul	r24, r20
    520a:	60 0d       	add	r22, r0
    520c:	21 1d       	adc	r18, r1
    520e:	82 2f       	mov	r24, r18
    5210:	76 2f       	mov	r23, r22
    5212:	6a 2f       	mov	r22, r26
    5214:	11 24       	eor	r1, r1
    5216:	9f 57       	subi	r25, 0x7F	; 127
    5218:	50 40       	sbci	r21, 0x00	; 0
    521a:	8a f0       	brmi	.+34     	; 0x523e <__mulsf3_pse+0x84>
    521c:	e1 f0       	breq	.+56     	; 0x5256 <__mulsf3_pse+0x9c>
    521e:	88 23       	and	r24, r24
    5220:	4a f0       	brmi	.+18     	; 0x5234 <__mulsf3_pse+0x7a>
    5222:	ee 0f       	add	r30, r30
    5224:	ff 1f       	adc	r31, r31
    5226:	bb 1f       	adc	r27, r27
    5228:	66 1f       	adc	r22, r22
    522a:	77 1f       	adc	r23, r23
    522c:	88 1f       	adc	r24, r24
    522e:	91 50       	subi	r25, 0x01	; 1
    5230:	50 40       	sbci	r21, 0x00	; 0
    5232:	a9 f7       	brne	.-22     	; 0x521e <__mulsf3_pse+0x64>
    5234:	9e 3f       	cpi	r25, 0xFE	; 254
    5236:	51 05       	cpc	r21, r1
    5238:	70 f0       	brcs	.+28     	; 0x5256 <__mulsf3_pse+0x9c>
    523a:	f7 ce       	rjmp	.-530    	; 0x502a <__fp_inf>
    523c:	9f cf       	rjmp	.-194    	; 0x517c <__fp_szero>
    523e:	5f 3f       	cpi	r21, 0xFF	; 255
    5240:	ec f3       	brlt	.-6      	; 0x523c <__mulsf3_pse+0x82>
    5242:	98 3e       	cpi	r25, 0xE8	; 232
    5244:	dc f3       	brlt	.-10     	; 0x523c <__mulsf3_pse+0x82>
    5246:	86 95       	lsr	r24
    5248:	77 95       	ror	r23
    524a:	67 95       	ror	r22
    524c:	b7 95       	ror	r27
    524e:	f7 95       	ror	r31
    5250:	e7 95       	ror	r30
    5252:	9f 5f       	subi	r25, 0xFF	; 255
    5254:	c1 f7       	brne	.-16     	; 0x5246 <__mulsf3_pse+0x8c>
    5256:	fe 2b       	or	r31, r30
    5258:	88 0f       	add	r24, r24
    525a:	91 1d       	adc	r25, r1
    525c:	96 95       	lsr	r25
    525e:	87 95       	ror	r24
    5260:	97 f9       	bld	r25, 7
    5262:	08 95       	ret

00005264 <sin>:
    5264:	9f 93       	push	r25
    5266:	1e df       	rcall	.-452    	; 0x50a4 <__fp_rempio2>
    5268:	0f 90       	pop	r0
    526a:	07 fc       	sbrc	r0, 7
    526c:	ee 5f       	subi	r30, 0xFE	; 254
    526e:	52 cf       	rjmp	.-348    	; 0x5114 <__fp_sinus>
    5270:	11 f4       	brne	.+4      	; 0x5276 <sin+0x12>
    5272:	0e f4       	brtc	.+2      	; 0x5276 <sin+0x12>
    5274:	e0 ce       	rjmp	.-576    	; 0x5036 <__fp_nan>
    5276:	41 c0       	rjmp	.+130    	; 0x52fa <__fp_mpack>

00005278 <sqrt>:
    5278:	66 df       	rcall	.-308    	; 0x5146 <__fp_splitA>
    527a:	d0 f3       	brcs	.-12     	; 0x5270 <sin+0xc>
    527c:	99 23       	and	r25, r25
    527e:	d9 f3       	breq	.-10     	; 0x5276 <sin+0x12>
    5280:	ce f3       	brts	.-14     	; 0x5274 <sin+0x10>
    5282:	9f 57       	subi	r25, 0x7F	; 127
    5284:	55 0b       	sbc	r21, r21
    5286:	87 ff       	sbrs	r24, 7
    5288:	46 d0       	rcall	.+140    	; 0x5316 <__fp_norm2>
    528a:	00 24       	eor	r0, r0
    528c:	a0 e6       	ldi	r26, 0x60	; 96
    528e:	40 ea       	ldi	r20, 0xA0	; 160
    5290:	90 01       	movw	r18, r0
    5292:	80 58       	subi	r24, 0x80	; 128
    5294:	56 95       	lsr	r21
    5296:	97 95       	ror	r25
    5298:	28 f4       	brcc	.+10     	; 0x52a4 <sqrt+0x2c>
    529a:	80 5c       	subi	r24, 0xC0	; 192
    529c:	66 0f       	add	r22, r22
    529e:	77 1f       	adc	r23, r23
    52a0:	88 1f       	adc	r24, r24
    52a2:	20 f0       	brcs	.+8      	; 0x52ac <sqrt+0x34>
    52a4:	26 17       	cp	r18, r22
    52a6:	37 07       	cpc	r19, r23
    52a8:	48 07       	cpc	r20, r24
    52aa:	30 f4       	brcc	.+12     	; 0x52b8 <sqrt+0x40>
    52ac:	62 1b       	sub	r22, r18
    52ae:	73 0b       	sbc	r23, r19
    52b0:	84 0b       	sbc	r24, r20
    52b2:	20 29       	or	r18, r0
    52b4:	31 29       	or	r19, r1
    52b6:	4a 2b       	or	r20, r26
    52b8:	a6 95       	lsr	r26
    52ba:	17 94       	ror	r1
    52bc:	07 94       	ror	r0
    52be:	20 25       	eor	r18, r0
    52c0:	31 25       	eor	r19, r1
    52c2:	4a 27       	eor	r20, r26
    52c4:	58 f7       	brcc	.-42     	; 0x529c <sqrt+0x24>
    52c6:	66 0f       	add	r22, r22
    52c8:	77 1f       	adc	r23, r23
    52ca:	88 1f       	adc	r24, r24
    52cc:	20 f0       	brcs	.+8      	; 0x52d6 <sqrt+0x5e>
    52ce:	26 17       	cp	r18, r22
    52d0:	37 07       	cpc	r19, r23
    52d2:	48 07       	cpc	r20, r24
    52d4:	30 f4       	brcc	.+12     	; 0x52e2 <sqrt+0x6a>
    52d6:	62 0b       	sbc	r22, r18
    52d8:	73 0b       	sbc	r23, r19
    52da:	84 0b       	sbc	r24, r20
    52dc:	20 0d       	add	r18, r0
    52de:	31 1d       	adc	r19, r1
    52e0:	41 1d       	adc	r20, r1
    52e2:	a0 95       	com	r26
    52e4:	81 f7       	brne	.-32     	; 0x52c6 <sqrt+0x4e>
    52e6:	b9 01       	movw	r22, r18
    52e8:	84 2f       	mov	r24, r20
    52ea:	91 58       	subi	r25, 0x81	; 129
    52ec:	88 0f       	add	r24, r24
    52ee:	96 95       	lsr	r25
    52f0:	87 95       	ror	r24
    52f2:	08 95       	ret

000052f4 <square>:
    52f4:	9b 01       	movw	r18, r22
    52f6:	ac 01       	movw	r20, r24
    52f8:	52 cf       	rjmp	.-348    	; 0x519e <__mulsf3>

000052fa <__fp_mpack>:
    52fa:	9f 3f       	cpi	r25, 0xFF	; 255
    52fc:	31 f0       	breq	.+12     	; 0x530a <__fp_mpack_finite+0xc>

000052fe <__fp_mpack_finite>:
    52fe:	91 50       	subi	r25, 0x01	; 1
    5300:	20 f4       	brcc	.+8      	; 0x530a <__fp_mpack_finite+0xc>
    5302:	87 95       	ror	r24
    5304:	77 95       	ror	r23
    5306:	67 95       	ror	r22
    5308:	b7 95       	ror	r27
    530a:	88 0f       	add	r24, r24
    530c:	91 1d       	adc	r25, r1
    530e:	96 95       	lsr	r25
    5310:	87 95       	ror	r24
    5312:	97 f9       	bld	r25, 7
    5314:	08 95       	ret

00005316 <__fp_norm2>:
    5316:	91 50       	subi	r25, 0x01	; 1
    5318:	50 40       	sbci	r21, 0x00	; 0
    531a:	66 0f       	add	r22, r22
    531c:	77 1f       	adc	r23, r23
    531e:	88 1f       	adc	r24, r24
    5320:	d2 f7       	brpl	.-12     	; 0x5316 <__fp_norm2>
    5322:	08 95       	ret

00005324 <__fp_powsodd>:
    5324:	9f 93       	push	r25
    5326:	8f 93       	push	r24
    5328:	7f 93       	push	r23
    532a:	6f 93       	push	r22
    532c:	ff 93       	push	r31
    532e:	ef 93       	push	r30
    5330:	9b 01       	movw	r18, r22
    5332:	ac 01       	movw	r20, r24
    5334:	34 df       	rcall	.-408    	; 0x519e <__mulsf3>
    5336:	ef 91       	pop	r30
    5338:	ff 91       	pop	r31
    533a:	80 de       	rcall	.-768    	; 0x503c <__fp_powser>
    533c:	2f 91       	pop	r18
    533e:	3f 91       	pop	r19
    5340:	4f 91       	pop	r20
    5342:	5f 91       	pop	r21
    5344:	2c cf       	rjmp	.-424    	; 0x519e <__mulsf3>

00005346 <__udivmodsi4>:
    5346:	a1 e2       	ldi	r26, 0x21	; 33
    5348:	1a 2e       	mov	r1, r26
    534a:	aa 1b       	sub	r26, r26
    534c:	bb 1b       	sub	r27, r27
    534e:	fd 01       	movw	r30, r26
    5350:	0d c0       	rjmp	.+26     	; 0x536c <__udivmodsi4_ep>

00005352 <__udivmodsi4_loop>:
    5352:	aa 1f       	adc	r26, r26
    5354:	bb 1f       	adc	r27, r27
    5356:	ee 1f       	adc	r30, r30
    5358:	ff 1f       	adc	r31, r31
    535a:	a2 17       	cp	r26, r18
    535c:	b3 07       	cpc	r27, r19
    535e:	e4 07       	cpc	r30, r20
    5360:	f5 07       	cpc	r31, r21
    5362:	20 f0       	brcs	.+8      	; 0x536c <__udivmodsi4_ep>
    5364:	a2 1b       	sub	r26, r18
    5366:	b3 0b       	sbc	r27, r19
    5368:	e4 0b       	sbc	r30, r20
    536a:	f5 0b       	sbc	r31, r21

0000536c <__udivmodsi4_ep>:
    536c:	66 1f       	adc	r22, r22
    536e:	77 1f       	adc	r23, r23
    5370:	88 1f       	adc	r24, r24
    5372:	99 1f       	adc	r25, r25
    5374:	1a 94       	dec	r1
    5376:	69 f7       	brne	.-38     	; 0x5352 <__udivmodsi4_loop>
    5378:	60 95       	com	r22
    537a:	70 95       	com	r23
    537c:	80 95       	com	r24
    537e:	90 95       	com	r25
    5380:	9b 01       	movw	r18, r22
    5382:	ac 01       	movw	r20, r24
    5384:	bd 01       	movw	r22, r26
    5386:	cf 01       	movw	r24, r30
    5388:	08 95       	ret

0000538a <__umulhisi3>:
    538a:	a2 9f       	mul	r26, r18
    538c:	b0 01       	movw	r22, r0
    538e:	b3 9f       	mul	r27, r19
    5390:	c0 01       	movw	r24, r0
    5392:	a3 9f       	mul	r26, r19
    5394:	70 0d       	add	r23, r0
    5396:	81 1d       	adc	r24, r1
    5398:	11 24       	eor	r1, r1
    539a:	91 1d       	adc	r25, r1
    539c:	b2 9f       	mul	r27, r18
    539e:	70 0d       	add	r23, r0
    53a0:	81 1d       	adc	r24, r1
    53a2:	11 24       	eor	r1, r1
    53a4:	91 1d       	adc	r25, r1
    53a6:	08 95       	ret

000053a8 <__prologue_saves__>:
    53a8:	2f 92       	push	r2
    53aa:	3f 92       	push	r3
    53ac:	4f 92       	push	r4
    53ae:	5f 92       	push	r5
    53b0:	6f 92       	push	r6
    53b2:	7f 92       	push	r7
    53b4:	8f 92       	push	r8
    53b6:	9f 92       	push	r9
    53b8:	af 92       	push	r10
    53ba:	bf 92       	push	r11
    53bc:	cf 92       	push	r12
    53be:	df 92       	push	r13
    53c0:	ef 92       	push	r14
    53c2:	ff 92       	push	r15
    53c4:	0f 93       	push	r16
    53c6:	1f 93       	push	r17
    53c8:	cf 93       	push	r28
    53ca:	df 93       	push	r29
    53cc:	cd b7       	in	r28, 0x3d	; 61
    53ce:	de b7       	in	r29, 0x3e	; 62
    53d0:	ca 1b       	sub	r28, r26
    53d2:	db 0b       	sbc	r29, r27
    53d4:	0f b6       	in	r0, 0x3f	; 63
    53d6:	f8 94       	cli
    53d8:	de bf       	out	0x3e, r29	; 62
    53da:	0f be       	out	0x3f, r0	; 63
    53dc:	cd bf       	out	0x3d, r28	; 61
    53de:	09 94       	ijmp

000053e0 <__epilogue_restores__>:
    53e0:	2a 88       	ldd	r2, Y+18	; 0x12
    53e2:	39 88       	ldd	r3, Y+17	; 0x11
    53e4:	48 88       	ldd	r4, Y+16	; 0x10
    53e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    53e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    53ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    53ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    53ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    53f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    53f2:	b9 84       	ldd	r11, Y+9	; 0x09
    53f4:	c8 84       	ldd	r12, Y+8	; 0x08
    53f6:	df 80       	ldd	r13, Y+7	; 0x07
    53f8:	ee 80       	ldd	r14, Y+6	; 0x06
    53fa:	fd 80       	ldd	r15, Y+5	; 0x05
    53fc:	0c 81       	ldd	r16, Y+4	; 0x04
    53fe:	1b 81       	ldd	r17, Y+3	; 0x03
    5400:	aa 81       	ldd	r26, Y+2	; 0x02
    5402:	b9 81       	ldd	r27, Y+1	; 0x01
    5404:	ce 0f       	add	r28, r30
    5406:	d1 1d       	adc	r29, r1
    5408:	0f b6       	in	r0, 0x3f	; 63
    540a:	f8 94       	cli
    540c:	de bf       	out	0x3e, r29	; 62
    540e:	0f be       	out	0x3f, r0	; 63
    5410:	cd bf       	out	0x3d, r28	; 61
    5412:	ed 01       	movw	r28, r26
    5414:	08 95       	ret

00005416 <atof>:
    5416:	66 27       	eor	r22, r22
    5418:	77 27       	eor	r23, r23
    541a:	44 c2       	rjmp	.+1160   	; 0x58a4 <strtod>

0000541c <atoi>:
    541c:	fc 01       	movw	r30, r24
    541e:	88 27       	eor	r24, r24
    5420:	99 27       	eor	r25, r25
    5422:	e8 94       	clt
    5424:	21 91       	ld	r18, Z+
    5426:	20 32       	cpi	r18, 0x20	; 32
    5428:	e9 f3       	breq	.-6      	; 0x5424 <atoi+0x8>
    542a:	29 30       	cpi	r18, 0x09	; 9
    542c:	10 f0       	brcs	.+4      	; 0x5432 <atoi+0x16>
    542e:	2e 30       	cpi	r18, 0x0E	; 14
    5430:	c8 f3       	brcs	.-14     	; 0x5424 <atoi+0x8>
    5432:	2b 32       	cpi	r18, 0x2B	; 43
    5434:	39 f0       	breq	.+14     	; 0x5444 <atoi+0x28>
    5436:	2d 32       	cpi	r18, 0x2D	; 45
    5438:	31 f4       	brne	.+12     	; 0x5446 <atoi+0x2a>
    543a:	68 94       	set
    543c:	03 c0       	rjmp	.+6      	; 0x5444 <atoi+0x28>
    543e:	14 d1       	rcall	.+552    	; 0x5668 <__mulhi_const_10>
    5440:	82 0f       	add	r24, r18
    5442:	91 1d       	adc	r25, r1
    5444:	21 91       	ld	r18, Z+
    5446:	20 53       	subi	r18, 0x30	; 48
    5448:	2a 30       	cpi	r18, 0x0A	; 10
    544a:	c8 f3       	brcs	.-14     	; 0x543e <atoi+0x22>
    544c:	1e f4       	brtc	.+6      	; 0x5454 <atoi+0x38>
    544e:	90 95       	com	r25
    5450:	81 95       	neg	r24
    5452:	9f 4f       	sbci	r25, 0xFF	; 255
    5454:	08 95       	ret

00005456 <__ftoa_engine>:
    5456:	28 30       	cpi	r18, 0x08	; 8
    5458:	08 f0       	brcs	.+2      	; 0x545c <__ftoa_engine+0x6>
    545a:	27 e0       	ldi	r18, 0x07	; 7
    545c:	33 27       	eor	r19, r19
    545e:	da 01       	movw	r26, r20
    5460:	99 0f       	add	r25, r25
    5462:	31 1d       	adc	r19, r1
    5464:	87 fd       	sbrc	r24, 7
    5466:	91 60       	ori	r25, 0x01	; 1
    5468:	00 96       	adiw	r24, 0x00	; 0
    546a:	61 05       	cpc	r22, r1
    546c:	71 05       	cpc	r23, r1
    546e:	39 f4       	brne	.+14     	; 0x547e <__ftoa_engine+0x28>
    5470:	32 60       	ori	r19, 0x02	; 2
    5472:	2e 5f       	subi	r18, 0xFE	; 254
    5474:	3d 93       	st	X+, r19
    5476:	30 e3       	ldi	r19, 0x30	; 48
    5478:	2a 95       	dec	r18
    547a:	e1 f7       	brne	.-8      	; 0x5474 <__ftoa_engine+0x1e>
    547c:	08 95       	ret
    547e:	9f 3f       	cpi	r25, 0xFF	; 255
    5480:	30 f0       	brcs	.+12     	; 0x548e <__ftoa_engine+0x38>
    5482:	80 38       	cpi	r24, 0x80	; 128
    5484:	71 05       	cpc	r23, r1
    5486:	61 05       	cpc	r22, r1
    5488:	09 f0       	breq	.+2      	; 0x548c <__ftoa_engine+0x36>
    548a:	3c 5f       	subi	r19, 0xFC	; 252
    548c:	3c 5f       	subi	r19, 0xFC	; 252
    548e:	3d 93       	st	X+, r19
    5490:	91 30       	cpi	r25, 0x01	; 1
    5492:	08 f0       	brcs	.+2      	; 0x5496 <__ftoa_engine+0x40>
    5494:	80 68       	ori	r24, 0x80	; 128
    5496:	91 1d       	adc	r25, r1
    5498:	df 93       	push	r29
    549a:	cf 93       	push	r28
    549c:	1f 93       	push	r17
    549e:	0f 93       	push	r16
    54a0:	ff 92       	push	r15
    54a2:	ef 92       	push	r14
    54a4:	19 2f       	mov	r17, r25
    54a6:	98 7f       	andi	r25, 0xF8	; 248
    54a8:	96 95       	lsr	r25
    54aa:	e9 2f       	mov	r30, r25
    54ac:	96 95       	lsr	r25
    54ae:	96 95       	lsr	r25
    54b0:	e9 0f       	add	r30, r25
    54b2:	ff 27       	eor	r31, r31
    54b4:	ea 5e       	subi	r30, 0xEA	; 234
    54b6:	fe 4f       	sbci	r31, 0xFE	; 254
    54b8:	99 27       	eor	r25, r25
    54ba:	33 27       	eor	r19, r19
    54bc:	ee 24       	eor	r14, r14
    54be:	ff 24       	eor	r15, r15
    54c0:	a7 01       	movw	r20, r14
    54c2:	e7 01       	movw	r28, r14
    54c4:	05 90       	lpm	r0, Z+
    54c6:	08 94       	sec
    54c8:	07 94       	ror	r0
    54ca:	28 f4       	brcc	.+10     	; 0x54d6 <__ftoa_engine+0x80>
    54cc:	36 0f       	add	r19, r22
    54ce:	e7 1e       	adc	r14, r23
    54d0:	f8 1e       	adc	r15, r24
    54d2:	49 1f       	adc	r20, r25
    54d4:	51 1d       	adc	r21, r1
    54d6:	66 0f       	add	r22, r22
    54d8:	77 1f       	adc	r23, r23
    54da:	88 1f       	adc	r24, r24
    54dc:	99 1f       	adc	r25, r25
    54de:	06 94       	lsr	r0
    54e0:	a1 f7       	brne	.-24     	; 0x54ca <__ftoa_engine+0x74>
    54e2:	05 90       	lpm	r0, Z+
    54e4:	07 94       	ror	r0
    54e6:	28 f4       	brcc	.+10     	; 0x54f2 <__ftoa_engine+0x9c>
    54e8:	e7 0e       	add	r14, r23
    54ea:	f8 1e       	adc	r15, r24
    54ec:	49 1f       	adc	r20, r25
    54ee:	56 1f       	adc	r21, r22
    54f0:	c1 1d       	adc	r28, r1
    54f2:	77 0f       	add	r23, r23
    54f4:	88 1f       	adc	r24, r24
    54f6:	99 1f       	adc	r25, r25
    54f8:	66 1f       	adc	r22, r22
    54fa:	06 94       	lsr	r0
    54fc:	a1 f7       	brne	.-24     	; 0x54e6 <__ftoa_engine+0x90>
    54fe:	05 90       	lpm	r0, Z+
    5500:	07 94       	ror	r0
    5502:	28 f4       	brcc	.+10     	; 0x550e <__ftoa_engine+0xb8>
    5504:	f8 0e       	add	r15, r24
    5506:	49 1f       	adc	r20, r25
    5508:	56 1f       	adc	r21, r22
    550a:	c7 1f       	adc	r28, r23
    550c:	d1 1d       	adc	r29, r1
    550e:	88 0f       	add	r24, r24
    5510:	99 1f       	adc	r25, r25
    5512:	66 1f       	adc	r22, r22
    5514:	77 1f       	adc	r23, r23
    5516:	06 94       	lsr	r0
    5518:	a1 f7       	brne	.-24     	; 0x5502 <__ftoa_engine+0xac>
    551a:	05 90       	lpm	r0, Z+
    551c:	07 94       	ror	r0
    551e:	20 f4       	brcc	.+8      	; 0x5528 <__ftoa_engine+0xd2>
    5520:	49 0f       	add	r20, r25
    5522:	56 1f       	adc	r21, r22
    5524:	c7 1f       	adc	r28, r23
    5526:	d8 1f       	adc	r29, r24
    5528:	99 0f       	add	r25, r25
    552a:	66 1f       	adc	r22, r22
    552c:	77 1f       	adc	r23, r23
    552e:	88 1f       	adc	r24, r24
    5530:	06 94       	lsr	r0
    5532:	a9 f7       	brne	.-22     	; 0x551e <__ftoa_engine+0xc8>
    5534:	84 91       	lpm	r24, Z
    5536:	10 95       	com	r17
    5538:	17 70       	andi	r17, 0x07	; 7
    553a:	41 f0       	breq	.+16     	; 0x554c <__ftoa_engine+0xf6>
    553c:	d6 95       	lsr	r29
    553e:	c7 95       	ror	r28
    5540:	57 95       	ror	r21
    5542:	47 95       	ror	r20
    5544:	f7 94       	ror	r15
    5546:	e7 94       	ror	r14
    5548:	1a 95       	dec	r17
    554a:	c1 f7       	brne	.-16     	; 0x553c <__ftoa_engine+0xe6>
    554c:	ec eb       	ldi	r30, 0xBC	; 188
    554e:	f0 e0       	ldi	r31, 0x00	; 0
    5550:	68 94       	set
    5552:	15 90       	lpm	r1, Z+
    5554:	15 91       	lpm	r17, Z+
    5556:	35 91       	lpm	r19, Z+
    5558:	65 91       	lpm	r22, Z+
    555a:	95 91       	lpm	r25, Z+
    555c:	05 90       	lpm	r0, Z+
    555e:	7f e2       	ldi	r23, 0x2F	; 47
    5560:	73 95       	inc	r23
    5562:	e1 18       	sub	r14, r1
    5564:	f1 0a       	sbc	r15, r17
    5566:	43 0b       	sbc	r20, r19
    5568:	56 0b       	sbc	r21, r22
    556a:	c9 0b       	sbc	r28, r25
    556c:	d0 09       	sbc	r29, r0
    556e:	c0 f7       	brcc	.-16     	; 0x5560 <__ftoa_engine+0x10a>
    5570:	e1 0c       	add	r14, r1
    5572:	f1 1e       	adc	r15, r17
    5574:	43 1f       	adc	r20, r19
    5576:	56 1f       	adc	r21, r22
    5578:	c9 1f       	adc	r28, r25
    557a:	d0 1d       	adc	r29, r0
    557c:	7e f4       	brtc	.+30     	; 0x559c <__ftoa_engine+0x146>
    557e:	70 33       	cpi	r23, 0x30	; 48
    5580:	11 f4       	brne	.+4      	; 0x5586 <__ftoa_engine+0x130>
    5582:	8a 95       	dec	r24
    5584:	e6 cf       	rjmp	.-52     	; 0x5552 <__ftoa_engine+0xfc>
    5586:	e8 94       	clt
    5588:	01 50       	subi	r16, 0x01	; 1
    558a:	30 f0       	brcs	.+12     	; 0x5598 <__ftoa_engine+0x142>
    558c:	08 0f       	add	r16, r24
    558e:	0a f4       	brpl	.+2      	; 0x5592 <__ftoa_engine+0x13c>
    5590:	00 27       	eor	r16, r16
    5592:	02 17       	cp	r16, r18
    5594:	08 f4       	brcc	.+2      	; 0x5598 <__ftoa_engine+0x142>
    5596:	20 2f       	mov	r18, r16
    5598:	23 95       	inc	r18
    559a:	02 2f       	mov	r16, r18
    559c:	7a 33       	cpi	r23, 0x3A	; 58
    559e:	28 f0       	brcs	.+10     	; 0x55aa <__ftoa_engine+0x154>
    55a0:	79 e3       	ldi	r23, 0x39	; 57
    55a2:	7d 93       	st	X+, r23
    55a4:	2a 95       	dec	r18
    55a6:	e9 f7       	brne	.-6      	; 0x55a2 <__ftoa_engine+0x14c>
    55a8:	10 c0       	rjmp	.+32     	; 0x55ca <__ftoa_engine+0x174>
    55aa:	7d 93       	st	X+, r23
    55ac:	2a 95       	dec	r18
    55ae:	89 f6       	brne	.-94     	; 0x5552 <__ftoa_engine+0xfc>
    55b0:	06 94       	lsr	r0
    55b2:	97 95       	ror	r25
    55b4:	67 95       	ror	r22
    55b6:	37 95       	ror	r19
    55b8:	17 95       	ror	r17
    55ba:	17 94       	ror	r1
    55bc:	e1 18       	sub	r14, r1
    55be:	f1 0a       	sbc	r15, r17
    55c0:	43 0b       	sbc	r20, r19
    55c2:	56 0b       	sbc	r21, r22
    55c4:	c9 0b       	sbc	r28, r25
    55c6:	d0 09       	sbc	r29, r0
    55c8:	98 f0       	brcs	.+38     	; 0x55f0 <__ftoa_engine+0x19a>
    55ca:	23 95       	inc	r18
    55cc:	7e 91       	ld	r23, -X
    55ce:	73 95       	inc	r23
    55d0:	7a 33       	cpi	r23, 0x3A	; 58
    55d2:	08 f0       	brcs	.+2      	; 0x55d6 <__ftoa_engine+0x180>
    55d4:	70 e3       	ldi	r23, 0x30	; 48
    55d6:	7c 93       	st	X, r23
    55d8:	20 13       	cpse	r18, r16
    55da:	b8 f7       	brcc	.-18     	; 0x55ca <__ftoa_engine+0x174>
    55dc:	7e 91       	ld	r23, -X
    55de:	70 61       	ori	r23, 0x10	; 16
    55e0:	7d 93       	st	X+, r23
    55e2:	30 f0       	brcs	.+12     	; 0x55f0 <__ftoa_engine+0x19a>
    55e4:	83 95       	inc	r24
    55e6:	71 e3       	ldi	r23, 0x31	; 49
    55e8:	7d 93       	st	X+, r23
    55ea:	70 e3       	ldi	r23, 0x30	; 48
    55ec:	2a 95       	dec	r18
    55ee:	e1 f7       	brne	.-8      	; 0x55e8 <__ftoa_engine+0x192>
    55f0:	11 24       	eor	r1, r1
    55f2:	ef 90       	pop	r14
    55f4:	ff 90       	pop	r15
    55f6:	0f 91       	pop	r16
    55f8:	1f 91       	pop	r17
    55fa:	cf 91       	pop	r28
    55fc:	df 91       	pop	r29
    55fe:	99 27       	eor	r25, r25
    5600:	87 fd       	sbrc	r24, 7
    5602:	90 95       	com	r25
    5604:	08 95       	ret

00005606 <isspace>:
    5606:	91 11       	cpse	r25, r1
    5608:	9f c2       	rjmp	.+1342   	; 0x5b48 <__ctype_isfalse>
    560a:	80 32       	cpi	r24, 0x20	; 32
    560c:	19 f0       	breq	.+6      	; 0x5614 <isspace+0xe>
    560e:	89 50       	subi	r24, 0x09	; 9
    5610:	85 50       	subi	r24, 0x05	; 5
    5612:	d0 f7       	brcc	.-12     	; 0x5608 <isspace+0x2>
    5614:	08 95       	ret

00005616 <tolower>:
    5616:	91 11       	cpse	r25, r1
    5618:	08 95       	ret
    561a:	81 54       	subi	r24, 0x41	; 65
    561c:	8a 51       	subi	r24, 0x1A	; 26
    561e:	08 f4       	brcc	.+2      	; 0x5622 <tolower+0xc>
    5620:	80 5e       	subi	r24, 0xE0	; 224
    5622:	85 5a       	subi	r24, 0xA5	; 165
    5624:	08 95       	ret

00005626 <strchr_P>:
    5626:	fc 01       	movw	r30, r24
    5628:	05 90       	lpm	r0, Z+
    562a:	06 16       	cp	r0, r22
    562c:	21 f0       	breq	.+8      	; 0x5636 <strchr_P+0x10>
    562e:	00 20       	and	r0, r0
    5630:	d9 f7       	brne	.-10     	; 0x5628 <strchr_P+0x2>
    5632:	c0 01       	movw	r24, r0
    5634:	08 95       	ret
    5636:	31 97       	sbiw	r30, 0x01	; 1
    5638:	cf 01       	movw	r24, r30
    563a:	08 95       	ret

0000563c <strnlen_P>:
    563c:	fc 01       	movw	r30, r24
    563e:	05 90       	lpm	r0, Z+
    5640:	61 50       	subi	r22, 0x01	; 1
    5642:	70 40       	sbci	r23, 0x00	; 0
    5644:	01 10       	cpse	r0, r1
    5646:	d8 f7       	brcc	.-10     	; 0x563e <strnlen_P+0x2>
    5648:	80 95       	com	r24
    564a:	90 95       	com	r25
    564c:	8e 0f       	add	r24, r30
    564e:	9f 1f       	adc	r25, r31
    5650:	08 95       	ret

00005652 <strnlen>:
    5652:	fc 01       	movw	r30, r24
    5654:	61 50       	subi	r22, 0x01	; 1
    5656:	70 40       	sbci	r23, 0x00	; 0
    5658:	01 90       	ld	r0, Z+
    565a:	01 10       	cpse	r0, r1
    565c:	d8 f7       	brcc	.-10     	; 0x5654 <strnlen+0x2>
    565e:	80 95       	com	r24
    5660:	90 95       	com	r25
    5662:	8e 0f       	add	r24, r30
    5664:	9f 1f       	adc	r25, r31
    5666:	08 95       	ret

00005668 <__mulhi_const_10>:
    5668:	7a e0       	ldi	r23, 0x0A	; 10
    566a:	97 9f       	mul	r25, r23
    566c:	90 2d       	mov	r25, r0
    566e:	87 9f       	mul	r24, r23
    5670:	80 2d       	mov	r24, r0
    5672:	91 0d       	add	r25, r1
    5674:	11 24       	eor	r1, r1
    5676:	08 95       	ret

00005678 <fgetc>:
    5678:	cf 93       	push	r28
    567a:	df 93       	push	r29
    567c:	ec 01       	movw	r28, r24
    567e:	2b 81       	ldd	r18, Y+3	; 0x03
    5680:	20 ff       	sbrs	r18, 0
    5682:	33 c0       	rjmp	.+102    	; 0x56ea <fgetc+0x72>
    5684:	26 ff       	sbrs	r18, 6
    5686:	0a c0       	rjmp	.+20     	; 0x569c <fgetc+0x24>
    5688:	2f 7b       	andi	r18, 0xBF	; 191
    568a:	2b 83       	std	Y+3, r18	; 0x03
    568c:	8e 81       	ldd	r24, Y+6	; 0x06
    568e:	9f 81       	ldd	r25, Y+7	; 0x07
    5690:	01 96       	adiw	r24, 0x01	; 1
    5692:	9f 83       	std	Y+7, r25	; 0x07
    5694:	8e 83       	std	Y+6, r24	; 0x06
    5696:	8a 81       	ldd	r24, Y+2	; 0x02
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	29 c0       	rjmp	.+82     	; 0x56ee <fgetc+0x76>
    569c:	22 ff       	sbrs	r18, 2
    569e:	0f c0       	rjmp	.+30     	; 0x56be <fgetc+0x46>
    56a0:	e8 81       	ld	r30, Y
    56a2:	f9 81       	ldd	r31, Y+1	; 0x01
    56a4:	80 81       	ld	r24, Z
    56a6:	08 2e       	mov	r0, r24
    56a8:	00 0c       	add	r0, r0
    56aa:	99 0b       	sbc	r25, r25
    56ac:	00 97       	sbiw	r24, 0x00	; 0
    56ae:	19 f4       	brne	.+6      	; 0x56b6 <fgetc+0x3e>
    56b0:	20 62       	ori	r18, 0x20	; 32
    56b2:	2b 83       	std	Y+3, r18	; 0x03
    56b4:	1a c0       	rjmp	.+52     	; 0x56ea <fgetc+0x72>
    56b6:	31 96       	adiw	r30, 0x01	; 1
    56b8:	f9 83       	std	Y+1, r31	; 0x01
    56ba:	e8 83       	st	Y, r30
    56bc:	0e c0       	rjmp	.+28     	; 0x56da <fgetc+0x62>
    56be:	ea 85       	ldd	r30, Y+10	; 0x0a
    56c0:	fb 85       	ldd	r31, Y+11	; 0x0b
    56c2:	09 95       	icall
    56c4:	97 ff       	sbrs	r25, 7
    56c6:	09 c0       	rjmp	.+18     	; 0x56da <fgetc+0x62>
    56c8:	2b 81       	ldd	r18, Y+3	; 0x03
    56ca:	01 96       	adiw	r24, 0x01	; 1
    56cc:	11 f0       	breq	.+4      	; 0x56d2 <fgetc+0x5a>
    56ce:	80 e2       	ldi	r24, 0x20	; 32
    56d0:	01 c0       	rjmp	.+2      	; 0x56d4 <fgetc+0x5c>
    56d2:	80 e1       	ldi	r24, 0x10	; 16
    56d4:	82 2b       	or	r24, r18
    56d6:	8b 83       	std	Y+3, r24	; 0x03
    56d8:	08 c0       	rjmp	.+16     	; 0x56ea <fgetc+0x72>
    56da:	2e 81       	ldd	r18, Y+6	; 0x06
    56dc:	3f 81       	ldd	r19, Y+7	; 0x07
    56de:	2f 5f       	subi	r18, 0xFF	; 255
    56e0:	3f 4f       	sbci	r19, 0xFF	; 255
    56e2:	3f 83       	std	Y+7, r19	; 0x07
    56e4:	2e 83       	std	Y+6, r18	; 0x06
    56e6:	99 27       	eor	r25, r25
    56e8:	02 c0       	rjmp	.+4      	; 0x56ee <fgetc+0x76>
    56ea:	8f ef       	ldi	r24, 0xFF	; 255
    56ec:	9f ef       	ldi	r25, 0xFF	; 255
    56ee:	df 91       	pop	r29
    56f0:	cf 91       	pop	r28
    56f2:	08 95       	ret

000056f4 <fprintf>:
    56f4:	a0 e0       	ldi	r26, 0x00	; 0
    56f6:	b0 e0       	ldi	r27, 0x00	; 0
    56f8:	ef e7       	ldi	r30, 0x7F	; 127
    56fa:	fb e2       	ldi	r31, 0x2B	; 43
    56fc:	65 ce       	rjmp	.-822    	; 0x53c8 <__prologue_saves__+0x20>
    56fe:	ae 01       	movw	r20, r28
    5700:	47 5f       	subi	r20, 0xF7	; 247
    5702:	5f 4f       	sbci	r21, 0xFF	; 255
    5704:	6f 81       	ldd	r22, Y+7	; 0x07
    5706:	78 85       	ldd	r23, Y+8	; 0x08
    5708:	8d 81       	ldd	r24, Y+5	; 0x05
    570a:	9e 81       	ldd	r25, Y+6	; 0x06
    570c:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <vfprintf>
    5710:	e2 e0       	ldi	r30, 0x02	; 2
    5712:	76 ce       	rjmp	.-788    	; 0x5400 <__epilogue_restores__+0x20>

00005714 <fprintf_P>:
    5714:	a0 e0       	ldi	r26, 0x00	; 0
    5716:	b0 e0       	ldi	r27, 0x00	; 0
    5718:	ef e8       	ldi	r30, 0x8F	; 143
    571a:	fb e2       	ldi	r31, 0x2B	; 43
    571c:	53 ce       	rjmp	.-858    	; 0x53c4 <__prologue_saves__+0x1c>
    571e:	0f 81       	ldd	r16, Y+7	; 0x07
    5720:	18 85       	ldd	r17, Y+8	; 0x08
    5722:	f8 01       	movw	r30, r16
    5724:	83 81       	ldd	r24, Z+3	; 0x03
    5726:	88 60       	ori	r24, 0x08	; 8
    5728:	83 83       	std	Z+3, r24	; 0x03
    572a:	ae 01       	movw	r20, r28
    572c:	45 5f       	subi	r20, 0xF5	; 245
    572e:	5f 4f       	sbci	r21, 0xFF	; 255
    5730:	69 85       	ldd	r22, Y+9	; 0x09
    5732:	7a 85       	ldd	r23, Y+10	; 0x0a
    5734:	c8 01       	movw	r24, r16
    5736:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <vfprintf>
    573a:	f8 01       	movw	r30, r16
    573c:	23 81       	ldd	r18, Z+3	; 0x03
    573e:	27 7f       	andi	r18, 0xF7	; 247
    5740:	23 83       	std	Z+3, r18	; 0x03
    5742:	e4 e0       	ldi	r30, 0x04	; 4
    5744:	5b ce       	rjmp	.-842    	; 0x53fc <__epilogue_restores__+0x1c>

00005746 <fputc>:
    5746:	0f 93       	push	r16
    5748:	1f 93       	push	r17
    574a:	cf 93       	push	r28
    574c:	df 93       	push	r29
    574e:	fb 01       	movw	r30, r22
    5750:	23 81       	ldd	r18, Z+3	; 0x03
    5752:	21 fd       	sbrc	r18, 1
    5754:	03 c0       	rjmp	.+6      	; 0x575c <fputc+0x16>
    5756:	8f ef       	ldi	r24, 0xFF	; 255
    5758:	9f ef       	ldi	r25, 0xFF	; 255
    575a:	28 c0       	rjmp	.+80     	; 0x57ac <fputc+0x66>
    575c:	22 ff       	sbrs	r18, 2
    575e:	16 c0       	rjmp	.+44     	; 0x578c <fputc+0x46>
    5760:	46 81       	ldd	r20, Z+6	; 0x06
    5762:	57 81       	ldd	r21, Z+7	; 0x07
    5764:	24 81       	ldd	r18, Z+4	; 0x04
    5766:	35 81       	ldd	r19, Z+5	; 0x05
    5768:	42 17       	cp	r20, r18
    576a:	53 07       	cpc	r21, r19
    576c:	44 f4       	brge	.+16     	; 0x577e <fputc+0x38>
    576e:	a0 81       	ld	r26, Z
    5770:	b1 81       	ldd	r27, Z+1	; 0x01
    5772:	9d 01       	movw	r18, r26
    5774:	2f 5f       	subi	r18, 0xFF	; 255
    5776:	3f 4f       	sbci	r19, 0xFF	; 255
    5778:	31 83       	std	Z+1, r19	; 0x01
    577a:	20 83       	st	Z, r18
    577c:	8c 93       	st	X, r24
    577e:	26 81       	ldd	r18, Z+6	; 0x06
    5780:	37 81       	ldd	r19, Z+7	; 0x07
    5782:	2f 5f       	subi	r18, 0xFF	; 255
    5784:	3f 4f       	sbci	r19, 0xFF	; 255
    5786:	37 83       	std	Z+7, r19	; 0x07
    5788:	26 83       	std	Z+6, r18	; 0x06
    578a:	10 c0       	rjmp	.+32     	; 0x57ac <fputc+0x66>
    578c:	eb 01       	movw	r28, r22
    578e:	09 2f       	mov	r16, r25
    5790:	18 2f       	mov	r17, r24
    5792:	00 84       	ldd	r0, Z+8	; 0x08
    5794:	f1 85       	ldd	r31, Z+9	; 0x09
    5796:	e0 2d       	mov	r30, r0
    5798:	09 95       	icall
    579a:	89 2b       	or	r24, r25
    579c:	e1 f6       	brne	.-72     	; 0x5756 <fputc+0x10>
    579e:	8e 81       	ldd	r24, Y+6	; 0x06
    57a0:	9f 81       	ldd	r25, Y+7	; 0x07
    57a2:	01 96       	adiw	r24, 0x01	; 1
    57a4:	9f 83       	std	Y+7, r25	; 0x07
    57a6:	8e 83       	std	Y+6, r24	; 0x06
    57a8:	81 2f       	mov	r24, r17
    57aa:	90 2f       	mov	r25, r16
    57ac:	df 91       	pop	r29
    57ae:	cf 91       	pop	r28
    57b0:	1f 91       	pop	r17
    57b2:	0f 91       	pop	r16
    57b4:	08 95       	ret

000057b6 <ungetc>:
    57b6:	fb 01       	movw	r30, r22
    57b8:	23 81       	ldd	r18, Z+3	; 0x03
    57ba:	20 ff       	sbrs	r18, 0
    57bc:	12 c0       	rjmp	.+36     	; 0x57e2 <ungetc+0x2c>
    57be:	26 fd       	sbrc	r18, 6
    57c0:	10 c0       	rjmp	.+32     	; 0x57e2 <ungetc+0x2c>
    57c2:	8f 3f       	cpi	r24, 0xFF	; 255
    57c4:	3f ef       	ldi	r19, 0xFF	; 255
    57c6:	93 07       	cpc	r25, r19
    57c8:	61 f0       	breq	.+24     	; 0x57e2 <ungetc+0x2c>
    57ca:	82 83       	std	Z+2, r24	; 0x02
    57cc:	2f 7d       	andi	r18, 0xDF	; 223
    57ce:	20 64       	ori	r18, 0x40	; 64
    57d0:	23 83       	std	Z+3, r18	; 0x03
    57d2:	26 81       	ldd	r18, Z+6	; 0x06
    57d4:	37 81       	ldd	r19, Z+7	; 0x07
    57d6:	21 50       	subi	r18, 0x01	; 1
    57d8:	31 09       	sbc	r19, r1
    57da:	37 83       	std	Z+7, r19	; 0x07
    57dc:	26 83       	std	Z+6, r18	; 0x06
    57de:	99 27       	eor	r25, r25
    57e0:	08 95       	ret
    57e2:	8f ef       	ldi	r24, 0xFF	; 255
    57e4:	9f ef       	ldi	r25, 0xFF	; 255
    57e6:	08 95       	ret

000057e8 <__ultoa_invert>:
    57e8:	fa 01       	movw	r30, r20
    57ea:	aa 27       	eor	r26, r26
    57ec:	28 30       	cpi	r18, 0x08	; 8
    57ee:	51 f1       	breq	.+84     	; 0x5844 <__ultoa_invert+0x5c>
    57f0:	20 31       	cpi	r18, 0x10	; 16
    57f2:	81 f1       	breq	.+96     	; 0x5854 <__ultoa_invert+0x6c>
    57f4:	e8 94       	clt
    57f6:	6f 93       	push	r22
    57f8:	6e 7f       	andi	r22, 0xFE	; 254
    57fa:	6e 5f       	subi	r22, 0xFE	; 254
    57fc:	7f 4f       	sbci	r23, 0xFF	; 255
    57fe:	8f 4f       	sbci	r24, 0xFF	; 255
    5800:	9f 4f       	sbci	r25, 0xFF	; 255
    5802:	af 4f       	sbci	r26, 0xFF	; 255
    5804:	b1 e0       	ldi	r27, 0x01	; 1
    5806:	3e d0       	rcall	.+124    	; 0x5884 <__ultoa_invert+0x9c>
    5808:	b4 e0       	ldi	r27, 0x04	; 4
    580a:	3c d0       	rcall	.+120    	; 0x5884 <__ultoa_invert+0x9c>
    580c:	67 0f       	add	r22, r23
    580e:	78 1f       	adc	r23, r24
    5810:	89 1f       	adc	r24, r25
    5812:	9a 1f       	adc	r25, r26
    5814:	a1 1d       	adc	r26, r1
    5816:	68 0f       	add	r22, r24
    5818:	79 1f       	adc	r23, r25
    581a:	8a 1f       	adc	r24, r26
    581c:	91 1d       	adc	r25, r1
    581e:	a1 1d       	adc	r26, r1
    5820:	6a 0f       	add	r22, r26
    5822:	71 1d       	adc	r23, r1
    5824:	81 1d       	adc	r24, r1
    5826:	91 1d       	adc	r25, r1
    5828:	a1 1d       	adc	r26, r1
    582a:	20 d0       	rcall	.+64     	; 0x586c <__ultoa_invert+0x84>
    582c:	09 f4       	brne	.+2      	; 0x5830 <__ultoa_invert+0x48>
    582e:	68 94       	set
    5830:	3f 91       	pop	r19
    5832:	2a e0       	ldi	r18, 0x0A	; 10
    5834:	26 9f       	mul	r18, r22
    5836:	11 24       	eor	r1, r1
    5838:	30 19       	sub	r19, r0
    583a:	30 5d       	subi	r19, 0xD0	; 208
    583c:	31 93       	st	Z+, r19
    583e:	de f6       	brtc	.-74     	; 0x57f6 <__ultoa_invert+0xe>
    5840:	cf 01       	movw	r24, r30
    5842:	08 95       	ret
    5844:	46 2f       	mov	r20, r22
    5846:	47 70       	andi	r20, 0x07	; 7
    5848:	40 5d       	subi	r20, 0xD0	; 208
    584a:	41 93       	st	Z+, r20
    584c:	b3 e0       	ldi	r27, 0x03	; 3
    584e:	0f d0       	rcall	.+30     	; 0x586e <__ultoa_invert+0x86>
    5850:	c9 f7       	brne	.-14     	; 0x5844 <__ultoa_invert+0x5c>
    5852:	f6 cf       	rjmp	.-20     	; 0x5840 <__ultoa_invert+0x58>
    5854:	46 2f       	mov	r20, r22
    5856:	4f 70       	andi	r20, 0x0F	; 15
    5858:	40 5d       	subi	r20, 0xD0	; 208
    585a:	4a 33       	cpi	r20, 0x3A	; 58
    585c:	18 f0       	brcs	.+6      	; 0x5864 <__ultoa_invert+0x7c>
    585e:	49 5d       	subi	r20, 0xD9	; 217
    5860:	31 fd       	sbrc	r19, 1
    5862:	40 52       	subi	r20, 0x20	; 32
    5864:	41 93       	st	Z+, r20
    5866:	02 d0       	rcall	.+4      	; 0x586c <__ultoa_invert+0x84>
    5868:	a9 f7       	brne	.-22     	; 0x5854 <__ultoa_invert+0x6c>
    586a:	ea cf       	rjmp	.-44     	; 0x5840 <__ultoa_invert+0x58>
    586c:	b4 e0       	ldi	r27, 0x04	; 4
    586e:	a6 95       	lsr	r26
    5870:	97 95       	ror	r25
    5872:	87 95       	ror	r24
    5874:	77 95       	ror	r23
    5876:	67 95       	ror	r22
    5878:	ba 95       	dec	r27
    587a:	c9 f7       	brne	.-14     	; 0x586e <__ultoa_invert+0x86>
    587c:	00 97       	sbiw	r24, 0x00	; 0
    587e:	61 05       	cpc	r22, r1
    5880:	71 05       	cpc	r23, r1
    5882:	08 95       	ret
    5884:	9b 01       	movw	r18, r22
    5886:	ac 01       	movw	r20, r24
    5888:	0a 2e       	mov	r0, r26
    588a:	06 94       	lsr	r0
    588c:	57 95       	ror	r21
    588e:	47 95       	ror	r20
    5890:	37 95       	ror	r19
    5892:	27 95       	ror	r18
    5894:	ba 95       	dec	r27
    5896:	c9 f7       	brne	.-14     	; 0x588a <__ultoa_invert+0xa2>
    5898:	62 0f       	add	r22, r18
    589a:	73 1f       	adc	r23, r19
    589c:	84 1f       	adc	r24, r20
    589e:	95 1f       	adc	r25, r21
    58a0:	a0 1d       	adc	r26, r0
    58a2:	08 95       	ret

000058a4 <strtod>:
    58a4:	a0 e0       	ldi	r26, 0x00	; 0
    58a6:	b0 e0       	ldi	r27, 0x00	; 0
    58a8:	e7 e5       	ldi	r30, 0x57	; 87
    58aa:	fc e2       	ldi	r31, 0x2C	; 44
    58ac:	81 cd       	rjmp	.-1278   	; 0x53b0 <__prologue_saves__+0x8>
    58ae:	ec 01       	movw	r28, r24
    58b0:	7b 01       	movw	r14, r22
    58b2:	61 15       	cp	r22, r1
    58b4:	71 05       	cpc	r23, r1
    58b6:	19 f0       	breq	.+6      	; 0x58be <strtod+0x1a>
    58b8:	db 01       	movw	r26, r22
    58ba:	8d 93       	st	X+, r24
    58bc:	9c 93       	st	X, r25
    58be:	8e 01       	movw	r16, r28
    58c0:	0f 5f       	subi	r16, 0xFF	; 255
    58c2:	1f 4f       	sbci	r17, 0xFF	; 255
    58c4:	78 80       	ld	r7, Y
    58c6:	87 2d       	mov	r24, r7
    58c8:	90 e0       	ldi	r25, 0x00	; 0
    58ca:	9d de       	rcall	.-710    	; 0x5606 <isspace>
    58cc:	89 2b       	or	r24, r25
    58ce:	11 f0       	breq	.+4      	; 0x58d4 <strtod+0x30>
    58d0:	e8 01       	movw	r28, r16
    58d2:	f5 cf       	rjmp	.-22     	; 0x58be <strtod+0x1a>
    58d4:	bd e2       	ldi	r27, 0x2D	; 45
    58d6:	7b 12       	cpse	r7, r27
    58d8:	05 c0       	rjmp	.+10     	; 0x58e4 <strtod+0x40>
    58da:	0f 5f       	subi	r16, 0xFF	; 255
    58dc:	1f 4f       	sbci	r17, 0xFF	; 255
    58de:	79 80       	ldd	r7, Y+1	; 0x01
    58e0:	c1 e0       	ldi	r28, 0x01	; 1
    58e2:	08 c0       	rjmp	.+16     	; 0x58f4 <strtod+0x50>
    58e4:	eb e2       	ldi	r30, 0x2B	; 43
    58e6:	7e 12       	cpse	r7, r30
    58e8:	04 c0       	rjmp	.+8      	; 0x58f2 <strtod+0x4e>
    58ea:	8e 01       	movw	r16, r28
    58ec:	0e 5f       	subi	r16, 0xFE	; 254
    58ee:	1f 4f       	sbci	r17, 0xFF	; 255
    58f0:	79 80       	ldd	r7, Y+1	; 0x01
    58f2:	c0 e0       	ldi	r28, 0x00	; 0
    58f4:	68 01       	movw	r12, r16
    58f6:	f1 e0       	ldi	r31, 0x01	; 1
    58f8:	cf 1a       	sub	r12, r31
    58fa:	d1 08       	sbc	r13, r1
    58fc:	43 e0       	ldi	r20, 0x03	; 3
    58fe:	50 e0       	ldi	r21, 0x00	; 0
    5900:	6e eb       	ldi	r22, 0xBE	; 190
    5902:	71 e0       	ldi	r23, 0x01	; 1
    5904:	c6 01       	movw	r24, r12
    5906:	23 d1       	rcall	.+582    	; 0x5b4e <strncasecmp_P>
    5908:	89 2b       	or	r24, r25
    590a:	e9 f4       	brne	.+58     	; 0x5946 <strtod+0xa2>
    590c:	68 01       	movw	r12, r16
    590e:	22 e0       	ldi	r18, 0x02	; 2
    5910:	c2 0e       	add	r12, r18
    5912:	d1 1c       	adc	r13, r1
    5914:	45 e0       	ldi	r20, 0x05	; 5
    5916:	50 e0       	ldi	r21, 0x00	; 0
    5918:	69 eb       	ldi	r22, 0xB9	; 185
    591a:	71 e0       	ldi	r23, 0x01	; 1
    591c:	c6 01       	movw	r24, r12
    591e:	17 d1       	rcall	.+558    	; 0x5b4e <strncasecmp_P>
    5920:	89 2b       	or	r24, r25
    5922:	21 f4       	brne	.+8      	; 0x592c <strtod+0x88>
    5924:	68 01       	movw	r12, r16
    5926:	87 e0       	ldi	r24, 0x07	; 7
    5928:	c8 0e       	add	r12, r24
    592a:	d1 1c       	adc	r13, r1
    592c:	e1 14       	cp	r14, r1
    592e:	f1 04       	cpc	r15, r1
    5930:	19 f0       	breq	.+6      	; 0x5938 <strtod+0x94>
    5932:	d7 01       	movw	r26, r14
    5934:	cd 92       	st	X+, r12
    5936:	dc 92       	st	X, r13
    5938:	c1 11       	cpse	r28, r1
    593a:	f9 c0       	rjmp	.+498    	; 0x5b2e <strtod+0x28a>
    593c:	60 e0       	ldi	r22, 0x00	; 0
    593e:	70 e0       	ldi	r23, 0x00	; 0
    5940:	80 e8       	ldi	r24, 0x80	; 128
    5942:	9f e7       	ldi	r25, 0x7F	; 127
    5944:	fd c0       	rjmp	.+506    	; 0x5b40 <strtod+0x29c>
    5946:	43 e0       	ldi	r20, 0x03	; 3
    5948:	50 e0       	ldi	r21, 0x00	; 0
    594a:	66 eb       	ldi	r22, 0xB6	; 182
    594c:	71 e0       	ldi	r23, 0x01	; 1
    594e:	c6 01       	movw	r24, r12
    5950:	fe d0       	rcall	.+508    	; 0x5b4e <strncasecmp_P>
    5952:	89 2b       	or	r24, r25
    5954:	51 f4       	brne	.+20     	; 0x596a <strtod+0xc6>
    5956:	e1 14       	cp	r14, r1
    5958:	f1 04       	cpc	r15, r1
    595a:	09 f4       	brne	.+2      	; 0x595e <strtod+0xba>
    595c:	ed c0       	rjmp	.+474    	; 0x5b38 <strtod+0x294>
    595e:	0e 5f       	subi	r16, 0xFE	; 254
    5960:	1f 4f       	sbci	r17, 0xFF	; 255
    5962:	f7 01       	movw	r30, r14
    5964:	11 83       	std	Z+1, r17	; 0x01
    5966:	00 83       	st	Z, r16
    5968:	e7 c0       	rjmp	.+462    	; 0x5b38 <strtod+0x294>
    596a:	68 01       	movw	r12, r16
    596c:	60 e0       	ldi	r22, 0x00	; 0
    596e:	70 e0       	ldi	r23, 0x00	; 0
    5970:	cb 01       	movw	r24, r22
    5972:	00 e0       	ldi	r16, 0x00	; 0
    5974:	10 e0       	ldi	r17, 0x00	; 0
    5976:	f6 01       	movw	r30, r12
    5978:	d0 ed       	ldi	r29, 0xD0	; 208
    597a:	d7 0d       	add	r29, r7
    597c:	da 30       	cpi	r29, 0x0A	; 10
    597e:	50 f5       	brcc	.+84     	; 0x59d4 <strtod+0x130>
    5980:	2c 2f       	mov	r18, r28
    5982:	22 60       	ori	r18, 0x02	; 2
    5984:	62 2e       	mov	r6, r18
    5986:	2c 2f       	mov	r18, r28
    5988:	28 70       	andi	r18, 0x08	; 8
    598a:	c2 ff       	sbrs	r28, 2
    598c:	05 c0       	rjmp	.+10     	; 0x5998 <strtod+0xf4>
    598e:	21 11       	cpse	r18, r1
    5990:	27 c0       	rjmp	.+78     	; 0x59e0 <strtod+0x13c>
    5992:	0f 5f       	subi	r16, 0xFF	; 255
    5994:	1f 4f       	sbci	r17, 0xFF	; 255
    5996:	24 c0       	rjmp	.+72     	; 0x59e0 <strtod+0x13c>
    5998:	22 23       	and	r18, r18
    599a:	11 f0       	breq	.+4      	; 0x59a0 <strtod+0xfc>
    599c:	01 50       	subi	r16, 0x01	; 1
    599e:	11 09       	sbc	r17, r1
    59a0:	a5 e0       	ldi	r26, 0x05	; 5
    59a2:	b0 e0       	ldi	r27, 0x00	; 0
    59a4:	9b 01       	movw	r18, r22
    59a6:	ac 01       	movw	r20, r24
    59a8:	ea d0       	rcall	.+468    	; 0x5b7e <__muluhisi3>
    59aa:	4b 01       	movw	r8, r22
    59ac:	5c 01       	movw	r10, r24
    59ae:	88 0c       	add	r8, r8
    59b0:	99 1c       	adc	r9, r9
    59b2:	aa 1c       	adc	r10, r10
    59b4:	bb 1c       	adc	r11, r11
    59b6:	c5 01       	movw	r24, r10
    59b8:	b4 01       	movw	r22, r8
    59ba:	6d 0f       	add	r22, r29
    59bc:	71 1d       	adc	r23, r1
    59be:	81 1d       	adc	r24, r1
    59c0:	91 1d       	adc	r25, r1
    59c2:	68 39       	cpi	r22, 0x98	; 152
    59c4:	a9 e9       	ldi	r26, 0x99	; 153
    59c6:	7a 07       	cpc	r23, r26
    59c8:	8a 07       	cpc	r24, r26
    59ca:	a9 e1       	ldi	r26, 0x19	; 25
    59cc:	9a 07       	cpc	r25, r26
    59ce:	40 f0       	brcs	.+16     	; 0x59e0 <strtod+0x13c>
    59d0:	c6 60       	ori	r28, 0x06	; 6
    59d2:	05 c0       	rjmp	.+10     	; 0x59de <strtod+0x13a>
    59d4:	de 3f       	cpi	r29, 0xFE	; 254
    59d6:	51 f4       	brne	.+20     	; 0x59ec <strtod+0x148>
    59d8:	c3 fd       	sbrc	r28, 3
    59da:	44 c0       	rjmp	.+136    	; 0x5a64 <strtod+0x1c0>
    59dc:	c8 60       	ori	r28, 0x08	; 8
    59de:	6c 2e       	mov	r6, r28
    59e0:	bf ef       	ldi	r27, 0xFF	; 255
    59e2:	cb 1a       	sub	r12, r27
    59e4:	db 0a       	sbc	r13, r27
    59e6:	70 80       	ld	r7, Z
    59e8:	c6 2d       	mov	r28, r6
    59ea:	c5 cf       	rjmp	.-118    	; 0x5976 <strtod+0xd2>
    59ec:	2d 2f       	mov	r18, r29
    59ee:	2f 7d       	andi	r18, 0xDF	; 223
    59f0:	25 31       	cpi	r18, 0x15	; 21
    59f2:	c1 f5       	brne	.+112    	; 0x5a64 <strtod+0x1c0>
    59f4:	40 81       	ld	r20, Z
    59f6:	4d 32       	cpi	r20, 0x2D	; 45
    59f8:	11 f4       	brne	.+4      	; 0x59fe <strtod+0x15a>
    59fa:	c0 61       	ori	r28, 0x10	; 16
    59fc:	06 c0       	rjmp	.+12     	; 0x5a0a <strtod+0x166>
    59fe:	4b 32       	cpi	r20, 0x2B	; 43
    5a00:	21 f0       	breq	.+8      	; 0x5a0a <strtod+0x166>
    5a02:	31 96       	adiw	r30, 0x01	; 1
    5a04:	21 e0       	ldi	r18, 0x01	; 1
    5a06:	30 e0       	ldi	r19, 0x00	; 0
    5a08:	06 c0       	rjmp	.+12     	; 0x5a16 <strtod+0x172>
    5a0a:	32 96       	adiw	r30, 0x02	; 2
    5a0c:	d6 01       	movw	r26, r12
    5a0e:	11 96       	adiw	r26, 0x01	; 1
    5a10:	4c 91       	ld	r20, X
    5a12:	22 e0       	ldi	r18, 0x02	; 2
    5a14:	30 e0       	ldi	r19, 0x00	; 0
    5a16:	a0 ed       	ldi	r26, 0xD0	; 208
    5a18:	a4 0f       	add	r26, r20
    5a1a:	aa 30       	cpi	r26, 0x0A	; 10
    5a1c:	18 f0       	brcs	.+6      	; 0x5a24 <strtod+0x180>
    5a1e:	e2 1b       	sub	r30, r18
    5a20:	f3 0b       	sbc	r31, r19
    5a22:	20 c0       	rjmp	.+64     	; 0x5a64 <strtod+0x1c0>
    5a24:	40 e0       	ldi	r20, 0x00	; 0
    5a26:	50 e0       	ldi	r21, 0x00	; 0
    5a28:	40 38       	cpi	r20, 0x80	; 128
    5a2a:	bc e0       	ldi	r27, 0x0C	; 12
    5a2c:	5b 07       	cpc	r21, r27
    5a2e:	5c f4       	brge	.+22     	; 0x5a46 <strtod+0x1a2>
    5a30:	9a 01       	movw	r18, r20
    5a32:	22 0f       	add	r18, r18
    5a34:	33 1f       	adc	r19, r19
    5a36:	22 0f       	add	r18, r18
    5a38:	33 1f       	adc	r19, r19
    5a3a:	42 0f       	add	r20, r18
    5a3c:	53 1f       	adc	r21, r19
    5a3e:	44 0f       	add	r20, r20
    5a40:	55 1f       	adc	r21, r21
    5a42:	4a 0f       	add	r20, r26
    5a44:	51 1d       	adc	r21, r1
    5a46:	31 96       	adiw	r30, 0x01	; 1
    5a48:	df 01       	movw	r26, r30
    5a4a:	11 97       	sbiw	r26, 0x01	; 1
    5a4c:	2c 91       	ld	r18, X
    5a4e:	a0 ed       	ldi	r26, 0xD0	; 208
    5a50:	a2 0f       	add	r26, r18
    5a52:	aa 30       	cpi	r26, 0x0A	; 10
    5a54:	48 f3       	brcs	.-46     	; 0x5a28 <strtod+0x184>
    5a56:	c4 ff       	sbrs	r28, 4
    5a58:	03 c0       	rjmp	.+6      	; 0x5a60 <strtod+0x1bc>
    5a5a:	51 95       	neg	r21
    5a5c:	41 95       	neg	r20
    5a5e:	51 09       	sbc	r21, r1
    5a60:	04 0f       	add	r16, r20
    5a62:	15 1f       	adc	r17, r21
    5a64:	c1 ff       	sbrs	r28, 1
    5a66:	07 c0       	rjmp	.+14     	; 0x5a76 <strtod+0x1d2>
    5a68:	e1 14       	cp	r14, r1
    5a6a:	f1 04       	cpc	r15, r1
    5a6c:	21 f0       	breq	.+8      	; 0x5a76 <strtod+0x1d2>
    5a6e:	31 97       	sbiw	r30, 0x01	; 1
    5a70:	d7 01       	movw	r26, r14
    5a72:	ed 93       	st	X+, r30
    5a74:	fc 93       	st	X, r31
    5a76:	78 da       	rcall	.-2832   	; 0x4f68 <__floatunsisf>
    5a78:	c3 70       	andi	r28, 0x03	; 3
    5a7a:	c3 30       	cpi	r28, 0x03	; 3
    5a7c:	19 f0       	breq	.+6      	; 0x5a84 <strtod+0x1e0>
    5a7e:	6b 01       	movw	r12, r22
    5a80:	7c 01       	movw	r14, r24
    5a82:	06 c0       	rjmp	.+12     	; 0x5a90 <strtod+0x1ec>
    5a84:	6b 01       	movw	r12, r22
    5a86:	7c 01       	movw	r14, r24
    5a88:	f7 fa       	bst	r15, 7
    5a8a:	f0 94       	com	r15
    5a8c:	f7 f8       	bld	r15, 7
    5a8e:	f0 94       	com	r15
    5a90:	20 e0       	ldi	r18, 0x00	; 0
    5a92:	30 e0       	ldi	r19, 0x00	; 0
    5a94:	a9 01       	movw	r20, r18
    5a96:	c7 01       	movw	r24, r14
    5a98:	b6 01       	movw	r22, r12
    5a9a:	cb d9       	rcall	.-3178   	; 0x4e32 <__cmpsf2>
    5a9c:	88 23       	and	r24, r24
    5a9e:	09 f4       	brne	.+2      	; 0x5aa2 <strtod+0x1fe>
    5aa0:	43 c0       	rjmp	.+134    	; 0x5b28 <strtod+0x284>
    5aa2:	17 ff       	sbrs	r17, 7
    5aa4:	06 c0       	rjmp	.+12     	; 0x5ab2 <strtod+0x20e>
    5aa6:	11 95       	neg	r17
    5aa8:	01 95       	neg	r16
    5aaa:	11 09       	sbc	r17, r1
    5aac:	c5 ed       	ldi	r28, 0xD5	; 213
    5aae:	d1 e0       	ldi	r29, 0x01	; 1
    5ab0:	02 c0       	rjmp	.+4      	; 0x5ab6 <strtod+0x212>
    5ab2:	cd ee       	ldi	r28, 0xED	; 237
    5ab4:	d1 e0       	ldi	r29, 0x01	; 1
    5ab6:	5e 01       	movw	r10, r28
    5ab8:	b8 e1       	ldi	r27, 0x18	; 24
    5aba:	ab 1a       	sub	r10, r27
    5abc:	b1 08       	sbc	r11, r1
    5abe:	46 01       	movw	r8, r12
    5ac0:	be 2d       	mov	r27, r14
    5ac2:	af 2d       	mov	r26, r15
    5ac4:	90 e2       	ldi	r25, 0x20	; 32
    5ac6:	e9 2e       	mov	r14, r25
    5ac8:	f1 2c       	mov	r15, r1
    5aca:	0e 15       	cp	r16, r14
    5acc:	1f 05       	cpc	r17, r15
    5ace:	7c f0       	brlt	.+30     	; 0x5aee <strtod+0x24a>
    5ad0:	fe 01       	movw	r30, r28
    5ad2:	25 91       	lpm	r18, Z+
    5ad4:	35 91       	lpm	r19, Z+
    5ad6:	45 91       	lpm	r20, Z+
    5ad8:	54 91       	lpm	r21, Z
    5ada:	b4 01       	movw	r22, r8
    5adc:	8b 2f       	mov	r24, r27
    5ade:	9a 2f       	mov	r25, r26
    5ae0:	5e db       	rcall	.-2372   	; 0x519e <__mulsf3>
    5ae2:	4b 01       	movw	r8, r22
    5ae4:	b8 2f       	mov	r27, r24
    5ae6:	a9 2f       	mov	r26, r25
    5ae8:	0e 19       	sub	r16, r14
    5aea:	1f 09       	sbc	r17, r15
    5aec:	ee cf       	rjmp	.-36     	; 0x5aca <strtod+0x226>
    5aee:	24 97       	sbiw	r28, 0x04	; 4
    5af0:	f5 94       	asr	r15
    5af2:	e7 94       	ror	r14
    5af4:	ca 15       	cp	r28, r10
    5af6:	db 05       	cpc	r29, r11
    5af8:	41 f7       	brne	.-48     	; 0x5aca <strtod+0x226>
    5afa:	64 01       	movw	r12, r8
    5afc:	eb 2e       	mov	r14, r27
    5afe:	fa 2e       	mov	r15, r26
    5b00:	8e 2d       	mov	r24, r14
    5b02:	88 0f       	add	r24, r24
    5b04:	8f 2d       	mov	r24, r15
    5b06:	88 1f       	adc	r24, r24
    5b08:	8f 3f       	cpi	r24, 0xFF	; 255
    5b0a:	41 f0       	breq	.+16     	; 0x5b1c <strtod+0x278>
    5b0c:	20 e0       	ldi	r18, 0x00	; 0
    5b0e:	30 e0       	ldi	r19, 0x00	; 0
    5b10:	a9 01       	movw	r20, r18
    5b12:	c7 01       	movw	r24, r14
    5b14:	b6 01       	movw	r22, r12
    5b16:	8d d9       	rcall	.-3302   	; 0x4e32 <__cmpsf2>
    5b18:	81 11       	cpse	r24, r1
    5b1a:	06 c0       	rjmp	.+12     	; 0x5b28 <strtod+0x284>
    5b1c:	82 e2       	ldi	r24, 0x22	; 34
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <errno+0x1>
    5b24:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <errno>
    5b28:	c7 01       	movw	r24, r14
    5b2a:	b6 01       	movw	r22, r12
    5b2c:	09 c0       	rjmp	.+18     	; 0x5b40 <strtod+0x29c>
    5b2e:	60 e0       	ldi	r22, 0x00	; 0
    5b30:	70 e0       	ldi	r23, 0x00	; 0
    5b32:	80 e8       	ldi	r24, 0x80	; 128
    5b34:	9f ef       	ldi	r25, 0xFF	; 255
    5b36:	04 c0       	rjmp	.+8      	; 0x5b40 <strtod+0x29c>
    5b38:	60 e0       	ldi	r22, 0x00	; 0
    5b3a:	70 e0       	ldi	r23, 0x00	; 0
    5b3c:	80 ec       	ldi	r24, 0xC0	; 192
    5b3e:	9f e7       	ldi	r25, 0x7F	; 127
    5b40:	cd b7       	in	r28, 0x3d	; 61
    5b42:	de b7       	in	r29, 0x3e	; 62
    5b44:	ee e0       	ldi	r30, 0x0E	; 14
    5b46:	50 cc       	rjmp	.-1888   	; 0x53e8 <__epilogue_restores__+0x8>

00005b48 <__ctype_isfalse>:
    5b48:	99 27       	eor	r25, r25
    5b4a:	88 27       	eor	r24, r24

00005b4c <__ctype_istrue>:
    5b4c:	08 95       	ret

00005b4e <strncasecmp_P>:
    5b4e:	fb 01       	movw	r30, r22
    5b50:	dc 01       	movw	r26, r24
    5b52:	41 50       	subi	r20, 0x01	; 1
    5b54:	50 40       	sbci	r21, 0x00	; 0
    5b56:	88 f0       	brcs	.+34     	; 0x5b7a <strncasecmp_P+0x2c>
    5b58:	8d 91       	ld	r24, X+
    5b5a:	81 34       	cpi	r24, 0x41	; 65
    5b5c:	1c f0       	brlt	.+6      	; 0x5b64 <strncasecmp_P+0x16>
    5b5e:	8b 35       	cpi	r24, 0x5B	; 91
    5b60:	0c f4       	brge	.+2      	; 0x5b64 <strncasecmp_P+0x16>
    5b62:	80 5e       	subi	r24, 0xE0	; 224
    5b64:	65 91       	lpm	r22, Z+
    5b66:	61 34       	cpi	r22, 0x41	; 65
    5b68:	1c f0       	brlt	.+6      	; 0x5b70 <strncasecmp_P+0x22>
    5b6a:	6b 35       	cpi	r22, 0x5B	; 91
    5b6c:	0c f4       	brge	.+2      	; 0x5b70 <strncasecmp_P+0x22>
    5b6e:	60 5e       	subi	r22, 0xE0	; 224
    5b70:	86 1b       	sub	r24, r22
    5b72:	61 11       	cpse	r22, r1
    5b74:	71 f3       	breq	.-36     	; 0x5b52 <strncasecmp_P+0x4>
    5b76:	99 0b       	sbc	r25, r25
    5b78:	08 95       	ret
    5b7a:	88 1b       	sub	r24, r24
    5b7c:	fc cf       	rjmp	.-8      	; 0x5b76 <strncasecmp_P+0x28>

00005b7e <__muluhisi3>:
    5b7e:	05 dc       	rcall	.-2038   	; 0x538a <__umulhisi3>
    5b80:	a5 9f       	mul	r26, r21
    5b82:	90 0d       	add	r25, r0
    5b84:	b4 9f       	mul	r27, r20
    5b86:	90 0d       	add	r25, r0
    5b88:	a4 9f       	mul	r26, r20
    5b8a:	80 0d       	add	r24, r0
    5b8c:	91 1d       	adc	r25, r1
    5b8e:	11 24       	eor	r1, r1
    5b90:	08 95       	ret

00005b92 <_exit>:
    5b92:	f8 94       	cli

00005b94 <__stop_program>:
    5b94:	ff cf       	rjmp	.-2      	; 0x5b94 <__stop_program>
